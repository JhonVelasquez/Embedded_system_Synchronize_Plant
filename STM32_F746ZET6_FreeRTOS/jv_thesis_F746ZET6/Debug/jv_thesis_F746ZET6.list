
jv_thesis_F746ZET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023d58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047ec  08023f28  08023f28  00033f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028714  08028714  000402d4  2**0
                  CONTENTS
  4 .ARM          00000008  08028714  08028714  00038714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802871c  0802871c  000402d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802871c  0802871c  0003871c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028720  08028720  00038720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08028724  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000194  080288b8  00040194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000234  08028958  00040234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000251b4  200002d4  080289f8  000402d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20025488  080289f8  00045488  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000402d4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040304  2**0
                  CONTENTS, READONLY
 15 .debug_info   00043406  00000000  00000000  00040347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009b7e  00000000  00000000  0008374d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003088  00000000  00000000  0008d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000262b  00000000  00000000  00090358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00016158  00000000  00000000  00092983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004f3a9  00000000  00000000  000a8adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e377  00000000  00000000  000f7e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000d504  00000000  00000000  002161fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005c  00000000  00000000  00223700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d4 	.word	0x200002d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08023f10 	.word	0x08023f10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002d8 	.word	0x200002d8
 800020c:	08023f10 	.word	0x08023f10

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b970 	b.w	8000e14 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	460d      	mov	r5, r1
 8000b54:	4604      	mov	r4, r0
 8000b56:	460f      	mov	r7, r1
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d14a      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5c:	428a      	cmp	r2, r1
 8000b5e:	4694      	mov	ip, r2
 8000b60:	d965      	bls.n	8000c2e <__udivmoddi4+0xe2>
 8000b62:	fab2 f382 	clz	r3, r2
 8000b66:	b143      	cbz	r3, 8000b7a <__udivmoddi4+0x2e>
 8000b68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b6c:	f1c3 0220 	rsb	r2, r3, #32
 8000b70:	409f      	lsls	r7, r3
 8000b72:	fa20 f202 	lsr.w	r2, r0, r2
 8000b76:	4317      	orrs	r7, r2
 8000b78:	409c      	lsls	r4, r3
 8000b7a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b7e:	fa1f f58c 	uxth.w	r5, ip
 8000b82:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b86:	0c22      	lsrs	r2, r4, #16
 8000b88:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b8c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b90:	fb01 f005 	mul.w	r0, r1, r5
 8000b94:	4290      	cmp	r0, r2
 8000b96:	d90a      	bls.n	8000bae <__udivmoddi4+0x62>
 8000b98:	eb1c 0202 	adds.w	r2, ip, r2
 8000b9c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ba0:	f080 811c 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	f240 8119 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000baa:	3902      	subs	r1, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	1a12      	subs	r2, r2, r0
 8000bb0:	b2a4      	uxth	r4, r4
 8000bb2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bb6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bbe:	fb00 f505 	mul.w	r5, r0, r5
 8000bc2:	42a5      	cmp	r5, r4
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x90>
 8000bc6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bca:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bce:	f080 8107 	bcs.w	8000de0 <__udivmoddi4+0x294>
 8000bd2:	42a5      	cmp	r5, r4
 8000bd4:	f240 8104 	bls.w	8000de0 <__udivmoddi4+0x294>
 8000bd8:	4464      	add	r4, ip
 8000bda:	3802      	subs	r0, #2
 8000bdc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000be0:	1b64      	subs	r4, r4, r5
 8000be2:	2100      	movs	r1, #0
 8000be4:	b11e      	cbz	r6, 8000bee <__udivmoddi4+0xa2>
 8000be6:	40dc      	lsrs	r4, r3
 8000be8:	2300      	movs	r3, #0
 8000bea:	e9c6 4300 	strd	r4, r3, [r6]
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0xbc>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80ed 	beq.w	8000dd6 <__udivmoddi4+0x28a>
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	e9c6 0500 	strd	r0, r5, [r6]
 8000c02:	4608      	mov	r0, r1
 8000c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c08:	fab3 f183 	clz	r1, r3
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	d149      	bne.n	8000ca4 <__udivmoddi4+0x158>
 8000c10:	42ab      	cmp	r3, r5
 8000c12:	d302      	bcc.n	8000c1a <__udivmoddi4+0xce>
 8000c14:	4282      	cmp	r2, r0
 8000c16:	f200 80f8 	bhi.w	8000e0a <__udivmoddi4+0x2be>
 8000c1a:	1a84      	subs	r4, r0, r2
 8000c1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c20:	2001      	movs	r0, #1
 8000c22:	4617      	mov	r7, r2
 8000c24:	2e00      	cmp	r6, #0
 8000c26:	d0e2      	beq.n	8000bee <__udivmoddi4+0xa2>
 8000c28:	e9c6 4700 	strd	r4, r7, [r6]
 8000c2c:	e7df      	b.n	8000bee <__udivmoddi4+0xa2>
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xe6>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f382 	clz	r3, r2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f040 8090 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3c:	1a8a      	subs	r2, r1, r2
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f fe8c 	uxth.w	lr, ip
 8000c46:	2101      	movs	r1, #1
 8000c48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c50:	0c22      	lsrs	r2, r4, #16
 8000c52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c56:	fb0e f005 	mul.w	r0, lr, r5
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4290      	cmp	r0, r2
 8000c6a:	f200 80cb 	bhi.w	8000e04 <__udivmoddi4+0x2b8>
 8000c6e:	4645      	mov	r5, r8
 8000c70:	1a12      	subs	r2, r2, r0
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c78:	fb07 2210 	mls	r2, r7, r0, r2
 8000c7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c80:	fb0e fe00 	mul.w	lr, lr, r0
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x14e>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c90:	d202      	bcs.n	8000c98 <__udivmoddi4+0x14c>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f200 80bb 	bhi.w	8000e0e <__udivmoddi4+0x2c2>
 8000c98:	4610      	mov	r0, r2
 8000c9a:	eba4 040e 	sub.w	r4, r4, lr
 8000c9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ca2:	e79f      	b.n	8000be4 <__udivmoddi4+0x98>
 8000ca4:	f1c1 0720 	rsb	r7, r1, #32
 8000ca8:	408b      	lsls	r3, r1
 8000caa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb2:	fa05 f401 	lsl.w	r4, r5, r1
 8000cb6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cba:	40fd      	lsrs	r5, r7
 8000cbc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc0:	4323      	orrs	r3, r4
 8000cc2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	fb09 5518 	mls	r5, r9, r8, r5
 8000cce:	0c1c      	lsrs	r4, r3, #16
 8000cd0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cd4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	fa02 f201 	lsl.w	r2, r2, r1
 8000cde:	fa00 f001 	lsl.w	r0, r0, r1
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cec:	f080 8088 	bcs.w	8000e00 <__udivmoddi4+0x2b4>
 8000cf0:	42a5      	cmp	r5, r4
 8000cf2:	f240 8085 	bls.w	8000e00 <__udivmoddi4+0x2b4>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	4464      	add	r4, ip
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	b29d      	uxth	r5, r3
 8000d00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d04:	fb09 4413 	mls	r4, r9, r3, r4
 8000d08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d1c:	d26c      	bcs.n	8000df8 <__udivmoddi4+0x2ac>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	d96a      	bls.n	8000df8 <__udivmoddi4+0x2ac>
 8000d22:	3b02      	subs	r3, #2
 8000d24:	4464      	add	r4, ip
 8000d26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	42ac      	cmp	r4, r5
 8000d34:	46c8      	mov	r8, r9
 8000d36:	46ae      	mov	lr, r5
 8000d38:	d356      	bcc.n	8000de8 <__udivmoddi4+0x29c>
 8000d3a:	d053      	beq.n	8000de4 <__udivmoddi4+0x298>
 8000d3c:	b156      	cbz	r6, 8000d54 <__udivmoddi4+0x208>
 8000d3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d42:	eb64 040e 	sbc.w	r4, r4, lr
 8000d46:	fa04 f707 	lsl.w	r7, r4, r7
 8000d4a:	40ca      	lsrs	r2, r1
 8000d4c:	40cc      	lsrs	r4, r1
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	e9c6 7400 	strd	r7, r4, [r6]
 8000d54:	4618      	mov	r0, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	f1c3 0120 	rsb	r1, r3, #32
 8000d60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d64:	fa20 f201 	lsr.w	r2, r0, r1
 8000d68:	fa25 f101 	lsr.w	r1, r5, r1
 8000d6c:	409d      	lsls	r5, r3
 8000d6e:	432a      	orrs	r2, r5
 8000d70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d80:	0c11      	lsrs	r1, r2, #16
 8000d82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d86:	fb00 f50e 	mul.w	r5, r0, lr
 8000d8a:	428d      	cmp	r5, r1
 8000d8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x258>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9a:	d22f      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000d9c:	428d      	cmp	r5, r1
 8000d9e:	d92d      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1b49      	subs	r1, r1, r5
 8000da6:	b292      	uxth	r2, r2
 8000da8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dac:	fb07 1115 	mls	r1, r7, r5, r1
 8000db0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000db4:	fb05 f10e 	mul.w	r1, r5, lr
 8000db8:	4291      	cmp	r1, r2
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x282>
 8000dbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc4:	d216      	bcs.n	8000df4 <__udivmoddi4+0x2a8>
 8000dc6:	4291      	cmp	r1, r2
 8000dc8:	d914      	bls.n	8000df4 <__udivmoddi4+0x2a8>
 8000dca:	3d02      	subs	r5, #2
 8000dcc:	4462      	add	r2, ip
 8000dce:	1a52      	subs	r2, r2, r1
 8000dd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dd4:	e738      	b.n	8000c48 <__udivmoddi4+0xfc>
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	4630      	mov	r0, r6
 8000dda:	e708      	b.n	8000bee <__udivmoddi4+0xa2>
 8000ddc:	4639      	mov	r1, r7
 8000dde:	e6e6      	b.n	8000bae <__udivmoddi4+0x62>
 8000de0:	4610      	mov	r0, r2
 8000de2:	e6fb      	b.n	8000bdc <__udivmoddi4+0x90>
 8000de4:	4548      	cmp	r0, r9
 8000de6:	d2a9      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000df0:	3b01      	subs	r3, #1
 8000df2:	e7a3      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df4:	4645      	mov	r5, r8
 8000df6:	e7ea      	b.n	8000dce <__udivmoddi4+0x282>
 8000df8:	462b      	mov	r3, r5
 8000dfa:	e794      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfc:	4640      	mov	r0, r8
 8000dfe:	e7d1      	b.n	8000da4 <__udivmoddi4+0x258>
 8000e00:	46d0      	mov	r8, sl
 8000e02:	e77b      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e04:	3d02      	subs	r5, #2
 8000e06:	4462      	add	r2, ip
 8000e08:	e732      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e70a      	b.n	8000c24 <__udivmoddi4+0xd8>
 8000e0e:	4464      	add	r4, ip
 8000e10:	3802      	subs	r0, #2
 8000e12:	e742      	b.n	8000c9a <__udivmoddi4+0x14e>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <get_ticks_from_ms>:
 */

#ifndef INC_UTILS_H_
#define INC_UTILS_H_

float get_ticks_from_ms(float ms){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (float)ms/portTICK_PERIOD_MS;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	ee07 3a90 	vmov	s15, r3
}
 8000e28:	eeb0 0a67 	vmov.f32	s0, s15
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr

08000e36 <get_ms_from_ticks>:

int get_ms_from_ticks(float tick){
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	ed87 0a01 	vstr	s0, [r7, #4]
	return (int)tick*portTICK_PERIOD_MS;
 8000e40:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e48:	ee17 3a90 	vmov	r3, s15
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <get_recipe_from_classifier>:
#ifndef INC_TAGGING_H_
#define INC_TAGGING_H_
#include "define.h"
#include "string.h"

void get_recipe_from_classifier(char* classifier, char* recipe){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
//	char last_part[] =  "\"\r\0";
//	int last_part_length = (sizeof last_part) - 1;
//	memcpy(recipe, first_part, first_part_length); //taking out \0
//	memcpy(recipe + first_part_length, classifier, length_classifier - 1);
//	memcpy(recipe + first_part_length + length_classifier - 1, last_part, last_part_length);
	sprintf (recipe, "RPT,\"Recipe_%s", classifier);
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	4903      	ldr	r1, [pc, #12]	; (8000e74 <get_recipe_from_classifier+0x1c>)
 8000e66:	6838      	ldr	r0, [r7, #0]
 8000e68:	f021 ff74 	bl	8022d54 <siprintf>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	08023f28 	.word	0x08023f28

08000e78 <get_computer_from_orientation>:

void get_computer_from_orientation(char* classifier, char* orientation, char* computer){
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
//	char last_part[] =  "\"\r\0";
//	int last_part_length = (sizeof last_part) - 1;
//	memcpy(computer, first_part, first_part_length); //taking out \0
//	memcpy(computer + first_part_length, orientation, length_classifier - 1);
//	memcpy(computer + first_part_length + length_classifier - 1, last_part, last_part_length);
	char * token = strtok(classifier, "-");
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <get_computer_from_orientation+0x2c>)
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f022 f80c 	bl	8022ea4 <strtok>
 8000e8c:	6178      	str	r0, [r7, #20]
	sprintf (computer, "%s ,%s", token, orientation);
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	4905      	ldr	r1, [pc, #20]	; (8000ea8 <get_computer_from_orientation+0x30>)
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f021 ff5d 	bl	8022d54 <siprintf>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	08023f38 	.word	0x08023f38
 8000ea8:	08023f3c 	.word	0x08023f3c

08000eac <HAL_GPIO_EXTI_Callback>:
void callback_timer_simulate_periodic_oc(void *argument);

/* USER CODE BEGIN PFP */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == OC_EXTI_PIN)
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_EXTI_Callback+0x16>
    {
    	callback_trigger_optical_curtain_IT();
 8000ebe:	f002 fc09 	bl	80036d4 <callback_trigger_optical_curtain_IT>
    }
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b598      	push	{r3, r4, r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f003 fcc0 	bl	8004854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 fa80 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 fd3e 	bl	8001958 <MX_GPIO_Init>
  MX_UART5_Init();
 8000edc:	f000 fcac 	bl	8001838 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8000ee0:	f000 fd0a 	bl	80018f8 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 8000ee4:	f000 fcd8 	bl	8001898 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000ee8:	f000 fadc 	bl	80014a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000eec:	f000 fb84 	bl	80015f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ef0:	f000 fbfc 	bl	80016ec <MX_TIM4_Init>
  MX_TIM5_Init();
 8000ef4:	f000 fc50 	bl	8001798 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  huart_CLI_debug = &huart3;
 8000ef8:	4bad      	ldr	r3, [pc, #692]	; (80011b0 <main+0x2e4>)
 8000efa:	4aae      	ldr	r2, [pc, #696]	; (80011b4 <main+0x2e8>)
 8000efc:	601a      	str	r2, [r3, #0]
  huart_CLI_CM4_main = &huart5;
 8000efe:	4bae      	ldr	r3, [pc, #696]	; (80011b8 <main+0x2ec>)
 8000f00:	4aae      	ldr	r2, [pc, #696]	; (80011bc <main+0x2f0>)
 8000f02:	601a      	str	r2, [r3, #0]
  huart_CLI_CM4_second = &huart6;
 8000f04:	4bae      	ldr	r3, [pc, #696]	; (80011c0 <main+0x2f4>)
 8000f06:	4aaf      	ldr	r2, [pc, #700]	; (80011c4 <main+0x2f8>)
 8000f08:	601a      	str	r2, [r3, #0]

  if(USE_UART_EXT) HAL_UART_Receive_IT(huart_CLI_debug, (uint8_t*) &(cli_uart_debug.rxBuffer), 1);
 8000f0a:	4ba9      	ldr	r3, [pc, #676]	; (80011b0 <main+0x2e4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	49ad      	ldr	r1, [pc, #692]	; (80011c8 <main+0x2fc>)
 8000f12:	4618      	mov	r0, r3
 8000f14:	f009 fba3 	bl	800a65e <HAL_UART_Receive_IT>
  if(USE_UART_CM4_MAIN) HAL_UART_Receive_IT(huart_CLI_CM4_main, (uint8_t*) &(cli_uart_CM4_main.rxBuffer), 1);
 8000f18:	4ba7      	ldr	r3, [pc, #668]	; (80011b8 <main+0x2ec>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	49ab      	ldr	r1, [pc, #684]	; (80011cc <main+0x300>)
 8000f20:	4618      	mov	r0, r3
 8000f22:	f009 fb9c 	bl	800a65e <HAL_UART_Receive_IT>
  if(USE_UART_CM4_SECN) HAL_UART_Receive_IT(huart_CLI_CM4_second, (uint8_t*) &(cli_uart_CM4_second.rxBuffer), 1);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f26:	f00d f81f 	bl	800df68 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of mutex_sample_conveyor */
  mutex_sample_conveyorHandle = osMutexNew(&mutex_sample_conveyor_attributes);
 8000f2a:	48a9      	ldr	r0, [pc, #676]	; (80011d0 <main+0x304>)
 8000f2c:	f00d fa5c 	bl	800e3e8 <osMutexNew>
 8000f30:	4603      	mov	r3, r0
 8000f32:	4aa8      	ldr	r2, [pc, #672]	; (80011d4 <main+0x308>)
 8000f34:	6013      	str	r3, [r2, #0]

  /* creation of mutex_encoder_hardware */
  mutex_encoder_hardwareHandle = osMutexNew(&mutex_encoder_hardware_attributes);
 8000f36:	48a8      	ldr	r0, [pc, #672]	; (80011d8 <main+0x30c>)
 8000f38:	f00d fa56 	bl	800e3e8 <osMutexNew>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4aa7      	ldr	r2, [pc, #668]	; (80011dc <main+0x310>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* creation of mutex_encoder_cascade */
  mutex_encoder_cascadeHandle = osMutexNew(&mutex_encoder_cascade_attributes);
 8000f42:	48a7      	ldr	r0, [pc, #668]	; (80011e0 <main+0x314>)
 8000f44:	f00d fa50 	bl	800e3e8 <osMutexNew>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4aa6      	ldr	r2, [pc, #664]	; (80011e4 <main+0x318>)
 8000f4c:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of timer_simulate_conveyor */
  timer_simulate_conveyorHandle = osTimerNew(callback_timer_simulate_conveyor, osTimerPeriodic, NULL, &timer_simulate_conveyor_attributes);
 8000f4e:	4ba6      	ldr	r3, [pc, #664]	; (80011e8 <main+0x31c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	2101      	movs	r1, #1
 8000f54:	48a5      	ldr	r0, [pc, #660]	; (80011ec <main+0x320>)
 8000f56:	f00d f983 	bl	800e260 <osTimerNew>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4aa4      	ldr	r2, [pc, #656]	; (80011f0 <main+0x324>)
 8000f5e:	6013      	str	r3, [r2, #0]

  /* creation of timer_watch_queues */
  timer_watch_queuesHandle = osTimerNew(callback_timer_watch_queues, osTimerPeriodic, NULL, &timer_watch_queues_attributes);
 8000f60:	4ba4      	ldr	r3, [pc, #656]	; (80011f4 <main+0x328>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	2101      	movs	r1, #1
 8000f66:	48a4      	ldr	r0, [pc, #656]	; (80011f8 <main+0x32c>)
 8000f68:	f00d f97a 	bl	800e260 <osTimerNew>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	4aa3      	ldr	r2, [pc, #652]	; (80011fc <main+0x330>)
 8000f70:	6013      	str	r3, [r2, #0]

  /* creation of timer_update_encoder */
  timer_update_encoderHandle = osTimerNew(callback_timer_update_encoder, osTimerPeriodic, NULL, &timer_update_encoder_attributes);
 8000f72:	4ba3      	ldr	r3, [pc, #652]	; (8001200 <main+0x334>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	2101      	movs	r1, #1
 8000f78:	48a2      	ldr	r0, [pc, #648]	; (8001204 <main+0x338>)
 8000f7a:	f00d f971 	bl	800e260 <osTimerNew>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4aa1      	ldr	r2, [pc, #644]	; (8001208 <main+0x33c>)
 8000f82:	6013      	str	r3, [r2, #0]

  /* creation of timer_simulate_periodic_oc */
  timer_simulate_periodic_ocHandle = osTimerNew(callback_timer_simulate_periodic_oc, osTimerPeriodic, NULL, &timer_simulate_periodic_oc_attributes);
 8000f84:	4ba1      	ldr	r3, [pc, #644]	; (800120c <main+0x340>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	2101      	movs	r1, #1
 8000f8a:	48a1      	ldr	r0, [pc, #644]	; (8001210 <main+0x344>)
 8000f8c:	f00d f968 	bl	800e260 <osTimerNew>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4aa0      	ldr	r2, [pc, #640]	; (8001214 <main+0x348>)
 8000f94:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of command_rx_queue */
  command_rx_queueHandle = osMessageQueueNew (30, sizeof(queue_commandRx), &command_rx_queue_attributes);
 8000f96:	4aa0      	ldr	r2, [pc, #640]	; (8001218 <main+0x34c>)
 8000f98:	2168      	movs	r1, #104	; 0x68
 8000f9a:	201e      	movs	r0, #30
 8000f9c:	f00d fcfc 	bl	800e998 <osMessageQueueNew>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a9e      	ldr	r2, [pc, #632]	; (800121c <main+0x350>)
 8000fa4:	6013      	str	r3, [r2, #0]

  /* creation of RPI_queue */
  RPI_queueHandle = osMessageQueueNew (3, sizeof(float), &RPI_queue_attributes);
 8000fa6:	4a9e      	ldr	r2, [pc, #632]	; (8001220 <main+0x354>)
 8000fa8:	2104      	movs	r1, #4
 8000faa:	2003      	movs	r0, #3
 8000fac:	f00d fcf4 	bl	800e998 <osMessageQueueNew>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a9c      	ldr	r2, [pc, #624]	; (8001224 <main+0x358>)
 8000fb4:	6013      	str	r3, [r2, #0]

  /* creation of KEYENCE_queue */
  KEYENCE_queueHandle = osMessageQueueNew (4, sizeof(queue_inter_stations), &KEYENCE_queue_attributes);
 8000fb6:	4a9c      	ldr	r2, [pc, #624]	; (8001228 <main+0x35c>)
 8000fb8:	2168      	movs	r1, #104	; 0x68
 8000fba:	2004      	movs	r0, #4
 8000fbc:	f00d fcec 	bl	800e998 <osMessageQueueNew>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a9a      	ldr	r2, [pc, #616]	; (800122c <main+0x360>)
 8000fc4:	6013      	str	r3, [r2, #0]

  /* creation of FG1_queue */
  FG1_queueHandle = osMessageQueueNew (4, sizeof(queue_inter_stations), &FG1_queue_attributes);
 8000fc6:	4a9a      	ldr	r2, [pc, #616]	; (8001230 <main+0x364>)
 8000fc8:	2168      	movs	r1, #104	; 0x68
 8000fca:	2004      	movs	r0, #4
 8000fcc:	f00d fce4 	bl	800e998 <osMessageQueueNew>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a98      	ldr	r2, [pc, #608]	; (8001234 <main+0x368>)
 8000fd4:	6013      	str	r3, [r2, #0]

  /* creation of classifier_queue */
  classifier_queueHandle = osMessageQueueNew (3, sizeof(queue_stations_tcp), &classifier_queue_attributes);
 8000fd6:	4a98      	ldr	r2, [pc, #608]	; (8001238 <main+0x36c>)
 8000fd8:	2132      	movs	r1, #50	; 0x32
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f00d fcdc 	bl	800e998 <osMessageQueueNew>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a96      	ldr	r2, [pc, #600]	; (800123c <main+0x370>)
 8000fe4:	6013      	str	r3, [r2, #0]

  /* creation of orientation_queue */
  orientation_queueHandle = osMessageQueueNew (3, sizeof(queue_stations_tcp), &orientation_queue_attributes);
 8000fe6:	4a96      	ldr	r2, [pc, #600]	; (8001240 <main+0x374>)
 8000fe8:	2132      	movs	r1, #50	; 0x32
 8000fea:	2003      	movs	r0, #3
 8000fec:	f00d fcd4 	bl	800e998 <osMessageQueueNew>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a94      	ldr	r2, [pc, #592]	; (8001244 <main+0x378>)
 8000ff4:	6013      	str	r3, [r2, #0]

  /* creation of DISCARD_queue */
  DISCARD_queueHandle = osMessageQueueNew (200, sizeof(float), &DISCARD_queue_attributes);
 8000ff6:	4a94      	ldr	r2, [pc, #592]	; (8001248 <main+0x37c>)
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	20c8      	movs	r0, #200	; 0xc8
 8000ffc:	f00d fccc 	bl	800e998 <osMessageQueueNew>
 8001000:	4603      	mov	r3, r0
 8001002:	4a92      	ldr	r2, [pc, #584]	; (800124c <main+0x380>)
 8001004:	6013      	str	r3, [r2, #0]

  /* creation of message_debug_queue */
  message_debug_queueHandle = osMessageQueueNew (50, sizeof(message_debug), &message_debug_queue_attributes);
 8001006:	4a92      	ldr	r2, [pc, #584]	; (8001250 <main+0x384>)
 8001008:	2174      	movs	r1, #116	; 0x74
 800100a:	2032      	movs	r0, #50	; 0x32
 800100c:	f00d fcc4 	bl	800e998 <osMessageQueueNew>
 8001010:	4603      	mov	r3, r0
 8001012:	4a90      	ldr	r2, [pc, #576]	; (8001254 <main+0x388>)
 8001014:	6013      	str	r3, [r2, #0]

  /* creation of FG2_queue */
  FG2_queueHandle = osMessageQueueNew (3, sizeof(float), &FG2_queue_attributes);
 8001016:	4a90      	ldr	r2, [pc, #576]	; (8001258 <main+0x38c>)
 8001018:	2104      	movs	r1, #4
 800101a:	2003      	movs	r0, #3
 800101c:	f00d fcbc 	bl	800e998 <osMessageQueueNew>
 8001020:	4603      	mov	r3, r0
 8001022:	4a8e      	ldr	r2, [pc, #568]	; (800125c <main+0x390>)
 8001024:	6013      	str	r3, [r2, #0]

  /* creation of FG3_queue */
  FG3_queueHandle = osMessageQueueNew (3, sizeof(float), &FG3_queue_attributes);
 8001026:	4a8e      	ldr	r2, [pc, #568]	; (8001260 <main+0x394>)
 8001028:	2104      	movs	r1, #4
 800102a:	2003      	movs	r0, #3
 800102c:	f00d fcb4 	bl	800e998 <osMessageQueueNew>
 8001030:	4603      	mov	r3, r0
 8001032:	4a8c      	ldr	r2, [pc, #560]	; (8001264 <main+0x398>)
 8001034:	6013      	str	r3, [r2, #0]

  /* creation of FG4_queue */
  FG4_queueHandle = osMessageQueueNew (3, sizeof(float), &FG4_queue_attributes);
 8001036:	4a8c      	ldr	r2, [pc, #560]	; (8001268 <main+0x39c>)
 8001038:	2104      	movs	r1, #4
 800103a:	2003      	movs	r0, #3
 800103c:	f00d fcac 	bl	800e998 <osMessageQueueNew>
 8001040:	4603      	mov	r3, r0
 8001042:	4a8a      	ldr	r2, [pc, #552]	; (800126c <main+0x3a0>)
 8001044:	6013      	str	r3, [r2, #0]

  /* creation of tx_tcp_queue */
  tx_tcp_queueHandle = osMessageQueueNew (10, sizeof(queue_tx_rx_tcp), &tx_tcp_queue_attributes);
 8001046:	4a8a      	ldr	r2, [pc, #552]	; (8001270 <main+0x3a4>)
 8001048:	2144      	movs	r1, #68	; 0x44
 800104a:	200a      	movs	r0, #10
 800104c:	f00d fca4 	bl	800e998 <osMessageQueueNew>
 8001050:	4603      	mov	r3, r0
 8001052:	4a88      	ldr	r2, [pc, #544]	; (8001274 <main+0x3a8>)
 8001054:	6013      	str	r3, [r2, #0]

  /* creation of CURTAIN_queue */
  CURTAIN_queueHandle = osMessageQueueNew (60, sizeof(bool), &CURTAIN_queue_attributes);
 8001056:	4a88      	ldr	r2, [pc, #544]	; (8001278 <main+0x3ac>)
 8001058:	2101      	movs	r1, #1
 800105a:	203c      	movs	r0, #60	; 0x3c
 800105c:	f00d fc9c 	bl	800e998 <osMessageQueueNew>
 8001060:	4603      	mov	r3, r0
 8001062:	4a86      	ldr	r2, [pc, #536]	; (800127c <main+0x3b0>)
 8001064:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001066:	4a86      	ldr	r2, [pc, #536]	; (8001280 <main+0x3b4>)
 8001068:	2100      	movs	r1, #0
 800106a:	4886      	ldr	r0, [pc, #536]	; (8001284 <main+0x3b8>)
 800106c:	f00d f80e 	bl	800e08c <osThreadNew>
 8001070:	4603      	mov	r3, r0
 8001072:	4a85      	ldr	r2, [pc, #532]	; (8001288 <main+0x3bc>)
 8001074:	6013      	str	r3, [r2, #0]

  /* creation of t_RPI_watch */
  t_RPI_watchHandle = osThreadNew(f_RPI_watch, NULL, &t_RPI_watch_attributes);
 8001076:	4a85      	ldr	r2, [pc, #532]	; (800128c <main+0x3c0>)
 8001078:	2100      	movs	r1, #0
 800107a:	4885      	ldr	r0, [pc, #532]	; (8001290 <main+0x3c4>)
 800107c:	f00d f806 	bl	800e08c <osThreadNew>
 8001080:	4603      	mov	r3, r0
 8001082:	4a84      	ldr	r2, [pc, #528]	; (8001294 <main+0x3c8>)
 8001084:	6013      	str	r3, [r2, #0]

  /* creation of t_KEYENCE_watch */
  t_KEYENCE_watchHandle = osThreadNew(f_KEYENCE_watch, NULL, &t_KEYENCE_watch_attributes);
 8001086:	4a84      	ldr	r2, [pc, #528]	; (8001298 <main+0x3cc>)
 8001088:	2100      	movs	r1, #0
 800108a:	4884      	ldr	r0, [pc, #528]	; (800129c <main+0x3d0>)
 800108c:	f00c fffe 	bl	800e08c <osThreadNew>
 8001090:	4603      	mov	r3, r0
 8001092:	4a83      	ldr	r2, [pc, #524]	; (80012a0 <main+0x3d4>)
 8001094:	6013      	str	r3, [r2, #0]

  /* creation of t_FG1_wach */
  t_FG1_wachHandle = osThreadNew(f_FG1_wach, NULL, &t_FG1_wach_attributes);
 8001096:	4a83      	ldr	r2, [pc, #524]	; (80012a4 <main+0x3d8>)
 8001098:	2100      	movs	r1, #0
 800109a:	4883      	ldr	r0, [pc, #524]	; (80012a8 <main+0x3dc>)
 800109c:	f00c fff6 	bl	800e08c <osThreadNew>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a82      	ldr	r2, [pc, #520]	; (80012ac <main+0x3e0>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* creation of t_FG2_wach */
  t_FG2_wachHandle = osThreadNew(f_FG2_wach, NULL, &t_FG2_wach_attributes);
 80010a6:	4a82      	ldr	r2, [pc, #520]	; (80012b0 <main+0x3e4>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	4882      	ldr	r0, [pc, #520]	; (80012b4 <main+0x3e8>)
 80010ac:	f00c ffee 	bl	800e08c <osThreadNew>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a81      	ldr	r2, [pc, #516]	; (80012b8 <main+0x3ec>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* creation of t_FG3_wach */
  t_FG3_wachHandle = osThreadNew(f_FG3_wach, NULL, &t_FG3_wach_attributes);
 80010b6:	4a81      	ldr	r2, [pc, #516]	; (80012bc <main+0x3f0>)
 80010b8:	2100      	movs	r1, #0
 80010ba:	4881      	ldr	r0, [pc, #516]	; (80012c0 <main+0x3f4>)
 80010bc:	f00c ffe6 	bl	800e08c <osThreadNew>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a80      	ldr	r2, [pc, #512]	; (80012c4 <main+0x3f8>)
 80010c4:	6013      	str	r3, [r2, #0]

  /* creation of t_FG4_wach */
  t_FG4_wachHandle = osThreadNew(f_FG4_wach, NULL, &t_FG4_wach_attributes);
 80010c6:	4a80      	ldr	r2, [pc, #512]	; (80012c8 <main+0x3fc>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	4880      	ldr	r0, [pc, #512]	; (80012cc <main+0x400>)
 80010cc:	f00c ffde 	bl	800e08c <osThreadNew>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a7f      	ldr	r2, [pc, #508]	; (80012d0 <main+0x404>)
 80010d4:	6013      	str	r3, [r2, #0]

  /* creation of t_DISCARD */
  t_DISCARDHandle = osThreadNew(f_DISCARD, NULL, &t_DISCARD_attributes);
 80010d6:	4a7f      	ldr	r2, [pc, #508]	; (80012d4 <main+0x408>)
 80010d8:	2100      	movs	r1, #0
 80010da:	487f      	ldr	r0, [pc, #508]	; (80012d8 <main+0x40c>)
 80010dc:	f00c ffd6 	bl	800e08c <osThreadNew>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a7e      	ldr	r2, [pc, #504]	; (80012dc <main+0x410>)
 80010e4:	6013      	str	r3, [r2, #0]

  /* creation of t_command_hand */
  t_command_handHandle = osThreadNew(f_command_handl, NULL, &t_command_hand_attributes);
 80010e6:	4a7e      	ldr	r2, [pc, #504]	; (80012e0 <main+0x414>)
 80010e8:	2100      	movs	r1, #0
 80010ea:	487e      	ldr	r0, [pc, #504]	; (80012e4 <main+0x418>)
 80010ec:	f00c ffce 	bl	800e08c <osThreadNew>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4a7d      	ldr	r2, [pc, #500]	; (80012e8 <main+0x41c>)
 80010f4:	6013      	str	r3, [r2, #0]

  /* creation of t_send_tcp */
  t_send_tcpHandle = osThreadNew(f_send_tcp, NULL, &t_send_tcp_attributes);
 80010f6:	4a7d      	ldr	r2, [pc, #500]	; (80012ec <main+0x420>)
 80010f8:	2100      	movs	r1, #0
 80010fa:	487d      	ldr	r0, [pc, #500]	; (80012f0 <main+0x424>)
 80010fc:	f00c ffc6 	bl	800e08c <osThreadNew>
 8001100:	4603      	mov	r3, r0
 8001102:	4a7c      	ldr	r2, [pc, #496]	; (80012f4 <main+0x428>)
 8001104:	6013      	str	r3, [r2, #0]

  /* creation of t_recv_tcp */
  t_recv_tcpHandle = osThreadNew(f_recv_tcp, NULL, &t_recv_tcp_attributes);
 8001106:	4a7c      	ldr	r2, [pc, #496]	; (80012f8 <main+0x42c>)
 8001108:	2100      	movs	r1, #0
 800110a:	487c      	ldr	r0, [pc, #496]	; (80012fc <main+0x430>)
 800110c:	f00c ffbe 	bl	800e08c <osThreadNew>
 8001110:	4603      	mov	r3, r0
 8001112:	4a7b      	ldr	r2, [pc, #492]	; (8001300 <main+0x434>)
 8001114:	6013      	str	r3, [r2, #0]

  /* creation of t_conn_tcp_RPI */
  t_conn_tcp_RPIHandle = osThreadNew(f_conn_tcp_RPI, NULL, &t_conn_tcp_RPI_attributes);
 8001116:	4a7b      	ldr	r2, [pc, #492]	; (8001304 <main+0x438>)
 8001118:	2100      	movs	r1, #0
 800111a:	487b      	ldr	r0, [pc, #492]	; (8001308 <main+0x43c>)
 800111c:	f00c ffb6 	bl	800e08c <osThreadNew>
 8001120:	4603      	mov	r3, r0
 8001122:	4a7a      	ldr	r2, [pc, #488]	; (800130c <main+0x440>)
 8001124:	6013      	str	r3, [r2, #0]

  /* creation of t_conn_tcp_KEYENCE */
  t_conn_tcp_KEYENCEHandle = osThreadNew(f_conn_tcp_KEYENCE, NULL, &t_conn_tcp_KEYENCE_attributes);
 8001126:	4a7a      	ldr	r2, [pc, #488]	; (8001310 <main+0x444>)
 8001128:	2100      	movs	r1, #0
 800112a:	487a      	ldr	r0, [pc, #488]	; (8001314 <main+0x448>)
 800112c:	f00c ffae 	bl	800e08c <osThreadNew>
 8001130:	4603      	mov	r3, r0
 8001132:	4a79      	ldr	r2, [pc, #484]	; (8001318 <main+0x44c>)
 8001134:	6013      	str	r3, [r2, #0]

  /* creation of t_conn_tcp_FG1 */
  t_conn_tcp_FG1Handle = osThreadNew(f_conn_tcp_FG1, NULL, &t_conn_tcp_FG1_attributes);
 8001136:	4a79      	ldr	r2, [pc, #484]	; (800131c <main+0x450>)
 8001138:	2100      	movs	r1, #0
 800113a:	4879      	ldr	r0, [pc, #484]	; (8001320 <main+0x454>)
 800113c:	f00c ffa6 	bl	800e08c <osThreadNew>
 8001140:	4603      	mov	r3, r0
 8001142:	4a78      	ldr	r2, [pc, #480]	; (8001324 <main+0x458>)
 8001144:	6013      	str	r3, [r2, #0]

  /* creation of t_simulate_conveyor */
  t_simulate_conveyorHandle = osThreadNew(f_simulate_conveyor, NULL, &t_simulate_conveyor_attributes);
 8001146:	4a78      	ldr	r2, [pc, #480]	; (8001328 <main+0x45c>)
 8001148:	2100      	movs	r1, #0
 800114a:	4878      	ldr	r0, [pc, #480]	; (800132c <main+0x460>)
 800114c:	f00c ff9e 	bl	800e08c <osThreadNew>
 8001150:	4603      	mov	r3, r0
 8001152:	4a77      	ldr	r2, [pc, #476]	; (8001330 <main+0x464>)
 8001154:	6013      	str	r3, [r2, #0]

  /* creation of t_debug_mssgs */
  t_debug_mssgsHandle = osThreadNew(f_debug_mssgs, NULL, &t_debug_mssgs_attributes);
 8001156:	4a77      	ldr	r2, [pc, #476]	; (8001334 <main+0x468>)
 8001158:	2100      	movs	r1, #0
 800115a:	4877      	ldr	r0, [pc, #476]	; (8001338 <main+0x46c>)
 800115c:	f00c ff96 	bl	800e08c <osThreadNew>
 8001160:	4603      	mov	r3, r0
 8001162:	4a76      	ldr	r2, [pc, #472]	; (800133c <main+0x470>)
 8001164:	6013      	str	r3, [r2, #0]

  /* creation of t_CURTAIN */
  t_CURTAINHandle = osThreadNew(f_CURTAIN, NULL, &t_CURTAIN_attributes);
 8001166:	4a76      	ldr	r2, [pc, #472]	; (8001340 <main+0x474>)
 8001168:	2100      	movs	r1, #0
 800116a:	4876      	ldr	r0, [pc, #472]	; (8001344 <main+0x478>)
 800116c:	f00c ff8e 	bl	800e08c <osThreadNew>
 8001170:	4603      	mov	r3, r0
 8001172:	4a75      	ldr	r2, [pc, #468]	; (8001348 <main+0x47c>)
 8001174:	6013      	str	r3, [r2, #0]

  /* creation of t_update_encoder */
  t_update_encoderHandle = osThreadNew(f_update_encoder, NULL, &t_update_encoder_attributes);
 8001176:	4a75      	ldr	r2, [pc, #468]	; (800134c <main+0x480>)
 8001178:	2100      	movs	r1, #0
 800117a:	4875      	ldr	r0, [pc, #468]	; (8001350 <main+0x484>)
 800117c:	f00c ff86 	bl	800e08c <osThreadNew>
 8001180:	4603      	mov	r3, r0
 8001182:	4a74      	ldr	r2, [pc, #464]	; (8001354 <main+0x488>)
 8001184:	6013      	str	r3, [r2, #0]

  /* creation of t_simulate_periodic */
  t_simulate_periodicHandle = osThreadNew(f_simulate_periodic, NULL, &t_simulate_periodic_attributes);
 8001186:	4a74      	ldr	r2, [pc, #464]	; (8001358 <main+0x48c>)
 8001188:	2100      	movs	r1, #0
 800118a:	4874      	ldr	r0, [pc, #464]	; (800135c <main+0x490>)
 800118c:	f00c ff7e 	bl	800e08c <osThreadNew>
 8001190:	4603      	mov	r3, r0
 8001192:	4a73      	ldr	r2, [pc, #460]	; (8001360 <main+0x494>)
 8001194:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */


	//Encoder
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001196:	213c      	movs	r1, #60	; 0x3c
 8001198:	4872      	ldr	r0, [pc, #456]	; (8001364 <main+0x498>)
 800119a:	f008 f889 	bl	80092b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start(&htim5);
 800119e:	4872      	ldr	r0, [pc, #456]	; (8001368 <main+0x49c>)
 80011a0:	f007 fd46 	bl	8008c30 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim4,0);
 80011a4:	4b6f      	ldr	r3, [pc, #444]	; (8001364 <main+0x498>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
 80011ac:	e0de      	b.n	800136c <main+0x4a0>
 80011ae:	bf00      	nop
 80011b0:	200003f4 	.word	0x200003f4
 80011b4:	2000071c 	.word	0x2000071c
 80011b8:	200003f8 	.word	0x200003f8
 80011bc:	20000694 	.word	0x20000694
 80011c0:	200003fc 	.word	0x200003fc
 80011c4:	200007a4 	.word	0x200007a4
 80011c8:	20000400 	.word	0x20000400
 80011cc:	20000470 	.word	0x20000470
 80011d0:	08028460 	.word	0x08028460
 80011d4:	200008bc 	.word	0x200008bc
 80011d8:	08028470 	.word	0x08028470
 80011dc:	200008c0 	.word	0x200008c0
 80011e0:	08028480 	.word	0x08028480
 80011e4:	200008c4 	.word	0x200008c4
 80011e8:	08028420 	.word	0x08028420
 80011ec:	08003965 	.word	0x08003965
 80011f0:	200008ac 	.word	0x200008ac
 80011f4:	08028430 	.word	0x08028430
 80011f8:	08003985 	.word	0x08003985
 80011fc:	200008b0 	.word	0x200008b0
 8001200:	08028440 	.word	0x08028440
 8001204:	080039e9 	.word	0x080039e9
 8001208:	200008b4 	.word	0x200008b4
 800120c:	08028450 	.word	0x08028450
 8001210:	08003a09 	.word	0x08003a09
 8001214:	200008b8 	.word	0x200008b8
 8001218:	080282e8 	.word	0x080282e8
 800121c:	20000878 	.word	0x20000878
 8001220:	08028300 	.word	0x08028300
 8001224:	2000087c 	.word	0x2000087c
 8001228:	08028318 	.word	0x08028318
 800122c:	20000880 	.word	0x20000880
 8001230:	08028330 	.word	0x08028330
 8001234:	20000884 	.word	0x20000884
 8001238:	08028348 	.word	0x08028348
 800123c:	20000888 	.word	0x20000888
 8001240:	08028360 	.word	0x08028360
 8001244:	2000088c 	.word	0x2000088c
 8001248:	08028378 	.word	0x08028378
 800124c:	20000890 	.word	0x20000890
 8001250:	08028390 	.word	0x08028390
 8001254:	20000894 	.word	0x20000894
 8001258:	080283a8 	.word	0x080283a8
 800125c:	20000898 	.word	0x20000898
 8001260:	080283c0 	.word	0x080283c0
 8001264:	2000089c 	.word	0x2000089c
 8001268:	080283d8 	.word	0x080283d8
 800126c:	200008a0 	.word	0x200008a0
 8001270:	080283f0 	.word	0x080283f0
 8001274:	200008a4 	.word	0x200008a4
 8001278:	08028408 	.word	0x08028408
 800127c:	200008a8 	.word	0x200008a8
 8001280:	0802803c 	.word	0x0802803c
 8001284:	08001b0d 	.word	0x08001b0d
 8001288:	2000082c 	.word	0x2000082c
 800128c:	08028060 	.word	0x08028060
 8001290:	08001c5d 	.word	0x08001c5d
 8001294:	20000830 	.word	0x20000830
 8001298:	08028084 	.word	0x08028084
 800129c:	08001e4d 	.word	0x08001e4d
 80012a0:	20000834 	.word	0x20000834
 80012a4:	080280a8 	.word	0x080280a8
 80012a8:	0800205d 	.word	0x0800205d
 80012ac:	20000838 	.word	0x20000838
 80012b0:	080280cc 	.word	0x080280cc
 80012b4:	080021f1 	.word	0x080021f1
 80012b8:	2000083c 	.word	0x2000083c
 80012bc:	080280f0 	.word	0x080280f0
 80012c0:	080022f5 	.word	0x080022f5
 80012c4:	20000840 	.word	0x20000840
 80012c8:	08028114 	.word	0x08028114
 80012cc:	080023f9 	.word	0x080023f9
 80012d0:	20000844 	.word	0x20000844
 80012d4:	08028138 	.word	0x08028138
 80012d8:	08002521 	.word	0x08002521
 80012dc:	20000848 	.word	0x20000848
 80012e0:	0802815c 	.word	0x0802815c
 80012e4:	0800260d 	.word	0x0800260d
 80012e8:	2000084c 	.word	0x2000084c
 80012ec:	08028180 	.word	0x08028180
 80012f0:	08002c19 	.word	0x08002c19
 80012f4:	20000850 	.word	0x20000850
 80012f8:	080281a4 	.word	0x080281a4
 80012fc:	08002d71 	.word	0x08002d71
 8001300:	20000854 	.word	0x20000854
 8001304:	080281c8 	.word	0x080281c8
 8001308:	08002f1d 	.word	0x08002f1d
 800130c:	20000858 	.word	0x20000858
 8001310:	080281ec 	.word	0x080281ec
 8001314:	08002f65 	.word	0x08002f65
 8001318:	2000085c 	.word	0x2000085c
 800131c:	08028210 	.word	0x08028210
 8001320:	08002fad 	.word	0x08002fad
 8001324:	20000860 	.word	0x20000860
 8001328:	08028234 	.word	0x08028234
 800132c:	08002ff5 	.word	0x08002ff5
 8001330:	20000864 	.word	0x20000864
 8001334:	08028258 	.word	0x08028258
 8001338:	08003561 	.word	0x08003561
 800133c:	20000868 	.word	0x20000868
 8001340:	0802827c 	.word	0x0802827c
 8001344:	08003721 	.word	0x08003721
 8001348:	2000086c 	.word	0x2000086c
 800134c:	080282a0 	.word	0x080282a0
 8001350:	08003839 	.word	0x08003839
 8001354:	20000870 	.word	0x20000870
 8001358:	080282c4 	.word	0x080282c4
 800135c:	080038b5 	.word	0x080038b5
 8001360:	20000874 	.word	0x20000874
 8001364:	200005fc 	.word	0x200005fc
 8001368:	20000648 	.word	0x20000648
	__HAL_TIM_SET_COUNTER(&htim5,0);
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <main+0x4f8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2200      	movs	r2, #0
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
	if(USE_CASCADE_BY_SOFTWARE) osTimerStart(timer_update_encoderHandle,get_ticks_from_ms(TIM_UPDT_CSCD_SOFT));
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <main+0x4fc>)
 8001376:	681c      	ldr	r4, [r3, #0]
 8001378:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800137c:	f7ff fd4c 	bl	8000e18 <get_ticks_from_ms>
 8001380:	eef0 7a40 	vmov.f32	s15, s0
 8001384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001388:	ee17 1a90 	vmov	r1, s15
 800138c:	4620      	mov	r0, r4
 800138e:	f00c ffeb 	bl	800e368 <osTimerStart>

	//tcpclient_init();
	if (USE_SIMULATOR_CONVEYOR)osTimerStart(timer_simulate_conveyorHandle, get_ticks_from_ms(TIM_SIMUL_STEP)); // SIM_STEP_TIME en ms
	//osTimerStart(timer_watch_queuesHandle, get_ticks_from_ms(TIM_SLEEP_QUEUES));
	vTaskResume(t_command_handHandle);
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <main+0x500>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f00f fdc6 	bl	8010f28 <vTaskResume>

	//Simulator_periodic
	osTimerStart(timer_simulate_periodic_ocHandle, get_ms_from_ticks(get_ticks_from_ms(TIM_OC_EVENTS_SIM)));
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <main+0x504>)
 800139e:	681c      	ldr	r4, [r3, #0]
 80013a0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80013d4 <main+0x508>
 80013a4:	f7ff fd38 	bl	8000e18 <get_ticks_from_ms>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	eeb0 0a67 	vmov.f32	s0, s15
 80013b0:	f7ff fd41 	bl	8000e36 <get_ms_from_ticks>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4620      	mov	r0, r4
 80013ba:	f00c ffd5 	bl	800e368 <osTimerStart>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013be:	f00c fe07 	bl	800dfd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c2:	e7fe      	b.n	80013c2 <main+0x4f6>
 80013c4:	20000648 	.word	0x20000648
 80013c8:	200008b4 	.word	0x200008b4
 80013cc:	2000084c 	.word	0x2000084c
 80013d0:	200008b8 	.word	0x200008b8
 80013d4:	437f0000 	.word	0x437f0000

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b094      	sub	sp, #80	; 0x50
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	2230      	movs	r2, #48	; 0x30
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f021 fd41 	bl	8022e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <SystemClock_Config+0xc4>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a26      	ldr	r2, [pc, #152]	; (800149c <SystemClock_Config+0xc4>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <SystemClock_Config+0xc4>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <SystemClock_Config+0xc8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800141c:	4a20      	ldr	r2, [pc, #128]	; (80014a0 <SystemClock_Config+0xc8>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <SystemClock_Config+0xc8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800143a:	2302      	movs	r3, #2
 800143c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800143e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001444:	2304      	movs	r3, #4
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001448:	2348      	movs	r3, #72	; 0x48
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800144c:	2302      	movs	r3, #2
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001450:	2303      	movs	r3, #3
 8001452:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	4618      	mov	r0, r3
 800145a:	f006 faa5 	bl	80079a8 <HAL_RCC_OscConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001464:	f002 faf2 	bl	8003a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001468:	230f      	movs	r3, #15
 800146a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	2302      	movs	r3, #2
 800146e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	2102      	movs	r1, #2
 8001484:	4618      	mov	r0, r3
 8001486:	f006 fd33 	bl	8007ef0 <HAL_RCC_ClockConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001490:	f002 fadc 	bl	8003a4c <Error_Handler>
  }
}
 8001494:	bf00      	nop
 8001496:	3750      	adds	r7, #80	; 0x50
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40007000 	.word	0x40007000

080014a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b096      	sub	sp, #88	; 0x58
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	615a      	str	r2, [r3, #20]
 80014c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	222c      	movs	r2, #44	; 0x2c
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f021 fccc 	bl	8022e6e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <MX_TIM1_Init+0x14c>)
 80014d8:	4a46      	ldr	r2, [pc, #280]	; (80015f4 <MX_TIM1_Init+0x150>)
 80014da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80014dc:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <MX_TIM1_Init+0x14c>)
 80014de:	2204      	movs	r2, #4
 80014e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <MX_TIM1_Init+0x14c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 377-1;
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <MX_TIM1_Init+0x14c>)
 80014ea:	f44f 72bc 	mov.w	r2, #376	; 0x178
 80014ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <MX_TIM1_Init+0x14c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <MX_TIM1_Init+0x14c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <MX_TIM1_Init+0x14c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001502:	483b      	ldr	r0, [pc, #236]	; (80015f0 <MX_TIM1_Init+0x14c>)
 8001504:	f007 fc7c 	bl	8008e00 <HAL_TIM_OC_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800150e:	f002 fa9d 	bl	8003a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001512:	4837      	ldr	r0, [pc, #220]	; (80015f0 <MX_TIM1_Init+0x14c>)
 8001514:	f007 fccb 	bl	8008eae <HAL_TIM_PWM_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800151e:	f002 fa95 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001522:	2350      	movs	r3, #80	; 0x50
 8001524:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001526:	2300      	movs	r3, #0
 8001528:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800152e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001532:	4619      	mov	r1, r3
 8001534:	482e      	ldr	r0, [pc, #184]	; (80015f0 <MX_TIM1_Init+0x14c>)
 8001536:	f008 fe97 	bl	800a268 <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001540:	f002 fa84 	bl	8003a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001544:	2310      	movs	r3, #16
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 94;
 8001548:	235e      	movs	r3, #94	; 0x5e
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154c:	2300      	movs	r3, #0
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800155c:	2300      	movs	r3, #0
 800155e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001560:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001564:	2204      	movs	r2, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4821      	ldr	r0, [pc, #132]	; (80015f0 <MX_TIM1_Init+0x14c>)
 800156a:	f008 f84f 	bl	800960c <HAL_TIM_OC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001574:	f002 fa6a 	bl	8003a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001578:	2360      	movs	r3, #96	; 0x60
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 188;
 800157c:	23bc      	movs	r3, #188	; 0xbc
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001580:	2302      	movs	r3, #2
 8001582:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001584:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001588:	2208      	movs	r2, #8
 800158a:	4619      	mov	r1, r3
 800158c:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM1_Init+0x14c>)
 800158e:	f008 f8b7 	bl	8009700 <HAL_TIM_PWM_ConfigChannel>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001598:	f002 fa58 	bl	8003a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM1_Init+0x14c>)
 80015d2:	f008 fed7 	bl	800a384 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80015dc:	f002 fa36 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM1_Init+0x14c>)
 80015e2:	f002 faf9 	bl	8003bd8 <HAL_TIM_MspPostInit>

}
 80015e6:	bf00      	nop
 80015e8:	3758      	adds	r7, #88	; 0x58
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000564 	.word	0x20000564
 80015f4:	40010000 	.word	0x40010000

080015f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b090      	sub	sp, #64	; 0x40
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160e:	f107 0320 	add.w	r3, r7, #32
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]
 800162a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162c:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <MX_TIM3_Init+0xec>)
 800162e:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <MX_TIM3_Init+0xf0>)
 8001630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8001632:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <MX_TIM3_Init+0xec>)
 8001634:	2204      	movs	r2, #4
 8001636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <MX_TIM3_Init+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 377-1;
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <MX_TIM3_Init+0xec>)
 8001640:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8001644:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <MX_TIM3_Init+0xec>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164c:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <MX_TIM3_Init+0xec>)
 800164e:	2200      	movs	r2, #0
 8001650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001652:	4824      	ldr	r0, [pc, #144]	; (80016e4 <MX_TIM3_Init+0xec>)
 8001654:	f007 fa94 	bl	8008b80 <HAL_TIM_Base_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800165e:	f002 f9f5 	bl	8003a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001662:	4820      	ldr	r0, [pc, #128]	; (80016e4 <MX_TIM3_Init+0xec>)
 8001664:	f007 fc23 	bl	8008eae <HAL_TIM_PWM_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800166e:	f002 f9ed 	bl	8003a4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001672:	2306      	movs	r3, #6
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001676:	2300      	movs	r3, #0
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800167a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800167e:	4619      	mov	r1, r3
 8001680:	4818      	ldr	r0, [pc, #96]	; (80016e4 <MX_TIM3_Init+0xec>)
 8001682:	f008 f951 	bl	8009928 <HAL_TIM_SlaveConfigSynchro>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800168c:	f002 f9de 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	4619      	mov	r1, r3
 800169e:	4811      	ldr	r0, [pc, #68]	; (80016e4 <MX_TIM3_Init+0xec>)
 80016a0:	f008 fde2 	bl	800a268 <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80016aa:	f002 f9cf 	bl	8003a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ae:	2360      	movs	r3, #96	; 0x60
 80016b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 188;
 80016b2:	23bc      	movs	r3, #188	; 0xbc
 80016b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016b6:	2302      	movs	r3, #2
 80016b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	2200      	movs	r2, #0
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <MX_TIM3_Init+0xec>)
 80016c6:	f008 f81b 	bl	8009700 <HAL_TIM_PWM_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80016d0:	f002 f9bc 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_TIM3_Init+0xec>)
 80016d6:	f002 fa7f 	bl	8003bd8 <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3740      	adds	r7, #64	; 0x40
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200005b0 	.word	0x200005b0
 80016e8:	40000400 	.word	0x40000400

080016ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	; 0x30
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2224      	movs	r2, #36	; 0x24
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f021 fbb7 	bl	8022e6e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <MX_TIM4_Init+0xa4>)
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <MX_TIM4_Init+0xa8>)
 800170e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001710:	4b1f      	ldr	r3, [pc, #124]	; (8001790 <MX_TIM4_Init+0xa4>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <MX_TIM4_Init+0xa4>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800171c:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <MX_TIM4_Init+0xa4>)
 800171e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001722:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <MX_TIM4_Init+0xa4>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b19      	ldr	r3, [pc, #100]	; (8001790 <MX_TIM4_Init+0xa4>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001730:	2303      	movs	r3, #3
 8001732:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001734:	2302      	movs	r3, #2
 8001736:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001738:	2301      	movs	r3, #1
 800173a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001744:	2302      	movs	r3, #2
 8001746:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001748:	2301      	movs	r3, #1
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4619      	mov	r1, r3
 800175a:	480d      	ldr	r0, [pc, #52]	; (8001790 <MX_TIM4_Init+0xa4>)
 800175c:	f007 fd02 	bl	8009164 <HAL_TIM_Encoder_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001766:	f002 f971 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800176a:	2320      	movs	r3, #32
 800176c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001772:	463b      	mov	r3, r7
 8001774:	4619      	mov	r1, r3
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <MX_TIM4_Init+0xa4>)
 8001778:	f008 fd76 	bl	800a268 <HAL_TIMEx_MasterConfigSynchronization>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001782:	f002 f963 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	; 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200005fc 	.word	0x200005fc
 8001794:	40000800 	.word	0x40000800

08001798 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b088      	sub	sp, #32
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ae:	463b      	mov	r3, r7
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <MX_TIM5_Init+0x98>)
 80017ba:	4a1e      	ldr	r2, [pc, #120]	; (8001834 <MX_TIM5_Init+0x9c>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80017be:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <MX_TIM5_Init+0x98>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <MX_TIM5_Init+0x98>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_TIM5_Init+0x98>)
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d2:	4b17      	ldr	r3, [pc, #92]	; (8001830 <MX_TIM5_Init+0x98>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <MX_TIM5_Init+0x98>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017de:	4814      	ldr	r0, [pc, #80]	; (8001830 <MX_TIM5_Init+0x98>)
 80017e0:	f007 f9ce 	bl	8008b80 <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80017ea:	f002 f92f 	bl	8003a4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80017ee:	2307      	movs	r3, #7
 80017f0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR2;
 80017f2:	2320      	movs	r3, #32
 80017f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	480c      	ldr	r0, [pc, #48]	; (8001830 <MX_TIM5_Init+0x98>)
 80017fe:	f008 f893 	bl	8009928 <HAL_TIM_SlaveConfigSynchro>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001808:	f002 f920 	bl	8003a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001814:	463b      	mov	r3, r7
 8001816:	4619      	mov	r1, r3
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <MX_TIM5_Init+0x98>)
 800181a:	f008 fd25 	bl	800a268 <HAL_TIMEx_MasterConfigSynchronization>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001824:	f002 f912 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000648 	.word	0x20000648
 8001834:	40000c00 	.word	0x40000c00

08001838 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_UART5_Init+0x58>)
 800183e:	4a15      	ldr	r2, [pc, #84]	; (8001894 <MX_UART5_Init+0x5c>)
 8001840:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_UART5_Init+0x58>)
 8001844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001848:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_UART5_Init+0x58>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_UART5_Init+0x58>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_UART5_Init+0x58>)
 8001858:	2200      	movs	r2, #0
 800185a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_UART5_Init+0x58>)
 800185e:	220c      	movs	r2, #12
 8001860:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_UART5_Init+0x58>)
 8001864:	2200      	movs	r2, #0
 8001866:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_UART5_Init+0x58>)
 800186a:	2200      	movs	r2, #0
 800186c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_UART5_Init+0x58>)
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_UART5_Init+0x58>)
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_UART5_Init+0x58>)
 800187c:	f008 fe1e 	bl	800a4bc <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001886:	f002 f8e1 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000694 	.word	0x20000694
 8001894:	40005000 	.word	0x40005000

08001898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 800189e:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <MX_USART3_UART_Init+0x5c>)
 80018a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018be:	220c      	movs	r2, #12
 80018c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_USART3_UART_Init+0x58>)
 80018dc:	f008 fdee 	bl	800a4bc <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018e6:	f002 f8b1 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000071c 	.word	0x2000071c
 80018f4:	40004800 	.word	0x40004800

080018f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_USART6_UART_Init+0x58>)
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <MX_USART6_UART_Init+0x5c>)
 8001900:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_USART6_UART_Init+0x58>)
 8001904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001908:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_USART6_UART_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_USART6_UART_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_USART6_UART_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_USART6_UART_Init+0x58>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_USART6_UART_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_USART6_UART_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_USART6_UART_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_USART6_UART_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_USART6_UART_Init+0x58>)
 800193c:	f008 fdbe 	bl	800a4bc <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001946:	f002 f881 	bl	8003a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200007a4 	.word	0x200007a4
 8001954:	40011400 	.word	0x40011400

08001958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08e      	sub	sp, #56	; 0x38
 800195c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
 800196c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800196e:	4b62      	ldr	r3, [pc, #392]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a61      	ldr	r2, [pc, #388]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001974:	f043 0310 	orr.w	r3, r3, #16
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b5f      	ldr	r3, [pc, #380]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001986:	4b5c      	ldr	r3, [pc, #368]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a5b      	ldr	r2, [pc, #364]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 800198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a55      	ldr	r2, [pc, #340]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a4f      	ldr	r2, [pc, #316]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e6:	4b44      	ldr	r3, [pc, #272]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a43      	ldr	r2, [pc, #268]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019ec:	f043 0320 	orr.w	r3, r3, #32
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b41      	ldr	r3, [pc, #260]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0320 	and.w	r3, r3, #32
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fe:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a3d      	ldr	r2, [pc, #244]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001a04:	f043 0308 	orr.w	r3, r3, #8
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a37      	ldr	r2, [pc, #220]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <MX_GPIO_Init+0x1a0>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, TRIGGER_xxV_12_Pin|TRIGGER_xxV_11_Pin|TRIGGER_xxV_10_Pin|TRIGGER_xxV_9_Pin
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f64d 7178 	movw	r1, #57208	; 0xdf78
 8001a34:	4831      	ldr	r0, [pc, #196]	; (8001afc <MX_GPIO_Init+0x1a4>)
 8001a36:	f004 fccd 	bl	80063d4 <HAL_GPIO_WritePin>
                          |TRIGGER_24V_8_Pin|TRIGGER_24V_7_Pin|TRIGGER_24V_6_Pin|TRIGGER_24V_5_Pin
                          |TRIGGER_24V_4_Pin|TRIGGER_24V_2_Pin|TRIGGER_24V_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, INDICATOR_R_Pin|INDICATOR_G_Pin|INDICATOR_B_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2107      	movs	r1, #7
 8001a3e:	4830      	ldr	r0, [pc, #192]	; (8001b00 <MX_GPIO_Init+0x1a8>)
 8001a40:	f004 fcc8 	bl	80063d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIMULATE_OPTICAL_CURTAIN_GPIO_Port, SIMULATE_OPTICAL_CURTAIN_Pin, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a4a:	482e      	ldr	r0, [pc, #184]	; (8001b04 <MX_GPIO_Init+0x1ac>)
 8001a4c:	f004 fcc2 	bl	80063d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TRIGGER_xxV_12_Pin TRIGGER_xxV_11_Pin TRIGGER_xxV_10_Pin TRIGGER_xxV_9_Pin
                           TRIGGER_24V_8_Pin TRIGGER_24V_7_Pin TRIGGER_24V_6_Pin TRIGGER_24V_5_Pin
                           TRIGGER_24V_4_Pin TRIGGER_24V_2_Pin TRIGGER_24V_1_Pin */
  GPIO_InitStruct.Pin = TRIGGER_xxV_12_Pin|TRIGGER_xxV_11_Pin|TRIGGER_xxV_10_Pin|TRIGGER_xxV_9_Pin
 8001a50:	f64d 7378 	movw	r3, #57208	; 0xdf78
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
                          |TRIGGER_24V_8_Pin|TRIGGER_24V_7_Pin|TRIGGER_24V_6_Pin|TRIGGER_24V_5_Pin
                          |TRIGGER_24V_4_Pin|TRIGGER_24V_2_Pin|TRIGGER_24V_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a66:	4619      	mov	r1, r3
 8001a68:	4824      	ldr	r0, [pc, #144]	; (8001afc <MX_GPIO_Init+0x1a4>)
 8001a6a:	f004 fb07 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pins : INDICATOR_R_Pin INDICATOR_G_Pin INDICATOR_B_Pin */
  GPIO_InitStruct.Pin = INDICATOR_R_Pin|INDICATOR_G_Pin|INDICATOR_B_Pin;
 8001a6e:	2307      	movs	r3, #7
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	4619      	mov	r1, r3
 8001a84:	481e      	ldr	r0, [pc, #120]	; (8001b00 <MX_GPIO_Init+0x1a8>)
 8001a86:	f004 faf9 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pin : SIMULATE_OPTICAL_CURTAIN_Pin */
  GPIO_InitStruct.Pin = SIMULATE_OPTICAL_CURTAIN_Pin;
 8001a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a90:	2301      	movs	r3, #1
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SIMULATE_OPTICAL_CURTAIN_GPIO_Port, &GPIO_InitStruct);
 8001a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4818      	ldr	r0, [pc, #96]	; (8001b04 <MX_GPIO_Init+0x1ac>)
 8001aa4:	f004 faea 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_24V_1_Pin ENC_24V_2_Pin */
  GPIO_InitStruct.Pin = ENC_24V_1_Pin|ENC_24V_2_Pin;
 8001aa8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	4810      	ldr	r0, [pc, #64]	; (8001b00 <MX_GPIO_Init+0x1a8>)
 8001ac0:	f004 fadc 	bl	800607c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_24V_3_Pin ENC_24V_4_Pin */
  GPIO_InitStruct.Pin = ENC_24V_3_Pin|ENC_24V_4_Pin;
 8001ac4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480b      	ldr	r0, [pc, #44]	; (8001b08 <MX_GPIO_Init+0x1b0>)
 8001adc:	f004 face 	bl	800607c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2105      	movs	r1, #5
 8001ae4:	2028      	movs	r0, #40	; 0x28
 8001ae6:	f002 ffbf 	bl	8004a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001aea:	2028      	movs	r0, #40	; 0x28
 8001aec:	f002 ffd8 	bl	8004aa0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001af0:	bf00      	nop
 8001af2:	3738      	adds	r7, #56	; 0x38
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40021400 	.word	0x40021400
 8001b08:	40020c00 	.word	0x40020c00

08001b0c <StartDefaultTask>:



/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b088      	sub	sp, #32
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001b14:	f00b fbfa 	bl	800d30c <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001b18:	f020 f976 	bl	8021e08 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */

  cli_uart_debug.state_rx=0;
 8001b1c:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <StartDefaultTask+0xf0>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	705a      	strb	r2, [r3, #1]
  cli_usb.state_rx=0;
 8001b22:	4b37      	ldr	r3, [pc, #220]	; (8001c00 <StartDefaultTask+0xf4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	705a      	strb	r2, [r3, #1]
  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &rxBuffer_USB);
  //USBD_CDC_ReceivePacket(&hUsbDeviceFS);

  if(ENABLE_TCP_CONNECTION_RPI) vTaskResume(t_conn_tcp_RPIHandle);
 8001b28:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <StartDefaultTask+0xf8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00f f9fb 	bl	8010f28 <vTaskResume>
  if(ENABLE_TCP_CONNECTION_KEYENCE) vTaskResume(t_conn_tcp_KEYENCEHandle);
 8001b32:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <StartDefaultTask+0xfc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f00f f9f6 	bl	8010f28 <vTaskResume>
  if(ENABLE_TCP_CONNECTION_FG1)  vTaskResume(t_conn_tcp_FG1Handle);
 8001b3c:	4b33      	ldr	r3, [pc, #204]	; (8001c0c <StartDefaultTask+0x100>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f00f f9f1 	bl	8010f28 <vTaskResume>
  if(ENABLE_TCP_CONNECTION) vTaskResume(t_send_tcpHandle);
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <StartDefaultTask+0x104>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00f f9ec 	bl	8010f28 <vTaskResume>
  if(ENABLE_TCP_CONNECTION) vTaskResume(t_recv_tcpHandle);
 8001b50:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <StartDefaultTask+0x108>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00f f9e7 	bl	8010f28 <vTaskResume>

  unsigned long time_print_pos_op_now = xTaskGetTickCount();
 8001b5a:	f00f fb67 	bl	801122c <xTaskGetTickCount>
 8001b5e:	6178      	str	r0, [r7, #20]
  unsigned long time_print_pos_op_previous = time_print_pos_op_now;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	61fb      	str	r3, [r7, #28]

  //unsigned long time_oc_event_now = xTaskGetTickCount();
  //unsigned long time_oc_event_previous = time_print_pos_op_now;

  unsigned long time_trigger_simul_optic = time_print_pos_op_now;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	613b      	str	r3, [r7, #16]
  bool optic_triggered_sim = false;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	76fb      	strb	r3, [r7, #27]

  /* Infinite loop */
  for(;;)
  {

	if(en_ackn_pos)
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <StartDefaultTask+0x10c>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d011      	beq.n	8001b98 <StartDefaultTask+0x8c>
	{
		time_print_pos_op_now = xTaskGetTickCount();
 8001b74:	f00f fb5a 	bl	801122c <xTaskGetTickCount>
 8001b78:	6178      	str	r0, [r7, #20]
		if(((time_print_pos_op_now - time_print_pos_op_previous)>TIM_PRINT_OPT_POS))
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b64      	cmp	r3, #100	; 0x64
 8001b82:	d909      	bls.n	8001b98 <StartDefaultTask+0x8c>
		{
			float t = get_current_conveyor_pos();
 8001b84:	f001 fe36 	bl	80037f4 <get_current_conveyor_pos>
 8001b88:	ed87 0a03 	vstr	s0, [r7, #12]
			debug_send_optical_position(t);
 8001b8c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b90:	f001 fc0a 	bl	80033a8 <debug_send_optical_position>
			time_print_pos_op_previous = time_print_pos_op_now;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	61fb      	str	r3, [r7, #28]
//			count_total_OC_trigger_sim++;
//		}
//	}

	//START THE ENCODER CHANNELS SIMULATION
	if( !optic_triggered_sim){
 8001b98:	7efb      	ldrb	r3, [r7, #27]
 8001b9a:	f083 0301 	eor.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01e      	beq.n	8001be2 <StartDefaultTask+0xd6>

		time_print_pos_op_now = xTaskGetTickCount();
 8001ba4:	f00f fb42 	bl	801122c <xTaskGetTickCount>
 8001ba8:	6178      	str	r0, [r7, #20]
		if(((time_print_pos_op_now - time_trigger_simul_optic)>1000)){
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bb4:	d915      	bls.n	8001be2 <StartDefaultTask+0xd6>
			//Simulator Encoder High frequency, starts once
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4818      	ldr	r0, [pc, #96]	; (8001c1c <StartDefaultTask+0x110>)
 8001bba:	f007 f9d9 	bl	8008f70 <HAL_TIM_PWM_Start>
			osDelay(get_ticks_from_ms(20));
 8001bbe:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001bc2:	f7ff f929 	bl	8000e18 <get_ticks_from_ms>
 8001bc6:	eef0 7a40 	vmov.f32	s15, s0
 8001bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bce:	ee17 0a90 	vmov	r0, s15
 8001bd2:	f00c fb01 	bl	800e1d8 <osDelay>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bd6:	2108      	movs	r1, #8
 8001bd8:	4811      	ldr	r0, [pc, #68]	; (8001c20 <StartDefaultTask+0x114>)
 8001bda:	f007 f9c9 	bl	8008f70 <HAL_TIM_PWM_Start>
			optic_triggered_sim = true;
 8001bde:	2301      	movs	r3, #1
 8001be0:	76fb      	strb	r3, [r7, #27]
		}
	}
	osDelay(get_ticks_from_ms(50));
 8001be2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8001c24 <StartDefaultTask+0x118>
 8001be6:	f7ff f917 	bl	8000e18 <get_ticks_from_ms>
 8001bea:	eef0 7a40 	vmov.f32	s15, s0
 8001bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bf2:	ee17 0a90 	vmov	r0, s15
 8001bf6:	f00c faef 	bl	800e1d8 <osDelay>
	if(en_ackn_pos)
 8001bfa:	e7b7      	b.n	8001b6c <StartDefaultTask+0x60>
 8001bfc:	20000400 	.word	0x20000400
 8001c00:	200004e0 	.word	0x200004e0
 8001c04:	20000858 	.word	0x20000858
 8001c08:	2000085c 	.word	0x2000085c
 8001c0c:	20000860 	.word	0x20000860
 8001c10:	20000850 	.word	0x20000850
 8001c14:	20000854 	.word	0x20000854
 8001c18:	20000000 	.word	0x20000000
 8001c1c:	200005b0 	.word	0x200005b0
 8001c20:	20000564 	.word	0x20000564
 8001c24:	42480000 	.word	0x42480000

08001c28 <send_to_CLASSIFIER_queue>:
  /* USER CODE END 5 */
}

/* USER CODE BEGIN Header_f_RPI_watch */

void send_to_CLASSIFIER_queue(char * value){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b090      	sub	sp, #64	; 0x40
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	queue_stations_tcp local_var;
	strcpy((char *)&local_var.msg, value);
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f021 fa62 	bl	8023100 <strcpy>
	osStatus_t r = osMessageQueuePut(classifier_queueHandle, &local_var, (uint8_t)0, 2);
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <send_to_CLASSIFIER_queue+0x30>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
 8001c40:	f107 0108 	add.w	r1, r7, #8
 8001c44:	2302      	movs	r3, #2
 8001c46:	2200      	movs	r2, #0
 8001c48:	f00c ff2c 	bl	800eaa4 <osMessageQueuePut>
 8001c4c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if(ENABLE_QUEUE_RESULT)debug_send_queue_result (r, "CLASSIFIER_queue_tx");
}
 8001c4e:	bf00      	nop
 8001c50:	3740      	adds	r7, #64	; 0x40
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000888 	.word	0x20000888

08001c5c <f_RPI_watch>:

/* USER CODE END Header_f_RPI_watch */
void f_RPI_watch(void *argument)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b0b0      	sub	sp, #192	; 0xc0
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_RPI_watch */
  queue_stations_tcp local_queue_class;
  queue_inter_stations local_queue_RPI_KEY;
  float starting_pos_local=0;
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  float relative_pos_local=0;
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  int state = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 8001c78:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001c7c:	f7ff f8cc 	bl	8000e18 <get_ticks_from_ms>
 8001c80:	eef0 7a40 	vmov.f32	s15, s0
 8001c84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c88:	ee17 0a90 	vmov	r0, s15
 8001c8c:	f00c faa4 	bl	800e1d8 <osDelay>
	if(state == 0){
 8001c90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11d      	bne.n	8001cd4 <f_RPI_watch+0x78>
		status = osMessageQueueGet(RPI_queueHandle, &starting_pos_local, (uint8_t *)NULL, 0);
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <f_RPI_watch+0x19c>)
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	f107 0108 	add.w	r1, r7, #8
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f00c ff72 	bl	800eb8c <osMessageQueueGet>
 8001ca8:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (status == osOK){
 8001cac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e1      	bne.n	8001c78 <f_RPI_watch+0x1c>
			reusable_optical_curtain = get_current_conveyor_pos();
 8001cb4:	f001 fd9e 	bl	80037f4 <get_current_conveyor_pos>
 8001cb8:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
			relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 8001cbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
			if(ENABLE_QUEUE_RESULT)debug_send_process((char*)&str_success, starting_pos_local, relative_pos_local, (char*)"RPI_queue_rx");
			state = 1;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001cd2:	e7d1      	b.n	8001c78 <f_RPI_watch+0x1c>
		}
	}else if(state == 1){
 8001cd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d127      	bne.n	8001d2c <f_RPI_watch+0xd0>
		reusable_optical_curtain = get_current_conveyor_pos();
 8001cdc:	f001 fd8a 	bl	80037f4 <get_current_conveyor_pos>
 8001ce0:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
		relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 8001ce4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ce8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
		if(relative_pos_local>(RPI_POS-TOLERANCE_TRG)){
 8001cf4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001cf8:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001dfc <f_RPI_watch+0x1a0>
 8001cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	dd76      	ble.n	8001df4 <f_RPI_watch+0x198>
			trigger_RPI();
 8001d06:	f002 fabd 	bl	8004284 <trigger_RPI>
			debug_send_process((char*)&str_ack, starting_pos_local, relative_pos_local, (char*)"TRIGGER_RPI_pulse");
 8001d0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d0e:	493c      	ldr	r1, [pc, #240]	; (8001e00 <f_RPI_watch+0x1a4>)
 8001d10:	edd7 0a2e 	vldr	s1, [r7, #184]	; 0xb8
 8001d14:	eeb0 0a67 	vmov.f32	s0, s15
 8001d18:	483a      	ldr	r0, [pc, #232]	; (8001e04 <f_RPI_watch+0x1a8>)
 8001d1a:	f001 fa9f 	bl	800325c <debug_send_process>

			send_tcp_to_RPI("TRIGGER_RPI_pulse"); // Used only for testing, with simulator
 8001d1e:	4838      	ldr	r0, [pc, #224]	; (8001e00 <f_RPI_watch+0x1a4>)
 8001d20:	f000 ff3e 	bl	8002ba0 <send_tcp_to_RPI>

			state = 2;
 8001d24:	2302      	movs	r3, #2
 8001d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d2a:	e7a5      	b.n	8001c78 <f_RPI_watch+0x1c>
		}
	}else if (state == 2){
 8001d2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d1a1      	bne.n	8001c78 <f_RPI_watch+0x1c>
		status = osMessageQueueGet(classifier_queueHandle, &local_queue_class, (uint8_t *)NULL, 0);
 8001d34:	4b34      	ldr	r3, [pc, #208]	; (8001e08 <f_RPI_watch+0x1ac>)
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f00c ff24 	bl	800eb8c <osMessageQueueGet>
 8001d44:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (status == osOK){
 8001d48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d123      	bne.n	8001d98 <f_RPI_watch+0x13c>
			state = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			strcpy((char*)&local_queue_RPI_KEY.classifier, (char*)&local_queue_class.msg);
 8001d56:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f021 f9cd 	bl	8023100 <strcpy>
			local_queue_RPI_KEY.optical_curtain = starting_pos_local;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	673b      	str	r3, [r7, #112]	; 0x70
			osStatus_t r = osMessageQueuePut(KEYENCE_queueHandle, &local_queue_RPI_KEY, (uint8_t)0, 2);
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <f_RPI_watch+0x1b0>)
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	f107 010c 	add.w	r1, r7, #12
 8001d72:	2302      	movs	r3, #2
 8001d74:	2200      	movs	r2, #0
 8001d76:	f00c fe95 	bl	800eaa4 <osMessageQueuePut>
 8001d7a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
			reusable_optical_curtain = get_current_conveyor_pos();
 8001d7e:	f001 fd39 	bl	80037f4 <get_current_conveyor_pos>
 8001d82:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
			relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 8001d86:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d8a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d92:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
 8001d96:	e76f      	b.n	8001c78 <f_RPI_watch+0x1c>
			if(ENABLE_QUEUE_RESULT)debug_send_queue_process_result(r, starting_pos_local, relative_pos_local, (char*)"KEYENCE_queue_tx");
		} else {
			reusable_optical_curtain = get_current_conveyor_pos();
 8001d98:	f001 fd2c 	bl	80037f4 <get_current_conveyor_pos>
 8001d9c:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
			relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 8001da0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dac:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
			if (relative_pos_local> (RPI_POS + DIS_RELEASE_RPI)){
 8001db0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8001db4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001e10 <f_RPI_watch+0x1b4>
 8001db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc0:	dd18      	ble.n	8001df4 <f_RPI_watch+0x198>
				state = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
				osStatus_t r = osMessageQueuePut(DISCARD_queueHandle, &starting_pos_local, (uint8_t)0, 2);
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <f_RPI_watch+0x1b8>)
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	f107 0108 	add.w	r1, r7, #8
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f00c fe66 	bl	800eaa4 <osMessageQueuePut>
 8001dd8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
				reusable_optical_curtain = get_current_conveyor_pos();
 8001ddc:	f001 fd0a 	bl	80037f4 <get_current_conveyor_pos>
 8001de0:	ed87 0a2c 	vstr	s0, [r7, #176]	; 0xb0
				relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 8001de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de8:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8001dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 8001df4:	e740      	b.n	8001c78 <f_RPI_watch+0x1c>
 8001df6:	bf00      	nop
 8001df8:	2000087c 	.word	0x2000087c
 8001dfc:	44098000 	.word	0x44098000
 8001e00:	080241d0 	.word	0x080241d0
 8001e04:	08028028 	.word	0x08028028
 8001e08:	20000888 	.word	0x20000888
 8001e0c:	20000880 	.word	0x20000880
 8001e10:	44368000 	.word	0x44368000
 8001e14:	20000890 	.word	0x20000890

08001e18 <send_to_ORIENTATION_queue>:
  /* USER CODE END f_RPI_watch */
}

/* USER CODE BEGIN Header_f_KEYENCE_watch */

void send_to_ORIENTATION_queue(char * value){
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b090      	sub	sp, #64	; 0x40
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
	queue_stations_tcp local_var;
	strcpy((char *)&local_var.msg, value);
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f021 f96a 	bl	8023100 <strcpy>
	osStatus_t r = osMessageQueuePut(orientation_queueHandle, &local_var, (uint8_t)0, 2);
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <send_to_ORIENTATION_queue+0x30>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	f107 0108 	add.w	r1, r7, #8
 8001e34:	2302      	movs	r3, #2
 8001e36:	2200      	movs	r2, #0
 8001e38:	f00c fe34 	bl	800eaa4 <osMessageQueuePut>
 8001e3c:	63f8      	str	r0, [r7, #60]	; 0x3c
	if(ENABLE_QUEUE_RESULT)debug_send_queue_result(r, "ORIENTATION_queue_tx");
}
 8001e3e:	bf00      	nop
 8001e40:	3740      	adds	r7, #64	; 0x40
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	2000088c 	.word	0x2000088c

08001e4c <f_KEYENCE_watch>:

/* USER CODE END Header_f_KEYENCE_watch */
void f_KEYENCE_watch(void *argument)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b0bc      	sub	sp, #240	; 0xf0
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_KEYENCE_watch */
	queue_inter_stations local_queue_RPI_KEY;
	queue_stations_tcp local_queue_orientation;
	queue_stations_tcp local_queue_recipe;
	float relative_pos_local=0;
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	int state = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 8001e62:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001e66:	f7fe ffd7 	bl	8000e18 <get_ticks_from_ms>
 8001e6a:	eef0 7a40 	vmov.f32	s15, s0
 8001e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e72:	ee17 0a90 	vmov	r0, s15
 8001e76:	f00c f9af 	bl	800e1d8 <osDelay>
	if(state == 0){
 8001e7a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d11d      	bne.n	8001ebe <f_KEYENCE_watch+0x72>
		status = osMessageQueueGet(KEYENCE_queueHandle, &local_queue_RPI_KEY, (uint8_t *)NULL, 0);
 8001e82:	4b6c      	ldr	r3, [pc, #432]	; (8002034 <f_KEYENCE_watch+0x1e8>)
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f00c fe7d 	bl	800eb8c <osMessageQueueGet>
 8001e92:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
		if (status == osOK){
 8001e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1e1      	bne.n	8001e62 <f_KEYENCE_watch+0x16>
			reusable_optical_curtain = get_current_conveyor_pos();
 8001e9e:	f001 fca9 	bl	80037f4 <get_current_conveyor_pos>
 8001ea2:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
			relative_pos_local =  reusable_optical_curtain - local_queue_RPI_KEY.optical_curtain;
 8001ea6:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001eaa:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb2:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
			if(ENABLE_QUEUE_RESULT)debug_send_process((char*)&str_success, local_queue_RPI_KEY.optical_curtain, relative_pos_local, (char*)"KEYENCE_queue_rx");
			state = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001ebc:	e7d1      	b.n	8001e62 <f_KEYENCE_watch+0x16>
		}
	}else if(state == 1){
 8001ebe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d132      	bne.n	8001f2c <f_KEYENCE_watch+0xe0>
		reusable_optical_curtain = get_current_conveyor_pos();
 8001ec6:	f001 fc95 	bl	80037f4 <get_current_conveyor_pos>
 8001eca:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
		relative_pos_local =  reusable_optical_curtain - local_queue_RPI_KEY.optical_curtain;
 8001ece:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001ed2:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eda:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
		if(relative_pos_local>(KEYENCE_POS-DISTANCE_SEND_RECIPE_EARLIER)){
 8001ede:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8001ee2:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002038 <f_KEYENCE_watch+0x1ec>
 8001ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eee:	f340 80a0 	ble.w	8002032 <f_KEYENCE_watch+0x1e6>
			get_recipe_from_classifier((char*) &local_queue_RPI_KEY.classifier,(char*) &local_queue_recipe.msg);
 8001ef2:	f107 0208 	add.w	r2, r7, #8
 8001ef6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ffab 	bl	8000e58 <get_recipe_from_classifier>
			send_tcp_to_KEYENCE((char*)&local_queue_recipe.msg);
 8001f02:	f107 0308 	add.w	r3, r7, #8
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fe5e 	bl	8002bc8 <send_tcp_to_KEYENCE>
			debug_send_process((char*)&str_success, local_queue_RPI_KEY.optical_curtain, relative_pos_local, (char*)&local_queue_recipe.msg);// Sending recipe
 8001f0c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	4619      	mov	r1, r3
 8001f16:	edd7 0a3a 	vldr	s1, [r7, #232]	; 0xe8
 8001f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1e:	4847      	ldr	r0, [pc, #284]	; (800203c <f_KEYENCE_watch+0x1f0>)
 8001f20:	f001 f99c 	bl	800325c <debug_send_process>
			state = 2;
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001f2a:	e79a      	b.n	8001e62 <f_KEYENCE_watch+0x16>
		}

	}else if(state == 2){
 8001f2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d124      	bne.n	8001f7e <f_KEYENCE_watch+0x132>
		reusable_optical_curtain = get_current_conveyor_pos();
 8001f34:	f001 fc5e 	bl	80037f4 <get_current_conveyor_pos>
 8001f38:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
		relative_pos_local =  reusable_optical_curtain - local_queue_RPI_KEY.optical_curtain;
 8001f3c:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001f40:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f48:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
		if(relative_pos_local>(KEYENCE_POS-TOLERANCE_TRG)){
 8001f4c:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8001f50:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002040 <f_KEYENCE_watch+0x1f4>
 8001f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f5c:	dd69      	ble.n	8002032 <f_KEYENCE_watch+0x1e6>
			trigger_KEYENCE();
 8001f5e:	f002 f9b9 	bl	80042d4 <trigger_KEYENCE>
			debug_send_process((char*)&str_ack, local_queue_RPI_KEY.optical_curtain, relative_pos_local, (char*)"TRIGGER_KEYENCE_pulse");
 8001f62:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001f66:	4937      	ldr	r1, [pc, #220]	; (8002044 <f_KEYENCE_watch+0x1f8>)
 8001f68:	edd7 0a3a 	vldr	s1, [r7, #232]	; 0xe8
 8001f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f70:	4835      	ldr	r0, [pc, #212]	; (8002048 <f_KEYENCE_watch+0x1fc>)
 8001f72:	f001 f973 	bl	800325c <debug_send_process>
			state = 3;
 8001f76:	2303      	movs	r3, #3
 8001f78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001f7c:	e771      	b.n	8001e62 <f_KEYENCE_watch+0x16>
		}
	}else if (state == 3){
 8001f7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	f47f af6d 	bne.w	8001e62 <f_KEYENCE_watch+0x16>
		status = osMessageQueueGet(orientation_queueHandle, &local_queue_orientation.msg, (uint8_t *)NULL, 0);
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <f_KEYENCE_watch+0x200>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001f90:	2300      	movs	r3, #0
 8001f92:	2200      	movs	r2, #0
 8001f94:	f00c fdfa 	bl	800eb8c <osMessageQueueGet>
 8001f98:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
		if (status == osOK){
 8001f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d122      	bne.n	8001fea <f_KEYENCE_watch+0x19e>
			state = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
			strcpy((char *)&local_queue_RPI_KEY.orientation,(char *)&local_queue_orientation.msg);
 8001faa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fb2:	3332      	adds	r3, #50	; 0x32
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f021 f8a2 	bl	8023100 <strcpy>
			osStatus_t r = osMessageQueuePut(FG1_queueHandle, &local_queue_RPI_KEY, (uint8_t)0, 2);
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <f_KEYENCE_watch+0x204>)
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f00c fd6c 	bl	800eaa4 <osMessageQueuePut>
 8001fcc:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
			reusable_optical_curtain = get_current_conveyor_pos();
 8001fd0:	f001 fc10 	bl	80037f4 <get_current_conveyor_pos>
 8001fd4:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
			relative_pos_local =  reusable_optical_curtain - local_queue_RPI_KEY.optical_curtain;
 8001fd8:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001fdc:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe4:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
 8001fe8:	e73b      	b.n	8001e62 <f_KEYENCE_watch+0x16>
			if(ENABLE_QUEUE_RESULT)debug_send_queue_process_result(r, local_queue_RPI_KEY.optical_curtain, relative_pos_local, (char*)"FG1_queue_tx");
		} else {
			reusable_optical_curtain = get_current_conveyor_pos();
 8001fea:	f001 fc03 	bl	80037f4 <get_current_conveyor_pos>
 8001fee:	ed87 0a38 	vstr	s0, [r7, #224]	; 0xe0
			relative_pos_local =  reusable_optical_curtain - local_queue_RPI_KEY.optical_curtain;
 8001ff2:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8001ff6:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8001ffa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffe:	edc7 7a3a 	vstr	s15, [r7, #232]	; 0xe8
			if (relative_pos_local> (KEYENCE_POS + DIS_RELEASE_KEYENCE)){
 8002002:	edd7 7a3a 	vldr	s15, [r7, #232]	; 0xe8
 8002006:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002054 <f_KEYENCE_watch+0x208>
 800200a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	dd0e      	ble.n	8002032 <f_KEYENCE_watch+0x1e6>
				state = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
				osStatus_t r = osMessageQueuePut(DISCARD_queueHandle, &local_queue_RPI_KEY.optical_curtain, (uint8_t)0, 2);
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <f_KEYENCE_watch+0x20c>)
 800201c:	6818      	ldr	r0, [r3, #0]
 800201e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002022:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8002026:	2302      	movs	r3, #2
 8002028:	2200      	movs	r2, #0
 800202a:	f00c fd3b 	bl	800eaa4 <osMessageQueuePut>
 800202e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 8002032:	e716      	b.n	8001e62 <f_KEYENCE_watch+0x16>
 8002034:	20000880 	.word	0x20000880
 8002038:	44988000 	.word	0x44988000
 800203c:	08028020 	.word	0x08028020
 8002040:	44a50000 	.word	0x44a50000
 8002044:	080241e4 	.word	0x080241e4
 8002048:	08028028 	.word	0x08028028
 800204c:	2000088c 	.word	0x2000088c
 8002050:	20000884 	.word	0x20000884
 8002054:	44bb8000 	.word	0x44bb8000
 8002058:	20000890 	.word	0x20000890

0800205c <f_FG1_wach>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_f_FG1_wach */
void f_FG1_wach(void *argument)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b0ae      	sub	sp, #184	; 0xb8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_FG1_wach */
	queue_inter_stations local_queue_KEY_FG1;
	queue_stations_tcp local_queue_comput;
	float relative_pos_local=0;
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	int state = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 8002072:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002076:	f7fe fecf 	bl	8000e18 <get_ticks_from_ms>
 800207a:	eef0 7a40 	vmov.f32	s15, s0
 800207e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002082:	ee17 0a90 	vmov	r0, s15
 8002086:	f00c f8a7 	bl	800e1d8 <osDelay>
	if(state == 0){
 800208a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11d      	bne.n	80020ce <f_FG1_wach+0x72>
		status = osMessageQueueGet(FG1_queueHandle, &local_queue_KEY_FG1, (uint8_t *)NULL, 0);
 8002092:	4b50      	ldr	r3, [pc, #320]	; (80021d4 <f_FG1_wach+0x178>)
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800209a:	2300      	movs	r3, #0
 800209c:	2200      	movs	r2, #0
 800209e:	f00c fd75 	bl	800eb8c <osMessageQueueGet>
 80020a2:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
		if (status == osOK){
 80020a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1e1      	bne.n	8002072 <f_FG1_wach+0x16>
			reusable_optical_curtain = get_current_conveyor_pos();
 80020ae:	f001 fba1 	bl	80037f4 <get_current_conveyor_pos>
 80020b2:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8
			relative_pos_local =  reusable_optical_curtain - local_queue_KEY_FG1.optical_curtain;
 80020b6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80020ba:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80020be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
			if(ENABLE_QUEUE_RESULT)debug_send_process((char*)&str_success, local_queue_KEY_FG1.optical_curtain, relative_pos_local, (char*)"FG1_queue_rx");
			state = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020cc:	e7d1      	b.n	8002072 <f_FG1_wach+0x16>
		}
	}else if(state == 1){
 80020ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d134      	bne.n	8002140 <f_FG1_wach+0xe4>
		reusable_optical_curtain = get_current_conveyor_pos();
 80020d6:	f001 fb8d 	bl	80037f4 <get_current_conveyor_pos>
 80020da:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8
		relative_pos_local =  reusable_optical_curtain - local_queue_KEY_FG1.optical_curtain;
 80020de:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80020e2:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80020e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ea:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		if(relative_pos_local>(FG1_POS-DISTANCE_SEND_RECIPE_EARLIER)){
 80020ee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80020f2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80021d8 <f_FG1_wach+0x17c>
 80020f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fe:	dd68      	ble.n	80021d2 <f_FG1_wach+0x176>
			get_computer_from_orientation((char*) &local_queue_KEY_FG1.classifier, (char*) &local_queue_KEY_FG1.orientation, (char*) &local_queue_comput.msg);
 8002100:	f107 0208 	add.w	r2, r7, #8
 8002104:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002108:	f103 0132 	add.w	r1, r3, #50	; 0x32
 800210c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002110:	4618      	mov	r0, r3
 8002112:	f7fe feb1 	bl	8000e78 <get_computer_from_orientation>
			send_tcp_to_FG1((char*) &local_queue_comput.msg);
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fd68 	bl	8002bf0 <send_tcp_to_FG1>
			debug_send_process((char*)&str_success, local_queue_KEY_FG1.optical_curtain, relative_pos_local, (char*)&local_queue_comput.msg);// Sending computer
 8002120:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002124:	f107 0308 	add.w	r3, r7, #8
 8002128:	4619      	mov	r1, r3
 800212a:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 800212e:	eeb0 0a67 	vmov.f32	s0, s15
 8002132:	482a      	ldr	r0, [pc, #168]	; (80021dc <f_FG1_wach+0x180>)
 8002134:	f001 f892 	bl	800325c <debug_send_process>
			state = 2;
 8002138:	2302      	movs	r3, #2
 800213a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800213e:	e798      	b.n	8002072 <f_FG1_wach+0x16>
		}
	}else if(state == 2){
 8002140:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002144:	2b02      	cmp	r3, #2
 8002146:	d124      	bne.n	8002192 <f_FG1_wach+0x136>
		reusable_optical_curtain = get_current_conveyor_pos();
 8002148:	f001 fb54 	bl	80037f4 <get_current_conveyor_pos>
 800214c:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8
		relative_pos_local =  reusable_optical_curtain - local_queue_KEY_FG1.optical_curtain;
 8002150:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002154:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 8002158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		if(relative_pos_local>(FG1_POS-TOLERANCE_TRG)){
 8002160:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002164:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80021e0 <f_FG1_wach+0x184>
 8002168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800216c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002170:	dd2f      	ble.n	80021d2 <f_FG1_wach+0x176>
			trigger_FG1();
 8002172:	f002 f8d7 	bl	8004324 <trigger_FG1>
			debug_send_process((char*)&str_ack, local_queue_KEY_FG1.optical_curtain, relative_pos_local, (char*)"TRIGGER_FG1_pulse");
 8002176:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800217a:	491a      	ldr	r1, [pc, #104]	; (80021e4 <f_FG1_wach+0x188>)
 800217c:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8002180:	eeb0 0a67 	vmov.f32	s0, s15
 8002184:	4818      	ldr	r0, [pc, #96]	; (80021e8 <f_FG1_wach+0x18c>)
 8002186:	f001 f869 	bl	800325c <debug_send_process>
			state = 3;
 800218a:	2303      	movs	r3, #3
 800218c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002190:	e76f      	b.n	8002072 <f_FG1_wach+0x16>
		}
	}else if (state == 3){
 8002192:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002196:	2b03      	cmp	r3, #3
 8002198:	f47f af6b 	bne.w	8002072 <f_FG1_wach+0x16>
		state = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		osStatus_t r = osMessageQueuePut(FG2_queueHandle, &local_queue_KEY_FG1.optical_curtain, (uint8_t)0, 2);
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <f_FG1_wach+0x190>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021aa:	f103 0164 	add.w	r1, r3, #100	; 0x64
 80021ae:	2302      	movs	r3, #2
 80021b0:	2200      	movs	r2, #0
 80021b2:	f00c fc77 	bl	800eaa4 <osMessageQueuePut>
 80021b6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
		reusable_optical_curtain = get_current_conveyor_pos();
 80021ba:	f001 fb1b 	bl	80037f4 <get_current_conveyor_pos>
 80021be:	ed87 0a2a 	vstr	s0, [r7, #168]	; 0xa8
		relative_pos_local =  reusable_optical_curtain - local_queue_KEY_FG1.optical_curtain;
 80021c2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80021c6:	ed97 7a2a 	vldr	s14, [r7, #168]	; 0xa8
 80021ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ce:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 80021d2:	e74e      	b.n	8002072 <f_FG1_wach+0x16>
 80021d4:	20000884 	.word	0x20000884
 80021d8:	44ce4000 	.word	0x44ce4000
 80021dc:	08028020 	.word	0x08028020
 80021e0:	44dac000 	.word	0x44dac000
 80021e4:	080241fc 	.word	0x080241fc
 80021e8:	08028028 	.word	0x08028028
 80021ec:	20000898 	.word	0x20000898

080021f0 <f_FG2_wach>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_f_FG2_wach */
void f_FG2_wach(void *argument)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b088      	sub	sp, #32
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_FG2_wach */
  float starting_pos_local=0;
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
  float relative_pos_local=0;
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	61bb      	str	r3, [r7, #24]
  int state = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  osStatus_t status;
  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 8002208:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800220c:	f7fe fe04 	bl	8000e18 <get_ticks_from_ms>
 8002210:	eef0 7a40 	vmov.f32	s15, s0
 8002214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002218:	ee17 0a90 	vmov	r0, s15
 800221c:	f00b ffdc 	bl	800e1d8 <osDelay>
	if(state == 0){
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d11a      	bne.n	800225c <f_FG2_wach+0x6c>
		status = osMessageQueueGet(FG2_queueHandle, &starting_pos_local, (uint8_t *)NULL, 0);
 8002226:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <f_FG2_wach+0xf0>)
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	f107 0108 	add.w	r1, r7, #8
 800222e:	2300      	movs	r3, #0
 8002230:	2200      	movs	r2, #0
 8002232:	f00c fcab 	bl	800eb8c <osMessageQueueGet>
 8002236:	60f8      	str	r0, [r7, #12]
		if (status == osOK){
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1e4      	bne.n	8002208 <f_FG2_wach+0x18>
			reusable_optical_curtain = get_current_conveyor_pos();
 800223e:	f001 fad9 	bl	80037f4 <get_current_conveyor_pos>
 8002242:	ed87 0a04 	vstr	s0, [r7, #16]
			relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 8002246:	edd7 7a02 	vldr	s15, [r7, #8]
 800224a:	ed97 7a04 	vldr	s14, [r7, #16]
 800224e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002252:	edc7 7a06 	vstr	s15, [r7, #24]
			if(ENABLE_QUEUE_RESULT)debug_send_process((char*)&str_success, starting_pos_local, relative_pos_local, (char*)"FG2_queue_rx");
			state = 1;
 8002256:	2301      	movs	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
 800225a:	e7d5      	b.n	8002208 <f_FG2_wach+0x18>
		}
	}else if(state == 1){
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d123      	bne.n	80022aa <f_FG2_wach+0xba>
		reusable_optical_curtain = get_current_conveyor_pos();
 8002262:	f001 fac7 	bl	80037f4 <get_current_conveyor_pos>
 8002266:	ed87 0a04 	vstr	s0, [r7, #16]
		relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 800226a:	edd7 7a02 	vldr	s15, [r7, #8]
 800226e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002276:	edc7 7a06 	vstr	s15, [r7, #24]
		if(relative_pos_local>(FG2_POS-TOLERANCE_TRG)){
 800227a:	edd7 7a06 	vldr	s15, [r7, #24]
 800227e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80022e4 <f_FG2_wach+0xf4>
 8002282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	dd28      	ble.n	80022de <f_FG2_wach+0xee>
			trigger_FG2();
 800228c:	f002 f872 	bl	8004374 <trigger_FG2>
			debug_send_process((char*)&str_ack, starting_pos_local, relative_pos_local, (char*)"TRIGGER_FG2_pulse");
 8002290:	edd7 7a02 	vldr	s15, [r7, #8]
 8002294:	4914      	ldr	r1, [pc, #80]	; (80022e8 <f_FG2_wach+0xf8>)
 8002296:	edd7 0a06 	vldr	s1, [r7, #24]
 800229a:	eeb0 0a67 	vmov.f32	s0, s15
 800229e:	4813      	ldr	r0, [pc, #76]	; (80022ec <f_FG2_wach+0xfc>)
 80022a0:	f000 ffdc 	bl	800325c <debug_send_process>
			state = 2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	e7ae      	b.n	8002208 <f_FG2_wach+0x18>
		}
	}else if (state == 2){
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d1ab      	bne.n	8002208 <f_FG2_wach+0x18>
		state = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61fb      	str	r3, [r7, #28]
		osStatus_t r = osMessageQueuePut(FG3_queueHandle, &starting_pos_local, (uint8_t)0, 2);
 80022b4:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <f_FG2_wach+0x100>)
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	f107 0108 	add.w	r1, r7, #8
 80022bc:	2302      	movs	r3, #2
 80022be:	2200      	movs	r2, #0
 80022c0:	f00c fbf0 	bl	800eaa4 <osMessageQueuePut>
 80022c4:	6178      	str	r0, [r7, #20]
		reusable_optical_curtain = get_current_conveyor_pos();
 80022c6:	f001 fa95 	bl	80037f4 <get_current_conveyor_pos>
 80022ca:	ed87 0a04 	vstr	s0, [r7, #16]
		relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 80022ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80022d2:	ed97 7a04 	vldr	s14, [r7, #16]
 80022d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022da:	edc7 7a06 	vstr	s15, [r7, #24]
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 80022de:	e793      	b.n	8002208 <f_FG2_wach+0x18>
 80022e0:	20000898 	.word	0x20000898
 80022e4:	44e88000 	.word	0x44e88000
 80022e8:	08024210 	.word	0x08024210
 80022ec:	08028028 	.word	0x08028028
 80022f0:	2000089c 	.word	0x2000089c

080022f4 <f_FG3_wach>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_f_FG3_wach */
void f_FG3_wach(void *argument)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_FG3_wach */
  float starting_pos_local=0;
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  float relative_pos_local=0;
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	61bb      	str	r3, [r7, #24]
  int state = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 800230c:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002310:	f7fe fd82 	bl	8000e18 <get_ticks_from_ms>
 8002314:	eef0 7a40 	vmov.f32	s15, s0
 8002318:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800231c:	ee17 0a90 	vmov	r0, s15
 8002320:	f00b ff5a 	bl	800e1d8 <osDelay>
	if(state == 0){
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d11a      	bne.n	8002360 <f_FG3_wach+0x6c>
		status = osMessageQueueGet(FG3_queueHandle, &starting_pos_local, (uint8_t *)NULL, 0);
 800232a:	4b2e      	ldr	r3, [pc, #184]	; (80023e4 <f_FG3_wach+0xf0>)
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	f107 0108 	add.w	r1, r7, #8
 8002332:	2300      	movs	r3, #0
 8002334:	2200      	movs	r2, #0
 8002336:	f00c fc29 	bl	800eb8c <osMessageQueueGet>
 800233a:	60f8      	str	r0, [r7, #12]
		if (status == osOK){
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1e4      	bne.n	800230c <f_FG3_wach+0x18>
			reusable_optical_curtain = get_current_conveyor_pos();
 8002342:	f001 fa57 	bl	80037f4 <get_current_conveyor_pos>
 8002346:	ed87 0a04 	vstr	s0, [r7, #16]
			relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 800234a:	edd7 7a02 	vldr	s15, [r7, #8]
 800234e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002356:	edc7 7a06 	vstr	s15, [r7, #24]
			if(ENABLE_QUEUE_RESULT)debug_send_process((char*)&str_success, starting_pos_local, relative_pos_local, (char*)"FG3_queue_rx");
			state = 1;
 800235a:	2301      	movs	r3, #1
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	e7d5      	b.n	800230c <f_FG3_wach+0x18>
		}
	}else if(state == 1){
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d123      	bne.n	80023ae <f_FG3_wach+0xba>
		reusable_optical_curtain = get_current_conveyor_pos();
 8002366:	f001 fa45 	bl	80037f4 <get_current_conveyor_pos>
 800236a:	ed87 0a04 	vstr	s0, [r7, #16]
		relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 800236e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002372:	ed97 7a04 	vldr	s14, [r7, #16]
 8002376:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237a:	edc7 7a06 	vstr	s15, [r7, #24]
		if(relative_pos_local>(FG3_POS-TOLERANCE_TRG)){
 800237e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002382:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80023e8 <f_FG3_wach+0xf4>
 8002386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238e:	dd28      	ble.n	80023e2 <f_FG3_wach+0xee>
			trigger_FG3();
 8002390:	f002 f818 	bl	80043c4 <trigger_FG3>
			debug_send_process((char*)&str_ack, starting_pos_local, relative_pos_local, (char*)"TRIGGER_FG3_pulse");
 8002394:	edd7 7a02 	vldr	s15, [r7, #8]
 8002398:	4914      	ldr	r1, [pc, #80]	; (80023ec <f_FG3_wach+0xf8>)
 800239a:	edd7 0a06 	vldr	s1, [r7, #24]
 800239e:	eeb0 0a67 	vmov.f32	s0, s15
 80023a2:	4813      	ldr	r0, [pc, #76]	; (80023f0 <f_FG3_wach+0xfc>)
 80023a4:	f000 ff5a 	bl	800325c <debug_send_process>
			state = 2;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61fb      	str	r3, [r7, #28]
 80023ac:	e7ae      	b.n	800230c <f_FG3_wach+0x18>
		}
	}else if (state == 2){
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d1ab      	bne.n	800230c <f_FG3_wach+0x18>
		state = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
		osStatus_t r = osMessageQueuePut(FG4_queueHandle, &starting_pos_local, (uint8_t)0, 2);
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <f_FG3_wach+0x100>)
 80023ba:	6818      	ldr	r0, [r3, #0]
 80023bc:	f107 0108 	add.w	r1, r7, #8
 80023c0:	2302      	movs	r3, #2
 80023c2:	2200      	movs	r2, #0
 80023c4:	f00c fb6e 	bl	800eaa4 <osMessageQueuePut>
 80023c8:	6178      	str	r0, [r7, #20]
		reusable_optical_curtain = get_current_conveyor_pos();
 80023ca:	f001 fa13 	bl	80037f4 <get_current_conveyor_pos>
 80023ce:	ed87 0a04 	vstr	s0, [r7, #16]
		relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 80023d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80023da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023de:	edc7 7a06 	vstr	s15, [r7, #24]
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 80023e2:	e793      	b.n	800230c <f_FG3_wach+0x18>
 80023e4:	2000089c 	.word	0x2000089c
 80023e8:	44f8c000 	.word	0x44f8c000
 80023ec:	08024224 	.word	0x08024224
 80023f0:	08028028 	.word	0x08028028
 80023f4:	200008a0 	.word	0x200008a0

080023f8 <f_FG4_wach>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_f_FG4_wach */
void f_FG4_wach(void *argument)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_FG4_wach */
  float starting_pos_local=0;
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  float relative_pos_local=0;
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
  int state = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]

  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 8002410:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8002414:	f7fe fd00 	bl	8000e18 <get_ticks_from_ms>
 8002418:	eef0 7a40 	vmov.f32	s15, s0
 800241c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002420:	ee17 0a90 	vmov	r0, s15
 8002424:	f00b fed8 	bl	800e1d8 <osDelay>
	if(state == 0){
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d11a      	bne.n	8002464 <f_FG4_wach+0x6c>
		status = osMessageQueueGet(FG4_queueHandle, &starting_pos_local, (uint8_t *)NULL, 0);
 800242e:	4b35      	ldr	r3, [pc, #212]	; (8002504 <f_FG4_wach+0x10c>)
 8002430:	6818      	ldr	r0, [r3, #0]
 8002432:	f107 010c 	add.w	r1, r7, #12
 8002436:	2300      	movs	r3, #0
 8002438:	2200      	movs	r2, #0
 800243a:	f00c fba7 	bl	800eb8c <osMessageQueueGet>
 800243e:	6138      	str	r0, [r7, #16]
		if (status == osOK){
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e4      	bne.n	8002410 <f_FG4_wach+0x18>
			reusable_optical_curtain = get_current_conveyor_pos();
 8002446:	f001 f9d5 	bl	80037f4 <get_current_conveyor_pos>
 800244a:	ed87 0a05 	vstr	s0, [r7, #20]
			relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 800244e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002452:	ed97 7a05 	vldr	s14, [r7, #20]
 8002456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245a:	edc7 7a06 	vstr	s15, [r7, #24]
			if(ENABLE_QUEUE_RESULT)debug_send_process((char*)&str_success, starting_pos_local, relative_pos_local, (char*)"FG4_queue_rx");
			state = 1;
 800245e:	2301      	movs	r3, #1
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e7d5      	b.n	8002410 <f_FG4_wach+0x18>
		}
	}else if(state == 1){
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d123      	bne.n	80024b2 <f_FG4_wach+0xba>
		reusable_optical_curtain = get_current_conveyor_pos();
 800246a:	f001 f9c3 	bl	80037f4 <get_current_conveyor_pos>
 800246e:	ed87 0a05 	vstr	s0, [r7, #20]
		relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 8002472:	edd7 7a03 	vldr	s15, [r7, #12]
 8002476:	ed97 7a05 	vldr	s14, [r7, #20]
 800247a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247e:	edc7 7a06 	vstr	s15, [r7, #24]
		if(relative_pos_local>(FG4_POS-TOLERANCE_TRG)){
 8002482:	edd7 7a06 	vldr	s15, [r7, #24]
 8002486:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002508 <f_FG4_wach+0x110>
 800248a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002492:	dd35      	ble.n	8002500 <f_FG4_wach+0x108>
			trigger_FG4();
 8002494:	f001 ffbe 	bl	8004414 <trigger_FG4>
			debug_send_process((char*)&str_ack, starting_pos_local, relative_pos_local, (char*)"TRIGGER_FG4_pulse");
 8002498:	edd7 7a03 	vldr	s15, [r7, #12]
 800249c:	491b      	ldr	r1, [pc, #108]	; (800250c <f_FG4_wach+0x114>)
 800249e:	edd7 0a06 	vldr	s1, [r7, #24]
 80024a2:	eeb0 0a67 	vmov.f32	s0, s15
 80024a6:	481a      	ldr	r0, [pc, #104]	; (8002510 <f_FG4_wach+0x118>)
 80024a8:	f000 fed8 	bl	800325c <debug_send_process>
			state = 2;
 80024ac:	2302      	movs	r3, #2
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	e7ae      	b.n	8002410 <f_FG4_wach+0x18>
		}
	}else if (state == 2){
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d1ab      	bne.n	8002410 <f_FG4_wach+0x18>
		state = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
		reusable_optical_curtain = get_current_conveyor_pos();
 80024bc:	f001 f99a 	bl	80037f4 <get_current_conveyor_pos>
 80024c0:	ed87 0a05 	vstr	s0, [r7, #20]
		relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 80024c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80024cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024d0:	edc7 7a06 	vstr	s15, [r7, #24]
		debug_send_process((char*)&str_success, starting_pos_local, relative_pos_local, (char*)"DONE!");
 80024d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <f_FG4_wach+0x11c>)
 80024da:	edd7 0a06 	vldr	s1, [r7, #24]
 80024de:	eeb0 0a67 	vmov.f32	s0, s15
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <f_FG4_wach+0x120>)
 80024e4:	f000 feba 	bl	800325c <debug_send_process>
		count_done++;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <f_FG4_wach+0x124>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <f_FG4_wach+0x124>)
 80024f8:	edc3 7a00 	vstr	s15, [r3]
		debug_send_done_discard();
 80024fc:	f000 ff6e 	bl	80033dc <debug_send_done_discard>
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 8002500:	e786      	b.n	8002410 <f_FG4_wach+0x18>
 8002502:	bf00      	nop
 8002504:	200008a0 	.word	0x200008a0
 8002508:	45066000 	.word	0x45066000
 800250c:	08024238 	.word	0x08024238
 8002510:	08028028 	.word	0x08028028
 8002514:	0802424c 	.word	0x0802424c
 8002518:	08028020 	.word	0x08028020
 800251c:	2000030c 	.word	0x2000030c

08002520 <f_DISCARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_f_DISCARD */
void f_DISCARD(void *argument)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_DISCARD */
  float starting_pos_local=0;
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
  float relative_pos_local=0;
 800252e:	f04f 0300 	mov.w	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
  int state = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
  float reusable_optical_curtain;
  osStatus_t status = osError;
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	if(state == 0){
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d11a      	bne.n	800257a <f_DISCARD+0x5a>
		status = osMessageQueueGet(DISCARD_queueHandle, &starting_pos_local, (uint8_t *)NULL, 0);
 8002544:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <f_DISCARD+0xd8>)
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	f107 010c 	add.w	r1, r7, #12
 800254c:	2300      	movs	r3, #0
 800254e:	2200      	movs	r2, #0
 8002550:	f00c fb1c 	bl	800eb8c <osMessageQueueGet>
 8002554:	6178      	str	r0, [r7, #20]
		if (status == osOK){
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d140      	bne.n	80025de <f_DISCARD+0xbe>
			reusable_optical_curtain = get_current_conveyor_pos();
 800255c:	f001 f94a 	bl	80037f4 <get_current_conveyor_pos>
 8002560:	ed87 0a04 	vstr	s0, [r7, #16]
			relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 8002564:	edd7 7a03 	vldr	s15, [r7, #12]
 8002568:	ed97 7a04 	vldr	s14, [r7, #16]
 800256c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002570:	edc7 7a06 	vstr	s15, [r7, #24]
			if(ENABLE_QUEUE_RESULT)debug_send_process((char*)&str_success, starting_pos_local, relative_pos_local, (char*)"DISCARD_queue_rx");
			state = 1;
 8002574:	2301      	movs	r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	e031      	b.n	80025de <f_DISCARD+0xbe>
		}
	}else if(state == 1){
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d12e      	bne.n	80025de <f_DISCARD+0xbe>
		reusable_optical_curtain = get_current_conveyor_pos();
 8002580:	f001 f938 	bl	80037f4 <get_current_conveyor_pos>
 8002584:	ed87 0a04 	vstr	s0, [r7, #16]
		relative_pos_local =  reusable_optical_curtain - starting_pos_local;
 8002588:	edd7 7a03 	vldr	s15, [r7, #12]
 800258c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002590:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002594:	edc7 7a06 	vstr	s15, [r7, #24]
		if(relative_pos_local>(DISCARD_POS-TOLERANCE_TRG)){
 8002598:	edd7 7a06 	vldr	s15, [r7, #24]
 800259c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80025fc <f_DISCARD+0xdc>
 80025a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a8:	dd19      	ble.n	80025de <f_DISCARD+0xbe>
			trigger_DISCARD();
 80025aa:	f001 ff5b 	bl	8004464 <trigger_DISCARD>
			debug_send_process((char*)&str_ack, starting_pos_local, relative_pos_local, (char*)"TRIGGER_DISCARD_pulse");
 80025ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80025b2:	4913      	ldr	r1, [pc, #76]	; (8002600 <f_DISCARD+0xe0>)
 80025b4:	edd7 0a06 	vldr	s1, [r7, #24]
 80025b8:	eeb0 0a67 	vmov.f32	s0, s15
 80025bc:	4811      	ldr	r0, [pc, #68]	; (8002604 <f_DISCARD+0xe4>)
 80025be:	f000 fe4d 	bl	800325c <debug_send_process>
			count_discard++;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <f_DISCARD+0xe8>)
 80025c4:	edd3 7a00 	vldr	s15, [r3]
 80025c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025d0:	4b0d      	ldr	r3, [pc, #52]	; (8002608 <f_DISCARD+0xe8>)
 80025d2:	edc3 7a00 	vstr	s15, [r3]
			debug_send_done_discard();
 80025d6:	f000 ff01 	bl	80033dc <debug_send_done_discard>
			state = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
		}
	}
	osDelay(get_ticks_from_ms(TIM_SLEEP_QUEUES));
 80025de:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80025e2:	f7fe fc19 	bl	8000e18 <get_ticks_from_ms>
 80025e6:	eef0 7a40 	vmov.f32	s15, s0
 80025ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ee:	ee17 0a90 	vmov	r0, s15
 80025f2:	f00b fdf1 	bl	800e1d8 <osDelay>
	if(state == 0){
 80025f6:	e7a2      	b.n	800253e <f_DISCARD+0x1e>
 80025f8:	20000890 	.word	0x20000890
 80025fc:	450fc000 	.word	0x450fc000
 8002600:	08024254 	.word	0x08024254
 8002604:	08028028 	.word	0x08028028
 8002608:	20000308 	.word	0x20000308

0800260c <f_command_handl>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_f_command_handl */
void f_command_handl(void *argument)
{
 800260c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002610:	b0a5      	sub	sp, #148	; 0x94
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  queue_commandRx queue_commandRx_local;
  /* Infinite loop */
  for(;;)
  {

	status = osMessageQueueGet(command_rx_queueHandle, &queue_commandRx_local, (uint8_t *)NULL, 0);
 8002616:	4bc0      	ldr	r3, [pc, #768]	; (8002918 <f_command_handl+0x30c>)
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	f107 0108 	add.w	r1, r7, #8
 800261e:	2300      	movs	r3, #0
 8002620:	2200      	movs	r2, #0
 8002622:	f00c fab3 	bl	800eb8c <osMessageQueueGet>
 8002626:	67f8      	str	r0, [r7, #124]	; 0x7c
	if (status == osOK) {
 8002628:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 8268 	bne.w	8002b00 <f_command_handl+0x4f4>
 8002630:	466b      	mov	r3, sp
 8002632:	461e      	mov	r6, r3
		char local_message[queue_commandRx_local.len-2 + 1]; // not considering start and end delimiters
 8002634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002636:	1e59      	subs	r1, r3, #1
 8002638:	1e4b      	subs	r3, r1, #1
 800263a:	67bb      	str	r3, [r7, #120]	; 0x78
 800263c:	460a      	mov	r2, r1
 800263e:	2300      	movs	r3, #0
 8002640:	4614      	mov	r4, r2
 8002642:	461d      	mov	r5, r3
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	460a      	mov	r2, r1
 8002656:	2300      	movs	r3, #0
 8002658:	4690      	mov	r8, r2
 800265a:	4699      	mov	r9, r3
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002668:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800266c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002670:	460b      	mov	r3, r1
 8002672:	3307      	adds	r3, #7
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	ebad 0d03 	sub.w	sp, sp, r3
 800267c:	466b      	mov	r3, sp
 800267e:	3300      	adds	r3, #0
 8002680:	677b      	str	r3, [r7, #116]	; 0x74
		int s = sizeof local_message;
 8002682:	6739      	str	r1, [r7, #112]	; 0x70
		memcpy(local_message, queue_commandRx_local.msg + 1, s); // ignoring start
 8002684:	f107 0308 	add.w	r3, r7, #8
 8002688:	3301      	adds	r3, #1
 800268a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800268c:	4619      	mov	r1, r3
 800268e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002690:	f020 fd3e 	bl	8023110 <memcpy>
		local_message[s-1]='\0';
 8002694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002696:	3b01      	subs	r3, #1
 8002698:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800269a:	2100      	movs	r1, #0
 800269c:	54d1      	strb	r1, [r2, r3]

		char *pointer_sub_message = strtok( (char *)&local_message, COMMAND_HANDLER_DELIMITER_STR);
 800269e:	499f      	ldr	r1, [pc, #636]	; (800291c <f_command_handl+0x310>)
 80026a0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80026a2:	f020 fbff 	bl	8022ea4 <strtok>
 80026a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		char *command;
		char *value;


		int cnt = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		while (pointer_sub_message != NULL){
 80026b0:	e023      	b.n	80026fa <f_command_handl+0xee>
		  if (cnt == 0) {
 80026b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d108      	bne.n	80026cc <f_command_handl+0xc0>
			  command = pointer_sub_message;
 80026ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			  debug_send_echo(command);
 80026c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80026c6:	f000 fd3d 	bl	8003144 <debug_send_echo>
 80026ca:	e00b      	b.n	80026e4 <f_command_handl+0xd8>
		  }
		  else if (cnt == 1) {
 80026cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <f_command_handl+0xd8>
			  value = pointer_sub_message;
 80026d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  debug_send_echo(value);
 80026dc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80026e0:	f000 fd30 	bl	8003144 <debug_send_echo>
		  }
		  pointer_sub_message = strtok(NULL, COMMAND_HANDLER_DELIMITER_STR);
 80026e4:	498d      	ldr	r1, [pc, #564]	; (800291c <f_command_handl+0x310>)
 80026e6:	2000      	movs	r0, #0
 80026e8:	f020 fbdc 	bl	8022ea4 <strtok>
 80026ec:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  cnt++;
 80026f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026f4:	3301      	adds	r3, #1
 80026f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		while (pointer_sub_message != NULL){
 80026fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1d7      	bne.n	80026b2 <f_command_handl+0xa6>
		}

		if(strcmp((char *)command, "PING") == 0){
 8002702:	4987      	ldr	r1, [pc, #540]	; (8002920 <f_command_handl+0x314>)
 8002704:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002708:	f7fd fd82 	bl	8000210 <strcmp>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <f_command_handl+0x10e>
			debug_send_ack("OK_");
 8002712:	4884      	ldr	r0, [pc, #528]	; (8002924 <f_command_handl+0x318>)
 8002714:	f000 fd6a 	bl	80031ec <debug_send_ack>
 8002718:	e1f1      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "EN_ACK_POS") == 0){
 800271a:	4983      	ldr	r1, [pc, #524]	; (8002928 <f_command_handl+0x31c>)
 800271c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002720:	f7fd fd76 	bl	8000210 <strcmp>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10f      	bne.n	800274a <f_command_handl+0x13e>
			if(strcmp(value, "true") == 0){
 800272a:	4980      	ldr	r1, [pc, #512]	; (800292c <f_command_handl+0x320>)
 800272c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002730:	f7fd fd6e 	bl	8000210 <strcmp>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d103      	bne.n	8002742 <f_command_handl+0x136>
				en_ackn_pos = true;
 800273a:	4b7d      	ldr	r3, [pc, #500]	; (8002930 <f_command_handl+0x324>)
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	e1dd      	b.n	8002afe <f_command_handl+0x4f2>
			}else{
				en_ackn_pos = false;
 8002742:	4b7b      	ldr	r3, [pc, #492]	; (8002930 <f_command_handl+0x324>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e1d9      	b.n	8002afe <f_command_handl+0x4f2>
			}
		}
		else if (strcmp((char *)command, "OC_EVENT") == 0){
 800274a:	497a      	ldr	r1, [pc, #488]	; (8002934 <f_command_handl+0x328>)
 800274c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002750:	f7fd fd5e 	bl	8000210 <strcmp>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d102      	bne.n	8002760 <f_command_handl+0x154>
			callback_trigger_optical_curtain();
 800275a:	f000 ff9b 	bl	8003694 <callback_trigger_optical_curtain>
 800275e:	e1ce      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_RPI") == 0){
 8002760:	4975      	ldr	r1, [pc, #468]	; (8002938 <f_command_handl+0x32c>)
 8002762:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002766:	f7fd fd53 	bl	8000210 <strcmp>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d102      	bne.n	8002776 <f_command_handl+0x16a>
			trigger_RPI();
 8002770:	f001 fd88 	bl	8004284 <trigger_RPI>
 8002774:	e1c3      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_RPI_H") == 0){
 8002776:	4971      	ldr	r1, [pc, #452]	; (800293c <f_command_handl+0x330>)
 8002778:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800277c:	f7fd fd48 	bl	8000210 <strcmp>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <f_command_handl+0x180>
			on_trigger_RPI();
 8002786:	f001 fd65 	bl	8004254 <on_trigger_RPI>
 800278a:	e1b8      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_RPI_L") == 0){
 800278c:	496c      	ldr	r1, [pc, #432]	; (8002940 <f_command_handl+0x334>)
 800278e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002792:	f7fd fd3d 	bl	8000210 <strcmp>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d102      	bne.n	80027a2 <f_command_handl+0x196>
			off_trigger_RPI();
 800279c:	f001 fd66 	bl	800426c <off_trigger_RPI>
 80027a0:	e1ad      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_KEYENCE") == 0){
 80027a2:	4968      	ldr	r1, [pc, #416]	; (8002944 <f_command_handl+0x338>)
 80027a4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80027a8:	f7fd fd32 	bl	8000210 <strcmp>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <f_command_handl+0x1ac>
			trigger_KEYENCE();
 80027b2:	f001 fd8f 	bl	80042d4 <trigger_KEYENCE>
 80027b6:	e1a2      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_KEYENCE_H") == 0){
 80027b8:	4963      	ldr	r1, [pc, #396]	; (8002948 <f_command_handl+0x33c>)
 80027ba:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80027be:	f7fd fd27 	bl	8000210 <strcmp>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <f_command_handl+0x1c2>
			on_trigger_KEYENCE();
 80027c8:	f001 fd6c 	bl	80042a4 <on_trigger_KEYENCE>
 80027cc:	e197      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_KEYENCE_L") == 0){
 80027ce:	495f      	ldr	r1, [pc, #380]	; (800294c <f_command_handl+0x340>)
 80027d0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80027d4:	f7fd fd1c 	bl	8000210 <strcmp>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <f_command_handl+0x1d8>
			off_trigger_KEYENCE();
 80027de:	f001 fd6d 	bl	80042bc <off_trigger_KEYENCE>
 80027e2:	e18c      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG1") == 0){
 80027e4:	495a      	ldr	r1, [pc, #360]	; (8002950 <f_command_handl+0x344>)
 80027e6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80027ea:	f7fd fd11 	bl	8000210 <strcmp>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d102      	bne.n	80027fa <f_command_handl+0x1ee>
			trigger_FG1();
 80027f4:	f001 fd96 	bl	8004324 <trigger_FG1>
 80027f8:	e181      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG1_H") == 0){
 80027fa:	4956      	ldr	r1, [pc, #344]	; (8002954 <f_command_handl+0x348>)
 80027fc:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002800:	f7fd fd06 	bl	8000210 <strcmp>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <f_command_handl+0x204>
			on_trigger_FG1();
 800280a:	f001 fd73 	bl	80042f4 <on_trigger_FG1>
 800280e:	e176      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG1_L") == 0){
 8002810:	4951      	ldr	r1, [pc, #324]	; (8002958 <f_command_handl+0x34c>)
 8002812:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002816:	f7fd fcfb 	bl	8000210 <strcmp>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <f_command_handl+0x21a>
			off_trigger_FG1();
 8002820:	f001 fd74 	bl	800430c <off_trigger_FG1>
 8002824:	e16b      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG2") == 0){
 8002826:	494d      	ldr	r1, [pc, #308]	; (800295c <f_command_handl+0x350>)
 8002828:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800282c:	f7fd fcf0 	bl	8000210 <strcmp>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d102      	bne.n	800283c <f_command_handl+0x230>
			trigger_FG2();
 8002836:	f001 fd9d 	bl	8004374 <trigger_FG2>
 800283a:	e160      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG2_H") == 0){
 800283c:	4948      	ldr	r1, [pc, #288]	; (8002960 <f_command_handl+0x354>)
 800283e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002842:	f7fd fce5 	bl	8000210 <strcmp>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d102      	bne.n	8002852 <f_command_handl+0x246>
			on_trigger_FG2();
 800284c:	f001 fd7a 	bl	8004344 <on_trigger_FG2>
 8002850:	e155      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG2_L") == 0){
 8002852:	4944      	ldr	r1, [pc, #272]	; (8002964 <f_command_handl+0x358>)
 8002854:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002858:	f7fd fcda 	bl	8000210 <strcmp>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d102      	bne.n	8002868 <f_command_handl+0x25c>
			off_trigger_FG2();
 8002862:	f001 fd7b 	bl	800435c <off_trigger_FG2>
 8002866:	e14a      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG3") == 0){
 8002868:	493f      	ldr	r1, [pc, #252]	; (8002968 <f_command_handl+0x35c>)
 800286a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800286e:	f7fd fccf 	bl	8000210 <strcmp>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <f_command_handl+0x272>
			trigger_FG3();
 8002878:	f001 fda4 	bl	80043c4 <trigger_FG3>
 800287c:	e13f      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG3_H") == 0){
 800287e:	493b      	ldr	r1, [pc, #236]	; (800296c <f_command_handl+0x360>)
 8002880:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002884:	f7fd fcc4 	bl	8000210 <strcmp>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <f_command_handl+0x288>
			on_trigger_FG3();
 800288e:	f001 fd81 	bl	8004394 <on_trigger_FG3>
 8002892:	e134      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG3_L") == 0){
 8002894:	4936      	ldr	r1, [pc, #216]	; (8002970 <f_command_handl+0x364>)
 8002896:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800289a:	f7fd fcb9 	bl	8000210 <strcmp>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <f_command_handl+0x29e>
			off_trigger_FG3();
 80028a4:	f001 fd82 	bl	80043ac <off_trigger_FG3>
 80028a8:	e129      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG4") == 0){
 80028aa:	4932      	ldr	r1, [pc, #200]	; (8002974 <f_command_handl+0x368>)
 80028ac:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80028b0:	f7fd fcae 	bl	8000210 <strcmp>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d102      	bne.n	80028c0 <f_command_handl+0x2b4>
			trigger_FG4();
 80028ba:	f001 fdab 	bl	8004414 <trigger_FG4>
 80028be:	e11e      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG4_H") == 0){
 80028c0:	492d      	ldr	r1, [pc, #180]	; (8002978 <f_command_handl+0x36c>)
 80028c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80028c6:	f7fd fca3 	bl	8000210 <strcmp>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d102      	bne.n	80028d6 <f_command_handl+0x2ca>
			on_trigger_FG4();
 80028d0:	f001 fd88 	bl	80043e4 <on_trigger_FG4>
 80028d4:	e113      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_FG4_L") == 0){
 80028d6:	4929      	ldr	r1, [pc, #164]	; (800297c <f_command_handl+0x370>)
 80028d8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80028dc:	f7fd fc98 	bl	8000210 <strcmp>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <f_command_handl+0x2e0>
			off_trigger_FG4();
 80028e6:	f001 fd89 	bl	80043fc <off_trigger_FG4>
 80028ea:	e108      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_DISCARD") == 0){
 80028ec:	4924      	ldr	r1, [pc, #144]	; (8002980 <f_command_handl+0x374>)
 80028ee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80028f2:	f7fd fc8d 	bl	8000210 <strcmp>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <f_command_handl+0x2f6>
			trigger_DISCARD();
 80028fc:	f001 fdb2 	bl	8004464 <trigger_DISCARD>
 8002900:	e0fd      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TRIGGER_DISCARD_H") == 0){
 8002902:	4920      	ldr	r1, [pc, #128]	; (8002984 <f_command_handl+0x378>)
 8002904:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002908:	f7fd fc82 	bl	8000210 <strcmp>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d13a      	bne.n	8002988 <f_command_handl+0x37c>
			on_trigger_DISCARD();
 8002912:	f001 fd8f 	bl	8004434 <on_trigger_DISCARD>
 8002916:	e0f2      	b.n	8002afe <f_command_handl+0x4f2>
 8002918:	20000878 	.word	0x20000878
 800291c:	0802426c 	.word	0x0802426c
 8002920:	08024270 	.word	0x08024270
 8002924:	08024278 	.word	0x08024278
 8002928:	0802427c 	.word	0x0802427c
 800292c:	08024288 	.word	0x08024288
 8002930:	20000000 	.word	0x20000000
 8002934:	08024290 	.word	0x08024290
 8002938:	0802429c 	.word	0x0802429c
 800293c:	080242a8 	.word	0x080242a8
 8002940:	080242b8 	.word	0x080242b8
 8002944:	080242c8 	.word	0x080242c8
 8002948:	080242d8 	.word	0x080242d8
 800294c:	080242ec 	.word	0x080242ec
 8002950:	08024300 	.word	0x08024300
 8002954:	0802430c 	.word	0x0802430c
 8002958:	0802431c 	.word	0x0802431c
 800295c:	0802432c 	.word	0x0802432c
 8002960:	08024338 	.word	0x08024338
 8002964:	08024348 	.word	0x08024348
 8002968:	08024358 	.word	0x08024358
 800296c:	08024364 	.word	0x08024364
 8002970:	08024374 	.word	0x08024374
 8002974:	08024384 	.word	0x08024384
 8002978:	08024390 	.word	0x08024390
 800297c:	080243a0 	.word	0x080243a0
 8002980:	080243b0 	.word	0x080243b0
 8002984:	080243c0 	.word	0x080243c0
		}
		else if(strcmp((char *)command, "TRIGGER_DISCARD_L") == 0){
 8002988:	4964      	ldr	r1, [pc, #400]	; (8002b1c <f_command_handl+0x510>)
 800298a:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800298e:	f7fd fc3f 	bl	8000210 <strcmp>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <f_command_handl+0x392>
			off_trigger_DISCARD();
 8002998:	f001 fd58 	bl	800444c <off_trigger_DISCARD>
 800299c:	e0af      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TX_TCP_RPI") == 0){
 800299e:	4960      	ldr	r1, [pc, #384]	; (8002b20 <f_command_handl+0x514>)
 80029a0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029a4:	f7fd fc34 	bl	8000210 <strcmp>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <f_command_handl+0x3ac>
			send_tcp_to_RPI(value);
 80029ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80029b2:	f000 f8f5 	bl	8002ba0 <send_tcp_to_RPI>
 80029b6:	e0a2      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TX_TCP_KEYENCE") == 0){
 80029b8:	495a      	ldr	r1, [pc, #360]	; (8002b24 <f_command_handl+0x518>)
 80029ba:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029be:	f7fd fc27 	bl	8000210 <strcmp>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <f_command_handl+0x3c6>
			send_tcp_to_KEYENCE(value);
 80029c8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80029cc:	f000 f8fc 	bl	8002bc8 <send_tcp_to_KEYENCE>
 80029d0:	e095      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "TX_TCP_FG1") == 0){
 80029d2:	4955      	ldr	r1, [pc, #340]	; (8002b28 <f_command_handl+0x51c>)
 80029d4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029d8:	f7fd fc1a 	bl	8000210 <strcmp>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d104      	bne.n	80029ec <f_command_handl+0x3e0>
			send_tcp_to_FG1(value);
 80029e2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80029e6:	f000 f903 	bl	8002bf0 <send_tcp_to_FG1>
 80029ea:	e088      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if (strcmp((char *)command, "CLASSIFIER") == 0){
 80029ec:	494f      	ldr	r1, [pc, #316]	; (8002b2c <f_command_handl+0x520>)
 80029ee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80029f2:	f7fd fc0d 	bl	8000210 <strcmp>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <f_command_handl+0x3fa>
			send_to_CLASSIFIER_queue(value);
 80029fc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002a00:	f7ff f912 	bl	8001c28 <send_to_CLASSIFIER_queue>
 8002a04:	e07b      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if (strcmp((char *)command, "ORIENTATION") == 0){
 8002a06:	494a      	ldr	r1, [pc, #296]	; (8002b30 <f_command_handl+0x524>)
 8002a08:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a0c:	f7fd fc00 	bl	8000210 <strcmp>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d104      	bne.n	8002a20 <f_command_handl+0x414>
			send_to_ORIENTATION_queue(value);
 8002a16:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002a1a:	f7ff f9fd 	bl	8001e18 <send_to_ORIENTATION_queue>
 8002a1e:	e06e      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "SIMULATOR_OC_TRIGGER") == 0){
 8002a20:	4944      	ldr	r1, [pc, #272]	; (8002b34 <f_command_handl+0x528>)
 8002a22:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a26:	f7fd fbf3 	bl	8000210 <strcmp>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d102      	bne.n	8002a36 <f_command_handl+0x42a>
			trigger_simulator_oc_event();
 8002a30:	f001 fd28 	bl	8004484 <trigger_simulator_oc_event>
 8002a34:	e063      	b.n	8002afe <f_command_handl+0x4f2>
		}
		else if(strcmp((char *)command, "EN_PERIOD_OC_EVENT_SIM") == 0){
 8002a36:	4940      	ldr	r1, [pc, #256]	; (8002b38 <f_command_handl+0x52c>)
 8002a38:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a3c:	f7fd fbe8 	bl	8000210 <strcmp>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d116      	bne.n	8002a74 <f_command_handl+0x468>
			if(strcmp(value, "true") == 0){
 8002a46:	493d      	ldr	r1, [pc, #244]	; (8002b3c <f_command_handl+0x530>)
 8002a48:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002a4c:	f7fd fbe0 	bl	8000210 <strcmp>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <f_command_handl+0x460>
				en_period_oc_print = true;
 8002a56:	4b3a      	ldr	r3, [pc, #232]	; (8002b40 <f_command_handl+0x534>)
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
				en_period_oc_event_sim = true;
 8002a5c:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <f_command_handl+0x538>)
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
				sim_per_oc_end_pos = 0;
 8002a62:	4b39      	ldr	r3, [pc, #228]	; (8002b48 <f_command_handl+0x53c>)
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e048      	b.n	8002afe <f_command_handl+0x4f2>
			}else{
				en_period_oc_event_sim = false;
 8002a6c:	4b35      	ldr	r3, [pc, #212]	; (8002b44 <f_command_handl+0x538>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e044      	b.n	8002afe <f_command_handl+0x4f2>
			}
		}
		else if(strcmp((char *)command, "INDIC_R") == 0){
 8002a74:	4935      	ldr	r1, [pc, #212]	; (8002b4c <f_command_handl+0x540>)
 8002a76:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002a7a:	f7fd fbc9 	bl	8000210 <strcmp>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10d      	bne.n	8002aa0 <f_command_handl+0x494>
			if(strcmp(value, "true") == 0){
 8002a84:	492d      	ldr	r1, [pc, #180]	; (8002b3c <f_command_handl+0x530>)
 8002a86:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002a8a:	f7fd fbc1 	bl	8000210 <strcmp>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <f_command_handl+0x48e>
				turn_on_Indicator_R();
 8002a94:	f001 fd10 	bl	80044b8 <turn_on_Indicator_R>
 8002a98:	e031      	b.n	8002afe <f_command_handl+0x4f2>
			}else{
				turn_off_Indicator_R();
 8002a9a:	f001 fd19 	bl	80044d0 <turn_off_Indicator_R>
 8002a9e:	e02e      	b.n	8002afe <f_command_handl+0x4f2>
			}
		}
		else if(strcmp((char *)command, "INDIC_G") == 0){
 8002aa0:	492b      	ldr	r1, [pc, #172]	; (8002b50 <f_command_handl+0x544>)
 8002aa2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002aa6:	f7fd fbb3 	bl	8000210 <strcmp>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <f_command_handl+0x4c0>
			if(strcmp(value, "true") == 0){
 8002ab0:	4922      	ldr	r1, [pc, #136]	; (8002b3c <f_command_handl+0x530>)
 8002ab2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002ab6:	f7fd fbab 	bl	8000210 <strcmp>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <f_command_handl+0x4ba>
				turn_on_Indicator_G();
 8002ac0:	f001 fd12 	bl	80044e8 <turn_on_Indicator_G>
 8002ac4:	e01b      	b.n	8002afe <f_command_handl+0x4f2>
			}else{
				turn_off_Indicator_G();
 8002ac6:	f001 fd1b 	bl	8004500 <turn_off_Indicator_G>
 8002aca:	e018      	b.n	8002afe <f_command_handl+0x4f2>
			}
		}
		else if(strcmp((char *)command, "INDIC_B") == 0){
 8002acc:	4921      	ldr	r1, [pc, #132]	; (8002b54 <f_command_handl+0x548>)
 8002ace:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002ad2:	f7fd fb9d 	bl	8000210 <strcmp>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <f_command_handl+0x4ec>
			if(strcmp(value, "true") == 0){
 8002adc:	4917      	ldr	r1, [pc, #92]	; (8002b3c <f_command_handl+0x530>)
 8002ade:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002ae2:	f7fd fb95 	bl	8000210 <strcmp>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d102      	bne.n	8002af2 <f_command_handl+0x4e6>
				turn_on_Indicator_B();
 8002aec:	f001 fd14 	bl	8004518 <turn_on_Indicator_B>
 8002af0:	e005      	b.n	8002afe <f_command_handl+0x4f2>
			}else{
				turn_off_Indicator_B();
 8002af2:	f001 fd1d 	bl	8004530 <turn_off_Indicator_B>
 8002af6:	e002      	b.n	8002afe <f_command_handl+0x4f2>
			}
		}
		else{
			  debug_send_error("COMMAND_NOT_RECOG");
 8002af8:	4817      	ldr	r0, [pc, #92]	; (8002b58 <f_command_handl+0x54c>)
 8002afa:	f000 fb3f 	bl	800317c <debug_send_error>
 8002afe:	46b5      	mov	sp, r6
		}
	}
	osDelay(get_ticks_from_ms(TIM_SLEEP_COMMAND_H));
 8002b00:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002b5c <f_command_handl+0x550>
 8002b04:	f7fe f988 	bl	8000e18 <get_ticks_from_ms>
 8002b08:	eef0 7a40 	vmov.f32	s15, s0
 8002b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b10:	ee17 0a90 	vmov	r0, s15
 8002b14:	f00b fb60 	bl	800e1d8 <osDelay>
	status = osMessageQueueGet(command_rx_queueHandle, &queue_commandRx_local, (uint8_t *)NULL, 0);
 8002b18:	e57d      	b.n	8002616 <f_command_handl+0xa>
 8002b1a:	bf00      	nop
 8002b1c:	080243d4 	.word	0x080243d4
 8002b20:	080243e8 	.word	0x080243e8
 8002b24:	080243f4 	.word	0x080243f4
 8002b28:	08024404 	.word	0x08024404
 8002b2c:	08024410 	.word	0x08024410
 8002b30:	0802441c 	.word	0x0802441c
 8002b34:	08024428 	.word	0x08024428
 8002b38:	08024440 	.word	0x08024440
 8002b3c:	08024288 	.word	0x08024288
 8002b40:	200002fd 	.word	0x200002fd
 8002b44:	200002fc 	.word	0x200002fc
 8002b48:	2000031c 	.word	0x2000031c
 8002b4c:	08024458 	.word	0x08024458
 8002b50:	08024460 	.word	0x08024460
 8002b54:	08024468 	.word	0x08024468
 8002b58:	08024470 	.word	0x08024470
 8002b5c:	42c80000 	.word	0x42c80000

08002b60 <send_tcp_to_station>:
}

/* USER CODE BEGIN Header_f_send_tcp */


osStatus_t send_tcp_to_station(char* value, char * str_station_name, struct netconn *conn_var){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b096      	sub	sp, #88	; 0x58
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
	queue_tx_rx_tcp local_var;
	strcpy((char *)&local_var.msg, value);
 8002b6c:	f107 0310 	add.w	r3, r7, #16
 8002b70:	68f9      	ldr	r1, [r7, #12]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f020 fac4 	bl	8023100 <strcpy>
	local_var.conn = conn_var;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
	local_var.point_conn_name = str_station_name;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	653b      	str	r3, [r7, #80]	; 0x50
	osStatus_t r = osMessageQueuePut(tx_tcp_queueHandle, &local_var, (uint8_t)0, 2);
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <send_tcp_to_station+0x3c>)
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	f107 0110 	add.w	r1, r7, #16
 8002b88:	2302      	movs	r3, #2
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f00b ff8a 	bl	800eaa4 <osMessageQueuePut>
 8002b90:	6578      	str	r0, [r7, #84]	; 0x54
	return r;
 8002b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3758      	adds	r7, #88	; 0x58
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200008a4 	.word	0x200008a4

08002ba0 <send_tcp_to_RPI>:

void send_tcp_to_RPI(char* value){
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	osStatus_t r = send_tcp_to_station(value, (char *)&str_RPI, conn_RPI);
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <send_tcp_to_RPI+0x20>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4905      	ldr	r1, [pc, #20]	; (8002bc4 <send_tcp_to_RPI+0x24>)
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ffd5 	bl	8002b60 <send_tcp_to_station>
 8002bb6:	60f8      	str	r0, [r7, #12]
	if(ENABLE_QUEUE_RESULT)debug_send_queue_result(r, "TX_TCP_RPI_queue_tx");
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000320 	.word	0x20000320
 8002bc4:	08027ffc 	.word	0x08027ffc

08002bc8 <send_tcp_to_KEYENCE>:

void send_tcp_to_KEYENCE(char* value){
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
	osStatus_t r = send_tcp_to_station(value, (char *)&str_KEYENCE, conn_KEYENCE);
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <send_tcp_to_KEYENCE+0x20>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4905      	ldr	r1, [pc, #20]	; (8002bec <send_tcp_to_KEYENCE+0x24>)
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ffc1 	bl	8002b60 <send_tcp_to_station>
 8002bde:	60f8      	str	r0, [r7, #12]
	if(ENABLE_QUEUE_RESULT)debug_send_queue_result(r, "TX_TCP_KEYENCE_queue_tx");
}
 8002be0:	bf00      	nop
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000324 	.word	0x20000324
 8002bec:	08028000 	.word	0x08028000

08002bf0 <send_tcp_to_FG1>:

void send_tcp_to_FG1(char* value){
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	osStatus_t r = send_tcp_to_station(value, (char *)&str_FG1, conn_FG1);
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <send_tcp_to_FG1+0x20>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4905      	ldr	r1, [pc, #20]	; (8002c14 <send_tcp_to_FG1+0x24>)
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ffad 	bl	8002b60 <send_tcp_to_station>
 8002c06:	60f8      	str	r0, [r7, #12]
	if(ENABLE_QUEUE_RESULT)debug_send_queue_result(r, "TX_TCP_FG1_queue_tx");
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000328 	.word	0x20000328
 8002c14:	08028008 	.word	0x08028008

08002c18 <f_send_tcp>:


/* USER CODE END Header_f_send_tcp */
void f_send_tcp(void *argument)
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b099      	sub	sp, #100	; 0x64
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_send_tcp */
  osStatus_t status;
  queue_tx_rx_tcp ms;
  vTaskSuspend(NULL);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f00e f8d5 	bl	8010dd0 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	status = osMessageQueueGet(tx_tcp_queueHandle, &ms, (uint8_t *)NULL, 0);
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <f_send_tcp+0xa8>)
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	f107 0108 	add.w	r1, r7, #8
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2200      	movs	r2, #0
 8002c32:	f00b ffab 	bl	800eb8c <osMessageQueueGet>
 8002c36:	6578      	str	r0, [r7, #84]	; 0x54
	if (status == osOK) {
 8002c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d133      	bne.n	8002ca6 <f_send_tcp+0x8e>
		struct tcp_pcb * tcp = ms.conn->pcb.tcp;
 8002c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	653b      	str	r3, [r7, #80]	; 0x50
		uint8_t state = (uint8_t) tcp->state;
 8002c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c46:	7f1b      	ldrb	r3, [r3, #28]
 8002c48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		debug_message_sent_tcp(state, &ms);
 8002c4c:	f107 0208 	add.w	r2, r7, #8
 8002c50:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c54:	4611      	mov	r1, r2
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fb30 	bl	80032bc <debug_message_sent_tcp>

		if((state == ESTABLISHED)){
 8002c5c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d120      	bne.n	8002ca6 <f_send_tcp+0x8e>
			netconn_set_nonblocking(ms.conn, false);
 8002c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c66:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002c6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6c:	f022 0202 	bic.w	r2, r2, #2
 8002c70:	b2d2      	uxtb	r2, r2
 8002c72:	f883 2020 	strb.w	r2, [r3, #32]
			netconn_write(ms.conn, &ms.msg, strlen((char *) &ms.msg), NETCONN_COPY);
 8002c76:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002c78:	f107 0308 	add.w	r3, r7, #8
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fad1 	bl	8000224 <strlen>
 8002c82:	4602      	mov	r2, r0
 8002c84:	f107 0108 	add.w	r1, r7, #8
 8002c88:	2300      	movs	r3, #0
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	4620      	mov	r0, r4
 8002c90:	f00f ff92 	bl	8012bb8 <netconn_write_partly>
			netconn_set_nonblocking(ms.conn, true);
 8002c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c96:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9c:	f042 0202 	orr.w	r2, r2, #2
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	f883 2020 	strb.w	r2, [r3, #32]
		}
	}
	osDelay(get_ticks_from_ms(TIM_SLEEP_SEND_TCP));
 8002ca6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002caa:	f7fe f8b5 	bl	8000e18 <get_ticks_from_ms>
 8002cae:	eef0 7a40 	vmov.f32	s15, s0
 8002cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cb6:	ee17 0a90 	vmov	r0, s15
 8002cba:	f00b fa8d 	bl	800e1d8 <osDelay>
	status = osMessageQueueGet(tx_tcp_queueHandle, &ms, (uint8_t *)NULL, 0);
 8002cbe:	e7b2      	b.n	8002c26 <f_send_tcp+0xe>
 8002cc0:	200008a4 	.word	0x200008a4

08002cc4 <recv_tcp>:
  /* USER CODE END f_send_tcp */
}

/* USER CODE BEGIN Header_f_recv_tcp */

void recv_tcp(char * str_conn_name, char * msgc, struct netbuf *buf, struct netconn *conn){
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
 8002cd0:	603b      	str	r3, [r7, #0]
	if(conn!= NULL){
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d043      	beq.n	8002d60 <recv_tcp+0x9c>
		if(conn->pcb.tcp->state == ESTABLISHED){
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	7f1b      	ldrb	r3, [r3, #28]
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d13e      	bne.n	8002d60 <recv_tcp+0x9c>
			if (netconn_recv(conn, &buf) == ERR_OK)
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6838      	ldr	r0, [r7, #0]
 8002ce8:	f00f feec 	bl	8012ac4 <netconn_recv>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d136      	bne.n	8002d60 <recv_tcp+0x9c>
			{
				do
				{
					strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	895b      	ldrh	r3, [r3, #10]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	68b8      	ldr	r0, [r7, #8]
 8002d02:	f020 f8bc 	bl	8022e7e <strncpy>
					msgc[buf->p->len] = '\0';
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	895b      	ldrh	r3, [r3, #10]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4413      	add	r3, r2
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]

					debug_message_recv_tcp( str_conn_name, msgc);
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 faef 	bl	80032fc <debug_message_recv_tcp>

					if(conn == conn_RPI){
 8002d1e:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <recv_tcp+0xa4>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d103      	bne.n	8002d30 <recv_tcp+0x6c>
						send_to_CLASSIFIER_queue(msgc);
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f7fe ff7d 	bl	8001c28 <send_to_CLASSIFIER_queue>
 8002d2e:	e007      	b.n	8002d40 <recv_tcp+0x7c>
					}else if(conn == conn_KEYENCE){
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <recv_tcp+0xa8>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d102      	bne.n	8002d40 <recv_tcp+0x7c>
						send_to_ORIENTATION_queue(msgc);
 8002d3a:	68b8      	ldr	r0, [r7, #8]
 8002d3c:	f7ff f86c 	bl	8001e18 <send_to_ORIENTATION_queue>
					}

					memset (msgc, '\0', BUFFER_TCP_RX_SIZE);  // clear the buffer
 8002d40:	223c      	movs	r2, #60	; 0x3c
 8002d42:	2100      	movs	r1, #0
 8002d44:	68b8      	ldr	r0, [r7, #8]
 8002d46:	f020 f892 	bl	8022e6e <memset>
				}
				while (netbuf_next(buf) >0);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f014 fcc7 	bl	80176e0 <netbuf_next>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	dccc      	bgt.n	8002cf2 <recv_tcp+0x2e>
				netbuf_delete(buf);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f014 fca0 	bl	80176a0 <netbuf_delete>
			}
		}
	}
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000320 	.word	0x20000320
 8002d6c:	20000324 	.word	0x20000324

08002d70 <f_recv_tcp>:


/* USER CODE END Header_f_recv_tcp */
void f_recv_tcp(void *argument)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b092      	sub	sp, #72	; 0x48
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_recv_tcp */
	char msgc[BUFFER_TCP_RX_SIZE];
	static struct netbuf *buf;
	vTaskSuspend(NULL);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f00e f829 	bl	8010dd0 <vTaskSuspend>
  /* Infinite loop */
  for(;;)
  {
	recv_tcp((char *)&str_RPI, (char *)&msgc, buf, conn_RPI);
 8002d7e:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <f_recv_tcp+0x60>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <f_recv_tcp+0x64>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f107 010c 	add.w	r1, r7, #12
 8002d8a:	4813      	ldr	r0, [pc, #76]	; (8002dd8 <f_recv_tcp+0x68>)
 8002d8c:	f7ff ff9a 	bl	8002cc4 <recv_tcp>
	recv_tcp((char *)&str_KEYENCE, (char *)&msgc, buf, conn_KEYENCE);
 8002d90:	4b0f      	ldr	r3, [pc, #60]	; (8002dd0 <f_recv_tcp+0x60>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <f_recv_tcp+0x6c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f107 010c 	add.w	r1, r7, #12
 8002d9c:	4810      	ldr	r0, [pc, #64]	; (8002de0 <f_recv_tcp+0x70>)
 8002d9e:	f7ff ff91 	bl	8002cc4 <recv_tcp>
	recv_tcp((char *)&str_FG1, (char *)&msgc, buf, conn_FG1);
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <f_recv_tcp+0x60>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <f_recv_tcp+0x74>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f107 010c 	add.w	r1, r7, #12
 8002dae:	480e      	ldr	r0, [pc, #56]	; (8002de8 <f_recv_tcp+0x78>)
 8002db0:	f7ff ff88 	bl	8002cc4 <recv_tcp>
    osDelay(get_ticks_from_ms(TIM_SLEEP_RECV_TCP));
 8002db4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8002db8:	f7fe f82e 	bl	8000e18 <get_ticks_from_ms>
 8002dbc:	eef0 7a40 	vmov.f32	s15, s0
 8002dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc4:	ee17 0a90 	vmov	r0, s15
 8002dc8:	f00b fa06 	bl	800e1d8 <osDelay>
	recv_tcp((char *)&str_RPI, (char *)&msgc, buf, conn_RPI);
 8002dcc:	e7d7      	b.n	8002d7e <f_recv_tcp+0xe>
 8002dce:	bf00      	nop
 8002dd0:	200008c8 	.word	0x200008c8
 8002dd4:	20000320 	.word	0x20000320
 8002dd8:	08027ffc 	.word	0x08027ffc
 8002ddc:	20000324 	.word	0x20000324
 8002de0:	08028000 	.word	0x08028000
 8002de4:	20000328 	.word	0x20000328
 8002de8:	08028008 	.word	0x08028008

08002dec <conn_init_monitor_tcp>:
}

/* USER CODE BEGIN Header_f_conn_tcp_RPI */

void conn_init_monitor_tcp(char * str_conn_name, struct netconn **pointer_conn, ip4_addr_t* sourc_addr, unsigned short sourc_port,
		ip4_addr_t dest_addr, unsigned short dest_port){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	807b      	strh	r3, [r7, #2]

	err_t err;
	unsigned long time_tcp_var_previous=-1;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned long time_tcp_var_now=-1;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
 8002e04:	623b      	str	r3, [r7, #32]

	vTaskSuspend(NULL);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f00d ffe2 	bl	8010dd0 <vTaskSuspend>
	while(1)
	{
		*pointer_conn = netconn_new(NETCONN_TCP);
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2010      	movs	r0, #16
 8002e12:	f00f fb9f 	bl	8012554 <netconn_new_with_proto_and_callback>
 8002e16:	4602      	mov	r2, r0
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	601a      	str	r2, [r3, #0]
		netconn_set_nonblocking(*pointer_conn, true);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0202 	orr.w	r2, r2, #2
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	f883 2020 	strb.w	r2, [r3, #32]

		debug_init_monitor_tcp(str_conn_name);
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fa78 	bl	8003328 <debug_init_monitor_tcp>

		err = netconn_bind(*pointer_conn, sourc_addr, sourc_port);
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	887a      	ldrh	r2, [r7, #2]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f00f fc41 	bl	80126c8 <netconn_bind>
 8002e46:	4603      	mov	r3, r0
 8002e48:	77bb      	strb	r3, [r7, #30]

		if (err == ERR_OK)
 8002e4a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d159      	bne.n	8002f06 <conn_init_monitor_tcp+0x11a>
		{
			netconn_connect(*pointer_conn, &dest_addr, dest_port);
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e58:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f00f fc6b 	bl	8012738 <netconn_connect>

			time_tcp_var_previous = xTaskGetTickCount();
 8002e62:	f00e f9e3 	bl	801122c <xTaskGetTickCount>
 8002e66:	6278      	str	r0, [r7, #36]	; 0x24
			time_tcp_var_now = time_tcp_var_previous;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	623b      	str	r3, [r7, #32]

			bool fin = false;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	77fb      	strb	r3, [r7, #31]

			while(!fin){
 8002e70:	e027      	b.n	8002ec2 <conn_init_monitor_tcp+0xd6>
				struct tcp_pcb * tcp = (*pointer_conn)->pcb.tcp;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	61bb      	str	r3, [r7, #24]
				uint8_t state = (uint8_t) tcp->state;
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	7f1b      	ldrb	r3, [r3, #28]
 8002e7e:	75fb      	strb	r3, [r7, #23]
				//debug_tcp_connection_state(state);

				if((state == ESTABLISHED)){
 8002e80:	7dfb      	ldrb	r3, [r7, #23]
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d102      	bne.n	8002e8c <conn_init_monitor_tcp+0xa0>
					time_tcp_var_previous = time_tcp_var_now;
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8a:	e00e      	b.n	8002eaa <conn_init_monitor_tcp+0xbe>
				}else{
					time_tcp_var_now = xTaskGetTickCount(); // reset counter if no connection
 8002e8c:	f00e f9ce 	bl	801122c <xTaskGetTickCount>
 8002e90:	6238      	str	r0, [r7, #32]

					if(((time_tcp_var_now - time_tcp_var_previous)>TIM_TCP_SLEEP_TIMEOUT)){
 8002e92:	6a3a      	ldr	r2, [r7, #32]
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d904      	bls.n	8002eaa <conn_init_monitor_tcp+0xbe>
						fin = true;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	77fb      	strb	r3, [r7, #31]
						debug_lost_monitor_tcp(str_conn_name);
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 fa55 	bl	8003354 <debug_lost_monitor_tcp>
					}
				}
				osDelay(get_ticks_from_ms(TIM_TCP_SLEEP_CHECK));
 8002eaa:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8002f14 <conn_init_monitor_tcp+0x128>
 8002eae:	f7fd ffb3 	bl	8000e18 <get_ticks_from_ms>
 8002eb2:	eef0 7a40 	vmov.f32	s15, s0
 8002eb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eba:	ee17 0a90 	vmov	r0, s15
 8002ebe:	f00b f98b 	bl	800e1d8 <osDelay>
			while(!fin){
 8002ec2:	7ffb      	ldrb	r3, [r7, #31]
 8002ec4:	f083 0301 	eor.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1d1      	bne.n	8002e72 <conn_init_monitor_tcp+0x86>
			}

			netconn_close(*pointer_conn);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f00f ff72 	bl	8012dbc <netconn_close>
			netconn_prepare_delete(*pointer_conn);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f00f fbb3 	bl	8012648 <netconn_prepare_delete>
			netconn_delete(*pointer_conn);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f00f fbd2 	bl	8012690 <netconn_delete>
			osDelay(get_ticks_from_ms(TIM_TCP_SLEEP_ATTEMP));
 8002eec:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002f18 <conn_init_monitor_tcp+0x12c>
 8002ef0:	f7fd ff92 	bl	8000e18 <get_ticks_from_ms>
 8002ef4:	eef0 7a40 	vmov.f32	s15, s0
 8002ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002efc:	ee17 0a90 	vmov	r0, s15
 8002f00:	f00b f96a 	bl	800e1d8 <osDelay>
 8002f04:	e782      	b.n	8002e0c <conn_init_monitor_tcp+0x20>

		}else{
			netconn_delete(*pointer_conn);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f00f fbc0 	bl	8012690 <netconn_delete>
		*pointer_conn = netconn_new(NETCONN_TCP);
 8002f10:	e77c      	b.n	8002e0c <conn_init_monitor_tcp+0x20>
 8002f12:	bf00      	nop
 8002f14:	43480000 	.word	0x43480000
 8002f18:	43fa0000 	.word	0x43fa0000

08002f1c <f_conn_tcp_RPI>:
	}

}
/* USER CODE END Header_f_conn_tcp_RPI */
void f_conn_tcp_RPI(void *argument)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	; 0x28
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	6078      	str	r0, [r7, #4]
	unsigned short sourc_port;
	ip4_addr_t dest_addr;
	unsigned short dest_port;
	char * str_conn_name;

	pointer_conn = &conn_RPI;
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <f_conn_tcp_RPI+0x38>)
 8002f26:	61fb      	str	r3, [r7, #28]
	sourc_addr = &ipaddr;
 8002f28:	4b0b      	ldr	r3, [pc, #44]	; (8002f58 <f_conn_tcp_RPI+0x3c>)
 8002f2a:	61bb      	str	r3, [r7, #24]
	sourc_port = RPI_SOURC_PORT;
 8002f2c:	2366      	movs	r3, #102	; 0x66
 8002f2e:	82fb      	strh	r3, [r7, #22]
	IP_ADDR4(&dest_addr, RPI_IP4_1, RPI_IP4_2, RPI_IP4_3, RPI_IP4_4);
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <f_conn_tcp_RPI+0x40>)
 8002f32:	60fb      	str	r3, [r7, #12]
	dest_port = RPI_DEST_PORT;
 8002f34:	230a      	movs	r3, #10
 8002f36:	82bb      	strh	r3, [r7, #20]
	str_conn_name = (char*) &str_RPI;
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <f_conn_tcp_RPI+0x44>)
 8002f3a:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	conn_init_monitor_tcp(str_conn_name, pointer_conn, sourc_addr, sourc_port, dest_addr, dest_port);
 8002f3c:	8afa      	ldrh	r2, [r7, #22]
 8002f3e:	8abb      	ldrh	r3, [r7, #20]
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	69f9      	ldr	r1, [r7, #28]
 8002f4c:	6938      	ldr	r0, [r7, #16]
 8002f4e:	f7ff ff4d 	bl	8002dec <conn_init_monitor_tcp>
 8002f52:	e7f3      	b.n	8002f3c <f_conn_tcp_RPI+0x20>
 8002f54:	20000320 	.word	0x20000320
 8002f58:	20000954 	.word	0x20000954
 8002f5c:	6700a8c0 	.word	0x6700a8c0
 8002f60:	08027ffc 	.word	0x08027ffc

08002f64 <f_conn_tcp_KEYENCE>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_f_conn_tcp_KEYENCE */
void f_conn_tcp_KEYENCE(void *argument)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	; 0x28
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	6078      	str	r0, [r7, #4]
	unsigned short sourc_port;
	ip4_addr_t dest_addr;
	unsigned short dest_port;
	char * str_conn_name;

	pointer_conn = &conn_KEYENCE;
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <f_conn_tcp_KEYENCE+0x38>)
 8002f6e:	61fb      	str	r3, [r7, #28]
	sourc_addr = &ipaddr;
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <f_conn_tcp_KEYENCE+0x3c>)
 8002f72:	61bb      	str	r3, [r7, #24]
	sourc_port = KEYENCE_SOURC_PORT;
 8002f74:	2367      	movs	r3, #103	; 0x67
 8002f76:	82fb      	strh	r3, [r7, #22]
	IP_ADDR4(&dest_addr, KEYENCE_IP4_1, KEYENCE_IP4_2, KEYENCE_IP4_3, KEYENCE_IP4_4);
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <f_conn_tcp_KEYENCE+0x40>)
 8002f7a:	60fb      	str	r3, [r7, #12]
	dest_port = KEYENCE_DEST_PORT;
 8002f7c:	230b      	movs	r3, #11
 8002f7e:	82bb      	strh	r3, [r7, #20]
	str_conn_name = (char*) &str_KEYENCE;
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <f_conn_tcp_KEYENCE+0x44>)
 8002f82:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	conn_init_monitor_tcp(str_conn_name, pointer_conn, sourc_addr, sourc_port, dest_addr, dest_port);
 8002f84:	8afa      	ldrh	r2, [r7, #22]
 8002f86:	8abb      	ldrh	r3, [r7, #20]
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	69f9      	ldr	r1, [r7, #28]
 8002f94:	6938      	ldr	r0, [r7, #16]
 8002f96:	f7ff ff29 	bl	8002dec <conn_init_monitor_tcp>
 8002f9a:	e7f3      	b.n	8002f84 <f_conn_tcp_KEYENCE+0x20>
 8002f9c:	20000324 	.word	0x20000324
 8002fa0:	20000954 	.word	0x20000954
 8002fa4:	6700a8c0 	.word	0x6700a8c0
 8002fa8:	08028000 	.word	0x08028000

08002fac <f_conn_tcp_FG1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_f_conn_tcp_FG1 */
void f_conn_tcp_FG1(void *argument)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	6078      	str	r0, [r7, #4]
	unsigned short sourc_port;
	ip4_addr_t dest_addr;
	unsigned short dest_port;
	char * str_conn_name;

	pointer_conn = &conn_FG1;
 8002fb4:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <f_conn_tcp_FG1+0x38>)
 8002fb6:	61fb      	str	r3, [r7, #28]
	sourc_addr = &ipaddr;
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <f_conn_tcp_FG1+0x3c>)
 8002fba:	61bb      	str	r3, [r7, #24]
	sourc_port = FG1_SOURC_PORT;
 8002fbc:	2364      	movs	r3, #100	; 0x64
 8002fbe:	82fb      	strh	r3, [r7, #22]
	IP_ADDR4(&dest_addr, FG1_IP4_1, FG1_IP4_2, FG1_IP4_3, FG1_IP4_4);
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <f_conn_tcp_FG1+0x40>)
 8002fc2:	60fb      	str	r3, [r7, #12]
	dest_port = FG1_DEST_PORT;
 8002fc4:	230d      	movs	r3, #13
 8002fc6:	82bb      	strh	r3, [r7, #20]
	str_conn_name = (char*) &str_FG1;
 8002fc8:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <f_conn_tcp_FG1+0x44>)
 8002fca:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
	conn_init_monitor_tcp(str_conn_name, pointer_conn, sourc_addr, sourc_port, dest_addr, dest_port);
 8002fcc:	8afa      	ldrh	r2, [r7, #22]
 8002fce:	8abb      	ldrh	r3, [r7, #20]
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	69f9      	ldr	r1, [r7, #28]
 8002fdc:	6938      	ldr	r0, [r7, #16]
 8002fde:	f7ff ff05 	bl	8002dec <conn_init_monitor_tcp>
 8002fe2:	e7f3      	b.n	8002fcc <f_conn_tcp_FG1+0x20>
 8002fe4:	20000328 	.word	0x20000328
 8002fe8:	20000954 	.word	0x20000954
 8002fec:	6700a8c0 	.word	0x6700a8c0
 8002ff0:	08028008 	.word	0x08028008

08002ff4 <f_simulate_conveyor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_f_simulate_conveyor */
void f_simulate_conveyor(void *argument)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_simulate_conveyor */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(NULL); // wait for sTIM resume
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f00d fee7 	bl	8010dd0 <vTaskSuspend>
	sim_opt_curt_mm = sim_opt_curt_mm + SIM_STEP_DISTANCE; //mm
 8003002:	4b05      	ldr	r3, [pc, #20]	; (8003018 <f_simulate_conveyor+0x24>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800300c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003010:	4b01      	ldr	r3, [pc, #4]	; (8003018 <f_simulate_conveyor+0x24>)
 8003012:	edc3 7a00 	vstr	s15, [r3]
	vTaskSuspend(NULL); // wait for sTIM resume
 8003016:	e7f1      	b.n	8002ffc <f_simulate_conveyor+0x8>
 8003018:	200002f8 	.word	0x200002f8

0800301c <callback_CLI_RX_test>:

/* USER CODE BEGIN Header_f_debug_mssgs */



void callback_CLI_RX_test(cli_char_buffer_handler *c){
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	//Before entering this function , c->rxbuffer should be updated or a new rx
	//After this fction is excecuted, the event to wait for next rx should be updated.
	if (c->rxBuffer == COMMAND_HANDLER_START && c->state_rx==0) { // start of command
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b3c      	cmp	r3, #60	; 0x3c
 800302a:	d112      	bne.n	8003052 <callback_CLI_RX_test+0x36>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	785b      	ldrb	r3, [r3, #1]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10e      	bne.n	8003052 <callback_CLI_RX_test+0x36>
		c->cnt_rx = 0;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
		c->state_rx=1;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	705a      	strb	r2, [r3, #1]
		memset(c->queueCommandRx.msg, 0, sizeof c->queueCommandRx.msg); // reset data
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	2264      	movs	r2, #100	; 0x64
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f01f ff0f 	bl	8022e6e <memset>
 8003050:	e02e      	b.n	80030b0 <callback_CLI_RX_test+0x94>
	}
	else if ((c->cnt_rx > (RX_SIZE_UART_DEBUG - 1))&&(c->state_rx==1)) { // corrupted/wrong input (lack of end character)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003058:	2b59      	cmp	r3, #89	; 0x59
 800305a:	d907      	bls.n	800306c <callback_CLI_RX_test+0x50>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	785b      	ldrb	r3, [r3, #1]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d103      	bne.n	800306c <callback_CLI_RX_test+0x50>
		c->state_rx=0;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	705a      	strb	r2, [r3, #1]
 800306a:	e021      	b.n	80030b0 <callback_CLI_RX_test+0x94>
	}
	else if (c->rxBuffer == COMMAND_HANDLER_END) { // end of command detected
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b3e      	cmp	r3, #62	; 0x3e
 8003072:	d11d      	bne.n	80030b0 <callback_CLI_RX_test+0x94>
		if(c->state_rx==1){
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	785b      	ldrb	r3, [r3, #1]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d116      	bne.n	80030aa <callback_CLI_RX_test+0x8e>
			c->queueCommandRx.msg[c->cnt_rx] = c->rxBuffer;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003082:	4619      	mov	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	781a      	ldrb	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	440b      	add	r3, r1
 800308c:	711a      	strb	r2, [r3, #4]
			c->queueCommandRx.len = c->cnt_rx+1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	669a      	str	r2, [r3, #104]	; 0x68
			osMessageQueuePut(command_rx_queueHandle, &(c->queueCommandRx), (uint8_t)0, 0);
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <callback_CLI_RX_test+0xc8>)
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	1d19      	adds	r1, r3, #4
 80030a2:	2300      	movs	r3, #0
 80030a4:	2200      	movs	r2, #0
 80030a6:	f00b fcfd 	bl	800eaa4 <osMessageQueuePut>
		}
		c->state_rx=0;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	705a      	strb	r2, [r3, #1]
	}

	// store character
	if(c->state_rx==1){
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	785b      	ldrb	r3, [r3, #1]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d110      	bne.n	80030da <callback_CLI_RX_test+0xbe>
		c->queueCommandRx.msg[c->cnt_rx] = c->rxBuffer;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80030be:	4619      	mov	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	440b      	add	r3, r1
 80030c8:	711a      	strb	r2, [r3, #4]
		c->cnt_rx++;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80030d0:	3301      	adds	r3, #1
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000878 	.word	0x20000878

080030e8 <HAL_UART_RxCpltCallback>:

//COMMAND UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
	if(huart == huart_CLI_debug && USE_UART_EXT)
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_UART_RxCpltCallback+0x4c>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d109      	bne.n	800310e <HAL_UART_RxCpltCallback+0x26>
	{
		callback_CLI_RX_test(&cli_uart_debug);
 80030fa:	480f      	ldr	r0, [pc, #60]	; (8003138 <HAL_UART_RxCpltCallback+0x50>)
 80030fc:	f7ff ff8e 	bl	800301c <callback_CLI_RX_test>
		HAL_UART_Receive_IT(huart_CLI_debug, (uint8_t*) &(cli_uart_debug.rxBuffer), 1);
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <HAL_UART_RxCpltCallback+0x4c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	490c      	ldr	r1, [pc, #48]	; (8003138 <HAL_UART_RxCpltCallback+0x50>)
 8003108:	4618      	mov	r0, r3
 800310a:	f007 faa8 	bl	800a65e <HAL_UART_Receive_IT>
	}
	if(huart == huart_CLI_CM4_main && USE_UART_CM4_MAIN)
 800310e:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_UART_RxCpltCallback+0x54>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d109      	bne.n	800312c <HAL_UART_RxCpltCallback+0x44>
	{
		callback_CLI_RX_test(&cli_uart_CM4_main);
 8003118:	4809      	ldr	r0, [pc, #36]	; (8003140 <HAL_UART_RxCpltCallback+0x58>)
 800311a:	f7ff ff7f 	bl	800301c <callback_CLI_RX_test>
		HAL_UART_Receive_IT(huart_CLI_CM4_main, (uint8_t*) &(cli_uart_CM4_main.rxBuffer), 1);
 800311e:	4b07      	ldr	r3, [pc, #28]	; (800313c <HAL_UART_RxCpltCallback+0x54>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	4906      	ldr	r1, [pc, #24]	; (8003140 <HAL_UART_RxCpltCallback+0x58>)
 8003126:	4618      	mov	r0, r3
 8003128:	f007 fa99 	bl	800a65e <HAL_UART_Receive_IT>
	if(huart == huart_CLI_CM4_second && USE_UART_CM4_SECN)
	{
		callback_CLI_RX_test(&cli_uart_CM4_second);
		HAL_UART_Receive_IT(huart_CLI_CM4_second, (uint8_t*) &(cli_uart_CM4_second.rxBuffer), 1);
	}
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	200003f4 	.word	0x200003f4
 8003138:	20000400 	.word	0x20000400
 800313c:	200003f8 	.word	0x200003f8
 8003140:	20000470 	.word	0x20000470

08003144 <debug_send_echo>:

void debug_send_echo(char * txBuffer) {
 8003144:	b580      	push	{r7, lr}
 8003146:	b0a0      	sub	sp, #128	; 0x80
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	message_debug ms_echo;
	strcpy((char *)&ms_echo.content, txBuffer);
 800314c:	f107 030c 	add.w	r3, r7, #12
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	f01f ffd4 	bl	8023100 <strcpy>
	ms_echo.type = (char *)&str_echo;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <debug_send_echo+0x30>)
 800315a:	67fb      	str	r3, [r7, #124]	; 0x7c
	osMessageQueuePut(message_debug_queueHandle, &ms_echo, (uint8_t)0, 0);
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <debug_send_echo+0x34>)
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	f107 010c 	add.w	r1, r7, #12
 8003164:	2300      	movs	r3, #0
 8003166:	2200      	movs	r2, #0
 8003168:	f00b fc9c 	bl	800eaa4 <osMessageQueuePut>
}
 800316c:	bf00      	nop
 800316e:	3780      	adds	r7, #128	; 0x80
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	08028010 	.word	0x08028010
 8003178:	20000894 	.word	0x20000894

0800317c <debug_send_error>:

void debug_send_error(char * txBuffer) {
 800317c:	b580      	push	{r7, lr}
 800317e:	b0a0      	sub	sp, #128	; 0x80
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	message_debug ms_error;
	strcpy((char *)&ms_error.content, txBuffer);
 8003184:	f107 030c 	add.w	r3, r7, #12
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4618      	mov	r0, r3
 800318c:	f01f ffb8 	bl	8023100 <strcpy>
	ms_error.type = (char *)&str_error;
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <debug_send_error+0x30>)
 8003192:	67fb      	str	r3, [r7, #124]	; 0x7c
	osMessageQueuePut(message_debug_queueHandle, &ms_error, (uint8_t)0, 0);
 8003194:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <debug_send_error+0x34>)
 8003196:	6818      	ldr	r0, [r3, #0]
 8003198:	f107 010c 	add.w	r1, r7, #12
 800319c:	2300      	movs	r3, #0
 800319e:	2200      	movs	r2, #0
 80031a0:	f00b fc80 	bl	800eaa4 <osMessageQueuePut>
}
 80031a4:	bf00      	nop
 80031a6:	3780      	adds	r7, #128	; 0x80
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	08028018 	.word	0x08028018
 80031b0:	20000894 	.word	0x20000894

080031b4 <debug_send_success>:

void debug_send_success(char * txBuffer) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b0a0      	sub	sp, #128	; 0x80
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	message_debug ms_success;
	strcpy((char *)&ms_success.content, txBuffer);
 80031bc:	f107 030c 	add.w	r3, r7, #12
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f01f ff9c 	bl	8023100 <strcpy>
	ms_success.type = (char *)&str_success;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <debug_send_success+0x30>)
 80031ca:	67fb      	str	r3, [r7, #124]	; 0x7c
	osMessageQueuePut(message_debug_queueHandle, &ms_success, (uint8_t)0, 0);
 80031cc:	4b06      	ldr	r3, [pc, #24]	; (80031e8 <debug_send_success+0x34>)
 80031ce:	6818      	ldr	r0, [r3, #0]
 80031d0:	f107 010c 	add.w	r1, r7, #12
 80031d4:	2300      	movs	r3, #0
 80031d6:	2200      	movs	r2, #0
 80031d8:	f00b fc64 	bl	800eaa4 <osMessageQueuePut>
}
 80031dc:	bf00      	nop
 80031de:	3780      	adds	r7, #128	; 0x80
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	08028020 	.word	0x08028020
 80031e8:	20000894 	.word	0x20000894

080031ec <debug_send_ack>:

void debug_send_ack(char * txBuffer) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b0a0      	sub	sp, #128	; 0x80
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	message_debug ms_ack;
	strcpy((char *)&ms_ack.content, txBuffer);
 80031f4:	f107 030c 	add.w	r3, r7, #12
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f01f ff80 	bl	8023100 <strcpy>
	ms_ack.type = (char *)&str_ack;
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <debug_send_ack+0x30>)
 8003202:	67fb      	str	r3, [r7, #124]	; 0x7c
	osMessageQueuePut(message_debug_queueHandle, &ms_ack, (uint8_t)0, 0);
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <debug_send_ack+0x34>)
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	f107 010c 	add.w	r1, r7, #12
 800320c:	2300      	movs	r3, #0
 800320e:	2200      	movs	r2, #0
 8003210:	f00b fc48 	bl	800eaa4 <osMessageQueuePut>
}
 8003214:	bf00      	nop
 8003216:	3780      	adds	r7, #128	; 0x80
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	08028028 	.word	0x08028028
 8003220:	20000894 	.word	0x20000894

08003224 <debug_send_tcp>:

void debug_send_tcp(char * txBuffer) {
 8003224:	b580      	push	{r7, lr}
 8003226:	b0a0      	sub	sp, #128	; 0x80
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	message_debug ms_tcp;
	strcpy((char *)&ms_tcp.content, txBuffer);
 800322c:	f107 030c 	add.w	r3, r7, #12
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	f01f ff64 	bl	8023100 <strcpy>
	ms_tcp.type = (char *)&str_tcp;
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <debug_send_tcp+0x30>)
 800323a:	67fb      	str	r3, [r7, #124]	; 0x7c
	osMessageQueuePut(message_debug_queueHandle, &ms_tcp, (uint8_t)0, 0);
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <debug_send_tcp+0x34>)
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	f107 010c 	add.w	r1, r7, #12
 8003244:	2300      	movs	r3, #0
 8003246:	2200      	movs	r2, #0
 8003248:	f00b fc2c 	bl	800eaa4 <osMessageQueuePut>
}
 800324c:	bf00      	nop
 800324e:	3780      	adds	r7, #128	; 0x80
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	08028034 	.word	0x08028034
 8003258:	20000894 	.word	0x20000894

0800325c <debug_send_process>:

void debug_send_process(char * str_type,float optical_curtain_id, float rel_dist, char * txBuffer) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b0a4      	sub	sp, #144	; 0x90
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	ed87 0a02 	vstr	s0, [r7, #8]
 8003268:	edc7 0a01 	vstr	s1, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
	message_debug ms_gen;
	sprintf((char *)&ms_gen.content, "ID_%.8d,RD_%.8d,%s", (int) optical_curtain_id, (int) rel_dist, txBuffer);
 800326e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003272:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8003276:	edd7 7a01 	vldr	s15, [r7, #4]
 800327a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800327e:	f107 0014 	add.w	r0, r7, #20
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	ee17 3a90 	vmov	r3, s15
 800328a:	ee17 2a10 	vmov	r2, s14
 800328e:	4909      	ldr	r1, [pc, #36]	; (80032b4 <debug_send_process+0x58>)
 8003290:	f01f fd60 	bl	8022d54 <siprintf>
	ms_gen.type = str_type;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	osMessageQueuePut(message_debug_queueHandle, &ms_gen, (uint8_t)0, 0);
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <debug_send_process+0x5c>)
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	f107 0114 	add.w	r1, r7, #20
 80032a2:	2300      	movs	r3, #0
 80032a4:	2200      	movs	r2, #0
 80032a6:	f00b fbfd 	bl	800eaa4 <osMessageQueuePut>
}
 80032aa:	bf00      	nop
 80032ac:	3788      	adds	r7, #136	; 0x88
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	08024484 	.word	0x08024484
 80032b8:	20000894 	.word	0x20000894

080032bc <debug_message_sent_tcp>:
	else if((state == TIME_WAIT)){
		debug_send_tcp("TIME_WAIT");
	}
}

void debug_message_sent_tcp(uint8_t state, queue_tx_rx_tcp *ms){
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	6039      	str	r1, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
	sprintf(smsgc_tx_tcp_buff_debug, "TCP:TX:%s:%s", ms->point_conn_name, ms->msg);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4909      	ldr	r1, [pc, #36]	; (80032f4 <debug_message_sent_tcp+0x38>)
 80032d0:	4809      	ldr	r0, [pc, #36]	; (80032f8 <debug_message_sent_tcp+0x3c>)
 80032d2:	f01f fd3f 	bl	8022d54 <siprintf>
	if((state == ESTABLISHED)){
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	2b04      	cmp	r3, #4
 80032da:	d103      	bne.n	80032e4 <debug_message_sent_tcp+0x28>
		debug_send_tcp((char *)&smsgc_tx_tcp_buff_debug);
 80032dc:	4806      	ldr	r0, [pc, #24]	; (80032f8 <debug_message_sent_tcp+0x3c>)
 80032de:	f7ff ffa1 	bl	8003224 <debug_send_tcp>
	}else{
		debug_send_error((char *)&smsgc_tx_tcp_buff_debug);
	}
}
 80032e2:	e002      	b.n	80032ea <debug_message_sent_tcp+0x2e>
		debug_send_error((char *)&smsgc_tx_tcp_buff_debug);
 80032e4:	4804      	ldr	r0, [pc, #16]	; (80032f8 <debug_message_sent_tcp+0x3c>)
 80032e6:	f7ff ff49 	bl	800317c <debug_send_error>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	08024510 	.word	0x08024510
 80032f8:	20000390 	.word	0x20000390

080032fc <debug_message_recv_tcp>:

void debug_message_recv_tcp(char *str_conn_name, char *msgc){
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
	sprintf (smsgc_rx_tcp_buff_debug, "TCP:RX:%s:%s", str_conn_name, msgc);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4905      	ldr	r1, [pc, #20]	; (8003320 <debug_message_recv_tcp+0x24>)
 800330c:	4805      	ldr	r0, [pc, #20]	; (8003324 <debug_message_recv_tcp+0x28>)
 800330e:	f01f fd21 	bl	8022d54 <siprintf>
	debug_send_tcp((char *)smsgc_rx_tcp_buff_debug);
 8003312:	4804      	ldr	r0, [pc, #16]	; (8003324 <debug_message_recv_tcp+0x28>)
 8003314:	f7ff ff86 	bl	8003224 <debug_send_tcp>
}
 8003318:	bf00      	nop
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	08024520 	.word	0x08024520
 8003324:	2000032c 	.word	0x2000032c

08003328 <debug_init_monitor_tcp>:

void debug_init_monitor_tcp(char * str_conn_name){
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	char smsgc[20]; //initialized here bcs it can be used in by many threads
	sprintf (smsgc, "%s:LOADING", str_conn_name);
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	4906      	ldr	r1, [pc, #24]	; (8003350 <debug_init_monitor_tcp+0x28>)
 8003338:	4618      	mov	r0, r3
 800333a:	f01f fd0b 	bl	8022d54 <siprintf>
	debug_send_tcp((char *)&smsgc);
 800333e:	f107 030c 	add.w	r3, r7, #12
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ff6e 	bl	8003224 <debug_send_tcp>
}
 8003348:	bf00      	nop
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	08024530 	.word	0x08024530

08003354 <debug_lost_monitor_tcp>:

void debug_lost_monitor_tcp(char * str_conn_name){
 8003354:	b580      	push	{r7, lr}
 8003356:	b088      	sub	sp, #32
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	char smsgc[20]; //initialized here bcs it can be used in by many threads
	sprintf (smsgc, "%s:LOST", str_conn_name);
 800335c:	f107 030c 	add.w	r3, r7, #12
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4906      	ldr	r1, [pc, #24]	; (800337c <debug_lost_monitor_tcp+0x28>)
 8003364:	4618      	mov	r0, r3
 8003366:	f01f fcf5 	bl	8022d54 <siprintf>
	debug_send_tcp((char *)&smsgc);
 800336a:	f107 030c 	add.w	r3, r7, #12
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff58 	bl	8003224 <debug_send_tcp>
}
 8003374:	bf00      	nop
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	0802453c 	.word	0x0802453c

08003380 <debug_send_queue_result>:
void debug_send_queue_result(osStatus_t r, char * txBuffer){
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
	if(r == osOK) debug_send_success(txBuffer);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d103      	bne.n	8003398 <debug_send_queue_result+0x18>
 8003390:	6838      	ldr	r0, [r7, #0]
 8003392:	f7ff ff0f 	bl	80031b4 <debug_send_success>
	else debug_send_error(txBuffer);
}
 8003396:	e002      	b.n	800339e <debug_send_queue_result+0x1e>
	else debug_send_error(txBuffer);
 8003398:	6838      	ldr	r0, [r7, #0]
 800339a:	f7ff feef 	bl	800317c <debug_send_error>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <debug_send_optical_position>:
	if(ENABLE_QUEUE_RESULT){
		if(r == osOK) debug_send_process((char*)&str_success, starting_pos_local, relative_pos_local, txBuffer);
		else debug_send_process((char*)&str_error, starting_pos_local, relative_pos_local, txBuffer);
	}
}
void debug_send_optical_position(float t){
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	ed87 0a01 	vstr	s0, [r7, #4]
	sprintf(var_debug_send_optical, "Pos_%.2d", (int) t);
 80033b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ba:	ee17 2a90 	vmov	r2, s15
 80033be:	4905      	ldr	r1, [pc, #20]	; (80033d4 <debug_send_optical_position+0x2c>)
 80033c0:	4805      	ldr	r0, [pc, #20]	; (80033d8 <debug_send_optical_position+0x30>)
 80033c2:	f01f fcc7 	bl	8022d54 <siprintf>
	debug_send_ack((char *)var_debug_send_optical);
 80033c6:	4804      	ldr	r0, [pc, #16]	; (80033d8 <debug_send_optical_position+0x30>)
 80033c8:	f7ff ff10 	bl	80031ec <debug_send_ack>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	08024544 	.word	0x08024544
 80033d8:	20000550 	.word	0x20000550

080033dc <debug_send_done_discard>:

void debug_send_done_discard(){
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
	char var_debug_send_optical[20];

	if(en_period_oc_print)
 80033e2:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <debug_send_done_discard+0xe4>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d035      	beq.n	8003456 <debug_send_done_discard+0x7a>
	{
		debug_send_ack((char *)"SIM:");
 80033ea:	4836      	ldr	r0, [pc, #216]	; (80034c4 <debug_send_done_discard+0xe8>)
 80033ec:	f7ff fefe 	bl	80031ec <debug_send_ack>

		sprintf(var_debug_send_optical, "STR_POS: %.2d", (int) sim_per_oc_start_pos);
 80033f0:	4b35      	ldr	r3, [pc, #212]	; (80034c8 <debug_send_done_discard+0xec>)
 80033f2:	edd3 7a00 	vldr	s15, [r3]
 80033f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	ee17 2a90 	vmov	r2, s15
 8003400:	4932      	ldr	r1, [pc, #200]	; (80034cc <debug_send_done_discard+0xf0>)
 8003402:	4618      	mov	r0, r3
 8003404:	f01f fca6 	bl	8022d54 <siprintf>
		debug_send_ack((char *)var_debug_send_optical);
 8003408:	1d3b      	adds	r3, r7, #4
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff feee 	bl	80031ec <debug_send_ack>

		sprintf(var_debug_send_optical, "END_POS: %.2d", (int) sim_per_oc_end_pos);
 8003410:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <debug_send_done_discard+0xf4>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800341a:	1d3b      	adds	r3, r7, #4
 800341c:	ee17 2a90 	vmov	r2, s15
 8003420:	492c      	ldr	r1, [pc, #176]	; (80034d4 <debug_send_done_discard+0xf8>)
 8003422:	4618      	mov	r0, r3
 8003424:	f01f fc96 	bl	8022d54 <siprintf>
		debug_send_ack((char *)var_debug_send_optical);
 8003428:	1d3b      	adds	r3, r7, #4
 800342a:	4618      	mov	r0, r3
 800342c:	f7ff fede 	bl	80031ec <debug_send_ack>

		sprintf(var_debug_send_optical, "SIM_TRG: %.2d", (int) count_total_OC_trigger_sim);
 8003430:	4b29      	ldr	r3, [pc, #164]	; (80034d8 <debug_send_done_discard+0xfc>)
 8003432:	edd3 7a00 	vldr	s15, [r3]
 8003436:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	ee17 2a90 	vmov	r2, s15
 8003440:	4926      	ldr	r1, [pc, #152]	; (80034dc <debug_send_done_discard+0x100>)
 8003442:	4618      	mov	r0, r3
 8003444:	f01f fc86 	bl	8022d54 <siprintf>
		debug_send_ack((char *)var_debug_send_optical);
 8003448:	1d3b      	adds	r3, r7, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fece 	bl	80031ec <debug_send_ack>

		debug_send_ack((char *)"<---");
 8003450:	4823      	ldr	r0, [pc, #140]	; (80034e0 <debug_send_done_discard+0x104>)
 8003452:	f7ff fecb 	bl	80031ec <debug_send_ack>
	}

	sprintf(var_debug_send_optical, "TOTL_OC: %.2d", (int) count_total_OC_events);
 8003456:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <debug_send_done_discard+0x108>)
 8003458:	edd3 7a00 	vldr	s15, [r3]
 800345c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	ee17 2a90 	vmov	r2, s15
 8003466:	4920      	ldr	r1, [pc, #128]	; (80034e8 <debug_send_done_discard+0x10c>)
 8003468:	4618      	mov	r0, r3
 800346a:	f01f fc73 	bl	8022d54 <siprintf>
	debug_send_ack((char *)var_debug_send_optical);
 800346e:	1d3b      	adds	r3, r7, #4
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff febb 	bl	80031ec <debug_send_ack>

	sprintf(var_debug_send_optical, "ART_DNE: %.2d", (int) count_done);
 8003476:	4b1d      	ldr	r3, [pc, #116]	; (80034ec <debug_send_done_discard+0x110>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003480:	1d3b      	adds	r3, r7, #4
 8003482:	ee17 2a90 	vmov	r2, s15
 8003486:	491a      	ldr	r1, [pc, #104]	; (80034f0 <debug_send_done_discard+0x114>)
 8003488:	4618      	mov	r0, r3
 800348a:	f01f fc63 	bl	8022d54 <siprintf>
	debug_send_ack((char *)var_debug_send_optical);
 800348e:	1d3b      	adds	r3, r7, #4
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff feab 	bl	80031ec <debug_send_ack>

	sprintf(var_debug_send_optical, "ART_DIS: %.2d", (int) count_discard);
 8003496:	4b17      	ldr	r3, [pc, #92]	; (80034f4 <debug_send_done_discard+0x118>)
 8003498:	edd3 7a00 	vldr	s15, [r3]
 800349c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034a0:	1d3b      	adds	r3, r7, #4
 80034a2:	ee17 2a90 	vmov	r2, s15
 80034a6:	4914      	ldr	r1, [pc, #80]	; (80034f8 <debug_send_done_discard+0x11c>)
 80034a8:	4618      	mov	r0, r3
 80034aa:	f01f fc53 	bl	8022d54 <siprintf>
	debug_send_ack((char *)var_debug_send_optical);
 80034ae:	1d3b      	adds	r3, r7, #4
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fe9b 	bl	80031ec <debug_send_ack>

}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200002fd 	.word	0x200002fd
 80034c4:	08024550 	.word	0x08024550
 80034c8:	20000318 	.word	0x20000318
 80034cc:	08024558 	.word	0x08024558
 80034d0:	2000031c 	.word	0x2000031c
 80034d4:	08024568 	.word	0x08024568
 80034d8:	20000314 	.word	0x20000314
 80034dc:	08024578 	.word	0x08024578
 80034e0:	08024588 	.word	0x08024588
 80034e4:	20000310 	.word	0x20000310
 80034e8:	08024590 	.word	0x08024590
 80034ec:	2000030c 	.word	0x2000030c
 80034f0:	080245a0 	.word	0x080245a0
 80034f4:	20000308 	.word	0x20000308
 80034f8:	080245b0 	.word	0x080245b0

080034fc <transmit_over_CLI>:



void transmit_over_CLI(uint8_t* p, int l){
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	if (USE_UART_EXT){
		HAL_UART_Transmit(huart_CLI_debug, p, l, 10);
 8003506:	4b14      	ldr	r3, [pc, #80]	; (8003558 <transmit_over_CLI+0x5c>)
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	b29a      	uxth	r2, r3
 800350e:	230a      	movs	r3, #10
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	f007 f821 	bl	800a558 <HAL_UART_Transmit>
	}
	if (USE_UART_CM4_MAIN){
		HAL_UART_Transmit(huart_CLI_CM4_main, p, l, 10);
 8003516:	4b11      	ldr	r3, [pc, #68]	; (800355c <transmit_over_CLI+0x60>)
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b29a      	uxth	r2, r3
 800351e:	230a      	movs	r3, #10
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	f007 f819 	bl	800a558 <HAL_UART_Transmit>
	}
	if (USE_UART_CM4_SECN){
		HAL_UART_Transmit(huart_CLI_CM4_second, p, l, 10);
	}
	if (USE_USB){
		unsigned long start = xTaskGetTickCount();
 8003526:	f00d fe81 	bl	801122c <xTaskGetTickCount>
 800352a:	60f8      	str	r0, [r7, #12]
		uint8_t result;
		do{
			result = CDC_Transmit_FS(p, l);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f01e fd8a 	bl	802204c <CDC_Transmit_FS>
 8003538:	4603      	mov	r3, r0
 800353a:	72fb      	strb	r3, [r7, #11]
		}while(result!=USBD_OK && ((xTaskGetTickCount() - start)< 10));
 800353c:	7afb      	ldrb	r3, [r7, #11]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <transmit_over_CLI+0x54>
 8003542:	f00d fe73 	bl	801122c <xTaskGetTickCount>
 8003546:	4602      	mov	r2, r0
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b09      	cmp	r3, #9
 800354e:	d9ed      	bls.n	800352c <transmit_over_CLI+0x30>
	}
}
 8003550:	bf00      	nop
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	200003f4 	.word	0x200003f4
 800355c:	200003f8 	.word	0x200003f8

08003560 <f_debug_mssgs>:



/* USER CODE END Header_f_debug_mssgs */
void f_debug_mssgs(void *argument)
{
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b0a1      	sub	sp, #132	; 0x84
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	osStatus_t status;
	message_debug ms_p;
  /* Infinite loop */
  for(;;)
  {
	status = osMessageQueueGet(message_debug_queueHandle, &ms_p, (uint8_t *)NULL, 0);
 8003568:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <f_debug_mssgs+0x94>)
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	f107 0108 	add.w	r1, r7, #8
 8003570:	2300      	movs	r3, #0
 8003572:	2200      	movs	r2, #0
 8003574:	f00b fb0a 	bl	800eb8c <osMessageQueueGet>
 8003578:	67f8      	str	r0, [r7, #124]	; 0x7c

	if (status == osOK){
 800357a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800357c:	2b00      	cmp	r3, #0
 800357e:	d12c      	bne.n	80035da <f_debug_mssgs+0x7a>
		transmit_over_CLI((uint8_t *)&str_start_mssg, 1);
 8003580:	2101      	movs	r1, #1
 8003582:	481d      	ldr	r0, [pc, #116]	; (80035f8 <f_debug_mssgs+0x98>)
 8003584:	f7ff ffba 	bl	80034fc <transmit_over_CLI>
		if(strcmp(ms_p.type,"") != 0){
 8003588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00d      	beq.n	80035ac <f_debug_mssgs+0x4c>
			transmit_over_CLI((uint8_t *) ms_p.type, strlen((char *)ms_p.type));
 8003590:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8003592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003594:	4618      	mov	r0, r3
 8003596:	f7fc fe45 	bl	8000224 <strlen>
 800359a:	4603      	mov	r3, r0
 800359c:	4619      	mov	r1, r3
 800359e:	4620      	mov	r0, r4
 80035a0:	f7ff ffac 	bl	80034fc <transmit_over_CLI>
			transmit_over_CLI((uint8_t *)&str_delimiter_mssg, 1);
 80035a4:	2101      	movs	r1, #1
 80035a6:	4815      	ldr	r0, [pc, #84]	; (80035fc <f_debug_mssgs+0x9c>)
 80035a8:	f7ff ffa8 	bl	80034fc <transmit_over_CLI>

		}
		transmit_over_CLI((uint8_t *) ms_p.content, strlen((char *)ms_p.content));
 80035ac:	f107 0308 	add.w	r3, r7, #8
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc fe37 	bl	8000224 <strlen>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	f107 0308 	add.w	r3, r7, #8
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff9b 	bl	80034fc <transmit_over_CLI>
		transmit_over_CLI((uint8_t *)&str_end_mssg, 1);
 80035c6:	2101      	movs	r1, #1
 80035c8:	480d      	ldr	r0, [pc, #52]	; (8003600 <f_debug_mssgs+0xa0>)
 80035ca:	f7ff ff97 	bl	80034fc <transmit_over_CLI>
		transmit_over_CLI((uint8_t *)&str_n_r, str_n_r_size);
 80035ce:	4b0d      	ldr	r3, [pc, #52]	; (8003604 <f_debug_mssgs+0xa4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	480c      	ldr	r0, [pc, #48]	; (8003608 <f_debug_mssgs+0xa8>)
 80035d6:	f7ff ff91 	bl	80034fc <transmit_over_CLI>

	}

	osDelay(get_ticks_from_ms(TIM_SLEEP_DEBUG_MSSGS));
 80035da:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80035de:	f7fd fc1b 	bl	8000e18 <get_ticks_from_ms>
 80035e2:	eef0 7a40 	vmov.f32	s15, s0
 80035e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035ea:	ee17 0a90 	vmov	r0, s15
 80035ee:	f00a fdf3 	bl	800e1d8 <osDelay>
	status = osMessageQueueGet(message_debug_queueHandle, &ms_p, (uint8_t *)NULL, 0);
 80035f2:	e7b9      	b.n	8003568 <f_debug_mssgs+0x8>
 80035f4:	20000894 	.word	0x20000894
 80035f8:	0802800c 	.word	0x0802800c
 80035fc:	0802800d 	.word	0x0802800d
 8003600:	0802800e 	.word	0x0802800e
 8003604:	20000004 	.word	0x20000004
 8003608:	08028030 	.word	0x08028030

0800360c <evaluate_optical_curtain>:
  /* USER CODE END f_debug_mssgs */
}

/* USER CODE BEGIN Header_f_CURTAIN */

void evaluate_optical_curtain(){
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
	float pos = get_current_conveyor_pos();
 8003612:	f000 f8ef 	bl	80037f4 <get_current_conveyor_pos>
 8003616:	eef0 7a40 	vmov.f32	s15, s0
 800361a:	edc7 7a01 	vstr	s15, [r7, #4]
	if(((pos - last_optical_curtain) > DEAD_DISTANCE) || (last_optical_curtain ==0)){	// check if it is not in dead distance
 800361e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003622:	4b18      	ldr	r3, [pc, #96]	; (8003684 <evaluate_optical_curtain+0x78>)
 8003624:	edd3 7a00 	vldr	s15, [r3]
 8003628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800362c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003688 <evaluate_optical_curtain+0x7c>
 8003630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003638:	dc07      	bgt.n	800364a <evaluate_optical_curtain+0x3e>
 800363a:	4b12      	ldr	r3, [pc, #72]	; (8003684 <evaluate_optical_curtain+0x78>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003648:	d10e      	bne.n	8003668 <evaluate_optical_curtain+0x5c>
		osStatus_t r = osMessageQueuePut(RPI_queueHandle, &pos, (uint8_t)0, 2);
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <evaluate_optical_curtain+0x80>)
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	1d39      	adds	r1, r7, #4
 8003650:	2302      	movs	r3, #2
 8003652:	2200      	movs	r2, #0
 8003654:	f00b fa26 	bl	800eaa4 <osMessageQueuePut>
 8003658:	60b8      	str	r0, [r7, #8]
		if(r == osOK) last_optical_curtain = pos;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10c      	bne.n	800367a <evaluate_optical_curtain+0x6e>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <evaluate_optical_curtain+0x78>)
 8003664:	6013      	str	r3, [r2, #0]
	if(((pos - last_optical_curtain) > DEAD_DISTANCE) || (last_optical_curtain ==0)){	// check if it is not in dead distance
 8003666:	e008      	b.n	800367a <evaluate_optical_curtain+0x6e>
		if(ENABLE_QUEUE_RESULT)debug_send_queue_process_result(r, pos, 0, (char*)"RPI_queue_tx");
	}else{
		osStatus_t r = osMessageQueuePut(DISCARD_queueHandle, &pos, (uint8_t)0, 2);
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <evaluate_optical_curtain+0x84>)
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	1d39      	adds	r1, r7, #4
 800366e:	2302      	movs	r3, #2
 8003670:	2200      	movs	r2, #0
 8003672:	f00b fa17 	bl	800eaa4 <osMessageQueuePut>
 8003676:	60f8      	str	r0, [r7, #12]
		if(ENABLE_QUEUE_RESULT)debug_send_queue_process_result(r, pos, 0, (char*)"DISCARD_queue_tx");
	}
}
 8003678:	e000      	b.n	800367c <evaluate_optical_curtain+0x70>
	if(((pos - last_optical_curtain) > DEAD_DISTANCE) || (last_optical_curtain ==0)){	// check if it is not in dead distance
 800367a:	bf00      	nop
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	200002f4 	.word	0x200002f4
 8003688:	43d20000 	.word	0x43d20000
 800368c:	2000087c 	.word	0x2000087c
 8003690:	20000890 	.word	0x20000890

08003694 <callback_trigger_optical_curtain>:

void callback_trigger_optical_curtain(){
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
	//vTaskResume(t_OpticalCHandle);
	osStatus_t r = osMessageQueuePut(CURTAIN_queueHandle,&fixed_value_optical_curtain,(uint8_t)0,10);
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <callback_trigger_optical_curtain+0x34>)
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	230a      	movs	r3, #10
 80036a0:	2200      	movs	r2, #0
 80036a2:	490a      	ldr	r1, [pc, #40]	; (80036cc <callback_trigger_optical_curtain+0x38>)
 80036a4:	f00b f9fe 	bl	800eaa4 <osMessageQueuePut>
 80036a8:	6078      	str	r0, [r7, #4]
	count_total_OC_events++;
 80036aa:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <callback_trigger_optical_curtain+0x3c>)
 80036ac:	edd3 7a00 	vldr	s15, [r3]
 80036b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036b8:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <callback_trigger_optical_curtain+0x3c>)
 80036ba:	edc3 7a00 	vstr	s15, [r3]
	if(ENABLE_QUEUE_RESULT)debug_send_queue_result(r, "CURTAIN_queue_tx");

}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	200008a8 	.word	0x200008a8
 80036cc:	20000001 	.word	0x20000001
 80036d0:	20000310 	.word	0x20000310

080036d4 <callback_trigger_optical_curtain_IT>:

void callback_trigger_optical_curtain_IT(){
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
	osStatus_t r = osMessageQueuePut(CURTAIN_queueHandle,&fixed_value_optical_curtain,(uint8_t)0,0);
 80036da:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <callback_trigger_optical_curtain_IT+0x3c>)
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	2300      	movs	r3, #0
 80036e0:	2200      	movs	r2, #0
 80036e2:	490c      	ldr	r1, [pc, #48]	; (8003714 <callback_trigger_optical_curtain_IT+0x40>)
 80036e4:	f00b f9de 	bl	800eaa4 <osMessageQueuePut>
 80036e8:	6078      	str	r0, [r7, #4]
	count_total_OC_events++;
 80036ea:	4b0b      	ldr	r3, [pc, #44]	; (8003718 <callback_trigger_optical_curtain_IT+0x44>)
 80036ec:	edd3 7a00 	vldr	s15, [r3]
 80036f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036f8:	4b07      	ldr	r3, [pc, #28]	; (8003718 <callback_trigger_optical_curtain_IT+0x44>)
 80036fa:	edc3 7a00 	vstr	s15, [r3]
	debug_send_queue_result(r, "OC_IT");
 80036fe:	4907      	ldr	r1, [pc, #28]	; (800371c <callback_trigger_optical_curtain_IT+0x48>)
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7ff fe3d 	bl	8003380 <debug_send_queue_result>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	200008a8 	.word	0x200008a8
 8003714:	20000001 	.word	0x20000001
 8003718:	20000310 	.word	0x20000310
 800371c:	080245c0 	.word	0x080245c0

08003720 <f_CURTAIN>:

/* USER CODE END Header_f_CURTAIN */
void f_CURTAIN(void *argument)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_CURTAIN */
	bool a;
	uint8_t n = 0;
 8003728:	2300      	movs	r3, #0
 800372a:	72bb      	strb	r3, [r7, #10]
	osStatus_t r;
  /* Infinite loop */
  for(;;)
  {
	//vTaskSuspend(NULL);
	r = osMessageQueueGet(CURTAIN_queueHandle,&a,&n,0);
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <f_CURTAIN+0x44>)
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	f107 020a 	add.w	r2, r7, #10
 8003734:	f107 010b 	add.w	r1, r7, #11
 8003738:	2300      	movs	r3, #0
 800373a:	f00b fa27 	bl	800eb8c <osMessageQueueGet>
 800373e:	60f8      	str	r0, [r7, #12]
	if( r == osOK){
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <f_CURTAIN+0x2a>
		if(ENABLE_QUEUE_RESULT)debug_send_queue_result(r, "CURTAIN_queue_rx");
		evaluate_optical_curtain();
 8003746:	f7ff ff61 	bl	800360c <evaluate_optical_curtain>
	}
	osDelay(get_ticks_from_ms(TIM_SLEEP_CURTAIN));
 800374a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800374e:	f7fd fb63 	bl	8000e18 <get_ticks_from_ms>
 8003752:	eef0 7a40 	vmov.f32	s15, s0
 8003756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800375a:	ee17 0a90 	vmov	r0, s15
 800375e:	f00a fd3b 	bl	800e1d8 <osDelay>
	r = osMessageQueueGet(CURTAIN_queueHandle,&a,&n,0);
 8003762:	e7e3      	b.n	800372c <f_CURTAIN+0xc>
 8003764:	200008a8 	.word	0x200008a8

08003768 <getCurrentPositionMM>:
  /* USER CODE END f_CURTAIN */
}

/* USER CODE BEGIN Header_f_update_encoder */

double getCurrentPositionMM(){
 8003768:	b5b0      	push	{r4, r5, r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
	int16_t encoder_tick;
	double total;

		if (USE_CASCADE_BY_SOFTWARE == true){
			//osMutexAcquire(mutex_encoder_cascadeHandle, osWaitForever);
			cascade=counter_cascade_by_softw;
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <getCurrentPositionMM+0x80>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f7fc ff06 	bl	8000584 <__aeabi_i2d>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	e9c7 2304 	strd	r2, r3, [r7, #16]
			encoder_tick = last_tick_encoder;
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <getCurrentPositionMM+0x84>)
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	81fb      	strh	r3, [r7, #14]
		}else{
			cascade=__HAL_TIM_GET_COUNTER(&htim5); //counter_cascade_by_timer. Counter cascade by TIM5 slave
			encoder_tick = __HAL_TIM_GET_COUNTER(&htim4);
		}

	total = cascade*ENCODER_INTERFACE_RES_STM + (double)encoder_tick;
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <getCurrentPositionMM+0x88>)
 800378c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003790:	f7fc ff62 	bl	8000658 <__aeabi_dmul>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4614      	mov	r4, r2
 800379a:	461d      	mov	r5, r3
 800379c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc feef 	bl	8000584 <__aeabi_i2d>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4620      	mov	r0, r4
 80037ac:	4629      	mov	r1, r5
 80037ae:	f7fc fd9d 	bl	80002ec <__adddf3>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	e9c7 2300 	strd	r2, r3, [r7]

	return (total/ENCODER_TICK_PER_MM);
 80037ba:	a309      	add	r3, pc, #36	; (adr r3, 80037e0 <getCurrentPositionMM+0x78>)
 80037bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037c4:	f7fd f872 	bl	80008ac <__aeabi_ddiv>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	ec43 2b17 	vmov	d7, r2, r3
}
 80037d0:	eeb0 0a47 	vmov.f32	s0, s14
 80037d4:	eef0 0a67 	vmov.f32	s1, s15
 80037d8:	3718      	adds	r7, #24
 80037da:	46bd      	mov	sp, r7
 80037dc:	bdb0      	pop	{r4, r5, r7, pc}
 80037de:	bf00      	nop
 80037e0:	c483522f 	.word	0xc483522f
 80037e4:	407e0001 	.word	0x407e0001
 80037e8:	20000304 	.word	0x20000304
 80037ec:	20000302 	.word	0x20000302
 80037f0:	40f00000 	.word	0x40f00000

080037f4 <get_current_conveyor_pos>:
double getCurrentPositionCM(){
	return (getCurrentPositionMM()/10.0);
}

//Conveyor position
float get_current_conveyor_pos(){
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
	float var;
	if(use_simulator == true){
 80037fa:	4b0d      	ldr	r3, [pc, #52]	; (8003830 <get_current_conveyor_pos+0x3c>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <get_current_conveyor_pos+0x16>
		var = sim_opt_curt_mm;
 8003802:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <get_current_conveyor_pos+0x40>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	e009      	b.n	800381e <get_current_conveyor_pos+0x2a>
	}else{
		//osMutexAcquire(mutex_sample_conveyorHandle, osWaitForever);
		var = ((float)getCurrentPositionMM());
 800380a:	f7ff ffad 	bl	8003768 <getCurrentPositionMM>
 800380e:	ec53 2b10 	vmov	r2, r3, d0
 8003812:	4610      	mov	r0, r2
 8003814:	4619      	mov	r1, r3
 8003816:	f7fd f931 	bl	8000a7c <__aeabi_d2f>
 800381a:	4603      	mov	r3, r0
 800381c:	607b      	str	r3, [r7, #4]
		//osMutexRelease(mutex_sample_conveyorHandle);
	}
	return var;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	ee07 3a90 	vmov	s15, r3
}
 8003824:	eeb0 0a67 	vmov.f32	s0, s15
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200002f0 	.word	0x200002f0
 8003834:	200002f8 	.word	0x200002f8

08003838 <f_update_encoder>:

/* USER CODE END Header_f_update_encoder */
void f_update_encoder(void *argument)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_update_encoder */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(NULL);
 8003840:	2000      	movs	r0, #0
 8003842:	f00d fac5 	bl	8010dd0 <vTaskSuspend>

	//osMutexAcquire(mutex_encoder_cascadeHandle, osWaitForever);

	//osMutexAcquire(mutex_encoder_hardwareHandle, osWaitForever);
	tick_encoder_var = __HAL_TIM_GET_COUNTER(&htim4);
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <f_update_encoder+0x68>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	b21a      	sxth	r2, r3
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <f_update_encoder+0x6c>)
 8003850:	801a      	strh	r2, [r3, #0]
	//osMutexRelease(mutex_encoder_hardwareHandle);

	//Counter cascade by Software
	if(tick_encoder_var<=0 && last_tick_encoder>16383){ //overflow
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <f_update_encoder+0x6c>)
 8003854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003858:	2b00      	cmp	r3, #0
 800385a:	dc0b      	bgt.n	8003874 <f_update_encoder+0x3c>
 800385c:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <f_update_encoder+0x70>)
 800385e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003862:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003866:	db05      	blt.n	8003874 <f_update_encoder+0x3c>
		counter_cascade_by_softw++;
 8003868:	4b10      	ldr	r3, [pc, #64]	; (80038ac <f_update_encoder+0x74>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3301      	adds	r3, #1
 800386e:	4a0f      	ldr	r2, [pc, #60]	; (80038ac <f_update_encoder+0x74>)
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e00f      	b.n	8003894 <f_update_encoder+0x5c>
	}else if(tick_encoder_var>0 && last_tick_encoder <= -16383){ //underflow
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <f_update_encoder+0x6c>)
 8003876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387a:	2b00      	cmp	r3, #0
 800387c:	dd0a      	ble.n	8003894 <f_update_encoder+0x5c>
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <f_update_encoder+0x70>)
 8003880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003884:	4a0a      	ldr	r2, [pc, #40]	; (80038b0 <f_update_encoder+0x78>)
 8003886:	4293      	cmp	r3, r2
 8003888:	da04      	bge.n	8003894 <f_update_encoder+0x5c>
		counter_cascade_by_softw--;
 800388a:	4b08      	ldr	r3, [pc, #32]	; (80038ac <f_update_encoder+0x74>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3b01      	subs	r3, #1
 8003890:	4a06      	ldr	r2, [pc, #24]	; (80038ac <f_update_encoder+0x74>)
 8003892:	6013      	str	r3, [r2, #0]
	}
	last_tick_encoder=tick_encoder_var;
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <f_update_encoder+0x6c>)
 8003896:	f9b3 2000 	ldrsh.w	r2, [r3]
 800389a:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <f_update_encoder+0x70>)
 800389c:	801a      	strh	r2, [r3, #0]
	vTaskSuspend(NULL);
 800389e:	e7cf      	b.n	8003840 <f_update_encoder+0x8>
 80038a0:	200005fc 	.word	0x200005fc
 80038a4:	20000300 	.word	0x20000300
 80038a8:	20000302 	.word	0x20000302
 80038ac:	20000304 	.word	0x20000304
 80038b0:	ffffc002 	.word	0xffffc002

080038b4 <f_simulate_periodic>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_f_simulate_periodic */
void f_simulate_periodic(void *argument)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN f_simulate_periodic */
  /* Infinite loop */
  for(;;)
  {
	vTaskSuspend(NULL);
 80038bc:	2000      	movs	r0, #0
 80038be:	f00d fa87 	bl	8010dd0 <vTaskSuspend>
	//START THE PERIODIC OPTICAL CURTAIN EVENT SIMULATION

	if (!en_period_oc_event_sim_last && en_period_oc_event_sim){
 80038c2:	4b20      	ldr	r3, [pc, #128]	; (8003944 <f_simulate_periodic+0x90>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	f083 0301 	eor.w	r3, r3, #1
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01a      	beq.n	8003906 <f_simulate_periodic+0x52>
 80038d0:	4b1d      	ldr	r3, [pc, #116]	; (8003948 <f_simulate_periodic+0x94>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d016      	beq.n	8003906 <f_simulate_periodic+0x52>
		sim_per_oc_start_pos = get_current_conveyor_pos();
 80038d8:	f7ff ff8c 	bl	80037f4 <get_current_conveyor_pos>
 80038dc:	eef0 7a40 	vmov.f32	s15, s0
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <f_simulate_periodic+0x98>)
 80038e2:	edc3 7a00 	vstr	s15, [r3]
		count_total_OC_trigger_sim = 0;
 80038e6:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <f_simulate_periodic+0x9c>)
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
		count_total_OC_events = 0;
 80038ee:	4b19      	ldr	r3, [pc, #100]	; (8003954 <f_simulate_periodic+0xa0>)
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
		count_done = 0;
 80038f6:	4b18      	ldr	r3, [pc, #96]	; (8003958 <f_simulate_periodic+0xa4>)
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
		count_discard = 0;
 80038fe:	4b17      	ldr	r3, [pc, #92]	; (800395c <f_simulate_periodic+0xa8>)
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
	}

	if(en_period_oc_event_sim)
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <f_simulate_periodic+0x94>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d016      	beq.n	800393c <f_simulate_periodic+0x88>
	{
		trigger_simulator_oc_event();
 800390e:	f000 fdb9 	bl	8004484 <trigger_simulator_oc_event>
		count_total_OC_trigger_sim++;
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <f_simulate_periodic+0x9c>)
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800391c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <f_simulate_periodic+0x9c>)
 8003922:	edc3 7a00 	vstr	s15, [r3]
		sim_per_oc_end_pos = get_current_conveyor_pos();
 8003926:	f7ff ff65 	bl	80037f4 <get_current_conveyor_pos>
 800392a:	eef0 7a40 	vmov.f32	s15, s0
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <f_simulate_periodic+0xac>)
 8003930:	edc3 7a00 	vstr	s15, [r3]
		en_period_oc_event_sim_last = true;
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <f_simulate_periodic+0x90>)
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e7bf      	b.n	80038bc <f_simulate_periodic+0x8>
	}else{
		en_period_oc_event_sim_last = false;
 800393c:	4b01      	ldr	r3, [pc, #4]	; (8003944 <f_simulate_periodic+0x90>)
 800393e:	2200      	movs	r2, #0
 8003940:	701a      	strb	r2, [r3, #0]
	vTaskSuspend(NULL);
 8003942:	e7bb      	b.n	80038bc <f_simulate_periodic+0x8>
 8003944:	200002fe 	.word	0x200002fe
 8003948:	200002fc 	.word	0x200002fc
 800394c:	20000318 	.word	0x20000318
 8003950:	20000314 	.word	0x20000314
 8003954:	20000310 	.word	0x20000310
 8003958:	2000030c 	.word	0x2000030c
 800395c:	20000308 	.word	0x20000308
 8003960:	2000031c 	.word	0x2000031c

08003964 <callback_timer_simulate_conveyor>:
  /* USER CODE END f_simulate_periodic */
}

/* callback_timer_simulate_conveyor function */
void callback_timer_simulate_conveyor(void *argument)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN callback_timer_simulate_conveyor */
	vTaskResume(t_simulate_conveyorHandle);
 800396c:	4b04      	ldr	r3, [pc, #16]	; (8003980 <callback_timer_simulate_conveyor+0x1c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f00d fad9 	bl	8010f28 <vTaskResume>
  /* USER CODE END callback_timer_simulate_conveyor */
}
 8003976:	bf00      	nop
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20000864 	.word	0x20000864

08003984 <callback_timer_watch_queues>:

/* callback_timer_watch_queues function */
void callback_timer_watch_queues(void *argument)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN callback_timer_watch_queues */
	vTaskResume(t_RPI_watchHandle);
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <callback_timer_watch_queues+0x4c>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f00d fac9 	bl	8010f28 <vTaskResume>
	vTaskResume(t_KEYENCE_watchHandle);
 8003996:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <callback_timer_watch_queues+0x50>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f00d fac4 	bl	8010f28 <vTaskResume>
	vTaskResume(t_FG1_wachHandle);
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <callback_timer_watch_queues+0x54>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00d fabf 	bl	8010f28 <vTaskResume>
	vTaskResume(t_FG2_wachHandle);
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <callback_timer_watch_queues+0x58>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f00d faba 	bl	8010f28 <vTaskResume>
	vTaskResume(t_FG3_wachHandle);
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <callback_timer_watch_queues+0x5c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f00d fab5 	bl	8010f28 <vTaskResume>
	vTaskResume(t_FG4_wachHandle);
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <callback_timer_watch_queues+0x60>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f00d fab0 	bl	8010f28 <vTaskResume>
	//vTaskResume(t_DISCARDHandle);
  /* USER CODE END callback_timer_watch_queues */
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000830 	.word	0x20000830
 80039d4:	20000834 	.word	0x20000834
 80039d8:	20000838 	.word	0x20000838
 80039dc:	2000083c 	.word	0x2000083c
 80039e0:	20000840 	.word	0x20000840
 80039e4:	20000844 	.word	0x20000844

080039e8 <callback_timer_update_encoder>:

/* callback_timer_update_encoder function */
void callback_timer_update_encoder(void *argument)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN callback_timer_update_encoder */
	vTaskResume(t_update_encoderHandle);
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <callback_timer_update_encoder+0x1c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f00d fa97 	bl	8010f28 <vTaskResume>
  /* USER CODE END callback_timer_update_encoder */
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000870 	.word	0x20000870

08003a08 <callback_timer_simulate_periodic_oc>:

/* callback_timer_simulate_periodic_oc function */
void callback_timer_simulate_periodic_oc(void *argument)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN callback_timer_simulate_periodic_oc */
	vTaskResume(t_simulate_periodicHandle);
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <callback_timer_simulate_periodic_oc+0x1c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f00d fa87 	bl	8010f28 <vTaskResume>
  /* USER CODE END callback_timer_simulate_periodic_oc */
}
 8003a1a:	bf00      	nop
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20000874 	.word	0x20000874

08003a28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003a3a:	f000 ff19 	bl	8004870 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40001000 	.word	0x40001000

08003a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a50:	b672      	cpsid	i
}
 8003a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a54:	e7fe      	b.n	8003a54 <Error_Handler+0x8>
	...

08003a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	4a10      	ldr	r2, [pc, #64]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a68:	6413      	str	r3, [r2, #64]	; 0x40
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	607b      	str	r3, [r7, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a80:	6453      	str	r3, [r2, #68]	; 0x44
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_MspInit+0x4c>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	210f      	movs	r1, #15
 8003a92:	f06f 0001 	mvn.w	r0, #1
 8003a96:	f000 ffe7 	bl	8004a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800

08003aa8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a0a      	ldr	r2, [pc, #40]	; (8003ae0 <HAL_TIM_OC_MspInit+0x38>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10b      	bne.n	8003ad2 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003aba:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <HAL_TIM_OC_MspInit+0x3c>)
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	4a09      	ldr	r2, [pc, #36]	; (8003ae4 <HAL_TIM_OC_MspInit+0x3c>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_TIM_OC_MspInit+0x3c>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a13      	ldr	r2, [pc, #76]	; (8003b44 <HAL_TIM_Base_MspInit+0x5c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d10c      	bne.n	8003b14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_TIM_Base_MspInit+0x60>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	4a12      	ldr	r2, [pc, #72]	; (8003b48 <HAL_TIM_Base_MspInit+0x60>)
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	6413      	str	r3, [r2, #64]	; 0x40
 8003b06:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_TIM_Base_MspInit+0x60>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003b12:	e010      	b.n	8003b36 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM5)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0c      	ldr	r2, [pc, #48]	; (8003b4c <HAL_TIM_Base_MspInit+0x64>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d10b      	bne.n	8003b36 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_TIM_Base_MspInit+0x60>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a09      	ldr	r2, [pc, #36]	; (8003b48 <HAL_TIM_Base_MspInit+0x60>)
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <HAL_TIM_Base_MspInit+0x60>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40000400 	.word	0x40000400
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40000c00 	.word	0x40000c00

08003b50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	; 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	f107 0314 	add.w	r3, r7, #20
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
 8003b66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a17      	ldr	r2, [pc, #92]	; (8003bcc <HAL_TIM_Encoder_MspInit+0x7c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d128      	bne.n	8003bc4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b8a:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b90:	f043 0308 	orr.w	r3, r3, #8
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_24V_5_Pin|ENC_24V_6_Pin;
 8003ba2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba8:	2302      	movs	r3, #2
 8003baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bac:	2301      	movs	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4805      	ldr	r0, [pc, #20]	; (8003bd4 <HAL_TIM_Encoder_MspInit+0x84>)
 8003bc0:	f002 fa5c 	bl	800607c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003bc4:	bf00      	nop
 8003bc6:	3728      	adds	r7, #40	; 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40000800 	.word	0x40000800
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40020c00 	.word	0x40020c00

08003bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	f107 0314 	add.w	r3, r7, #20
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	60da      	str	r2, [r3, #12]
 8003bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_TIM_MspPostInit+0xa8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d11d      	bne.n	8003c36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bfa:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <HAL_TIM_MspPostInit+0xac>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_TIM_MspPostInit+0xac>)
 8003c00:	f043 0310 	orr.w	r3, r3, #16
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b1f      	ldr	r3, [pc, #124]	; (8003c84 <HAL_TIM_MspPostInit+0xac>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f003 0310 	and.w	r3, r3, #16
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = SIMULATE_ENCODER_CH2_Pin;
 8003c12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c20:	2300      	movs	r3, #0
 8003c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c24:	2301      	movs	r3, #1
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SIMULATE_ENCODER_CH2_GPIO_Port, &GPIO_InitStruct);
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4816      	ldr	r0, [pc, #88]	; (8003c88 <HAL_TIM_MspPostInit+0xb0>)
 8003c30:	f002 fa24 	bl	800607c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c34:	e020      	b.n	8003c78 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a14      	ldr	r2, [pc, #80]	; (8003c8c <HAL_TIM_MspPostInit+0xb4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d11b      	bne.n	8003c78 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_TIM_MspPostInit+0xac>)
 8003c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c44:	4a0f      	ldr	r2, [pc, #60]	; (8003c84 <HAL_TIM_MspPostInit+0xac>)
 8003c46:	f043 0302 	orr.w	r3, r3, #2
 8003c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <HAL_TIM_MspPostInit+0xac>)
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SIMULATE_ENCODER_CH1_Pin;
 8003c58:	2310      	movs	r3, #16
 8003c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c64:	2300      	movs	r3, #0
 8003c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SIMULATE_ENCODER_CH1_GPIO_Port, &GPIO_InitStruct);
 8003c6c:	f107 0314 	add.w	r3, r7, #20
 8003c70:	4619      	mov	r1, r3
 8003c72:	4807      	ldr	r0, [pc, #28]	; (8003c90 <HAL_TIM_MspPostInit+0xb8>)
 8003c74:	f002 fa02 	bl	800607c <HAL_GPIO_Init>
}
 8003c78:	bf00      	nop
 8003c7a:	3728      	adds	r7, #40	; 0x28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40010000 	.word	0x40010000
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40000400 	.word	0x40000400
 8003c90:	40020400 	.word	0x40020400

08003c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b0b0      	sub	sp, #192	; 0xc0
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cb0:	2284      	movs	r2, #132	; 0x84
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f01f f8da 	bl	8022e6e <memset>
  if(huart->Instance==UART5)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a81      	ldr	r2, [pc, #516]	; (8003ec4 <HAL_UART_MspInit+0x230>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d166      	bne.n	8003d92 <HAL_UART_MspInit+0xfe>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8003cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 fb64 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003cde:	f7ff feb5 	bl	8003a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003ce2:	4b79      	ldr	r3, [pc, #484]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a78      	ldr	r2, [pc, #480]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cfa:	4b73      	ldr	r3, [pc, #460]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfe:	4a72      	ldr	r2, [pc, #456]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003d00:	f043 0304 	orr.w	r3, r3, #4
 8003d04:	6313      	str	r3, [r2, #48]	; 0x30
 8003d06:	4b70      	ldr	r3, [pc, #448]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	623b      	str	r3, [r7, #32]
 8003d10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d12:	4b6d      	ldr	r3, [pc, #436]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	4a6c      	ldr	r2, [pc, #432]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003d18:	f043 0308 	orr.w	r3, r3, #8
 8003d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1e:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	61fb      	str	r3, [r7, #28]
 8003d28:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d32:	2302      	movs	r3, #2
 8003d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d44:	2308      	movs	r3, #8
 8003d46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d4e:	4619      	mov	r1, r3
 8003d50:	485e      	ldr	r0, [pc, #376]	; (8003ecc <HAL_UART_MspInit+0x238>)
 8003d52:	f002 f993 	bl	800607c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d56:	2304      	movs	r3, #4
 8003d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d6e:	2308      	movs	r3, #8
 8003d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003d78:	4619      	mov	r1, r3
 8003d7a:	4855      	ldr	r0, [pc, #340]	; (8003ed0 <HAL_UART_MspInit+0x23c>)
 8003d7c:	f002 f97e 	bl	800607c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8003d80:	2200      	movs	r2, #0
 8003d82:	2105      	movs	r1, #5
 8003d84:	2035      	movs	r0, #53	; 0x35
 8003d86:	f000 fe6f 	bl	8004a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003d8a:	2035      	movs	r0, #53	; 0x35
 8003d8c:	f000 fe88 	bl	8004aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d90:	e094      	b.n	8003ebc <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART3)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a4f      	ldr	r2, [pc, #316]	; (8003ed4 <HAL_UART_MspInit+0x240>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d145      	bne.n	8003e28 <HAL_UART_MspInit+0x194>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003da2:	2300      	movs	r3, #0
 8003da4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003daa:	4618      	mov	r0, r3
 8003dac:	f004 faf8 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_UART_MspInit+0x126>
      Error_Handler();
 8003db6:	f7ff fe49 	bl	8003a4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003dba:	4b43      	ldr	r3, [pc, #268]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	4a42      	ldr	r2, [pc, #264]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc6:	4b40      	ldr	r3, [pc, #256]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dd2:	4b3d      	ldr	r3, [pc, #244]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	4a3c      	ldr	r2, [pc, #240]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003dd8:	f043 0308 	orr.w	r3, r3, #8
 8003ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dde:	4b3a      	ldr	r3, [pc, #232]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	617b      	str	r3, [r7, #20]
 8003de8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df2:	2302      	movs	r3, #2
 8003df4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003e04:	2307      	movs	r3, #7
 8003e06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e0a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003e0e:	4619      	mov	r1, r3
 8003e10:	482f      	ldr	r0, [pc, #188]	; (8003ed0 <HAL_UART_MspInit+0x23c>)
 8003e12:	f002 f933 	bl	800607c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003e16:	2200      	movs	r2, #0
 8003e18:	2105      	movs	r1, #5
 8003e1a:	2027      	movs	r0, #39	; 0x27
 8003e1c:	f000 fe24 	bl	8004a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003e20:	2027      	movs	r0, #39	; 0x27
 8003e22:	f000 fe3d 	bl	8004aa0 <HAL_NVIC_EnableIRQ>
}
 8003e26:	e049      	b.n	8003ebc <HAL_UART_MspInit+0x228>
  else if(huart->Instance==USART6)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a2a      	ldr	r2, [pc, #168]	; (8003ed8 <HAL_UART_MspInit+0x244>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d144      	bne.n	8003ebc <HAL_UART_MspInit+0x228>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e42:	4618      	mov	r0, r3
 8003e44:	f004 faac 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8003e4e:	f7ff fdfd 	bl	8003a4c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003e52:	4b1d      	ldr	r3, [pc, #116]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	4a1c      	ldr	r2, [pc, #112]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003e58:	f043 0320 	orr.w	r3, r3, #32
 8003e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e6a:	4b17      	ldr	r3, [pc, #92]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	4a16      	ldr	r2, [pc, #88]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6313      	str	r3, [r2, #48]	; 0x30
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <HAL_UART_MspInit+0x234>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	f003 0304 	and.w	r3, r3, #4
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e82:	23c0      	movs	r3, #192	; 0xc0
 8003e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e88:	2302      	movs	r3, #2
 8003e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e94:	2303      	movs	r3, #3
 8003e96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4809      	ldr	r0, [pc, #36]	; (8003ecc <HAL_UART_MspInit+0x238>)
 8003ea8:	f002 f8e8 	bl	800607c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003eac:	2200      	movs	r2, #0
 8003eae:	2105      	movs	r1, #5
 8003eb0:	2047      	movs	r0, #71	; 0x47
 8003eb2:	f000 fdd9 	bl	8004a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003eb6:	2047      	movs	r0, #71	; 0x47
 8003eb8:	f000 fdf2 	bl	8004aa0 <HAL_NVIC_EnableIRQ>
}
 8003ebc:	bf00      	nop
 8003ebe:	37c0      	adds	r7, #192	; 0xc0
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40005000 	.word	0x40005000
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	40020800 	.word	0x40020800
 8003ed0:	40020c00 	.word	0x40020c00
 8003ed4:	40004800 	.word	0x40004800
 8003ed8:	40011400 	.word	0x40011400

08003edc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08e      	sub	sp, #56	; 0x38
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003eec:	4b33      	ldr	r3, [pc, #204]	; (8003fbc <HAL_InitTick+0xe0>)
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	4a32      	ldr	r2, [pc, #200]	; (8003fbc <HAL_InitTick+0xe0>)
 8003ef2:	f043 0310 	orr.w	r3, r3, #16
 8003ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ef8:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <HAL_InitTick+0xe0>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f04:	f107 0210 	add.w	r2, r7, #16
 8003f08:	f107 0314 	add.w	r3, r7, #20
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f004 fa14 	bl	800833c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003f1e:	f004 f9e5 	bl	80082ec <HAL_RCC_GetPCLK1Freq>
 8003f22:	6378      	str	r0, [r7, #52]	; 0x34
 8003f24:	e004      	b.n	8003f30 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003f26:	f004 f9e1 	bl	80082ec <HAL_RCC_GetPCLK1Freq>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <HAL_InitTick+0xe4>)
 8003f34:	fba2 2303 	umull	r2, r3, r2, r3
 8003f38:	0c9b      	lsrs	r3, r3, #18
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003f3e:	4b21      	ldr	r3, [pc, #132]	; (8003fc4 <HAL_InitTick+0xe8>)
 8003f40:	4a21      	ldr	r2, [pc, #132]	; (8003fc8 <HAL_InitTick+0xec>)
 8003f42:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <HAL_InitTick+0xe8>)
 8003f46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f4a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003f4c:	4a1d      	ldr	r2, [pc, #116]	; (8003fc4 <HAL_InitTick+0xe8>)
 8003f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f50:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003f52:	4b1c      	ldr	r3, [pc, #112]	; (8003fc4 <HAL_InitTick+0xe8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <HAL_InitTick+0xe8>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f5e:	4b19      	ldr	r3, [pc, #100]	; (8003fc4 <HAL_InitTick+0xe8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003f64:	4817      	ldr	r0, [pc, #92]	; (8003fc4 <HAL_InitTick+0xe8>)
 8003f66:	f004 fe0b 	bl	8008b80 <HAL_TIM_Base_Init>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003f70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d11b      	bne.n	8003fb0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003f78:	4812      	ldr	r0, [pc, #72]	; (8003fc4 <HAL_InitTick+0xe8>)
 8003f7a:	f004 fec9 	bl	8008d10 <HAL_TIM_Base_Start_IT>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003f84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d111      	bne.n	8003fb0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f8c:	2036      	movs	r0, #54	; 0x36
 8003f8e:	f000 fd87 	bl	8004aa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b0f      	cmp	r3, #15
 8003f96:	d808      	bhi.n	8003faa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003f98:	2200      	movs	r2, #0
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	2036      	movs	r0, #54	; 0x36
 8003f9e:	f000 fd63 	bl	8004a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <HAL_InitTick+0xf0>)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e002      	b.n	8003fb0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3738      	adds	r7, #56	; 0x38
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	431bde83 	.word	0x431bde83
 8003fc4:	200008cc 	.word	0x200008cc
 8003fc8:	40001000 	.word	0x40001000
 8003fcc:	2000000c 	.word	0x2000000c

08003fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fd4:	e7fe      	b.n	8003fd4 <NMI_Handler+0x4>

08003fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fda:	e7fe      	b.n	8003fda <HardFault_Handler+0x4>

08003fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fe0:	e7fe      	b.n	8003fe0 <MemManage_Handler+0x4>

08003fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fe6:	e7fe      	b.n	8003fe6 <BusFault_Handler+0x4>

08003fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fec:	e7fe      	b.n	8003fec <UsageFault_Handler+0x4>

08003fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ff2:	bf00      	nop
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004000:	4802      	ldr	r0, [pc, #8]	; (800400c <USART3_IRQHandler+0x10>)
 8004002:	f006 fb71 	bl	800a6e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	2000071c 	.word	0x2000071c

08004010 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_24V_3_Pin);
 8004014:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004018:	f002 f9f6 	bl	8006408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_24V_4_Pin);
 800401c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004020:	f002 f9f2 	bl	8006408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_24V_1_Pin);
 8004024:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004028:	f002 f9ee 	bl	8006408 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_24V_2_Pin);
 800402c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004030:	f002 f9ea 	bl	8006408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004034:	bf00      	nop
 8004036:	bd80      	pop	{r7, pc}

08004038 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800403c:	4802      	ldr	r0, [pc, #8]	; (8004048 <UART5_IRQHandler+0x10>)
 800403e:	f006 fb53 	bl	800a6e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004042:	bf00      	nop
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	20000694 	.word	0x20000694

0800404c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004050:	4802      	ldr	r0, [pc, #8]	; (800405c <TIM6_DAC_IRQHandler+0x10>)
 8004052:	f005 f9bb 	bl	80093cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004056:	bf00      	nop
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200008cc 	.word	0x200008cc

08004060 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8004064:	4802      	ldr	r0, [pc, #8]	; (8004070 <ETH_IRQHandler+0x10>)
 8004066:	f001 f935 	bl	80052d4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20005324 	.word	0x20005324

08004074 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004078:	4802      	ldr	r0, [pc, #8]	; (8004084 <OTG_FS_IRQHandler+0x10>)
 800407a:	f002 fb23 	bl	80066c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20024e34 	.word	0x20024e34

08004088 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <USART6_IRQHandler+0x10>)
 800408e:	f006 fb2b 	bl	800a6e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200007a4 	.word	0x200007a4

0800409c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
	return 1;
 80040a0:	2301      	movs	r3, #1
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <_kill>:

int _kill(int pid, int sig)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <_kill+0x20>)
 80040b8:	2216      	movs	r2, #22
 80040ba:	601a      	str	r2, [r3, #0]
	return -1;
 80040bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	20025480 	.word	0x20025480

080040d0 <_exit>:

void _exit (int status)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80040d8:	f04f 31ff 	mov.w	r1, #4294967295
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff ffe5 	bl	80040ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80040e2:	e7fe      	b.n	80040e2 <_exit+0x12>

080040e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	e00a      	b.n	800410c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040f6:	f3af 8000 	nop.w
 80040fa:	4601      	mov	r1, r0
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	60ba      	str	r2, [r7, #8]
 8004102:	b2ca      	uxtb	r2, r1
 8004104:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	3301      	adds	r3, #1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	dbf0      	blt.n	80040f6 <_read+0x12>
	}

return len;
 8004114:	687b      	ldr	r3, [r7, #4]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3718      	adds	r7, #24
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	e009      	b.n	8004144 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	60ba      	str	r2, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3301      	adds	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	dbf1      	blt.n	8004130 <_write+0x12>
	}
	return len;
 800414c:	687b      	ldr	r3, [r7, #4]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <_close>:

int _close(int file)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
	return -1;
 800415e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800417e:	605a      	str	r2, [r3, #4]
	return 0;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <_isatty>:

int _isatty(int file)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
	return 1;
 8004196:	2301      	movs	r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
	return 0;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <_sbrk+0x5c>)
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <_sbrk+0x60>)
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <_sbrk+0x64>)
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <_sbrk+0x68>)
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041e2:	4b10      	ldr	r3, [pc, #64]	; (8004224 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d205      	bcs.n	80041fc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80041f0:	4b0e      	ldr	r3, [pc, #56]	; (800422c <_sbrk+0x6c>)
 80041f2:	220c      	movs	r2, #12
 80041f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295
 80041fa:	e009      	b.n	8004210 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <_sbrk+0x64>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <_sbrk+0x64>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	4a06      	ldr	r2, [pc, #24]	; (8004224 <_sbrk+0x64>)
 800420c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800420e:	68fb      	ldr	r3, [r7, #12]
}
 8004210:	4618      	mov	r0, r3
 8004212:	371c      	adds	r7, #28
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20050000 	.word	0x20050000
 8004220:	00000400 	.word	0x00000400
 8004224:	20000918 	.word	0x20000918
 8004228:	20025488 	.word	0x20025488
 800422c:	20025480 	.word	0x20025480

08004230 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <SystemInit+0x20>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	4a05      	ldr	r2, [pc, #20]	; (8004250 <SystemInit+0x20>)
 800423c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	e000ed00 	.word	0xe000ed00

08004254 <on_trigger_RPI>:
 */

#include "trigger.h"

//TRIGGER FUNCTIONS
void on_trigger_RPI(){
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_RPI_GPIO, TRIGGER_RPI_PIN, GPIO_PIN_SET);
 8004258:	2201      	movs	r2, #1
 800425a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800425e:	4802      	ldr	r0, [pc, #8]	; (8004268 <on_trigger_RPI+0x14>)
 8004260:	f002 f8b8 	bl	80063d4 <HAL_GPIO_WritePin>
}
 8004264:	bf00      	nop
 8004266:	bd80      	pop	{r7, pc}
 8004268:	40021000 	.word	0x40021000

0800426c <off_trigger_RPI>:
void off_trigger_RPI(){
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_RPI_GPIO, TRIGGER_RPI_PIN, GPIO_PIN_RESET);
 8004270:	2200      	movs	r2, #0
 8004272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004276:	4802      	ldr	r0, [pc, #8]	; (8004280 <off_trigger_RPI+0x14>)
 8004278:	f002 f8ac 	bl	80063d4 <HAL_GPIO_WritePin>
}
 800427c:	bf00      	nop
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40021000 	.word	0x40021000

08004284 <trigger_RPI>:
void trigger_RPI(){
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
	on_trigger_RPI();
 8004288:	f7ff ffe4 	bl	8004254 <on_trigger_RPI>
	osDelay(get_ticks_from_ms(TIME_TRIGGERS_WIDTH));
 800428c:	2001      	movs	r0, #1
 800428e:	f7fc fdc3 	bl	8000e18 <get_ticks_from_ms>
 8004292:	4603      	mov	r3, r0
 8004294:	4618      	mov	r0, r3
 8004296:	f009 ff9f 	bl	800e1d8 <osDelay>
	off_trigger_RPI();
 800429a:	f7ff ffe7 	bl	800426c <off_trigger_RPI>
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <on_trigger_KEYENCE>:
bool get_trigger_RPI(){
	return (bool) HAL_GPIO_ReadPin(TRIGGER_RPI_GPIO, TRIGGER_RPI_PIN);
}


void on_trigger_KEYENCE(){
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_KEYENCE_GPIO, TRIGGER_KEYENCE_PIN, GPIO_PIN_SET);
 80042a8:	2201      	movs	r2, #1
 80042aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042ae:	4802      	ldr	r0, [pc, #8]	; (80042b8 <on_trigger_KEYENCE+0x14>)
 80042b0:	f002 f890 	bl	80063d4 <HAL_GPIO_WritePin>
}
 80042b4:	bf00      	nop
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000

080042bc <off_trigger_KEYENCE>:
void off_trigger_KEYENCE(){
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_KEYENCE_GPIO, TRIGGER_KEYENCE_PIN, GPIO_PIN_RESET);
 80042c0:	2200      	movs	r2, #0
 80042c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80042c6:	4802      	ldr	r0, [pc, #8]	; (80042d0 <off_trigger_KEYENCE+0x14>)
 80042c8:	f002 f884 	bl	80063d4 <HAL_GPIO_WritePin>
}
 80042cc:	bf00      	nop
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	40021000 	.word	0x40021000

080042d4 <trigger_KEYENCE>:
void trigger_KEYENCE(){
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
	on_trigger_KEYENCE();
 80042d8:	f7ff ffe4 	bl	80042a4 <on_trigger_KEYENCE>
	osDelay(get_ticks_from_ms(TIME_TRIGGERS_WIDTH));
 80042dc:	2001      	movs	r0, #1
 80042de:	f7fc fd9b 	bl	8000e18 <get_ticks_from_ms>
 80042e2:	4603      	mov	r3, r0
 80042e4:	4618      	mov	r0, r3
 80042e6:	f009 ff77 	bl	800e1d8 <osDelay>
	off_trigger_KEYENCE();
 80042ea:	f7ff ffe7 	bl	80042bc <off_trigger_KEYENCE>
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <on_trigger_FG1>:
bool get_trigger_KEYENCE(){
	return (bool) HAL_GPIO_ReadPin(TRIGGER_KEYENCE_GPIO, TRIGGER_KEYENCE_PIN);
}


void on_trigger_FG1(){
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_FG1_GPIO, TRIGGER_FG1_PIN, GPIO_PIN_SET);
 80042f8:	2201      	movs	r2, #1
 80042fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80042fe:	4802      	ldr	r0, [pc, #8]	; (8004308 <on_trigger_FG1+0x14>)
 8004300:	f002 f868 	bl	80063d4 <HAL_GPIO_WritePin>
}
 8004304:	bf00      	nop
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000

0800430c <off_trigger_FG1>:
void off_trigger_FG1(){
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_FG1_GPIO, TRIGGER_FG1_PIN, GPIO_PIN_RESET);
 8004310:	2200      	movs	r2, #0
 8004312:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004316:	4802      	ldr	r0, [pc, #8]	; (8004320 <off_trigger_FG1+0x14>)
 8004318:	f002 f85c 	bl	80063d4 <HAL_GPIO_WritePin>
}
 800431c:	bf00      	nop
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000

08004324 <trigger_FG1>:
void trigger_FG1(){
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
	on_trigger_FG1();
 8004328:	f7ff ffe4 	bl	80042f4 <on_trigger_FG1>
	osDelay(get_ticks_from_ms(TIME_TRIGGERS_WIDTH));
 800432c:	2001      	movs	r0, #1
 800432e:	f7fc fd73 	bl	8000e18 <get_ticks_from_ms>
 8004332:	4603      	mov	r3, r0
 8004334:	4618      	mov	r0, r3
 8004336:	f009 ff4f 	bl	800e1d8 <osDelay>
	off_trigger_FG1();
 800433a:	f7ff ffe7 	bl	800430c <off_trigger_FG1>
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <on_trigger_FG2>:
bool get_trigger_FG1(){
	return (bool) HAL_GPIO_ReadPin(TRIGGER_FG1_GPIO, TRIGGER_FG1_PIN);
}


void on_trigger_FG2(){
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_FG2_GPIO, TRIGGER_FG2_PIN, GPIO_PIN_SET);
 8004348:	2201      	movs	r2, #1
 800434a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800434e:	4802      	ldr	r0, [pc, #8]	; (8004358 <on_trigger_FG2+0x14>)
 8004350:	f002 f840 	bl	80063d4 <HAL_GPIO_WritePin>
}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40021000 	.word	0x40021000

0800435c <off_trigger_FG2>:
void off_trigger_FG2(){
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_FG2_GPIO, TRIGGER_FG2_PIN, GPIO_PIN_RESET);
 8004360:	2200      	movs	r2, #0
 8004362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004366:	4802      	ldr	r0, [pc, #8]	; (8004370 <off_trigger_FG2+0x14>)
 8004368:	f002 f834 	bl	80063d4 <HAL_GPIO_WritePin>
}
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}
 8004370:	40021000 	.word	0x40021000

08004374 <trigger_FG2>:
void trigger_FG2(){
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
	on_trigger_FG2();
 8004378:	f7ff ffe4 	bl	8004344 <on_trigger_FG2>
	osDelay(get_ticks_from_ms(TIME_TRIGGERS_WIDTH));
 800437c:	2001      	movs	r0, #1
 800437e:	f7fc fd4b 	bl	8000e18 <get_ticks_from_ms>
 8004382:	4603      	mov	r3, r0
 8004384:	4618      	mov	r0, r3
 8004386:	f009 ff27 	bl	800e1d8 <osDelay>
	off_trigger_FG2();
 800438a:	f7ff ffe7 	bl	800435c <off_trigger_FG2>
}
 800438e:	bf00      	nop
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <on_trigger_FG3>:
bool get_trigger_FG2(){
	return (bool) HAL_GPIO_ReadPin(TRIGGER_FG2_GPIO, TRIGGER_FG2_PIN);
}


void on_trigger_FG3(){
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_FG3_GPIO, TRIGGER_FG3_PIN, GPIO_PIN_SET);
 8004398:	2201      	movs	r2, #1
 800439a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800439e:	4802      	ldr	r0, [pc, #8]	; (80043a8 <on_trigger_FG3+0x14>)
 80043a0:	f002 f818 	bl	80063d4 <HAL_GPIO_WritePin>
}
 80043a4:	bf00      	nop
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	40021000 	.word	0x40021000

080043ac <off_trigger_FG3>:
void off_trigger_FG3(){
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_FG3_GPIO, TRIGGER_FG3_PIN, GPIO_PIN_RESET);
 80043b0:	2200      	movs	r2, #0
 80043b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043b6:	4802      	ldr	r0, [pc, #8]	; (80043c0 <off_trigger_FG3+0x14>)
 80043b8:	f002 f80c 	bl	80063d4 <HAL_GPIO_WritePin>
}
 80043bc:	bf00      	nop
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40021000 	.word	0x40021000

080043c4 <trigger_FG3>:
void trigger_FG3(){
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
	on_trigger_FG3();
 80043c8:	f7ff ffe4 	bl	8004394 <on_trigger_FG3>
	osDelay(get_ticks_from_ms(TIME_TRIGGERS_WIDTH));
 80043cc:	2001      	movs	r0, #1
 80043ce:	f7fc fd23 	bl	8000e18 <get_ticks_from_ms>
 80043d2:	4603      	mov	r3, r0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f009 feff 	bl	800e1d8 <osDelay>
	off_trigger_FG3();
 80043da:	f7ff ffe7 	bl	80043ac <off_trigger_FG3>
}
 80043de:	bf00      	nop
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <on_trigger_FG4>:
bool get_trigger_FG3(){
	return (bool) HAL_GPIO_ReadPin(TRIGGER_FG3_GPIO, TRIGGER_FG3_PIN);
}


void on_trigger_FG4(){
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_FG4_GPIO, TRIGGER_FG4_PIN, GPIO_PIN_SET);
 80043e8:	2201      	movs	r2, #1
 80043ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043ee:	4802      	ldr	r0, [pc, #8]	; (80043f8 <on_trigger_FG4+0x14>)
 80043f0:	f001 fff0 	bl	80063d4 <HAL_GPIO_WritePin>
}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40021000 	.word	0x40021000

080043fc <off_trigger_FG4>:
void off_trigger_FG4(){
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_FG4_GPIO, TRIGGER_FG4_PIN, GPIO_PIN_RESET);
 8004400:	2200      	movs	r2, #0
 8004402:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004406:	4802      	ldr	r0, [pc, #8]	; (8004410 <off_trigger_FG4+0x14>)
 8004408:	f001 ffe4 	bl	80063d4 <HAL_GPIO_WritePin>
}
 800440c:	bf00      	nop
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40021000 	.word	0x40021000

08004414 <trigger_FG4>:
void trigger_FG4(){
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
	on_trigger_FG4();
 8004418:	f7ff ffe4 	bl	80043e4 <on_trigger_FG4>
	osDelay(get_ticks_from_ms(TIME_TRIGGERS_WIDTH));
 800441c:	2001      	movs	r0, #1
 800441e:	f7fc fcfb 	bl	8000e18 <get_ticks_from_ms>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f009 fed7 	bl	800e1d8 <osDelay>
	off_trigger_FG4();
 800442a:	f7ff ffe7 	bl	80043fc <off_trigger_FG4>
}
 800442e:	bf00      	nop
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <on_trigger_DISCARD>:
bool get_trigger_FG4(){
	return (bool) HAL_GPIO_ReadPin(TRIGGER_FG4_GPIO, TRIGGER_FG4_PIN);
}


void on_trigger_DISCARD(){
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_DISCARD_GPIO, TRIGGER_DISCARD_PIN, GPIO_PIN_SET);
 8004438:	2201      	movs	r2, #1
 800443a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800443e:	4802      	ldr	r0, [pc, #8]	; (8004448 <on_trigger_DISCARD+0x14>)
 8004440:	f001 ffc8 	bl	80063d4 <HAL_GPIO_WritePin>
}
 8004444:	bf00      	nop
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000

0800444c <off_trigger_DISCARD>:
void off_trigger_DISCARD(){
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_DISCARD_GPIO, TRIGGER_DISCARD_PIN, GPIO_PIN_RESET);
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004456:	4802      	ldr	r0, [pc, #8]	; (8004460 <off_trigger_DISCARD+0x14>)
 8004458:	f001 ffbc 	bl	80063d4 <HAL_GPIO_WritePin>
}
 800445c:	bf00      	nop
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000

08004464 <trigger_DISCARD>:
void trigger_DISCARD(){
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
	on_trigger_DISCARD();
 8004468:	f7ff ffe4 	bl	8004434 <on_trigger_DISCARD>
	osDelay(get_ticks_from_ms(TIME_TRIGGERS_WIDTH));
 800446c:	2001      	movs	r0, #1
 800446e:	f7fc fcd3 	bl	8000e18 <get_ticks_from_ms>
 8004472:	4603      	mov	r3, r0
 8004474:	4618      	mov	r0, r3
 8004476:	f009 feaf 	bl	800e1d8 <osDelay>
	off_trigger_DISCARD();
 800447a:	f7ff ffe7 	bl	800444c <off_trigger_DISCARD>
}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <trigger_simulator_oc_event>:
bool get_trigger_DISCARD(){
	return (bool) HAL_GPIO_ReadPin(TRIGGER_DISCARD_GPIO, TRIGGER_DISCARD_PIN);
}
// Simulator OC Event
void trigger_simulator_oc_event(){
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGGER_SIMULATOR_OC_GPIO, TRIGGER_SIMULATOR_OC_PIN, GPIO_PIN_SET);
 8004488:	2201      	movs	r2, #1
 800448a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800448e:	4809      	ldr	r0, [pc, #36]	; (80044b4 <trigger_simulator_oc_event+0x30>)
 8004490:	f001 ffa0 	bl	80063d4 <HAL_GPIO_WritePin>
	osDelay(get_ticks_from_ms(TIME_TRIGGERS_WIDTH));
 8004494:	2001      	movs	r0, #1
 8004496:	f7fc fcbf 	bl	8000e18 <get_ticks_from_ms>
 800449a:	4603      	mov	r3, r0
 800449c:	4618      	mov	r0, r3
 800449e:	f009 fe9b 	bl	800e1d8 <osDelay>
	HAL_GPIO_WritePin(TRIGGER_SIMULATOR_OC_GPIO, TRIGGER_SIMULATOR_OC_PIN, GPIO_PIN_RESET);
 80044a2:	2200      	movs	r2, #0
 80044a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044a8:	4802      	ldr	r0, [pc, #8]	; (80044b4 <trigger_simulator_oc_event+0x30>)
 80044aa:	f001 ff93 	bl	80063d4 <HAL_GPIO_WritePin>
}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40021400 	.word	0x40021400

080044b8 <turn_on_Indicator_R>:

//INDICATOR FUNCTIONS


void turn_on_Indicator_R(){
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INDICATOR_R_GPIO, INDICATOR_R_PIN, GPIO_PIN_SET);
 80044bc:	2201      	movs	r2, #1
 80044be:	2101      	movs	r1, #1
 80044c0:	4802      	ldr	r0, [pc, #8]	; (80044cc <turn_on_Indicator_R+0x14>)
 80044c2:	f001 ff87 	bl	80063d4 <HAL_GPIO_WritePin>
}
 80044c6:	bf00      	nop
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40020400 	.word	0x40020400

080044d0 <turn_off_Indicator_R>:
void turn_off_Indicator_R(){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INDICATOR_R_GPIO, INDICATOR_R_PIN, GPIO_PIN_RESET);
 80044d4:	2200      	movs	r2, #0
 80044d6:	2101      	movs	r1, #1
 80044d8:	4802      	ldr	r0, [pc, #8]	; (80044e4 <turn_off_Indicator_R+0x14>)
 80044da:	f001 ff7b 	bl	80063d4 <HAL_GPIO_WritePin>
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40020400 	.word	0x40020400

080044e8 <turn_on_Indicator_G>:

void turn_on_Indicator_G(){
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INDICATOR_G_GPIO, INDICATOR_G_PIN, GPIO_PIN_SET);
 80044ec:	2201      	movs	r2, #1
 80044ee:	2102      	movs	r1, #2
 80044f0:	4802      	ldr	r0, [pc, #8]	; (80044fc <turn_on_Indicator_G+0x14>)
 80044f2:	f001 ff6f 	bl	80063d4 <HAL_GPIO_WritePin>
}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40020400 	.word	0x40020400

08004500 <turn_off_Indicator_G>:
void turn_off_Indicator_G(){
 8004500:	b580      	push	{r7, lr}
 8004502:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INDICATOR_G_GPIO, INDICATOR_G_PIN, GPIO_PIN_RESET);
 8004504:	2200      	movs	r2, #0
 8004506:	2102      	movs	r1, #2
 8004508:	4802      	ldr	r0, [pc, #8]	; (8004514 <turn_off_Indicator_G+0x14>)
 800450a:	f001 ff63 	bl	80063d4 <HAL_GPIO_WritePin>
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40020400 	.word	0x40020400

08004518 <turn_on_Indicator_B>:


void turn_on_Indicator_B(){
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INDICATOR_B_GPIO, INDICATOR_B_PIN, GPIO_PIN_SET);
 800451c:	2201      	movs	r2, #1
 800451e:	2104      	movs	r1, #4
 8004520:	4802      	ldr	r0, [pc, #8]	; (800452c <turn_on_Indicator_B+0x14>)
 8004522:	f001 ff57 	bl	80063d4 <HAL_GPIO_WritePin>
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	40020400 	.word	0x40020400

08004530 <turn_off_Indicator_B>:
void turn_off_Indicator_B(){
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(INDICATOR_B_GPIO, INDICATOR_B_PIN, GPIO_PIN_RESET);
 8004534:	2200      	movs	r2, #0
 8004536:	2104      	movs	r1, #4
 8004538:	4802      	ldr	r0, [pc, #8]	; (8004544 <turn_off_Indicator_B+0x14>)
 800453a:	f001 ff4b 	bl	80063d4 <HAL_GPIO_WritePin>
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40020400 	.word	0x40020400

08004548 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004548:	480c      	ldr	r0, [pc, #48]	; (800457c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800454a:	490d      	ldr	r1, [pc, #52]	; (8004580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800454c:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800454e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004550:	e002      	b.n	8004558 <LoopCopyDataInit>

08004552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004556:	3304      	adds	r3, #4

08004558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800455a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800455c:	d3f9      	bcc.n	8004552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800455e:	4a0a      	ldr	r2, [pc, #40]	; (8004588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004560:	4c0a      	ldr	r4, [pc, #40]	; (800458c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004564:	e001      	b.n	800456a <LoopFillZerobss>

08004566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004568:	3204      	adds	r2, #4

0800456a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800456a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800456c:	d3fb      	bcc.n	8004566 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800456e:	f7ff fe5f 	bl	8004230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004572:	f01e fd9f 	bl	80230b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004576:	f7fc fca9 	bl	8000ecc <main>
  bx  lr    
 800457a:	4770      	bx	lr
  ldr r0, =_sdata
 800457c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004580:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8004584:	08028724 	.word	0x08028724
  ldr r2, =_sbss
 8004588:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 800458c:	20025488 	.word	0x20025488

08004590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004590:	e7fe      	b.n	8004590 <ADC_IRQHandler>

08004592 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <LAN8742_RegisterBusIO+0x28>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <LAN8742_RegisterBusIO+0x28>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <LAN8742_RegisterBusIO+0x28>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d102      	bne.n	80045c0 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80045ba:	f04f 33ff 	mov.w	r3, #4294967295
 80045be:	e014      	b.n	80045ea <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b086      	sub	sp, #24
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	2300      	movs	r3, #0
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d17c      	bne.n	8004710 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e01c      	b.n	800466a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f107 0208 	add.w	r2, r7, #8
 8004638:	2112      	movs	r1, #18
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	4798      	blx	r3
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	da03      	bge.n	800464c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8004644:	f06f 0304 	mvn.w	r3, #4
 8004648:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800464a:	e00b      	b.n	8004664 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 031f 	and.w	r3, r3, #31
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	429a      	cmp	r2, r3
 8004656:	d105      	bne.n	8004664 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
         break;
 8004662:	e005      	b.n	8004670 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3301      	adds	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b1f      	cmp	r3, #31
 800466e:	d9df      	bls.n	8004630 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2b1f      	cmp	r3, #31
 8004676:	d902      	bls.n	800467e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8004678:	f06f 0302 	mvn.w	r3, #2
 800467c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d145      	bne.n	8004710 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6810      	ldr	r0, [r2, #0]
 800468c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004690:	2100      	movs	r1, #0
 8004692:	4798      	blx	r3
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	db37      	blt.n	800470a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6810      	ldr	r0, [r2, #0]
 80046a2:	f107 0208 	add.w	r2, r7, #8
 80046a6:	2100      	movs	r1, #0
 80046a8:	4798      	blx	r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	db28      	blt.n	8004702 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4798      	blx	r3
 80046b6:	4603      	mov	r3, r0
 80046b8:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80046ba:	e01c      	b.n	80046f6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	4798      	blx	r3
 80046c2:	4603      	mov	r3, r0
 80046c4:	461a      	mov	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046ce:	d80e      	bhi.n	80046ee <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6810      	ldr	r0, [r2, #0]
 80046d8:	f107 0208 	add.w	r2, r7, #8
 80046dc:	2100      	movs	r1, #0
 80046de:	4798      	blx	r3
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da07      	bge.n	80046f6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80046e6:	f06f 0304 	mvn.w	r3, #4
 80046ea:	613b      	str	r3, [r7, #16]
                 break;
 80046ec:	e010      	b.n	8004710 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80046ee:	f06f 0301 	mvn.w	r3, #1
 80046f2:	613b      	str	r3, [r7, #16]
               break;
 80046f4:	e00c      	b.n	8004710 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1dd      	bne.n	80046bc <LAN8742_Init+0xc6>
 8004700:	e006      	b.n	8004710 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8004702:	f06f 0304 	mvn.w	r3, #4
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	e002      	b.n	8004710 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800470a:	f06f 0303 	mvn.w	r3, #3
 800470e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d112      	bne.n	800473c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	4798      	blx	r3
 800471c:	4603      	mov	r3, r0
 800471e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8004720:	bf00      	nop
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	4798      	blx	r3
 8004728:	4603      	mov	r3, r0
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004734:	d9f5      	bls.n	8004722 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800473c:	693b      	ldr	r3, [r7, #16]
 }
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6810      	ldr	r0, [r2, #0]
 800475a:	f107 020c 	add.w	r2, r7, #12
 800475e:	2101      	movs	r1, #1
 8004760:	4798      	blx	r3
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	da02      	bge.n	800476e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004768:	f06f 0304 	mvn.w	r3, #4
 800476c:	e06e      	b.n	800484c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6810      	ldr	r0, [r2, #0]
 8004776:	f107 020c 	add.w	r2, r7, #12
 800477a:	2101      	movs	r1, #1
 800477c:	4798      	blx	r3
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	da02      	bge.n	800478a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004784:	f06f 0304 	mvn.w	r3, #4
 8004788:	e060      	b.n	800484c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0304 	and.w	r3, r3, #4
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8004794:	2301      	movs	r3, #1
 8004796:	e059      	b.n	800484c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6810      	ldr	r0, [r2, #0]
 80047a0:	f107 020c 	add.w	r2, r7, #12
 80047a4:	2100      	movs	r1, #0
 80047a6:	4798      	blx	r3
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da02      	bge.n	80047b4 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80047ae:	f06f 0304 	mvn.w	r3, #4
 80047b2:	e04b      	b.n	800484c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d11b      	bne.n	80047f6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d006      	beq.n	80047d6 <LAN8742_GetLinkState+0x90>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80047d2:	2302      	movs	r3, #2
 80047d4:	e03a      	b.n	800484c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e033      	b.n	800484c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80047ee:	2304      	movs	r3, #4
 80047f0:	e02c      	b.n	800484c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80047f2:	2305      	movs	r3, #5
 80047f4:	e02a      	b.n	800484c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6810      	ldr	r0, [r2, #0]
 80047fe:	f107 020c 	add.w	r2, r7, #12
 8004802:	211f      	movs	r1, #31
 8004804:	4798      	blx	r3
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	da02      	bge.n	8004812 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800480c:	f06f 0304 	mvn.w	r3, #4
 8004810:	e01c      	b.n	800484c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800481c:	2306      	movs	r3, #6
 800481e:	e015      	b.n	800484c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 031c 	and.w	r3, r3, #28
 8004826:	2b18      	cmp	r3, #24
 8004828:	d101      	bne.n	800482e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800482a:	2302      	movs	r3, #2
 800482c:	e00e      	b.n	800484c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 031c 	and.w	r3, r3, #28
 8004834:	2b08      	cmp	r3, #8
 8004836:	d101      	bne.n	800483c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004838:	2303      	movs	r3, #3
 800483a:	e007      	b.n	800484c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 031c 	and.w	r3, r3, #28
 8004842:	2b14      	cmp	r3, #20
 8004844:	d101      	bne.n	800484a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004846:	2304      	movs	r3, #4
 8004848:	e000      	b.n	800484c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800484a:	2305      	movs	r3, #5
    }				
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004858:	2003      	movs	r0, #3
 800485a:	f000 f8fa 	bl	8004a52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800485e:	200f      	movs	r0, #15
 8004860:	f7ff fb3c 	bl	8003edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004864:	f7ff f8f8 	bl	8003a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_IncTick+0x20>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_IncTick+0x24>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4413      	add	r3, r2
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <HAL_IncTick+0x24>)
 8004882:	6013      	str	r3, [r2, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000010 	.word	0x20000010
 8004894:	2000091c 	.word	0x2000091c

08004898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return uwTick;
 800489c:	4b03      	ldr	r3, [pc, #12]	; (80048ac <HAL_GetTick+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	2000091c 	.word	0x2000091c

080048b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048b8:	f7ff ffee 	bl	8004898 <HAL_GetTick>
 80048bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d005      	beq.n	80048d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_Delay+0x44>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80048d6:	bf00      	nop
 80048d8:	f7ff ffde 	bl	8004898 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d8f7      	bhi.n	80048d8 <HAL_Delay+0x28>
  {
  }
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000010 	.word	0x20000010

080048f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <__NVIC_SetPriorityGrouping+0x40>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004914:	4013      	ands	r3, r2
 8004916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004920:	4b06      	ldr	r3, [pc, #24]	; (800493c <__NVIC_SetPriorityGrouping+0x44>)
 8004922:	4313      	orrs	r3, r2
 8004924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004926:	4a04      	ldr	r2, [pc, #16]	; (8004938 <__NVIC_SetPriorityGrouping+0x40>)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	60d3      	str	r3, [r2, #12]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	e000ed00 	.word	0xe000ed00
 800493c:	05fa0000 	.word	0x05fa0000

08004940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <__NVIC_GetPriorityGrouping+0x18>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	0a1b      	lsrs	r3, r3, #8
 800494a:	f003 0307 	and.w	r3, r3, #7
}
 800494e:	4618      	mov	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	e000ed00 	.word	0xe000ed00

0800495c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496a:	2b00      	cmp	r3, #0
 800496c:	db0b      	blt.n	8004986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	f003 021f 	and.w	r2, r3, #31
 8004974:	4907      	ldr	r1, [pc, #28]	; (8004994 <__NVIC_EnableIRQ+0x38>)
 8004976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2001      	movs	r0, #1
 800497e:	fa00 f202 	lsl.w	r2, r0, r2
 8004982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	e000e100 	.word	0xe000e100

08004998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	6039      	str	r1, [r7, #0]
 80049a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	db0a      	blt.n	80049c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	b2da      	uxtb	r2, r3
 80049b0:	490c      	ldr	r1, [pc, #48]	; (80049e4 <__NVIC_SetPriority+0x4c>)
 80049b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b6:	0112      	lsls	r2, r2, #4
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	440b      	add	r3, r1
 80049bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049c0:	e00a      	b.n	80049d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4908      	ldr	r1, [pc, #32]	; (80049e8 <__NVIC_SetPriority+0x50>)
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	3b04      	subs	r3, #4
 80049d0:	0112      	lsls	r2, r2, #4
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	440b      	add	r3, r1
 80049d6:	761a      	strb	r2, [r3, #24]
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	e000e100 	.word	0xe000e100
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b089      	sub	sp, #36	; 0x24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f1c3 0307 	rsb	r3, r3, #7
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	bf28      	it	cs
 8004a0a:	2304      	movcs	r3, #4
 8004a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	3304      	adds	r3, #4
 8004a12:	2b06      	cmp	r3, #6
 8004a14:	d902      	bls.n	8004a1c <NVIC_EncodePriority+0x30>
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3b03      	subs	r3, #3
 8004a1a:	e000      	b.n	8004a1e <NVIC_EncodePriority+0x32>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a20:	f04f 32ff 	mov.w	r2, #4294967295
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	401a      	ands	r2, r3
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a34:	f04f 31ff 	mov.w	r1, #4294967295
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3e:	43d9      	mvns	r1, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a44:	4313      	orrs	r3, r2
         );
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3724      	adds	r7, #36	; 0x24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b082      	sub	sp, #8
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff ff4c 	bl	80048f8 <__NVIC_SetPriorityGrouping>
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004a7a:	f7ff ff61 	bl	8004940 <__NVIC_GetPriorityGrouping>
 8004a7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	68b9      	ldr	r1, [r7, #8]
 8004a84:	6978      	ldr	r0, [r7, #20]
 8004a86:	f7ff ffb1 	bl	80049ec <NVIC_EncodePriority>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a90:	4611      	mov	r1, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff ff80 	bl	8004998 <__NVIC_SetPriority>
}
 8004a98:	bf00      	nop
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff ff54 	bl	800495c <__NVIC_EnableIRQ>
}
 8004ab4:	bf00      	nop
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004aca:	f7ff fee5 	bl	8004898 <HAL_GetTick>
 8004ace:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d008      	beq.n	8004aee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2280      	movs	r2, #128	; 0x80
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e052      	b.n	8004b94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0216 	bic.w	r2, r2, #22
 8004afc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <HAL_DMA_Abort+0x62>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0208 	bic.w	r2, r2, #8
 8004b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0201 	bic.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b3e:	e013      	b.n	8004b68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b40:	f7ff feaa 	bl	8004898 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d90c      	bls.n	8004b68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2203      	movs	r2, #3
 8004b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e015      	b.n	8004b94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e4      	bne.n	8004b40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b7a:	223f      	movs	r2, #63	; 0x3f
 8004b7c:	409a      	lsls	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d004      	beq.n	8004bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e00c      	b.n	8004bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2205      	movs	r2, #5
 8004bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 0201 	bic.w	r2, r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e06a      	b.n	8004cc8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d106      	bne.n	8004c0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2223      	movs	r2, #35	; 0x23
 8004c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f008 ff8f 	bl	800db28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0a:	4b31      	ldr	r3, [pc, #196]	; (8004cd0 <HAL_ETH_Init+0xf0>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	4a30      	ldr	r2, [pc, #192]	; (8004cd0 <HAL_ETH_Init+0xf0>)
 8004c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c14:	6453      	str	r3, [r2, #68]	; 0x44
 8004c16:	4b2e      	ldr	r3, [pc, #184]	; (8004cd0 <HAL_ETH_Init+0xf0>)
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004c22:	4b2c      	ldr	r3, [pc, #176]	; (8004cd4 <HAL_ETH_Init+0xf4>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	4a2b      	ldr	r2, [pc, #172]	; (8004cd4 <HAL_ETH_Init+0xf4>)
 8004c28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c2c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004c2e:	4b29      	ldr	r3, [pc, #164]	; (8004cd4 <HAL_ETH_Init+0xf4>)
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	4927      	ldr	r1, [pc, #156]	; (8004cd4 <HAL_ETH_Init+0xf4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004c3c:	4b25      	ldr	r3, [pc, #148]	; (8004cd4 <HAL_ETH_Init+0xf4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6812      	ldr	r2, [r2, #0]
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c58:	f7ff fe1e 	bl	8004898 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004c5e:	e011      	b.n	8004c84 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004c60:	f7ff fe1a 	bl	8004898 <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c6e:	d909      	bls.n	8004c84 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2204      	movs	r2, #4
 8004c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	22e0      	movs	r2, #224	; 0xe0
 8004c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e021      	b.n	8004cc8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0301 	and.w	r3, r3, #1
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e4      	bne.n	8004c60 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 ff4c 	bl	8005b34 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fff3 	bl	8005c88 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f001 f849 	bl	8005d3a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	461a      	mov	r2, r3
 8004cae:	2100      	movs	r1, #0
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 ffb1 	bl	8005c18 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40023800 	.word	0x40023800
 8004cd4:	40013800 	.word	0x40013800

08004cd8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d17b      	bne.n	8004de2 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2223      	movs	r2, #35	; 0x23
 8004cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8004d06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b35      	ldr	r3, [pc, #212]	; (8004dec <HAL_ETH_Start_IT+0x114>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8004d2c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2204      	movs	r2, #4
 8004d34:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f9fc 	bl	8005134 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0208 	orr.w	r2, r2, #8
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d54:	2001      	movs	r0, #1
 8004d56:	f7ff fdab 	bl	80048b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0204 	orr.w	r2, r2, #4
 8004d70:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d7a:	2001      	movs	r0, #1
 8004d7c:	f7ff fd98 	bl	80048b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fd74 	bl	8005876 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004da0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004da4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	f043 0302 	orr.w	r3, r3, #2
 8004db8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dbc:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc6:	69d9      	ldr	r1, [r3, #28]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <HAL_ETH_Start_IT+0x118>)
 8004dce:	430b      	orrs	r3, r1
 8004dd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dd4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2223      	movs	r2, #35	; 0x23
 8004dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e000      	b.n	8004de4 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
  }
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	00020060 	.word	0x00020060
 8004df0:	0001a0c1 	.word	0x0001a0c1

08004df4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e02:	2b23      	cmp	r3, #35	; 0x23
 8004e04:	d16e      	bne.n	8004ee4 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2223      	movs	r2, #35	; 0x23
 8004e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e16:	69d9      	ldr	r1, [r3, #28]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b34      	ldr	r3, [pc, #208]	; (8004ef0 <HAL_ETH_Stop_IT+0xfc>)
 8004e1e:	400b      	ands	r3, r1
 8004e20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e24:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e3c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	f023 0302 	bic.w	r3, r3, #2
 8004e50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e54:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0204 	bic.w	r2, r2, #4
 8004e64:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e6e:	2001      	movs	r0, #1
 8004e70:	f7ff fd1e 	bl	80048b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fcfa 	bl	8005876 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0208 	bic.w	r2, r2, #8
 8004e90:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e9a:	2001      	movs	r0, #1
 8004e9c:	f7ff fd08 	bl	80048b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	e00e      	b.n	8004ecc <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	3212      	adds	r2, #18
 8004eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb8:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d9ed      	bls.n	8004eae <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2210      	movs	r2, #16
 8004edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	fffe5f3e 	.word	0xfffe5f3e

08004ef4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0a:	f043 0201 	orr.w	r2, r3, #1
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e045      	b.n	8004fa4 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1e:	2b23      	cmp	r3, #35	; 0x23
 8004f20:	d13f      	bne.n	8004fa2 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	6839      	ldr	r1, [r7, #0]
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 ff70 	bl	8005e14 <ETH_Prepare_Tx_Descriptors>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f40:	f043 0202 	orr.w	r2, r3, #2
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e02a      	b.n	8004fa4 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f4e:	f3bf 8f4f 	dsb	sy
}
 8004f52:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d904      	bls.n	8004f70 <HAL_ETH_Transmit_IT+0x7c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6a:	1f1a      	subs	r2, r3, #4
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f98:	461a      	mov	r2, r3
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e000      	b.n	8004fa4 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
  }
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d109      	bne.n	8004fd8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f043 0201 	orr.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0a8      	b.n	800512a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fde:	2b23      	cmp	r3, #35	; 0x23
 8004fe0:	d001      	beq.n	8004fe6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0a1      	b.n	800512a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	3212      	adds	r2, #18
 8004ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ffc:	f1c3 0304 	rsb	r3, r3, #4
 8005000:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005002:	e06a      	b.n	80050da <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	69da      	ldr	r2, [r3, #28]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005028:	2b00      	cmp	r3, #0
 800502a:	d103      	bne.n	8005034 <HAL_ETH_ReadData+0x88>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d040      	beq.n	80050b6 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00c      	beq.n	8005078 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	0c1b      	lsrs	r3, r3, #16
 8005064:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005068:	3b04      	subs	r3, #4
 800506a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8005074:	2301      	movs	r3, #1
 8005076:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8005090:	461a      	mov	r2, r3
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f008 ff13 	bl	800dec0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	441a      	add	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	2200      	movs	r2, #0
 80050b4:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d902      	bls.n	80050c8 <HAL_ETH_ReadData+0x11c>
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3b04      	subs	r3, #4
 80050c6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69fa      	ldr	r2, [r7, #28]
 80050cc:	3212      	adds	r2, #18
 80050ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3301      	adds	r3, #1
 80050d8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80050de:	2b00      	cmp	r3, #0
 80050e0:	db06      	blt.n	80050f0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d202      	bcs.n	80050f0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d089      	beq.n	8005004 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	441a      	add	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f815 	bl	8005134 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69fa      	ldr	r2, [r7, #28]
 800510e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8005110:	7bfb      	ldrb	r3, [r7, #15]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d108      	bne.n	8005128 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8005140:	2301      	movs	r3, #1
 8005142:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005148:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	3212      	adds	r2, #18
 8005150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005154:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800515a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800515c:	e040      	b.n	80051e0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d112      	bne.n	800518c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005166:	f107 030c 	add.w	r3, r7, #12
 800516a:	4618      	mov	r0, r3
 800516c:	f008 fe78 	bl	800de60 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d102      	bne.n	800517c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	74fb      	strb	r3, [r7, #19]
 800517a:	e007      	b.n	800518c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	461a      	mov	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800518c:	7cfb      	ldrb	r3, [r7, #19]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d026      	beq.n	80051e0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	4a1e      	ldr	r2, [pc, #120]	; (8005218 <ETH_UpdateDescriptor+0xe4>)
 800519e:	605a      	str	r2, [r3, #4]
 80051a0:	e003      	b.n	80051aa <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80051a8:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80051aa:	f3bf 8f5f 	dmb	sy
}
 80051ae:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	3301      	adds	r3, #1
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d902      	bls.n	80051ce <ETH_UpdateDescriptor+0x9a>
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	3b04      	subs	r3, #4
 80051cc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	3212      	adds	r2, #18
 80051d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051d8:	617b      	str	r3, [r7, #20]
      desccount--;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	3b01      	subs	r3, #1
 80051de:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <ETH_UpdateDescriptor+0xb8>
 80051e6:	7cfb      	ldrb	r3, [r7, #19]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1b8      	bne.n	800515e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d00c      	beq.n	8005210 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fe:	461a      	mov	r2, r3
 8005200:	2300      	movs	r3, #0
 8005202:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	69fa      	ldr	r2, [r7, #28]
 8005208:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69ba      	ldr	r2, [r7, #24]
 800520e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8005210:	bf00      	nop
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	80004600 	.word	0x80004600

0800521c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3318      	adds	r3, #24
 8005228:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800523a:	e03f      	b.n	80052bc <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800523c:	2301      	movs	r3, #1
 800523e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	3b01      	subs	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	3304      	adds	r3, #4
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	3301      	adds	r3, #1
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8005264:	7bbb      	ldrb	r3, [r7, #14]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d028      	beq.n	80052bc <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68d9      	ldr	r1, [r3, #12]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4613      	mov	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	4413      	add	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	440b      	add	r3, r1
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	db1b      	blt.n	80052b8 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3304      	adds	r3, #4
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	4413      	add	r3, r2
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4618      	mov	r0, r3
 800528e:	f008 fe59 	bl	800df44 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8005292:	68ba      	ldr	r2, [r7, #8]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	3304      	adds	r3, #4
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4413      	add	r3, r2
 800529c:	2200      	movs	r2, #0
 800529e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	3301      	adds	r3, #1
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80052b6:	e001      	b.n	80052bc <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_ETH_ReleaseTxPacket+0xac>
 80052c2:	7bfb      	ldrb	r3, [r7, #15]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1b9      	bne.n	800523c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ea:	2b40      	cmp	r3, #64	; 0x40
 80052ec:	d112      	bne.n	8005314 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fc:	2b40      	cmp	r3, #64	; 0x40
 80052fe:	d109      	bne.n	8005314 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005308:	461a      	mov	r2, r3
 800530a:	4b50      	ldr	r3, [pc, #320]	; (800544c <HAL_ETH_IRQHandler+0x178>)
 800530c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f008 f980 	bl	800d614 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d113      	bne.n	800534e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d10a      	bne.n	800534e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005340:	461a      	mov	r2, r3
 8005342:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8005346:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f008 f973 	bl	800d634 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800535c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005360:	d14c      	bne.n	80053fc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005374:	d142      	bne.n	80053fc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f043 0208 	orr.w	r2, r3, #8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005398:	d11a      	bne.n	80053d0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	4b2a      	ldr	r3, [pc, #168]	; (8005450 <HAL_ETH_IRQHandler+0x17c>)
 80053a6:	4013      	ands	r3, r2
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80053c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053c4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	22e0      	movs	r2, #224	; 0xe0
 80053ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80053ce:	e012      	b.n	80053f6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053d8:	695a      	ldr	r2, [r3, #20]
 80053da:	f248 6380 	movw	r3, #34432	; 0x8680
 80053de:	4013      	ands	r3, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ee:	461a      	mov	r2, r3
 80053f0:	f248 6380 	movw	r3, #34432	; 0x8680
 80053f4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f008 f926 	bl	800d648 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b08      	cmp	r3, #8
 8005408:	d10e      	bne.n	8005428 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005410:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f81c 	bl	8005458 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <HAL_ETH_IRQHandler+0x180>)
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d006      	beq.n	8005442 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <HAL_ETH_IRQHandler+0x180>)
 8005436:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800543a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f815 	bl	800546c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8005442:	bf00      	nop
 8005444:	3708      	adds	r7, #8
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	00010040 	.word	0x00010040
 8005450:	007e2000 	.word	0x007e2000
 8005454:	40013c00 	.word	0x40013c00

08005458 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f003 031c 	and.w	r3, r3, #28
 800549c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	02db      	lsls	r3, r3, #11
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	019b      	lsls	r3, r3, #6
 80054ae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f023 0302 	bic.w	r3, r3, #2
 80054be:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80054d0:	f7ff f9e2 	bl	8004898 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80054d6:	e00d      	b.n	80054f4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80054d8:	f7ff f9de 	bl	8004898 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e6:	d301      	bcc.n	80054ec <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e010      	b.n	800550e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1ec      	bne.n	80054d8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	b29b      	uxth	r3, r3
 8005506:	461a      	mov	r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b086      	sub	sp, #24
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
 8005522:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f003 031c 	and.w	r3, r3, #28
 8005532:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	02db      	lsls	r3, r3, #11
 8005538:	b29b      	uxth	r3, r3
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	019b      	lsls	r3, r3, #6
 8005544:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	4313      	orrs	r3, r2
 800554c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f043 0302 	orr.w	r3, r3, #2
 8005554:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005570:	f7ff f992 	bl	8004898 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005576:	e00d      	b.n	8005594 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005578:	f7ff f98e 	bl	8004898 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005586:	d301      	bcc.n	800558c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e009      	b.n	80055a0 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ec      	bne.n	8005578 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e0d9      	b.n	8005770 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	bf14      	ite	ne
 80055ca:	2301      	movne	r3, #1
 80055cc:	2300      	moveq	r3, #0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bf0c      	ite	eq
 80055f4:	2301      	moveq	r3, #1
 80055f6:	2300      	movne	r3, #0
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800560c:	2b00      	cmp	r3, #0
 800560e:	bf14      	ite	ne
 8005610:	2301      	movne	r3, #1
 8005612:	2300      	moveq	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005626:	2b00      	cmp	r3, #0
 8005628:	bf0c      	ite	eq
 800562a:	2301      	moveq	r3, #1
 800562c:	2300      	movne	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	461a      	mov	r2, r3
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf14      	ite	ne
 8005644:	2301      	movne	r3, #1
 8005646:	2300      	moveq	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005676:	2b00      	cmp	r3, #0
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005690:	2b00      	cmp	r3, #0
 8005692:	bf0c      	ite	eq
 8005694:	2301      	moveq	r3, #1
 8005696:	2300      	movne	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	461a      	mov	r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf14      	ite	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	2300      	moveq	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf14      	ite	ne
 80056f0:	2301      	movne	r3, #1
 80056f2:	2300      	moveq	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	461a      	mov	r2, r3
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	b29a      	uxth	r2, r3
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	bf14      	ite	ne
 8005744:	2301      	movne	r3, #1
 8005746:	2300      	moveq	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	461a      	mov	r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e00b      	b.n	80057a8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005796:	2b10      	cmp	r3, #16
 8005798:	d105      	bne.n	80057a6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800579a:	6839      	ldr	r1, [r7, #0]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f88f 	bl	80058c0 <ETH_SetMACConfig>

    return HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e000      	b.n	80057a8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
  }
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 031c 	bic.w	r3, r3, #28
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80057c8:	f002 fd84 	bl	80082d4 <HAL_RCC_GetHCLKFreq>
 80057cc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4a1d      	ldr	r2, [pc, #116]	; (8005848 <HAL_ETH_SetMDIOClockRange+0x98>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d908      	bls.n	80057e8 <HAL_ETH_SetMDIOClockRange+0x38>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4a1c      	ldr	r2, [pc, #112]	; (800584c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d804      	bhi.n	80057e8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f043 0308 	orr.w	r3, r3, #8
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e027      	b.n	8005838 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a18      	ldr	r2, [pc, #96]	; (800584c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d908      	bls.n	8005802 <HAL_ETH_SetMDIOClockRange+0x52>
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	4a17      	ldr	r2, [pc, #92]	; (8005850 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d204      	bcs.n	8005802 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f043 030c 	orr.w	r3, r3, #12
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	e01a      	b.n	8005838 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4a12      	ldr	r2, [pc, #72]	; (8005850 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d303      	bcc.n	8005812 <HAL_ETH_SetMDIOClockRange+0x62>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a11      	ldr	r2, [pc, #68]	; (8005854 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d911      	bls.n	8005836 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4a0f      	ldr	r2, [pc, #60]	; (8005854 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d908      	bls.n	800582c <HAL_ETH_SetMDIOClockRange+0x7c>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a0e      	ldr	r2, [pc, #56]	; (8005858 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d804      	bhi.n	800582c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f043 0304 	orr.w	r3, r3, #4
 8005828:	60fb      	str	r3, [r7, #12]
 800582a:	e005      	b.n	8005838 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f043 0310 	orr.w	r3, r3, #16
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	e000      	b.n	8005838 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8005836:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	611a      	str	r2, [r3, #16]
}
 8005840:	bf00      	nop
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	01312cff 	.word	0x01312cff
 800584c:	02160ebf 	.word	0x02160ebf
 8005850:	03938700 	.word	0x03938700
 8005854:	05f5e0ff 	.word	0x05f5e0ff
 8005858:	08f0d17f 	.word	0x08f0d17f

0800585c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800586a:	4618      	mov	r0, r3
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6812      	ldr	r2, [r2, #0]
 8005890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005898:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80058a6:	2001      	movs	r0, #1
 80058a8:	f7ff f802 	bl	80048b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058b6:	6193      	str	r3, [r2, #24]
}
 80058b8:	bf00      	nop
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4b51      	ldr	r3, [pc, #324]	; (8005a1c <ETH_SetMACConfig+0x15c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	7c1b      	ldrb	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <ETH_SetMACConfig+0x28>
 80058e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80058e6:	e000      	b.n	80058ea <ETH_SetMACConfig+0x2a>
 80058e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	7c5b      	ldrb	r3, [r3, #17]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d102      	bne.n	80058f8 <ETH_SetMACConfig+0x38>
 80058f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80058f6:	e000      	b.n	80058fa <ETH_SetMACConfig+0x3a>
 80058f8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80058fa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005900:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	7fdb      	ldrb	r3, [r3, #31]
 8005906:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005908:	431a      	orrs	r2, r3
                        macconf->Speed |
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800590e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	7f92      	ldrb	r2, [r2, #30]
 8005914:	2a00      	cmp	r2, #0
 8005916:	d102      	bne.n	800591e <ETH_SetMACConfig+0x5e>
 8005918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800591c:	e000      	b.n	8005920 <ETH_SetMACConfig+0x60>
 800591e:	2200      	movs	r2, #0
                        macconf->Speed |
 8005920:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	7f1b      	ldrb	r3, [r3, #28]
 8005926:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005928:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800592e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	791b      	ldrb	r3, [r3, #4]
 8005934:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005936:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800593e:	2a00      	cmp	r2, #0
 8005940:	d102      	bne.n	8005948 <ETH_SetMACConfig+0x88>
 8005942:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005946:	e000      	b.n	800594a <ETH_SetMACConfig+0x8a>
 8005948:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800594a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	7bdb      	ldrb	r3, [r3, #15]
 8005950:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005952:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005958:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005960:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005962:	4313      	orrs	r3, r2
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4313      	orrs	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800597a:	2001      	movs	r0, #1
 800597c:	f7fe ff98 	bl	80048b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005996:	4013      	ands	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80059a6:	2a00      	cmp	r2, #0
 80059a8:	d101      	bne.n	80059ae <ETH_SetMACConfig+0xee>
 80059aa:	2280      	movs	r2, #128	; 0x80
 80059ac:	e000      	b.n	80059b0 <ETH_SetMACConfig+0xf0>
 80059ae:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80059b0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80059b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80059be:	2a01      	cmp	r2, #1
 80059c0:	d101      	bne.n	80059c6 <ETH_SetMACConfig+0x106>
 80059c2:	2208      	movs	r2, #8
 80059c4:	e000      	b.n	80059c8 <ETH_SetMACConfig+0x108>
 80059c6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80059c8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80059d0:	2a01      	cmp	r2, #1
 80059d2:	d101      	bne.n	80059d8 <ETH_SetMACConfig+0x118>
 80059d4:	2204      	movs	r2, #4
 80059d6:	e000      	b.n	80059da <ETH_SetMACConfig+0x11a>
 80059d8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80059da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80059e2:	2a01      	cmp	r2, #1
 80059e4:	d101      	bne.n	80059ea <ETH_SetMACConfig+0x12a>
 80059e6:	2202      	movs	r2, #2
 80059e8:	e000      	b.n	80059ec <ETH_SetMACConfig+0x12c>
 80059ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80059ec:	4313      	orrs	r3, r2
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005a04:	2001      	movs	r0, #1
 8005a06:	f7fe ff53 	bl	80048b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	619a      	str	r2, [r3, #24]
}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	ff20810f 	.word	0xff20810f

08005a20 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4b3d      	ldr	r3, [pc, #244]	; (8005b30 <ETH_SetDMAConfig+0x110>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	7b1b      	ldrb	r3, [r3, #12]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d102      	bne.n	8005a4c <ETH_SetDMAConfig+0x2c>
 8005a46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005a4a:	e000      	b.n	8005a4e <ETH_SetDMAConfig+0x2e>
 8005a4c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	7b5b      	ldrb	r3, [r3, #13]
 8005a52:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005a54:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	7f52      	ldrb	r2, [r2, #29]
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d102      	bne.n	8005a64 <ETH_SetDMAConfig+0x44>
 8005a5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a62:	e000      	b.n	8005a66 <ETH_SetDMAConfig+0x46>
 8005a64:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005a66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	7b9b      	ldrb	r3, [r3, #14]
 8005a6c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005a6e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005a74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	7f1b      	ldrb	r3, [r3, #28]
 8005a7a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005a7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	7f9b      	ldrb	r3, [r3, #30]
 8005a82:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005a84:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005a8a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a92:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005a94:	4313      	orrs	r3, r2
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005ab6:	2001      	movs	r0, #1
 8005ab8:	f7fe fefa 	bl	80048b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	791b      	ldrb	r3, [r3, #4]
 8005ace:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005ad4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005ada:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005ae0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ae8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005aea:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005af2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005af8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005b02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b06:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b14:	2001      	movs	r0, #1
 8005b16:	f7fe fecb 	bl	80048b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b22:	461a      	mov	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6013      	str	r3, [r2, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	f8de3f23 	.word	0xf8de3f23

08005b34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b0a6      	sub	sp, #152	; 0x98
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8005b42:	2301      	movs	r3, #1
 8005b44:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005b70:	2300      	movs	r3, #0
 8005b72:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005b96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005ba0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005ba8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fe86 	bl	80058c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005be0:	2301      	movs	r3, #1
 8005be2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005be4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005be8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005bee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005bf4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005c00:	2300      	movs	r3, #0
 8005c02:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005c04:	f107 0308 	add.w	r3, r7, #8
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7ff ff08 	bl	8005a20 <ETH_SetDMAConfig>
}
 8005c10:	bf00      	nop
 8005c12:	3798      	adds	r7, #152	; 0x98
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3305      	adds	r3, #5
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	3204      	adds	r2, #4
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	4b11      	ldr	r3, [pc, #68]	; (8005c80 <ETH_MACAddressConfig+0x68>)
 8005c3a:	4413      	add	r3, r2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3303      	adds	r3, #3
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	061a      	lsls	r2, r3, #24
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3302      	adds	r3, #2
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	041b      	lsls	r3, r3, #16
 8005c52:	431a      	orrs	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3301      	adds	r3, #1
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <ETH_MACAddressConfig+0x6c>)
 8005c6a:	4413      	add	r3, r2
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	6013      	str	r3, [r2, #0]
}
 8005c72:	bf00      	nop
 8005c74:	371c      	adds	r7, #28
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40028040 	.word	0x40028040
 8005c84:	40028044 	.word	0x40028044

08005c88 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e03e      	b.n	8005d14 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68d9      	ldr	r1, [r3, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	440b      	add	r3, r1
 8005ca6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	3206      	adds	r2, #6
 8005cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d80c      	bhi.n	8005cf8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	68d9      	ldr	r1, [r3, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1c5a      	adds	r2, r3, #1
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	440b      	add	r3, r1
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	60da      	str	r2, [r3, #12]
 8005cf6:	e004      	b.n	8005d02 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	3301      	adds	r3, #1
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d9bd      	bls.n	8005c96 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d2c:	611a      	str	r2, [r3, #16]
}
 8005d2e:	bf00      	nop
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
 8005d46:	e046      	b.n	8005dd6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6919      	ldr	r1, [r3, #16]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	00db      	lsls	r3, r3, #3
 8005d56:	440b      	add	r3, r1
 8005d58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2200      	movs	r2, #0
 8005d64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2200      	movs	r2, #0
 8005d76:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d84:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8005d8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005d9a:	68b9      	ldr	r1, [r7, #8]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	3212      	adds	r2, #18
 8005da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d80c      	bhi.n	8005dc6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6919      	ldr	r1, [r3, #16]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	4613      	mov	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	440b      	add	r3, r1
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	60da      	str	r2, [r3, #12]
 8005dc4:	e004      	b.n	8005dd0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b03      	cmp	r3, #3
 8005dda:	d9b5      	bls.n	8005d48 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e06:	60da      	str	r2, [r3, #12]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b08d      	sub	sp, #52	; 0x34
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3318      	adds	r3, #24
 8005e24:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e56:	d007      	beq.n	8005e68 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005e68:	2302      	movs	r3, #2
 8005e6a:	e0ff      	b.n	800606c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	3301      	adds	r3, #1
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	461a      	mov	r2, r3
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	4b7d      	ldr	r3, [pc, #500]	; (8006078 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005e82:	4013      	ands	r3, r2
 8005e84:	69fa      	ldr	r2, [r7, #28]
 8005e86:	6852      	ldr	r2, [r2, #4]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d008      	beq.n	8005eac <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d008      	beq.n	8005eca <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0304 	and.w	r3, r3, #4
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8005eee:	f3bf 8f5f 	dmb	sy
}
 8005ef2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005f00:	e082      	b.n	8006008 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d006      	beq.n	8005f22 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	601a      	str	r2, [r3, #0]
 8005f20:	e005      	b.n	8005f2e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f30:	3301      	adds	r3, #1
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	d902      	bls.n	8005f40 <ETH_Prepare_Tx_Descriptors+0x12c>
 8005f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3c:	3b04      	subs	r3, #4
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f48:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f62:	d007      	beq.n	8005f74 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	3304      	adds	r3, #4
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4413      	add	r3, r2
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d029      	beq.n	8005fc8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f80:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005f82:	2300      	movs	r3, #0
 8005f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f86:	e019      	b.n	8005fbc <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8005f88:	f3bf 8f5f 	dmb	sy
}
 8005f8c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa2:	2b03      	cmp	r3, #3
 8005fa4:	d902      	bls.n	8005fac <ETH_Prepare_Tx_Descriptors+0x198>
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	3b04      	subs	r3, #4
 8005faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	3301      	adds	r3, #1
 8005fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d3e1      	bcc.n	8005f88 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e051      	b.n	800606c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	3301      	adds	r3, #1
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	4b25      	ldr	r3, [pc, #148]	; (8006078 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	6852      	ldr	r2, [r2, #4]
 8005fea:	431a      	orrs	r2, r3
 8005fec:	6a3b      	ldr	r3, [r7, #32]
 8005fee:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005ff6:	f3bf 8f5f 	dmb	sy
}
 8005ffa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f47f af78 	bne.w	8005f02 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	601a      	str	r2, [r3, #0]
 8006024:	e005      	b.n	8006032 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006042:	6979      	ldr	r1, [r7, #20]
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	3304      	adds	r3, #4
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006052:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006054:	b672      	cpsid	i
}
 8006056:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	4413      	add	r3, r2
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8006066:	b662      	cpsie	i
}
 8006068:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3734      	adds	r7, #52	; 0x34
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	ffffe000 	.word	0xffffe000

0800607c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800607c:	b480      	push	{r7}
 800607e:	b089      	sub	sp, #36	; 0x24
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006086:	2300      	movs	r3, #0
 8006088:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800608a:	2300      	movs	r3, #0
 800608c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
 800609a:	e175      	b.n	8006388 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800609c:	2201      	movs	r2, #1
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4013      	ands	r3, r2
 80060ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	f040 8164 	bne.w	8006382 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d005      	beq.n	80060d2 <HAL_GPIO_Init+0x56>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d130      	bne.n	8006134 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	2203      	movs	r2, #3
 80060de:	fa02 f303 	lsl.w	r3, r2, r3
 80060e2:	43db      	mvns	r3, r3
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4013      	ands	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006108:	2201      	movs	r2, #1
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	fa02 f303 	lsl.w	r3, r2, r3
 8006110:	43db      	mvns	r3, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4013      	ands	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	091b      	lsrs	r3, r3, #4
 800611e:	f003 0201 	and.w	r2, r3, #1
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	69ba      	ldr	r2, [r7, #24]
 800612a:	4313      	orrs	r3, r2
 800612c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	2b03      	cmp	r3, #3
 800613e:	d017      	beq.n	8006170 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	2203      	movs	r2, #3
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	43db      	mvns	r3, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4013      	ands	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	fa02 f303 	lsl.w	r3, r2, r3
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	4313      	orrs	r3, r2
 8006168:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f003 0303 	and.w	r3, r3, #3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d123      	bne.n	80061c4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	08da      	lsrs	r2, r3, #3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3208      	adds	r2, #8
 8006184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	220f      	movs	r2, #15
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	43db      	mvns	r3, r3
 800619a:	69ba      	ldr	r2, [r7, #24]
 800619c:	4013      	ands	r3, r2
 800619e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f003 0307 	and.w	r3, r3, #7
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	08da      	lsrs	r2, r3, #3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3208      	adds	r2, #8
 80061be:	69b9      	ldr	r1, [r7, #24]
 80061c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	2203      	movs	r2, #3
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4013      	ands	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f003 0203 	and.w	r2, r3, #3
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	005b      	lsls	r3, r3, #1
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80be 	beq.w	8006382 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006206:	4b66      	ldr	r3, [pc, #408]	; (80063a0 <HAL_GPIO_Init+0x324>)
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	4a65      	ldr	r2, [pc, #404]	; (80063a0 <HAL_GPIO_Init+0x324>)
 800620c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006210:	6453      	str	r3, [r2, #68]	; 0x44
 8006212:	4b63      	ldr	r3, [pc, #396]	; (80063a0 <HAL_GPIO_Init+0x324>)
 8006214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800621e:	4a61      	ldr	r2, [pc, #388]	; (80063a4 <HAL_GPIO_Init+0x328>)
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	3302      	adds	r3, #2
 8006226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800622a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	220f      	movs	r2, #15
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	4013      	ands	r3, r2
 8006240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a58      	ldr	r2, [pc, #352]	; (80063a8 <HAL_GPIO_Init+0x32c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d037      	beq.n	80062ba <HAL_GPIO_Init+0x23e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a57      	ldr	r2, [pc, #348]	; (80063ac <HAL_GPIO_Init+0x330>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d031      	beq.n	80062b6 <HAL_GPIO_Init+0x23a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a56      	ldr	r2, [pc, #344]	; (80063b0 <HAL_GPIO_Init+0x334>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d02b      	beq.n	80062b2 <HAL_GPIO_Init+0x236>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a55      	ldr	r2, [pc, #340]	; (80063b4 <HAL_GPIO_Init+0x338>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d025      	beq.n	80062ae <HAL_GPIO_Init+0x232>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a54      	ldr	r2, [pc, #336]	; (80063b8 <HAL_GPIO_Init+0x33c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d01f      	beq.n	80062aa <HAL_GPIO_Init+0x22e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a53      	ldr	r2, [pc, #332]	; (80063bc <HAL_GPIO_Init+0x340>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d019      	beq.n	80062a6 <HAL_GPIO_Init+0x22a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a52      	ldr	r2, [pc, #328]	; (80063c0 <HAL_GPIO_Init+0x344>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d013      	beq.n	80062a2 <HAL_GPIO_Init+0x226>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a51      	ldr	r2, [pc, #324]	; (80063c4 <HAL_GPIO_Init+0x348>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00d      	beq.n	800629e <HAL_GPIO_Init+0x222>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a50      	ldr	r2, [pc, #320]	; (80063c8 <HAL_GPIO_Init+0x34c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d007      	beq.n	800629a <HAL_GPIO_Init+0x21e>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a4f      	ldr	r2, [pc, #316]	; (80063cc <HAL_GPIO_Init+0x350>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d101      	bne.n	8006296 <HAL_GPIO_Init+0x21a>
 8006292:	2309      	movs	r3, #9
 8006294:	e012      	b.n	80062bc <HAL_GPIO_Init+0x240>
 8006296:	230a      	movs	r3, #10
 8006298:	e010      	b.n	80062bc <HAL_GPIO_Init+0x240>
 800629a:	2308      	movs	r3, #8
 800629c:	e00e      	b.n	80062bc <HAL_GPIO_Init+0x240>
 800629e:	2307      	movs	r3, #7
 80062a0:	e00c      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062a2:	2306      	movs	r3, #6
 80062a4:	e00a      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062a6:	2305      	movs	r3, #5
 80062a8:	e008      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062aa:	2304      	movs	r3, #4
 80062ac:	e006      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062ae:	2303      	movs	r3, #3
 80062b0:	e004      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e002      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_GPIO_Init+0x240>
 80062ba:	2300      	movs	r3, #0
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	f002 0203 	and.w	r2, r2, #3
 80062c2:	0092      	lsls	r2, r2, #2
 80062c4:	4093      	lsls	r3, r2
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80062cc:	4935      	ldr	r1, [pc, #212]	; (80063a4 <HAL_GPIO_Init+0x328>)
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	089b      	lsrs	r3, r3, #2
 80062d2:	3302      	adds	r3, #2
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062da:	4b3d      	ldr	r3, [pc, #244]	; (80063d0 <HAL_GPIO_Init+0x354>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	43db      	mvns	r3, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4013      	ands	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062fe:	4a34      	ldr	r2, [pc, #208]	; (80063d0 <HAL_GPIO_Init+0x354>)
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006304:	4b32      	ldr	r3, [pc, #200]	; (80063d0 <HAL_GPIO_Init+0x354>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	43db      	mvns	r3, r3
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	4013      	ands	r3, r2
 8006312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006328:	4a29      	ldr	r2, [pc, #164]	; (80063d0 <HAL_GPIO_Init+0x354>)
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800632e:	4b28      	ldr	r3, [pc, #160]	; (80063d0 <HAL_GPIO_Init+0x354>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	43db      	mvns	r3, r3
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4013      	ands	r3, r2
 800633c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006352:	4a1f      	ldr	r2, [pc, #124]	; (80063d0 <HAL_GPIO_Init+0x354>)
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006358:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <HAL_GPIO_Init+0x354>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	43db      	mvns	r3, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4013      	ands	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800637c:	4a14      	ldr	r2, [pc, #80]	; (80063d0 <HAL_GPIO_Init+0x354>)
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3301      	adds	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	2b0f      	cmp	r3, #15
 800638c:	f67f ae86 	bls.w	800609c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006390:	bf00      	nop
 8006392:	bf00      	nop
 8006394:	3724      	adds	r7, #36	; 0x24
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40023800 	.word	0x40023800
 80063a4:	40013800 	.word	0x40013800
 80063a8:	40020000 	.word	0x40020000
 80063ac:	40020400 	.word	0x40020400
 80063b0:	40020800 	.word	0x40020800
 80063b4:	40020c00 	.word	0x40020c00
 80063b8:	40021000 	.word	0x40021000
 80063bc:	40021400 	.word	0x40021400
 80063c0:	40021800 	.word	0x40021800
 80063c4:	40021c00 	.word	0x40021c00
 80063c8:	40022000 	.word	0x40022000
 80063cc:	40022400 	.word	0x40022400
 80063d0:	40013c00 	.word	0x40013c00

080063d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
 80063e0:	4613      	mov	r3, r2
 80063e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063e4:	787b      	ldrb	r3, [r7, #1]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063ea:	887a      	ldrh	r2, [r7, #2]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80063f0:	e003      	b.n	80063fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063f2:	887b      	ldrh	r3, [r7, #2]
 80063f4:	041a      	lsls	r2, r3, #16
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	619a      	str	r2, [r3, #24]
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	4603      	mov	r3, r0
 8006410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006412:	4b08      	ldr	r3, [pc, #32]	; (8006434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006414:	695a      	ldr	r2, [r3, #20]
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	4013      	ands	r3, r2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d006      	beq.n	800642c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800641e:	4a05      	ldr	r2, [pc, #20]	; (8006434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fa fd40 	bl	8000eac <HAL_GPIO_EXTI_Callback>
  }
}
 800642c:	bf00      	nop
 800642e:	3708      	adds	r7, #8
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40013c00 	.word	0x40013c00

08006438 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800643a:	b08f      	sub	sp, #60	; 0x3c
 800643c:	af0a      	add	r7, sp, #40	; 0x28
 800643e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e116      	b.n	8006678 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d106      	bne.n	800646a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f01b ff4b 	bl	8022300 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2203      	movs	r2, #3
 800646e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d102      	bne.n	8006484 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f005 fbfe 	bl	800bc8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	603b      	str	r3, [r7, #0]
 8006494:	687e      	ldr	r6, [r7, #4]
 8006496:	466d      	mov	r5, sp
 8006498:	f106 0410 	add.w	r4, r6, #16
 800649c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800649e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80064ac:	1d33      	adds	r3, r6, #4
 80064ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064b0:	6838      	ldr	r0, [r7, #0]
 80064b2:	f005 fadf 	bl	800ba74 <USB_CoreInit>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e0d7      	b.n	8006678 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2100      	movs	r1, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f005 fbec 	bl	800bcac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064d4:	2300      	movs	r3, #0
 80064d6:	73fb      	strb	r3, [r7, #15]
 80064d8:	e04a      	b.n	8006570 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064da:	7bfa      	ldrb	r2, [r7, #15]
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	4613      	mov	r3, r2
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	4413      	add	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	440b      	add	r3, r1
 80064e8:	333d      	adds	r3, #61	; 0x3d
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064ee:	7bfa      	ldrb	r2, [r7, #15]
 80064f0:	6879      	ldr	r1, [r7, #4]
 80064f2:	4613      	mov	r3, r2
 80064f4:	00db      	lsls	r3, r3, #3
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	440b      	add	r3, r1
 80064fc:	333c      	adds	r3, #60	; 0x3c
 80064fe:	7bfa      	ldrb	r2, [r7, #15]
 8006500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006502:	7bfa      	ldrb	r2, [r7, #15]
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	b298      	uxth	r0, r3
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	4613      	mov	r3, r2
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	440b      	add	r3, r1
 8006514:	3344      	adds	r3, #68	; 0x44
 8006516:	4602      	mov	r2, r0
 8006518:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800651a:	7bfa      	ldrb	r2, [r7, #15]
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	00db      	lsls	r3, r3, #3
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	3340      	adds	r3, #64	; 0x40
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800652e:	7bfa      	ldrb	r2, [r7, #15]
 8006530:	6879      	ldr	r1, [r7, #4]
 8006532:	4613      	mov	r3, r2
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	440b      	add	r3, r1
 800653c:	3348      	adds	r3, #72	; 0x48
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006542:	7bfa      	ldrb	r2, [r7, #15]
 8006544:	6879      	ldr	r1, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	00db      	lsls	r3, r3, #3
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	440b      	add	r3, r1
 8006550:	334c      	adds	r3, #76	; 0x4c
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006556:	7bfa      	ldrb	r2, [r7, #15]
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	4613      	mov	r3, r2
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	3354      	adds	r3, #84	; 0x54
 8006566:	2200      	movs	r2, #0
 8006568:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	3301      	adds	r3, #1
 800656e:	73fb      	strb	r3, [r7, #15]
 8006570:	7bfa      	ldrb	r2, [r7, #15]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d3af      	bcc.n	80064da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800657a:	2300      	movs	r3, #0
 800657c:	73fb      	strb	r3, [r7, #15]
 800657e:	e044      	b.n	800660a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006580:	7bfa      	ldrb	r2, [r7, #15]
 8006582:	6879      	ldr	r1, [r7, #4]
 8006584:	4613      	mov	r3, r2
 8006586:	00db      	lsls	r3, r3, #3
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006596:	7bfa      	ldrb	r2, [r7, #15]
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4613      	mov	r3, r2
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	4413      	add	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	440b      	add	r3, r1
 80065a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80065a8:	7bfa      	ldrb	r2, [r7, #15]
 80065aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065ac:	7bfa      	ldrb	r2, [r7, #15]
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	4613      	mov	r3, r2
 80065b2:	00db      	lsls	r3, r3, #3
 80065b4:	4413      	add	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	440b      	add	r3, r1
 80065ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065be:	2200      	movs	r2, #0
 80065c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065c2:	7bfa      	ldrb	r2, [r7, #15]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065d8:	7bfa      	ldrb	r2, [r7, #15]
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	4613      	mov	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065ee:	7bfa      	ldrb	r2, [r7, #15]
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	4413      	add	r3, r2
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	440b      	add	r3, r1
 80065fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006600:	2200      	movs	r2, #0
 8006602:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	3301      	adds	r3, #1
 8006608:	73fb      	strb	r3, [r7, #15]
 800660a:	7bfa      	ldrb	r2, [r7, #15]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	429a      	cmp	r2, r3
 8006612:	d3b5      	bcc.n	8006580 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	687e      	ldr	r6, [r7, #4]
 800661c:	466d      	mov	r5, sp
 800661e:	f106 0410 	add.w	r4, r6, #16
 8006622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800662a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800662e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006632:	1d33      	adds	r3, r6, #4
 8006634:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006636:	6838      	ldr	r0, [r7, #0]
 8006638:	f005 fb84 	bl	800bd44 <USB_DevInit>
 800663c:	4603      	mov	r3, r0
 800663e:	2b00      	cmp	r3, #0
 8006640:	d005      	beq.n	800664e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2202      	movs	r2, #2
 8006646:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e014      	b.n	8006678 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2201      	movs	r2, #1
 800665a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006662:	2b01      	cmp	r3, #1
 8006664:	d102      	bne.n	800666c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f001 f97a 	bl	8007960 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f006 fcd2 	bl	800d01a <USB_DevDisconnect>

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3714      	adds	r7, #20
 800667c:	46bd      	mov	sp, r7
 800667e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006680 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_PCD_Start+0x16>
 8006692:	2302      	movs	r3, #2
 8006694:	e012      	b.n	80066bc <HAL_PCD_Start+0x3c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f005 fae0 	bl	800bc68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f006 fc93 	bl	800cfd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b08d      	sub	sp, #52	; 0x34
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f006 fd51 	bl	800d182 <USB_GetMode>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	f040 84b7 	bne.w	8007056 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f006 fcb5 	bl	800d05c <USB_ReadInterrupts>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 84ad 	beq.w	8007054 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	0a1b      	lsrs	r3, r3, #8
 8006704:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4618      	mov	r0, r3
 8006714:	f006 fca2 	bl	800d05c <USB_ReadInterrupts>
 8006718:	4603      	mov	r3, r0
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b02      	cmp	r3, #2
 8006720:	d107      	bne.n	8006732 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	695a      	ldr	r2, [r3, #20]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f002 0202 	and.w	r2, r2, #2
 8006730:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f006 fc90 	bl	800d05c <USB_ReadInterrupts>
 800673c:	4603      	mov	r3, r0
 800673e:	f003 0310 	and.w	r3, r3, #16
 8006742:	2b10      	cmp	r3, #16
 8006744:	d161      	bne.n	800680a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	699a      	ldr	r2, [r3, #24]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0210 	bic.w	r2, r2, #16
 8006754:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f003 020f 	and.w	r2, r3, #15
 8006762:	4613      	mov	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	4413      	add	r3, r2
 8006772:	3304      	adds	r3, #4
 8006774:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006776:	69bb      	ldr	r3, [r7, #24]
 8006778:	0c5b      	lsrs	r3, r3, #17
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	2b02      	cmp	r3, #2
 8006780:	d124      	bne.n	80067cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006782:	69ba      	ldr	r2, [r7, #24]
 8006784:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006788:	4013      	ands	r3, r2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d035      	beq.n	80067fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	091b      	lsrs	r3, r3, #4
 8006796:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006798:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800679c:	b29b      	uxth	r3, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	6a38      	ldr	r0, [r7, #32]
 80067a2:	f006 fac7 	bl	800cd34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	691a      	ldr	r2, [r3, #16]
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	091b      	lsrs	r3, r3, #4
 80067ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067b2:	441a      	add	r2, r3
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	6a1a      	ldr	r2, [r3, #32]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	091b      	lsrs	r3, r3, #4
 80067c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067c4:	441a      	add	r2, r3
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	621a      	str	r2, [r3, #32]
 80067ca:	e016      	b.n	80067fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	0c5b      	lsrs	r3, r3, #17
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	2b06      	cmp	r3, #6
 80067d6:	d110      	bne.n	80067fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067de:	2208      	movs	r2, #8
 80067e0:	4619      	mov	r1, r3
 80067e2:	6a38      	ldr	r0, [r7, #32]
 80067e4:	f006 faa6 	bl	800cd34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	6a1a      	ldr	r2, [r3, #32]
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	091b      	lsrs	r3, r3, #4
 80067f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067f4:	441a      	add	r2, r3
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	699a      	ldr	r2, [r3, #24]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0210 	orr.w	r2, r2, #16
 8006808:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f006 fc24 	bl	800d05c <USB_ReadInterrupts>
 8006814:	4603      	mov	r3, r0
 8006816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800681a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800681e:	f040 80a7 	bne.w	8006970 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f006 fc29 	bl	800d082 <USB_ReadDevAllOutEpInterrupt>
 8006830:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006832:	e099      	b.n	8006968 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	f003 0301 	and.w	r3, r3, #1
 800683a:	2b00      	cmp	r3, #0
 800683c:	f000 808e 	beq.w	800695c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f006 fc4d 	bl	800d0ea <USB_ReadDevOutEPInterrupt>
 8006850:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00c      	beq.n	8006876 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006868:	461a      	mov	r2, r3
 800686a:	2301      	movs	r3, #1
 800686c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800686e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 feef 	bl	8007654 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00c      	beq.n	800689a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688c:	461a      	mov	r2, r3
 800688e:	2308      	movs	r3, #8
 8006890:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 ffc5 	bl	8007824 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d008      	beq.n	80068b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	461a      	mov	r2, r3
 80068b2:	2310      	movs	r3, #16
 80068b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d030      	beq.n	8006922 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c8:	2b80      	cmp	r3, #128	; 0x80
 80068ca:	d109      	bne.n	80068e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	69fa      	ldr	r2, [r7, #28]
 80068d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80068e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e2:	4613      	mov	r3, r2
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	4413      	add	r3, r2
 80068f2:	3304      	adds	r3, #4
 80068f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	78db      	ldrb	r3, [r3, #3]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d108      	bne.n	8006910 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2200      	movs	r2, #0
 8006902:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	b2db      	uxtb	r3, r3
 8006908:	4619      	mov	r1, r3
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f01b fe1c 	bl	8022548 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4413      	add	r3, r2
 8006918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691c:	461a      	mov	r2, r3
 800691e:	2302      	movs	r3, #2
 8006920:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f003 0320 	and.w	r3, r3, #32
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800692c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	2320      	movs	r3, #32
 800693c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d009      	beq.n	800695c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006954:	461a      	mov	r2, r3
 8006956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800695a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	3301      	adds	r3, #1
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	085b      	lsrs	r3, r3, #1
 8006966:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696a:	2b00      	cmp	r3, #0
 800696c:	f47f af62 	bne.w	8006834 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f006 fb71 	bl	800d05c <USB_ReadInterrupts>
 800697a:	4603      	mov	r3, r0
 800697c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006984:	f040 80db 	bne.w	8006b3e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f006 fb92 	bl	800d0b6 <USB_ReadDevAllInEpInterrupt>
 8006992:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006998:	e0cd      	b.n	8006b36 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 80c2 	beq.w	8006b2a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	4611      	mov	r1, r2
 80069b0:	4618      	mov	r0, r3
 80069b2:	f006 fbb8 	bl	800d126 <USB_ReadDevInEPInterrupt>
 80069b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d057      	beq.n	8006a72 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80069c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	2201      	movs	r2, #1
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	43db      	mvns	r3, r3
 80069dc:	69f9      	ldr	r1, [r7, #28]
 80069de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069e2:	4013      	ands	r3, r2
 80069e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f2:	461a      	mov	r2, r3
 80069f4:	2301      	movs	r3, #1
 80069f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d132      	bne.n	8006a66 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a04:	4613      	mov	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	440b      	add	r3, r1
 8006a0e:	334c      	adds	r3, #76	; 0x4c
 8006a10:	6819      	ldr	r1, [r3, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a16:	4613      	mov	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4403      	add	r3, r0
 8006a20:	3348      	adds	r3, #72	; 0x48
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4419      	add	r1, r3
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4413      	add	r3, r2
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	4403      	add	r3, r0
 8006a34:	334c      	adds	r3, #76	; 0x4c
 8006a36:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d113      	bne.n	8006a66 <HAL_PCD_IRQHandler+0x3a2>
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a42:	4613      	mov	r3, r2
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	3354      	adds	r3, #84	; 0x54
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d108      	bne.n	8006a66 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a5e:	461a      	mov	r2, r3
 8006a60:	2101      	movs	r1, #1
 8006a62:	f006 fbc1 	bl	800d1e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f01b fce6 	bl	802243e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f003 0308 	and.w	r3, r3, #8
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d008      	beq.n	8006a8e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	461a      	mov	r2, r3
 8006a8a:	2308      	movs	r3, #8
 8006a8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2310      	movs	r3, #16
 8006aa8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d008      	beq.n	8006ac6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	2340      	movs	r3, #64	; 0x40
 8006ac4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d023      	beq.n	8006b18 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ad2:	6a38      	ldr	r0, [r7, #32]
 8006ad4:	f005 fa94 	bl	800c000 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ada:	4613      	mov	r3, r2
 8006adc:	00db      	lsls	r3, r3, #3
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	3338      	adds	r3, #56	; 0x38
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3304      	adds	r3, #4
 8006aea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	78db      	ldrb	r3, [r3, #3]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d108      	bne.n	8006b06 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	2200      	movs	r2, #0
 8006af8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	4619      	mov	r1, r3
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f01b fd33 	bl	802256c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b12:	461a      	mov	r2, r3
 8006b14:	2302      	movs	r3, #2
 8006b16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fd08 	bl	800753a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	085b      	lsrs	r3, r3, #1
 8006b34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f47f af2e 	bne.w	800699a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f006 fa8a 	bl	800d05c <USB_ReadInterrupts>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b52:	d122      	bne.n	8006b9a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b62:	f023 0301 	bic.w	r3, r3, #1
 8006b66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d108      	bne.n	8006b84 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f01b fead 	bl	80228dc <HAL_PCDEx_LPM_Callback>
 8006b82:	e002      	b.n	8006b8a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f01b fcd1 	bl	802252c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695a      	ldr	r2, [r3, #20]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f006 fa5c 	bl	800d05c <USB_ReadInterrupts>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bae:	d112      	bne.n	8006bd6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f003 0301 	and.w	r3, r3, #1
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d102      	bne.n	8006bc6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f01b fc8d 	bl	80224e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695a      	ldr	r2, [r3, #20]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f006 fa3e 	bl	800d05c <USB_ReadInterrupts>
 8006be0:	4603      	mov	r3, r0
 8006be2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bea:	d121      	bne.n	8006c30 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006bfa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d111      	bne.n	8006c2a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c14:	089b      	lsrs	r3, r3, #2
 8006c16:	f003 020f 	and.w	r2, r3, #15
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006c20:	2101      	movs	r1, #1
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f01b fe5a 	bl	80228dc <HAL_PCDEx_LPM_Callback>
 8006c28:	e002      	b.n	8006c30 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f01b fc58 	bl	80224e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4618      	mov	r0, r3
 8006c36:	f006 fa11 	bl	800d05c <USB_ReadInterrupts>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c44:	f040 80b7 	bne.w	8006db6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2110      	movs	r1, #16
 8006c62:	4618      	mov	r0, r3
 8006c64:	f005 f9cc 	bl	800c000 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c68:	2300      	movs	r3, #0
 8006c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c6c:	e046      	b.n	8006cfc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ca0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc6:	0151      	lsls	r1, r2, #5
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	440a      	add	r2, r1
 8006ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cf4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d3b3      	bcc.n	8006c6e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	69fa      	ldr	r2, [r7, #28]
 8006d10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006d18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d016      	beq.n	8006d50 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d32:	f043 030b 	orr.w	r3, r3, #11
 8006d36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d48:	f043 030b 	orr.w	r3, r3, #11
 8006d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d4e:	e015      	b.n	8006d7c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d56:	695a      	ldr	r2, [r3, #20]
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	4619      	mov	r1, r3
 8006d60:	f242 032b 	movw	r3, #8235	; 0x202b
 8006d64:	4313      	orrs	r3, r2
 8006d66:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	69fa      	ldr	r2, [r7, #28]
 8006d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d76:	f043 030b 	orr.w	r3, r3, #11
 8006d7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006da0:	461a      	mov	r2, r3
 8006da2:	f006 fa21 	bl	800d1e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695a      	ldr	r2, [r3, #20]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006db4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f006 f94e 	bl	800d05c <USB_ReadInterrupts>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dca:	d124      	bne.n	8006e16 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f006 f9e5 	bl	800d1a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f005 f98d 	bl	800c0fa <USB_GetDevSpeed>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681c      	ldr	r4, [r3, #0]
 8006dec:	f001 fa72 	bl	80082d4 <HAL_RCC_GetHCLKFreq>
 8006df0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f004 fe92 	bl	800bb24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f01b fb44 	bl	802248e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	695a      	ldr	r2, [r3, #20]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f006 f91e 	bl	800d05c <USB_ReadInterrupts>
 8006e20:	4603      	mov	r3, r0
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d10a      	bne.n	8006e40 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f01b fb21 	bl	8022472 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	695a      	ldr	r2, [r3, #20]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f002 0208 	and.w	r2, r2, #8
 8006e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f006 f909 	bl	800d05c <USB_ReadInterrupts>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e50:	2b80      	cmp	r3, #128	; 0x80
 8006e52:	d122      	bne.n	8006e9a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	699b      	ldr	r3, [r3, #24]
 8006e58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e60:	2301      	movs	r3, #1
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
 8006e64:	e014      	b.n	8006e90 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	4413      	add	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	440b      	add	r3, r1
 8006e74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d105      	bne.n	8006e8a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fb27 	bl	80074d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d3e5      	bcc.n	8006e66 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f006 f8dc 	bl	800d05c <USB_ReadInterrupts>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eae:	d13b      	bne.n	8006f28 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006eb4:	e02b      	b.n	8006f0e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eca:	4613      	mov	r3, r2
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3340      	adds	r3, #64	; 0x40
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d115      	bne.n	8006f08 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006edc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	da12      	bge.n	8006f08 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	00db      	lsls	r3, r3, #3
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	333f      	adds	r3, #63	; 0x3f
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	4619      	mov	r1, r3
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fae8 	bl	80074d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d3ce      	bcc.n	8006eb6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	695a      	ldr	r2, [r3, #20]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f006 f895 	bl	800d05c <USB_ReadInterrupts>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f3c:	d155      	bne.n	8006fea <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f3e:	2301      	movs	r3, #1
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
 8006f42:	e045      	b.n	8006fd0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f58:	4613      	mov	r3, r2
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	4413      	add	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006f66:	781b      	ldrb	r3, [r3, #0]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d12e      	bne.n	8006fca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da2b      	bge.n	8006fca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006f7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d121      	bne.n	8006fca <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006f98:	2201      	movs	r2, #1
 8006f9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10a      	bne.n	8006fca <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fc6:	6053      	str	r3, [r2, #4]
            break;
 8006fc8:	e007      	b.n	8006fda <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	3301      	adds	r3, #1
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d3b4      	bcc.n	8006f44 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	695a      	ldr	r2, [r3, #20]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006fe8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f006 f834 	bl	800d05c <USB_ReadInterrupts>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffe:	d10a      	bne.n	8007016 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f01b fac5 	bl	8022590 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	695a      	ldr	r2, [r3, #20]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007014:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4618      	mov	r0, r3
 800701c:	f006 f81e 	bl	800d05c <USB_ReadInterrupts>
 8007020:	4603      	mov	r3, r0
 8007022:	f003 0304 	and.w	r3, r3, #4
 8007026:	2b04      	cmp	r3, #4
 8007028:	d115      	bne.n	8007056 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d002      	beq.n	8007042 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f01b fab5 	bl	80225ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6859      	ldr	r1, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	430a      	orrs	r2, r1
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	e000      	b.n	8007056 <HAL_PCD_IRQHandler+0x992>
      return;
 8007054:	bf00      	nop
    }
  }
}
 8007056:	3734      	adds	r7, #52	; 0x34
 8007058:	46bd      	mov	sp, r7
 800705a:	bd90      	pop	{r4, r7, pc}

0800705c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	460b      	mov	r3, r1
 8007066:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_PCD_SetAddress+0x1a>
 8007072:	2302      	movs	r3, #2
 8007074:	e013      	b.n	800709e <HAL_PCD_SetAddress+0x42>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	78fa      	ldrb	r2, [r7, #3]
 8007082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	78fa      	ldrb	r2, [r7, #3]
 800708c:	4611      	mov	r1, r2
 800708e:	4618      	mov	r0, r3
 8007090:	f005 ff7c 	bl	800cf8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	4608      	mov	r0, r1
 80070b0:	4611      	mov	r1, r2
 80070b2:	461a      	mov	r2, r3
 80070b4:	4603      	mov	r3, r0
 80070b6:	70fb      	strb	r3, [r7, #3]
 80070b8:	460b      	mov	r3, r1
 80070ba:	803b      	strh	r3, [r7, #0]
 80070bc:	4613      	mov	r3, r2
 80070be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	da0f      	bge.n	80070ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	f003 020f 	and.w	r2, r3, #15
 80070d2:	4613      	mov	r3, r2
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	3338      	adds	r3, #56	; 0x38
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	4413      	add	r3, r2
 80070e0:	3304      	adds	r3, #4
 80070e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	705a      	strb	r2, [r3, #1]
 80070ea:	e00f      	b.n	800710c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	f003 020f 	and.w	r2, r3, #15
 80070f2:	4613      	mov	r3, r2
 80070f4:	00db      	lsls	r3, r3, #3
 80070f6:	4413      	add	r3, r2
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4413      	add	r3, r2
 8007102:	3304      	adds	r3, #4
 8007104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	b2da      	uxtb	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007118:	883a      	ldrh	r2, [r7, #0]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	78ba      	ldrb	r2, [r7, #2]
 8007122:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	785b      	ldrb	r3, [r3, #1]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d004      	beq.n	8007136 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007136:	78bb      	ldrb	r3, [r7, #2]
 8007138:	2b02      	cmp	r3, #2
 800713a:	d102      	bne.n	8007142 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_PCD_EP_Open+0xaa>
 800714c:	2302      	movs	r3, #2
 800714e:	e00e      	b.n	800716e <HAL_PCD_EP_Open+0xc8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68f9      	ldr	r1, [r7, #12]
 800715e:	4618      	mov	r0, r3
 8007160:	f004 fff0 	bl	800c144 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800716c:	7afb      	ldrb	r3, [r7, #11]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b084      	sub	sp, #16
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007186:	2b00      	cmp	r3, #0
 8007188:	da0f      	bge.n	80071aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	f003 020f 	and.w	r2, r3, #15
 8007190:	4613      	mov	r3, r2
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	3338      	adds	r3, #56	; 0x38
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	4413      	add	r3, r2
 800719e:	3304      	adds	r3, #4
 80071a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	705a      	strb	r2, [r3, #1]
 80071a8:	e00f      	b.n	80071ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071aa:	78fb      	ldrb	r3, [r7, #3]
 80071ac:	f003 020f 	and.w	r2, r3, #15
 80071b0:	4613      	mov	r3, r2
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	4413      	add	r3, r2
 80071c0:	3304      	adds	r3, #4
 80071c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_PCD_EP_Close+0x6e>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e00e      	b.n	8007202 <HAL_PCD_EP_Close+0x8c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68f9      	ldr	r1, [r7, #12]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f005 f82e 	bl	800c254 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	607a      	str	r2, [r7, #4]
 8007214:	603b      	str	r3, [r7, #0]
 8007216:	460b      	mov	r3, r1
 8007218:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800721a:	7afb      	ldrb	r3, [r7, #11]
 800721c:	f003 020f 	and.w	r2, r3, #15
 8007220:	4613      	mov	r3, r2
 8007222:	00db      	lsls	r3, r3, #3
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	3304      	adds	r3, #4
 8007232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	2200      	movs	r2, #0
 8007244:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	b2da      	uxtb	r2, r3
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d102      	bne.n	8007266 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	f003 030f 	and.w	r3, r3, #15
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6818      	ldr	r0, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	6979      	ldr	r1, [r7, #20]
 800727e:	f005 fb15 	bl	800c8ac <USB_EP0StartXfer>
 8007282:	e008      	b.n	8007296 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6818      	ldr	r0, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	461a      	mov	r2, r3
 8007290:	6979      	ldr	r1, [r7, #20]
 8007292:	f005 f8bb 	bl	800c40c <USB_EPStartXfer>
  }

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	460b      	mov	r3, r1
 80072aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80072ac:	78fb      	ldrb	r3, [r7, #3]
 80072ae:	f003 020f 	and.w	r2, r3, #15
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	4613      	mov	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	440b      	add	r3, r1
 80072be:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80072c2:	681b      	ldr	r3, [r3, #0]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	607a      	str	r2, [r7, #4]
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	460b      	mov	r3, r1
 80072de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072e0:	7afb      	ldrb	r3, [r7, #11]
 80072e2:	f003 020f 	and.w	r2, r3, #15
 80072e6:	4613      	mov	r3, r2
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	4413      	add	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	3338      	adds	r3, #56	; 0x38
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	4413      	add	r3, r2
 80072f4:	3304      	adds	r3, #4
 80072f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	683a      	ldr	r2, [r7, #0]
 8007302:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2200      	movs	r2, #0
 8007308:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2201      	movs	r2, #1
 800730e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007310:	7afb      	ldrb	r3, [r7, #11]
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	b2da      	uxtb	r2, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d102      	bne.n	800732a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800732a:	7afb      	ldrb	r3, [r7, #11]
 800732c:	f003 030f 	and.w	r3, r3, #15
 8007330:	2b00      	cmp	r3, #0
 8007332:	d109      	bne.n	8007348 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	461a      	mov	r2, r3
 8007340:	6979      	ldr	r1, [r7, #20]
 8007342:	f005 fab3 	bl	800c8ac <USB_EP0StartXfer>
 8007346:	e008      	b.n	800735a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	461a      	mov	r2, r3
 8007354:	6979      	ldr	r1, [r7, #20]
 8007356:	f005 f859 	bl	800c40c <USB_EPStartXfer>
  }

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	f003 020f 	and.w	r2, r3, #15
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	429a      	cmp	r2, r3
 800737c:	d901      	bls.n	8007382 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e050      	b.n	8007424 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007386:	2b00      	cmp	r3, #0
 8007388:	da0f      	bge.n	80073aa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800738a:	78fb      	ldrb	r3, [r7, #3]
 800738c:	f003 020f 	and.w	r2, r3, #15
 8007390:	4613      	mov	r3, r2
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	3338      	adds	r3, #56	; 0x38
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	3304      	adds	r3, #4
 80073a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	705a      	strb	r2, [r3, #1]
 80073a8:	e00d      	b.n	80073c6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80073aa:	78fa      	ldrb	r2, [r7, #3]
 80073ac:	4613      	mov	r3, r2
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4413      	add	r3, r2
 80073bc:	3304      	adds	r3, #4
 80073be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_PCD_EP_SetStall+0x82>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e01e      	b.n	8007424 <HAL_PCD_EP_SetStall+0xc0>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f005 fcf5 	bl	800cde4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073fa:	78fb      	ldrb	r3, [r7, #3]
 80073fc:	f003 030f 	and.w	r3, r3, #15
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10a      	bne.n	800741a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	b2d9      	uxtb	r1, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007414:	461a      	mov	r2, r3
 8007416:	f005 fee7 	bl	800d1e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007422:	2300      	movs	r3, #0
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	f003 020f 	and.w	r2, r3, #15
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	429a      	cmp	r2, r3
 8007444:	d901      	bls.n	800744a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e042      	b.n	80074d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800744a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800744e:	2b00      	cmp	r3, #0
 8007450:	da0f      	bge.n	8007472 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	f003 020f 	and.w	r2, r3, #15
 8007458:	4613      	mov	r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	3338      	adds	r3, #56	; 0x38
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	4413      	add	r3, r2
 8007466:	3304      	adds	r3, #4
 8007468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	705a      	strb	r2, [r3, #1]
 8007470:	e00f      	b.n	8007492 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	f003 020f 	and.w	r2, r3, #15
 8007478:	4613      	mov	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	4413      	add	r3, r2
 800747e:	009b      	lsls	r3, r3, #2
 8007480:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	4413      	add	r3, r2
 8007488:	3304      	adds	r3, #4
 800748a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2200      	movs	r2, #0
 8007496:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	f003 030f 	and.w	r3, r3, #15
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <HAL_PCD_EP_ClrStall+0x86>
 80074ae:	2302      	movs	r3, #2
 80074b0:	e00e      	b.n	80074d0 <HAL_PCD_EP_ClrStall+0xa4>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	4618      	mov	r0, r3
 80074c2:	f005 fcfd 	bl	800cec0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80074e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	da0c      	bge.n	8007506 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074ec:	78fb      	ldrb	r3, [r7, #3]
 80074ee:	f003 020f 	and.w	r2, r3, #15
 80074f2:	4613      	mov	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	3338      	adds	r3, #56	; 0x38
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	4413      	add	r3, r2
 8007500:	3304      	adds	r3, #4
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e00c      	b.n	8007520 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007506:	78fb      	ldrb	r3, [r7, #3]
 8007508:	f003 020f 	and.w	r2, r3, #15
 800750c:	4613      	mov	r3, r2
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	4413      	add	r3, r2
 800751c:	3304      	adds	r3, #4
 800751e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68f9      	ldr	r1, [r7, #12]
 8007526:	4618      	mov	r0, r3
 8007528:	f005 fb1c 	bl	800cb64 <USB_EPStopXfer>
 800752c:	4603      	mov	r3, r0
 800752e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007530:	7afb      	ldrb	r3, [r7, #11]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b08a      	sub	sp, #40	; 0x28
 800753e:	af02      	add	r7, sp, #8
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	4613      	mov	r3, r2
 8007552:	00db      	lsls	r3, r3, #3
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	3338      	adds	r3, #56	; 0x38
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4413      	add	r3, r2
 800755e:	3304      	adds	r3, #4
 8007560:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6a1a      	ldr	r2, [r3, #32]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	429a      	cmp	r2, r3
 800756c:	d901      	bls.n	8007572 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e06c      	b.n	800764c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	429a      	cmp	r2, r3
 8007586:	d902      	bls.n	800758e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	3303      	adds	r3, #3
 8007592:	089b      	lsrs	r3, r3, #2
 8007594:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007596:	e02b      	b.n	80075f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	699a      	ldr	r2, [r3, #24]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	69fa      	ldr	r2, [r7, #28]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d902      	bls.n	80075b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	3303      	adds	r3, #3
 80075b8:	089b      	lsrs	r3, r3, #2
 80075ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6919      	ldr	r1, [r3, #16]
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	4603      	mov	r3, r0
 80075d2:	6978      	ldr	r0, [r7, #20]
 80075d4:	f005 fb70 	bl	800ccb8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	441a      	add	r2, r3
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1a      	ldr	r2, [r3, #32]
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	441a      	add	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	429a      	cmp	r2, r3
 8007604:	d809      	bhi.n	800761a <PCD_WriteEmptyTxFifo+0xe0>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6a1a      	ldr	r2, [r3, #32]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800760e:	429a      	cmp	r2, r3
 8007610:	d203      	bcs.n	800761a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d1be      	bne.n	8007598 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	699a      	ldr	r2, [r3, #24]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	429a      	cmp	r2, r3
 8007624:	d811      	bhi.n	800764a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	2201      	movs	r2, #1
 800762e:	fa02 f303 	lsl.w	r3, r2, r3
 8007632:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	43db      	mvns	r3, r3
 8007640:	6939      	ldr	r1, [r7, #16]
 8007642:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007646:	4013      	ands	r3, r2
 8007648:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3720      	adds	r7, #32
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	333c      	adds	r3, #60	; 0x3c
 800766c:	3304      	adds	r3, #4
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d17b      	bne.n	8007782 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f003 0308 	and.w	r3, r3, #8
 8007690:	2b00      	cmp	r3, #0
 8007692:	d015      	beq.n	80076c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4a61      	ldr	r2, [pc, #388]	; (800781c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007698:	4293      	cmp	r3, r2
 800769a:	f240 80b9 	bls.w	8007810 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 80b3 	beq.w	8007810 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b6:	461a      	mov	r2, r3
 80076b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076bc:	6093      	str	r3, [r2, #8]
 80076be:	e0a7      	b.n	8007810 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d6:	461a      	mov	r2, r3
 80076d8:	2320      	movs	r3, #32
 80076da:	6093      	str	r3, [r2, #8]
 80076dc:	e098      	b.n	8007810 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f040 8093 	bne.w	8007810 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	4a4b      	ldr	r2, [pc, #300]	; (800781c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d90f      	bls.n	8007712 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	015a      	lsls	r2, r3, #5
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	4413      	add	r3, r2
 8007704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007708:	461a      	mov	r2, r3
 800770a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800770e:	6093      	str	r3, [r2, #8]
 8007710:	e07e      	b.n	8007810 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	4413      	add	r3, r2
 8007724:	3304      	adds	r3, #4
 8007726:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	69da      	ldr	r2, [r3, #28]
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	0159      	lsls	r1, r3, #5
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	440b      	add	r3, r1
 8007734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800773e:	1ad2      	subs	r2, r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d114      	bne.n	8007774 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	699b      	ldr	r3, [r3, #24]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d109      	bne.n	8007766 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6818      	ldr	r0, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800775c:	461a      	mov	r2, r3
 800775e:	2101      	movs	r1, #1
 8007760:	f005 fd42 	bl	800d1e8 <USB_EP0_OutStart>
 8007764:	e006      	b.n	8007774 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	691a      	ldr	r2, [r3, #16]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	441a      	add	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	b2db      	uxtb	r3, r3
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f01a fe44 	bl	8022408 <HAL_PCD_DataOutStageCallback>
 8007780:	e046      	b.n	8007810 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	4a26      	ldr	r2, [pc, #152]	; (8007820 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d124      	bne.n	80077d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	461a      	mov	r2, r3
 80077a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077a6:	6093      	str	r3, [r2, #8]
 80077a8:	e032      	b.n	8007810 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d008      	beq.n	80077c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	461a      	mov	r2, r3
 80077c2:	2320      	movs	r3, #32
 80077c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f01a fe1b 	bl	8022408 <HAL_PCD_DataOutStageCallback>
 80077d2:	e01d      	b.n	8007810 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d114      	bne.n	8007804 <PCD_EP_OutXfrComplete_int+0x1b0>
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	683a      	ldr	r2, [r7, #0]
 80077de:	4613      	mov	r3, r2
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d108      	bne.n	8007804 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077fc:	461a      	mov	r2, r3
 80077fe:	2100      	movs	r1, #0
 8007800:	f005 fcf2 	bl	800d1e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f01a fdfc 	bl	8022408 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3720      	adds	r7, #32
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	4f54300a 	.word	0x4f54300a
 8007820:	4f54310a 	.word	0x4f54310a

08007824 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	333c      	adds	r3, #60	; 0x3c
 800783c:	3304      	adds	r3, #4
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4a15      	ldr	r2, [pc, #84]	; (80078ac <PCD_EP_OutSetupPacket_int+0x88>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d90e      	bls.n	8007878 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007860:	2b00      	cmp	r3, #0
 8007862:	d009      	beq.n	8007878 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007870:	461a      	mov	r2, r3
 8007872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007876:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f01a fdb3 	bl	80223e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <PCD_EP_OutSetupPacket_int+0x88>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d90c      	bls.n	80078a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d108      	bne.n	80078a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007898:	461a      	mov	r2, r3
 800789a:	2101      	movs	r1, #1
 800789c:	f005 fca4 	bl	800d1e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	4f54300a 	.word	0x4f54300a

080078b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	460b      	mov	r3, r1
 80078ba:	70fb      	strb	r3, [r7, #3]
 80078bc:	4613      	mov	r3, r2
 80078be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80078c8:	78fb      	ldrb	r3, [r7, #3]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d107      	bne.n	80078de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80078ce:	883b      	ldrh	r3, [r7, #0]
 80078d0:	0419      	lsls	r1, r3, #16
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	430a      	orrs	r2, r1
 80078da:	629a      	str	r2, [r3, #40]	; 0x28
 80078dc:	e028      	b.n	8007930 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e4:	0c1b      	lsrs	r3, r3, #16
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	4413      	add	r3, r2
 80078ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078ec:	2300      	movs	r3, #0
 80078ee:	73fb      	strb	r3, [r7, #15]
 80078f0:	e00d      	b.n	800790e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	3340      	adds	r3, #64	; 0x40
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	4413      	add	r3, r2
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	0c1b      	lsrs	r3, r3, #16
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	4413      	add	r3, r2
 8007906:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007908:	7bfb      	ldrb	r3, [r7, #15]
 800790a:	3301      	adds	r3, #1
 800790c:	73fb      	strb	r3, [r7, #15]
 800790e:	7bfa      	ldrb	r2, [r7, #15]
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	3b01      	subs	r3, #1
 8007914:	429a      	cmp	r2, r3
 8007916:	d3ec      	bcc.n	80078f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007918:	883b      	ldrh	r3, [r7, #0]
 800791a:	0418      	lsls	r0, r3, #16
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6819      	ldr	r1, [r3, #0]
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	3b01      	subs	r3, #1
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	4302      	orrs	r2, r0
 8007928:	3340      	adds	r3, #64	; 0x40
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	440b      	add	r3, r1
 800792e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	460b      	mov	r3, r1
 8007948:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	887a      	ldrh	r2, [r7, #2]
 8007950:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007952:	2300      	movs	r3, #0
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800798e:	4b05      	ldr	r3, [pc, #20]	; (80079a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8007990:	4313      	orrs	r3, r2
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	10000003 	.word	0x10000003

080079a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80079b0:	2300      	movs	r3, #0
 80079b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e291      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8087 	beq.w	8007ada <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079cc:	4b96      	ldr	r3, [pc, #600]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 030c 	and.w	r3, r3, #12
 80079d4:	2b04      	cmp	r3, #4
 80079d6:	d00c      	beq.n	80079f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079d8:	4b93      	ldr	r3, [pc, #588]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	f003 030c 	and.w	r3, r3, #12
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d112      	bne.n	8007a0a <HAL_RCC_OscConfig+0x62>
 80079e4:	4b90      	ldr	r3, [pc, #576]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079f0:	d10b      	bne.n	8007a0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f2:	4b8d      	ldr	r3, [pc, #564]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d06c      	beq.n	8007ad8 <HAL_RCC_OscConfig+0x130>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d168      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e26b      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a12:	d106      	bne.n	8007a22 <HAL_RCC_OscConfig+0x7a>
 8007a14:	4b84      	ldr	r3, [pc, #528]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a83      	ldr	r2, [pc, #524]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	e02e      	b.n	8007a80 <HAL_RCC_OscConfig+0xd8>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10c      	bne.n	8007a44 <HAL_RCC_OscConfig+0x9c>
 8007a2a:	4b7f      	ldr	r3, [pc, #508]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a7e      	ldr	r2, [pc, #504]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	4b7c      	ldr	r3, [pc, #496]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a7b      	ldr	r2, [pc, #492]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	e01d      	b.n	8007a80 <HAL_RCC_OscConfig+0xd8>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a4c:	d10c      	bne.n	8007a68 <HAL_RCC_OscConfig+0xc0>
 8007a4e:	4b76      	ldr	r3, [pc, #472]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a75      	ldr	r2, [pc, #468]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	4b73      	ldr	r3, [pc, #460]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a72      	ldr	r2, [pc, #456]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	e00b      	b.n	8007a80 <HAL_RCC_OscConfig+0xd8>
 8007a68:	4b6f      	ldr	r3, [pc, #444]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a6e      	ldr	r2, [pc, #440]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	4b6c      	ldr	r3, [pc, #432]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a6b      	ldr	r2, [pc, #428]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d013      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a88:	f7fc ff06 	bl	8004898 <HAL_GetTick>
 8007a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a8e:	e008      	b.n	8007aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a90:	f7fc ff02 	bl	8004898 <HAL_GetTick>
 8007a94:	4602      	mov	r2, r0
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	2b64      	cmp	r3, #100	; 0x64
 8007a9c:	d901      	bls.n	8007aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a9e:	2303      	movs	r3, #3
 8007aa0:	e21f      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aa2:	4b61      	ldr	r3, [pc, #388]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0f0      	beq.n	8007a90 <HAL_RCC_OscConfig+0xe8>
 8007aae:	e014      	b.n	8007ada <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab0:	f7fc fef2 	bl	8004898 <HAL_GetTick>
 8007ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ab8:	f7fc feee 	bl	8004898 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b64      	cmp	r3, #100	; 0x64
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e20b      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aca:	4b57      	ldr	r3, [pc, #348]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1f0      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x110>
 8007ad6:	e000      	b.n	8007ada <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 0302 	and.w	r3, r3, #2
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d069      	beq.n	8007bba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ae6:	4b50      	ldr	r3, [pc, #320]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 030c 	and.w	r3, r3, #12
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00b      	beq.n	8007b0a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007af2:	4b4d      	ldr	r3, [pc, #308]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 030c 	and.w	r3, r3, #12
 8007afa:	2b08      	cmp	r3, #8
 8007afc:	d11c      	bne.n	8007b38 <HAL_RCC_OscConfig+0x190>
 8007afe:	4b4a      	ldr	r3, [pc, #296]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d116      	bne.n	8007b38 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b0a:	4b47      	ldr	r3, [pc, #284]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <HAL_RCC_OscConfig+0x17a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d001      	beq.n	8007b22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e1df      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b22:	4b41      	ldr	r3, [pc, #260]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	493d      	ldr	r1, [pc, #244]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b36:	e040      	b.n	8007bba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d023      	beq.n	8007b88 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b40:	4b39      	ldr	r3, [pc, #228]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a38      	ldr	r2, [pc, #224]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b46:	f043 0301 	orr.w	r3, r3, #1
 8007b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4c:	f7fc fea4 	bl	8004898 <HAL_GetTick>
 8007b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b52:	e008      	b.n	8007b66 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b54:	f7fc fea0 	bl	8004898 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e1bd      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b66:	4b30      	ldr	r3, [pc, #192]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0f0      	beq.n	8007b54 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b72:	4b2d      	ldr	r3, [pc, #180]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	4929      	ldr	r1, [pc, #164]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	600b      	str	r3, [r1, #0]
 8007b86:	e018      	b.n	8007bba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b88:	4b27      	ldr	r3, [pc, #156]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a26      	ldr	r2, [pc, #152]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007b8e:	f023 0301 	bic.w	r3, r3, #1
 8007b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b94:	f7fc fe80 	bl	8004898 <HAL_GetTick>
 8007b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b9a:	e008      	b.n	8007bae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b9c:	f7fc fe7c 	bl	8004898 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e199      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bae:	4b1e      	ldr	r3, [pc, #120]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1f0      	bne.n	8007b9c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0308 	and.w	r3, r3, #8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d038      	beq.n	8007c38 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d019      	beq.n	8007c02 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bce:	4b16      	ldr	r3, [pc, #88]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd2:	4a15      	ldr	r2, [pc, #84]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007bd4:	f043 0301 	orr.w	r3, r3, #1
 8007bd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bda:	f7fc fe5d 	bl	8004898 <HAL_GetTick>
 8007bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007be0:	e008      	b.n	8007bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007be2:	f7fc fe59 	bl	8004898 <HAL_GetTick>
 8007be6:	4602      	mov	r2, r0
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	1ad3      	subs	r3, r2, r3
 8007bec:	2b02      	cmp	r3, #2
 8007bee:	d901      	bls.n	8007bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e176      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bf4:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d0f0      	beq.n	8007be2 <HAL_RCC_OscConfig+0x23a>
 8007c00:	e01a      	b.n	8007c38 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c06:	4a08      	ldr	r2, [pc, #32]	; (8007c28 <HAL_RCC_OscConfig+0x280>)
 8007c08:	f023 0301 	bic.w	r3, r3, #1
 8007c0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c0e:	f7fc fe43 	bl	8004898 <HAL_GetTick>
 8007c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c14:	e00a      	b.n	8007c2c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c16:	f7fc fe3f 	bl	8004898 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d903      	bls.n	8007c2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e15c      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
 8007c28:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c2c:	4b91      	ldr	r3, [pc, #580]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1ee      	bne.n	8007c16 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80a4 	beq.w	8007d8e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c46:	4b8b      	ldr	r3, [pc, #556]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10d      	bne.n	8007c6e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c52:	4b88      	ldr	r3, [pc, #544]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	4a87      	ldr	r2, [pc, #540]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c5e:	4b85      	ldr	r3, [pc, #532]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c66:	60bb      	str	r3, [r7, #8]
 8007c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c6e:	4b82      	ldr	r3, [pc, #520]	; (8007e78 <HAL_RCC_OscConfig+0x4d0>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d118      	bne.n	8007cac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007c7a:	4b7f      	ldr	r3, [pc, #508]	; (8007e78 <HAL_RCC_OscConfig+0x4d0>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a7e      	ldr	r2, [pc, #504]	; (8007e78 <HAL_RCC_OscConfig+0x4d0>)
 8007c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c86:	f7fc fe07 	bl	8004898 <HAL_GetTick>
 8007c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c8c:	e008      	b.n	8007ca0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c8e:	f7fc fe03 	bl	8004898 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b64      	cmp	r3, #100	; 0x64
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e120      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ca0:	4b75      	ldr	r3, [pc, #468]	; (8007e78 <HAL_RCC_OscConfig+0x4d0>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0f0      	beq.n	8007c8e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d106      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x31a>
 8007cb4:	4b6f      	ldr	r3, [pc, #444]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb8:	4a6e      	ldr	r2, [pc, #440]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007cba:	f043 0301 	orr.w	r3, r3, #1
 8007cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8007cc0:	e02d      	b.n	8007d1e <HAL_RCC_OscConfig+0x376>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10c      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x33c>
 8007cca:	4b6a      	ldr	r3, [pc, #424]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cce:	4a69      	ldr	r2, [pc, #420]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007cd0:	f023 0301 	bic.w	r3, r3, #1
 8007cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd6:	4b67      	ldr	r3, [pc, #412]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cda:	4a66      	ldr	r2, [pc, #408]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007cdc:	f023 0304 	bic.w	r3, r3, #4
 8007ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce2:	e01c      	b.n	8007d1e <HAL_RCC_OscConfig+0x376>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2b05      	cmp	r3, #5
 8007cea:	d10c      	bne.n	8007d06 <HAL_RCC_OscConfig+0x35e>
 8007cec:	4b61      	ldr	r3, [pc, #388]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf0:	4a60      	ldr	r2, [pc, #384]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007cf2:	f043 0304 	orr.w	r3, r3, #4
 8007cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf8:	4b5e      	ldr	r3, [pc, #376]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfc:	4a5d      	ldr	r2, [pc, #372]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	6713      	str	r3, [r2, #112]	; 0x70
 8007d04:	e00b      	b.n	8007d1e <HAL_RCC_OscConfig+0x376>
 8007d06:	4b5b      	ldr	r3, [pc, #364]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	4a5a      	ldr	r2, [pc, #360]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	6713      	str	r3, [r2, #112]	; 0x70
 8007d12:	4b58      	ldr	r3, [pc, #352]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	4a57      	ldr	r2, [pc, #348]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007d18:	f023 0304 	bic.w	r3, r3, #4
 8007d1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d015      	beq.n	8007d52 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d26:	f7fc fdb7 	bl	8004898 <HAL_GetTick>
 8007d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d2c:	e00a      	b.n	8007d44 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2e:	f7fc fdb3 	bl	8004898 <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d901      	bls.n	8007d44 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e0ce      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d44:	4b4b      	ldr	r3, [pc, #300]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0ee      	beq.n	8007d2e <HAL_RCC_OscConfig+0x386>
 8007d50:	e014      	b.n	8007d7c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d52:	f7fc fda1 	bl	8004898 <HAL_GetTick>
 8007d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d58:	e00a      	b.n	8007d70 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d5a:	f7fc fd9d 	bl	8004898 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d901      	bls.n	8007d70 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e0b8      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d70:	4b40      	ldr	r3, [pc, #256]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d74:	f003 0302 	and.w	r3, r3, #2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1ee      	bne.n	8007d5a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d105      	bne.n	8007d8e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d82:	4b3c      	ldr	r3, [pc, #240]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d86:	4a3b      	ldr	r2, [pc, #236]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80a4 	beq.w	8007ee0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d98:	4b36      	ldr	r3, [pc, #216]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f003 030c 	and.w	r3, r3, #12
 8007da0:	2b08      	cmp	r3, #8
 8007da2:	d06b      	beq.n	8007e7c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d149      	bne.n	8007e40 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dac:	4b31      	ldr	r3, [pc, #196]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a30      	ldr	r2, [pc, #192]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db8:	f7fc fd6e 	bl	8004898 <HAL_GetTick>
 8007dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dc0:	f7fc fd6a 	bl	8004898 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e087      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd2:	4b28      	ldr	r3, [pc, #160]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f0      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	69da      	ldr	r2, [r3, #28]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dec:	019b      	lsls	r3, r3, #6
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	085b      	lsrs	r3, r3, #1
 8007df6:	3b01      	subs	r3, #1
 8007df8:	041b      	lsls	r3, r3, #16
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	061b      	lsls	r3, r3, #24
 8007e02:	4313      	orrs	r3, r2
 8007e04:	4a1b      	ldr	r2, [pc, #108]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007e06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e0a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e0c:	4b19      	ldr	r3, [pc, #100]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a18      	ldr	r2, [pc, #96]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e18:	f7fc fd3e 	bl	8004898 <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e20:	f7fc fd3a 	bl	8004898 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e057      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e32:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d0f0      	beq.n	8007e20 <HAL_RCC_OscConfig+0x478>
 8007e3e:	e04f      	b.n	8007ee0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a0b      	ldr	r2, [pc, #44]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4c:	f7fc fd24 	bl	8004898 <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e54:	f7fc fd20 	bl	8004898 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e03d      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e66:	4b03      	ldr	r3, [pc, #12]	; (8007e74 <HAL_RCC_OscConfig+0x4cc>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f0      	bne.n	8007e54 <HAL_RCC_OscConfig+0x4ac>
 8007e72:	e035      	b.n	8007ee0 <HAL_RCC_OscConfig+0x538>
 8007e74:	40023800 	.word	0x40023800
 8007e78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e7c:	4b1b      	ldr	r3, [pc, #108]	; (8007eec <HAL_RCC_OscConfig+0x544>)
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d028      	beq.n	8007edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d121      	bne.n	8007edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d11a      	bne.n	8007edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007eac:	4013      	ands	r3, r2
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007eb2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d111      	bne.n	8007edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec2:	085b      	lsrs	r3, r3, #1
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d107      	bne.n	8007edc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d001      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e000      	b.n	8007ee2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	40023800 	.word	0x40023800

08007ef0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d101      	bne.n	8007f08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e0d0      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f08:	4b6a      	ldr	r3, [pc, #424]	; (80080b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 030f 	and.w	r3, r3, #15
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d910      	bls.n	8007f38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f16:	4b67      	ldr	r3, [pc, #412]	; (80080b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f023 020f 	bic.w	r2, r3, #15
 8007f1e:	4965      	ldr	r1, [pc, #404]	; (80080b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	4313      	orrs	r3, r2
 8007f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f26:	4b63      	ldr	r3, [pc, #396]	; (80080b4 <HAL_RCC_ClockConfig+0x1c4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f003 030f 	and.w	r3, r3, #15
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d001      	beq.n	8007f38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e0b8      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0302 	and.w	r3, r3, #2
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d020      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f50:	4b59      	ldr	r3, [pc, #356]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	4a58      	ldr	r2, [pc, #352]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f003 0308 	and.w	r3, r3, #8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f68:	4b53      	ldr	r3, [pc, #332]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	4a52      	ldr	r2, [pc, #328]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f74:	4b50      	ldr	r3, [pc, #320]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	494d      	ldr	r1, [pc, #308]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d040      	beq.n	8008014 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d107      	bne.n	8007faa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f9a:	4b47      	ldr	r3, [pc, #284]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d115      	bne.n	8007fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e07f      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d107      	bne.n	8007fc2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fb2:	4b41      	ldr	r3, [pc, #260]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d109      	bne.n	8007fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e073      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fc2:	4b3d      	ldr	r3, [pc, #244]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e06b      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fd2:	4b39      	ldr	r3, [pc, #228]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f023 0203 	bic.w	r2, r3, #3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	4936      	ldr	r1, [pc, #216]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fe4:	f7fc fc58 	bl	8004898 <HAL_GetTick>
 8007fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fea:	e00a      	b.n	8008002 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fec:	f7fc fc54 	bl	8004898 <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e053      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008002:	4b2d      	ldr	r3, [pc, #180]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 020c 	and.w	r2, r3, #12
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	429a      	cmp	r2, r3
 8008012:	d1eb      	bne.n	8007fec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008014:	4b27      	ldr	r3, [pc, #156]	; (80080b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 030f 	and.w	r3, r3, #15
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d210      	bcs.n	8008044 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008022:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f023 020f 	bic.w	r2, r3, #15
 800802a:	4922      	ldr	r1, [pc, #136]	; (80080b4 <HAL_RCC_ClockConfig+0x1c4>)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	4313      	orrs	r3, r2
 8008030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008032:	4b20      	ldr	r3, [pc, #128]	; (80080b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 030f 	and.w	r3, r3, #15
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d001      	beq.n	8008044 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e032      	b.n	80080aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d008      	beq.n	8008062 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008050:	4b19      	ldr	r3, [pc, #100]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	4916      	ldr	r1, [pc, #88]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 800805e:	4313      	orrs	r3, r2
 8008060:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0308 	and.w	r3, r3, #8
 800806a:	2b00      	cmp	r3, #0
 800806c:	d009      	beq.n	8008082 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	00db      	lsls	r3, r3, #3
 800807c:	490e      	ldr	r1, [pc, #56]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 800807e:	4313      	orrs	r3, r2
 8008080:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008082:	f000 f821 	bl	80080c8 <HAL_RCC_GetSysClockFreq>
 8008086:	4602      	mov	r2, r0
 8008088:	4b0b      	ldr	r3, [pc, #44]	; (80080b8 <HAL_RCC_ClockConfig+0x1c8>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	091b      	lsrs	r3, r3, #4
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	490a      	ldr	r1, [pc, #40]	; (80080bc <HAL_RCC_ClockConfig+0x1cc>)
 8008094:	5ccb      	ldrb	r3, [r1, r3]
 8008096:	fa22 f303 	lsr.w	r3, r2, r3
 800809a:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <HAL_RCC_ClockConfig+0x1d0>)
 800809c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800809e:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <HAL_RCC_ClockConfig+0x1d4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fb ff1a 	bl	8003edc <HAL_InitTick>

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	40023c00 	.word	0x40023c00
 80080b8:	40023800 	.word	0x40023800
 80080bc:	08028490 	.word	0x08028490
 80080c0:	20000008 	.word	0x20000008
 80080c4:	2000000c 	.word	0x2000000c

080080c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080cc:	b094      	sub	sp, #80	; 0x50
 80080ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	647b      	str	r3, [r7, #68]	; 0x44
 80080d4:	2300      	movs	r3, #0
 80080d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d8:	2300      	movs	r3, #0
 80080da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80080dc:	2300      	movs	r3, #0
 80080de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080e0:	4b79      	ldr	r3, [pc, #484]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f003 030c 	and.w	r3, r3, #12
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d00d      	beq.n	8008108 <HAL_RCC_GetSysClockFreq+0x40>
 80080ec:	2b08      	cmp	r3, #8
 80080ee:	f200 80e1 	bhi.w	80082b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <HAL_RCC_GetSysClockFreq+0x34>
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d003      	beq.n	8008102 <HAL_RCC_GetSysClockFreq+0x3a>
 80080fa:	e0db      	b.n	80082b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080fc:	4b73      	ldr	r3, [pc, #460]	; (80082cc <HAL_RCC_GetSysClockFreq+0x204>)
 80080fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008100:	e0db      	b.n	80082ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008102:	4b73      	ldr	r3, [pc, #460]	; (80082d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008104:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008106:	e0d8      	b.n	80082ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008108:	4b6f      	ldr	r3, [pc, #444]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008110:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008112:	4b6d      	ldr	r3, [pc, #436]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d063      	beq.n	80081e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800811e:	4b6a      	ldr	r3, [pc, #424]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	099b      	lsrs	r3, r3, #6
 8008124:	2200      	movs	r2, #0
 8008126:	63bb      	str	r3, [r7, #56]	; 0x38
 8008128:	63fa      	str	r2, [r7, #60]	; 0x3c
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008130:	633b      	str	r3, [r7, #48]	; 0x30
 8008132:	2300      	movs	r3, #0
 8008134:	637b      	str	r3, [r7, #52]	; 0x34
 8008136:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800813a:	4622      	mov	r2, r4
 800813c:	462b      	mov	r3, r5
 800813e:	f04f 0000 	mov.w	r0, #0
 8008142:	f04f 0100 	mov.w	r1, #0
 8008146:	0159      	lsls	r1, r3, #5
 8008148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800814c:	0150      	lsls	r0, r2, #5
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4621      	mov	r1, r4
 8008154:	1a51      	subs	r1, r2, r1
 8008156:	6139      	str	r1, [r7, #16]
 8008158:	4629      	mov	r1, r5
 800815a:	eb63 0301 	sbc.w	r3, r3, r1
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	f04f 0200 	mov.w	r2, #0
 8008164:	f04f 0300 	mov.w	r3, #0
 8008168:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800816c:	4659      	mov	r1, fp
 800816e:	018b      	lsls	r3, r1, #6
 8008170:	4651      	mov	r1, sl
 8008172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008176:	4651      	mov	r1, sl
 8008178:	018a      	lsls	r2, r1, #6
 800817a:	4651      	mov	r1, sl
 800817c:	ebb2 0801 	subs.w	r8, r2, r1
 8008180:	4659      	mov	r1, fp
 8008182:	eb63 0901 	sbc.w	r9, r3, r1
 8008186:	f04f 0200 	mov.w	r2, #0
 800818a:	f04f 0300 	mov.w	r3, #0
 800818e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008192:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008196:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800819a:	4690      	mov	r8, r2
 800819c:	4699      	mov	r9, r3
 800819e:	4623      	mov	r3, r4
 80081a0:	eb18 0303 	adds.w	r3, r8, r3
 80081a4:	60bb      	str	r3, [r7, #8]
 80081a6:	462b      	mov	r3, r5
 80081a8:	eb49 0303 	adc.w	r3, r9, r3
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	f04f 0200 	mov.w	r2, #0
 80081b2:	f04f 0300 	mov.w	r3, #0
 80081b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80081ba:	4629      	mov	r1, r5
 80081bc:	024b      	lsls	r3, r1, #9
 80081be:	4621      	mov	r1, r4
 80081c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80081c4:	4621      	mov	r1, r4
 80081c6:	024a      	lsls	r2, r1, #9
 80081c8:	4610      	mov	r0, r2
 80081ca:	4619      	mov	r1, r3
 80081cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ce:	2200      	movs	r2, #0
 80081d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081d8:	f7f8 fca0 	bl	8000b1c <__aeabi_uldivmod>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4613      	mov	r3, r2
 80081e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081e4:	e058      	b.n	8008298 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081e6:	4b38      	ldr	r3, [pc, #224]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	099b      	lsrs	r3, r3, #6
 80081ec:	2200      	movs	r2, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	4611      	mov	r1, r2
 80081f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081f6:	623b      	str	r3, [r7, #32]
 80081f8:	2300      	movs	r3, #0
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
 80081fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	f04f 0000 	mov.w	r0, #0
 8008208:	f04f 0100 	mov.w	r1, #0
 800820c:	0159      	lsls	r1, r3, #5
 800820e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008212:	0150      	lsls	r0, r2, #5
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4641      	mov	r1, r8
 800821a:	ebb2 0a01 	subs.w	sl, r2, r1
 800821e:	4649      	mov	r1, r9
 8008220:	eb63 0b01 	sbc.w	fp, r3, r1
 8008224:	f04f 0200 	mov.w	r2, #0
 8008228:	f04f 0300 	mov.w	r3, #0
 800822c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008230:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008234:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008238:	ebb2 040a 	subs.w	r4, r2, sl
 800823c:	eb63 050b 	sbc.w	r5, r3, fp
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	00eb      	lsls	r3, r5, #3
 800824a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800824e:	00e2      	lsls	r2, r4, #3
 8008250:	4614      	mov	r4, r2
 8008252:	461d      	mov	r5, r3
 8008254:	4643      	mov	r3, r8
 8008256:	18e3      	adds	r3, r4, r3
 8008258:	603b      	str	r3, [r7, #0]
 800825a:	464b      	mov	r3, r9
 800825c:	eb45 0303 	adc.w	r3, r5, r3
 8008260:	607b      	str	r3, [r7, #4]
 8008262:	f04f 0200 	mov.w	r2, #0
 8008266:	f04f 0300 	mov.w	r3, #0
 800826a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800826e:	4629      	mov	r1, r5
 8008270:	028b      	lsls	r3, r1, #10
 8008272:	4621      	mov	r1, r4
 8008274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008278:	4621      	mov	r1, r4
 800827a:	028a      	lsls	r2, r1, #10
 800827c:	4610      	mov	r0, r2
 800827e:	4619      	mov	r1, r3
 8008280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008282:	2200      	movs	r2, #0
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	61fa      	str	r2, [r7, #28]
 8008288:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800828c:	f7f8 fc46 	bl	8000b1c <__aeabi_uldivmod>
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	4613      	mov	r3, r2
 8008296:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008298:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	0c1b      	lsrs	r3, r3, #16
 800829e:	f003 0303 	and.w	r3, r3, #3
 80082a2:	3301      	adds	r3, #1
 80082a4:	005b      	lsls	r3, r3, #1
 80082a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80082a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082b2:	e002      	b.n	80082ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082b4:	4b05      	ldr	r3, [pc, #20]	; (80082cc <HAL_RCC_GetSysClockFreq+0x204>)
 80082b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3750      	adds	r7, #80	; 0x50
 80082c0:	46bd      	mov	sp, r7
 80082c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082c6:	bf00      	nop
 80082c8:	40023800 	.word	0x40023800
 80082cc:	00f42400 	.word	0x00f42400
 80082d0:	007a1200 	.word	0x007a1200

080082d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082d8:	4b03      	ldr	r3, [pc, #12]	; (80082e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80082da:	681b      	ldr	r3, [r3, #0]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	20000008 	.word	0x20000008

080082ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082f0:	f7ff fff0 	bl	80082d4 <HAL_RCC_GetHCLKFreq>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4b05      	ldr	r3, [pc, #20]	; (800830c <HAL_RCC_GetPCLK1Freq+0x20>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	0a9b      	lsrs	r3, r3, #10
 80082fc:	f003 0307 	and.w	r3, r3, #7
 8008300:	4903      	ldr	r1, [pc, #12]	; (8008310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008302:	5ccb      	ldrb	r3, [r1, r3]
 8008304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008308:	4618      	mov	r0, r3
 800830a:	bd80      	pop	{r7, pc}
 800830c:	40023800 	.word	0x40023800
 8008310:	080284a0 	.word	0x080284a0

08008314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008318:	f7ff ffdc 	bl	80082d4 <HAL_RCC_GetHCLKFreq>
 800831c:	4602      	mov	r2, r0
 800831e:	4b05      	ldr	r3, [pc, #20]	; (8008334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	0b5b      	lsrs	r3, r3, #13
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	4903      	ldr	r1, [pc, #12]	; (8008338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800832a:	5ccb      	ldrb	r3, [r1, r3]
 800832c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008330:	4618      	mov	r0, r3
 8008332:	bd80      	pop	{r7, pc}
 8008334:	40023800 	.word	0x40023800
 8008338:	080284a0 	.word	0x080284a0

0800833c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	220f      	movs	r2, #15
 800834a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800834c:	4b12      	ldr	r3, [pc, #72]	; (8008398 <HAL_RCC_GetClockConfig+0x5c>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f003 0203 	and.w	r2, r3, #3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008358:	4b0f      	ldr	r3, [pc, #60]	; (8008398 <HAL_RCC_GetClockConfig+0x5c>)
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008364:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <HAL_RCC_GetClockConfig+0x5c>)
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008370:	4b09      	ldr	r3, [pc, #36]	; (8008398 <HAL_RCC_GetClockConfig+0x5c>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	08db      	lsrs	r3, r3, #3
 8008376:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800837e:	4b07      	ldr	r3, [pc, #28]	; (800839c <HAL_RCC_GetClockConfig+0x60>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f003 020f 	and.w	r2, r3, #15
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	601a      	str	r2, [r3, #0]
}
 800838a:	bf00      	nop
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	40023800 	.word	0x40023800
 800839c:	40023c00 	.word	0x40023c00

080083a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80083b8:	2300      	movs	r3, #0
 80083ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d012      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083c8:	4b69      	ldr	r3, [pc, #420]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	4a68      	ldr	r2, [pc, #416]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80083d2:	6093      	str	r3, [r2, #8]
 80083d4:	4b66      	ldr	r3, [pc, #408]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d6:	689a      	ldr	r2, [r3, #8]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083dc:	4964      	ldr	r1, [pc, #400]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083de:	4313      	orrs	r3, r2
 80083e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80083ea:	2301      	movs	r3, #1
 80083ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d017      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083fa:	4b5d      	ldr	r3, [pc, #372]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008408:	4959      	ldr	r1, [pc, #356]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008418:	d101      	bne.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800841a:	2301      	movs	r3, #1
 800841c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008426:	2301      	movs	r3, #1
 8008428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d017      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008436:	4b4e      	ldr	r3, [pc, #312]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800843c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	494a      	ldr	r1, [pc, #296]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008446:	4313      	orrs	r3, r2
 8008448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008454:	d101      	bne.n	800845a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008456:	2301      	movs	r3, #1
 8008458:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d101      	bne.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008462:	2301      	movs	r3, #1
 8008464:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008472:	2301      	movs	r3, #1
 8008474:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	f000 808b 	beq.w	800859a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008484:	4b3a      	ldr	r3, [pc, #232]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	4a39      	ldr	r2, [pc, #228]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800848e:	6413      	str	r3, [r2, #64]	; 0x40
 8008490:	4b37      	ldr	r3, [pc, #220]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008498:	60bb      	str	r3, [r7, #8]
 800849a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800849c:	4b35      	ldr	r3, [pc, #212]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a34      	ldr	r2, [pc, #208]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a8:	f7fc f9f6 	bl	8004898 <HAL_GetTick>
 80084ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084ae:	e008      	b.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084b0:	f7fc f9f2 	bl	8004898 <HAL_GetTick>
 80084b4:	4602      	mov	r2, r0
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	2b64      	cmp	r3, #100	; 0x64
 80084bc:	d901      	bls.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80084be:	2303      	movs	r3, #3
 80084c0:	e357      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084c2:	4b2c      	ldr	r3, [pc, #176]	; (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d0f0      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084ce:	4b28      	ldr	r3, [pc, #160]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d035      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d02e      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084ec:	4b20      	ldr	r3, [pc, #128]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084f6:	4b1e      	ldr	r3, [pc, #120]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fa:	4a1d      	ldr	r2, [pc, #116]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008500:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008502:	4b1b      	ldr	r3, [pc, #108]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008506:	4a1a      	ldr	r2, [pc, #104]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800850c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800850e:	4a18      	ldr	r2, [pc, #96]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008514:	4b16      	ldr	r3, [pc, #88]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b01      	cmp	r3, #1
 800851e:	d114      	bne.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008520:	f7fc f9ba 	bl	8004898 <HAL_GetTick>
 8008524:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008526:	e00a      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008528:	f7fc f9b6 	bl	8004898 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	f241 3288 	movw	r2, #5000	; 0x1388
 8008536:	4293      	cmp	r3, r2
 8008538:	d901      	bls.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e319      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800853e:	4b0c      	ldr	r3, [pc, #48]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0ee      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008556:	d111      	bne.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008558:	4b05      	ldr	r3, [pc, #20]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008564:	4b04      	ldr	r3, [pc, #16]	; (8008578 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008566:	400b      	ands	r3, r1
 8008568:	4901      	ldr	r1, [pc, #4]	; (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800856a:	4313      	orrs	r3, r2
 800856c:	608b      	str	r3, [r1, #8]
 800856e:	e00b      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008570:	40023800 	.word	0x40023800
 8008574:	40007000 	.word	0x40007000
 8008578:	0ffffcff 	.word	0x0ffffcff
 800857c:	4baa      	ldr	r3, [pc, #680]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	4aa9      	ldr	r2, [pc, #676]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008582:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008586:	6093      	str	r3, [r2, #8]
 8008588:	4ba7      	ldr	r3, [pc, #668]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800858a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008594:	49a4      	ldr	r1, [pc, #656]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008596:	4313      	orrs	r3, r2
 8008598:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0310 	and.w	r3, r3, #16
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d010      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085a6:	4ba0      	ldr	r3, [pc, #640]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ac:	4a9e      	ldr	r2, [pc, #632]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80085b6:	4b9c      	ldr	r3, [pc, #624]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c0:	4999      	ldr	r1, [pc, #612]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085d4:	4b94      	ldr	r3, [pc, #592]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085e2:	4991      	ldr	r1, [pc, #580]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085f6:	4b8c      	ldr	r3, [pc, #560]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008604:	4988      	ldr	r1, [pc, #544]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008606:	4313      	orrs	r3, r2
 8008608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008618:	4b83      	ldr	r3, [pc, #524]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008626:	4980      	ldr	r1, [pc, #512]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008628:	4313      	orrs	r3, r2
 800862a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800863a:	4b7b      	ldr	r3, [pc, #492]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008640:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008648:	4977      	ldr	r1, [pc, #476]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800864a:	4313      	orrs	r3, r2
 800864c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800865c:	4b72      	ldr	r3, [pc, #456]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008662:	f023 0203 	bic.w	r2, r3, #3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866a:	496f      	ldr	r1, [pc, #444]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866c:	4313      	orrs	r3, r2
 800866e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800867e:	4b6a      	ldr	r3, [pc, #424]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008684:	f023 020c 	bic.w	r2, r3, #12
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800868c:	4966      	ldr	r1, [pc, #408]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868e:	4313      	orrs	r3, r2
 8008690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086a0:	4b61      	ldr	r3, [pc, #388]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ae:	495e      	ldr	r1, [pc, #376]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086c2:	4b59      	ldr	r3, [pc, #356]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086d0:	4955      	ldr	r1, [pc, #340]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086e4:	4b50      	ldr	r3, [pc, #320]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f2:	494d      	ldr	r1, [pc, #308]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008702:	2b00      	cmp	r3, #0
 8008704:	d00a      	beq.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008706:	4b48      	ldr	r3, [pc, #288]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800870c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008714:	4944      	ldr	r1, [pc, #272]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008716:	4313      	orrs	r3, r2
 8008718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00a      	beq.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008728:	4b3f      	ldr	r3, [pc, #252]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800872e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008736:	493c      	ldr	r1, [pc, #240]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008738:	4313      	orrs	r3, r2
 800873a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00a      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800874a:	4b37      	ldr	r3, [pc, #220]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800874c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008750:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008758:	4933      	ldr	r1, [pc, #204]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800875a:	4313      	orrs	r3, r2
 800875c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00a      	beq.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800876c:	4b2e      	ldr	r3, [pc, #184]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800876e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008772:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800877a:	492b      	ldr	r1, [pc, #172]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800877c:	4313      	orrs	r3, r2
 800877e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d011      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800878e:	4b26      	ldr	r3, [pc, #152]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008794:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800879c:	4922      	ldr	r1, [pc, #136]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800879e:	4313      	orrs	r3, r2
 80087a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ac:	d101      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80087ae:	2301      	movs	r3, #1
 80087b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0308 	and.w	r3, r3, #8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80087be:	2301      	movs	r3, #1
 80087c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ce:	4b16      	ldr	r3, [pc, #88]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087dc:	4912      	ldr	r1, [pc, #72]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087f0:	4b0d      	ldr	r3, [pc, #52]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008800:	4909      	ldr	r1, [pc, #36]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008802:	4313      	orrs	r3, r2
 8008804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008808:	69fb      	ldr	r3, [r7, #28]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d006      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 80d9 	beq.w	80089ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800881c:	4b02      	ldr	r3, [pc, #8]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a01      	ldr	r2, [pc, #4]	; (8008828 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008822:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008826:	e001      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008828:	40023800 	.word	0x40023800
 800882c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882e:	f7fc f833 	bl	8004898 <HAL_GetTick>
 8008832:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008834:	e008      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008836:	f7fc f82f 	bl	8004898 <HAL_GetTick>
 800883a:	4602      	mov	r2, r0
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	1ad3      	subs	r3, r2, r3
 8008840:	2b64      	cmp	r3, #100	; 0x64
 8008842:	d901      	bls.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e194      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008848:	4b6c      	ldr	r3, [pc, #432]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f0      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d021      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008864:	2b00      	cmp	r3, #0
 8008866:	d11d      	bne.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008868:	4b64      	ldr	r3, [pc, #400]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800886a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	f003 0303 	and.w	r3, r3, #3
 8008874:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008876:	4b61      	ldr	r3, [pc, #388]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800887c:	0e1b      	lsrs	r3, r3, #24
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	019a      	lsls	r2, r3, #6
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	041b      	lsls	r3, r3, #16
 800888e:	431a      	orrs	r2, r3
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	061b      	lsls	r3, r3, #24
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	071b      	lsls	r3, r3, #28
 800889c:	4957      	ldr	r1, [pc, #348]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d004      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088b8:	d00a      	beq.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d02e      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088ce:	d129      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088d0:	4b4a      	ldr	r3, [pc, #296]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088d6:	0c1b      	lsrs	r3, r3, #16
 80088d8:	f003 0303 	and.w	r3, r3, #3
 80088dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088de:	4b47      	ldr	r3, [pc, #284]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088e4:	0f1b      	lsrs	r3, r3, #28
 80088e6:	f003 0307 	and.w	r3, r3, #7
 80088ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	019a      	lsls	r2, r3, #6
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	041b      	lsls	r3, r3, #16
 80088f6:	431a      	orrs	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	061b      	lsls	r3, r3, #24
 80088fe:	431a      	orrs	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	071b      	lsls	r3, r3, #28
 8008904:	493d      	ldr	r1, [pc, #244]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008906:	4313      	orrs	r3, r2
 8008908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800890c:	4b3b      	ldr	r3, [pc, #236]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800890e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008912:	f023 021f 	bic.w	r2, r3, #31
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800891a:	3b01      	subs	r3, #1
 800891c:	4937      	ldr	r1, [pc, #220]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01d      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008930:	4b32      	ldr	r3, [pc, #200]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008936:	0e1b      	lsrs	r3, r3, #24
 8008938:	f003 030f 	and.w	r3, r3, #15
 800893c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800893e:	4b2f      	ldr	r3, [pc, #188]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008944:	0f1b      	lsrs	r3, r3, #28
 8008946:	f003 0307 	and.w	r3, r3, #7
 800894a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	019a      	lsls	r2, r3, #6
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	691b      	ldr	r3, [r3, #16]
 8008956:	041b      	lsls	r3, r3, #16
 8008958:	431a      	orrs	r2, r3
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	061b      	lsls	r3, r3, #24
 800895e:	431a      	orrs	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	071b      	lsls	r3, r3, #28
 8008964:	4925      	ldr	r1, [pc, #148]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008966:	4313      	orrs	r3, r2
 8008968:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d011      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	019a      	lsls	r2, r3, #6
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	061b      	lsls	r3, r3, #24
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	071b      	lsls	r3, r3, #28
 8008994:	4919      	ldr	r1, [pc, #100]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008996:	4313      	orrs	r3, r2
 8008998:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800899c:	4b17      	ldr	r3, [pc, #92]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a16      	ldr	r2, [pc, #88]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a8:	f7fb ff76 	bl	8004898 <HAL_GetTick>
 80089ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089ae:	e008      	b.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089b0:	f7fb ff72 	bl	8004898 <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	2b64      	cmp	r3, #100	; 0x64
 80089bc:	d901      	bls.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e0d7      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089c2:	4b0e      	ldr	r3, [pc, #56]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0f0      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	f040 80cd 	bne.w	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089d6:	4b09      	ldr	r3, [pc, #36]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a08      	ldr	r2, [pc, #32]	; (80089fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089e2:	f7fb ff59 	bl	8004898 <HAL_GetTick>
 80089e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089e8:	e00a      	b.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089ea:	f7fb ff55 	bl	8004898 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	2b64      	cmp	r3, #100	; 0x64
 80089f6:	d903      	bls.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e0ba      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80089fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a00:	4b5e      	ldr	r3, [pc, #376]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a0c:	d0ed      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d02e      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d12a      	bne.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a36:	4b51      	ldr	r3, [pc, #324]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a3c:	0c1b      	lsrs	r3, r3, #16
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a44:	4b4d      	ldr	r3, [pc, #308]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a4a:	0f1b      	lsrs	r3, r3, #28
 8008a4c:	f003 0307 	and.w	r3, r3, #7
 8008a50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	019a      	lsls	r2, r3, #6
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	041b      	lsls	r3, r3, #16
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	061b      	lsls	r3, r3, #24
 8008a64:	431a      	orrs	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	071b      	lsls	r3, r3, #28
 8008a6a:	4944      	ldr	r1, [pc, #272]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a72:	4b42      	ldr	r3, [pc, #264]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a80:	3b01      	subs	r3, #1
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	493d      	ldr	r1, [pc, #244]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d022      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aa0:	d11d      	bne.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008aa2:	4b36      	ldr	r3, [pc, #216]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa8:	0e1b      	lsrs	r3, r3, #24
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ab0:	4b32      	ldr	r3, [pc, #200]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ab6:	0f1b      	lsrs	r3, r3, #28
 8008ab8:	f003 0307 	and.w	r3, r3, #7
 8008abc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	019a      	lsls	r2, r3, #6
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6a1b      	ldr	r3, [r3, #32]
 8008ac8:	041b      	lsls	r3, r3, #16
 8008aca:	431a      	orrs	r2, r3
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	061b      	lsls	r3, r3, #24
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	071b      	lsls	r3, r3, #28
 8008ad6:	4929      	ldr	r1, [pc, #164]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 0308 	and.w	r3, r3, #8
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d028      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008aea:	4b24      	ldr	r3, [pc, #144]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af0:	0e1b      	lsrs	r3, r3, #24
 8008af2:	f003 030f 	and.w	r3, r3, #15
 8008af6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008af8:	4b20      	ldr	r3, [pc, #128]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afe:	0c1b      	lsrs	r3, r3, #16
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	019a      	lsls	r2, r3, #6
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	041b      	lsls	r3, r3, #16
 8008b10:	431a      	orrs	r2, r3
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	061b      	lsls	r3, r3, #24
 8008b16:	431a      	orrs	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	071b      	lsls	r3, r3, #28
 8008b1e:	4917      	ldr	r1, [pc, #92]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b26:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	4911      	ldr	r1, [pc, #68]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b36:	4313      	orrs	r3, r2
 8008b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b3c:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a0e      	ldr	r2, [pc, #56]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b48:	f7fb fea6 	bl	8004898 <HAL_GetTick>
 8008b4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b50:	f7fb fea2 	bl	8004898 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b64      	cmp	r3, #100	; 0x64
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e007      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b62:	4b06      	ldr	r3, [pc, #24]	; (8008b7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b6e:	d1ef      	bne.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3720      	adds	r7, #32
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	40023800 	.word	0x40023800

08008b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e049      	b.n	8008c26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d106      	bne.n	8008bac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7fa ff9e 	bl	8003ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2202      	movs	r2, #2
 8008bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f000 ff1c 	bl	80099fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
	...

08008c30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d001      	beq.n	8008c48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e04c      	b.n	8008ce2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2202      	movs	r2, #2
 8008c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a26      	ldr	r2, [pc, #152]	; (8008cf0 <HAL_TIM_Base_Start+0xc0>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d022      	beq.n	8008ca0 <HAL_TIM_Base_Start+0x70>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c62:	d01d      	beq.n	8008ca0 <HAL_TIM_Base_Start+0x70>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a22      	ldr	r2, [pc, #136]	; (8008cf4 <HAL_TIM_Base_Start+0xc4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d018      	beq.n	8008ca0 <HAL_TIM_Base_Start+0x70>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a21      	ldr	r2, [pc, #132]	; (8008cf8 <HAL_TIM_Base_Start+0xc8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d013      	beq.n	8008ca0 <HAL_TIM_Base_Start+0x70>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a1f      	ldr	r2, [pc, #124]	; (8008cfc <HAL_TIM_Base_Start+0xcc>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d00e      	beq.n	8008ca0 <HAL_TIM_Base_Start+0x70>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a1e      	ldr	r2, [pc, #120]	; (8008d00 <HAL_TIM_Base_Start+0xd0>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d009      	beq.n	8008ca0 <HAL_TIM_Base_Start+0x70>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a1c      	ldr	r2, [pc, #112]	; (8008d04 <HAL_TIM_Base_Start+0xd4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d004      	beq.n	8008ca0 <HAL_TIM_Base_Start+0x70>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a1b      	ldr	r2, [pc, #108]	; (8008d08 <HAL_TIM_Base_Start+0xd8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d115      	bne.n	8008ccc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689a      	ldr	r2, [r3, #8]
 8008ca6:	4b19      	ldr	r3, [pc, #100]	; (8008d0c <HAL_TIM_Base_Start+0xdc>)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2b06      	cmp	r3, #6
 8008cb0:	d015      	beq.n	8008cde <HAL_TIM_Base_Start+0xae>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb8:	d011      	beq.n	8008cde <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f042 0201 	orr.w	r2, r2, #1
 8008cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cca:	e008      	b.n	8008cde <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f042 0201 	orr.w	r2, r2, #1
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	e000      	b.n	8008ce0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	40010000 	.word	0x40010000
 8008cf4:	40000400 	.word	0x40000400
 8008cf8:	40000800 	.word	0x40000800
 8008cfc:	40000c00 	.word	0x40000c00
 8008d00:	40010400 	.word	0x40010400
 8008d04:	40014000 	.word	0x40014000
 8008d08:	40001800 	.word	0x40001800
 8008d0c:	00010007 	.word	0x00010007

08008d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d001      	beq.n	8008d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e054      	b.n	8008dd2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	68da      	ldr	r2, [r3, #12]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f042 0201 	orr.w	r2, r2, #1
 8008d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a26      	ldr	r2, [pc, #152]	; (8008de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d022      	beq.n	8008d90 <HAL_TIM_Base_Start_IT+0x80>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d52:	d01d      	beq.n	8008d90 <HAL_TIM_Base_Start_IT+0x80>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a22      	ldr	r2, [pc, #136]	; (8008de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d018      	beq.n	8008d90 <HAL_TIM_Base_Start_IT+0x80>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a21      	ldr	r2, [pc, #132]	; (8008de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d013      	beq.n	8008d90 <HAL_TIM_Base_Start_IT+0x80>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a1f      	ldr	r2, [pc, #124]	; (8008dec <HAL_TIM_Base_Start_IT+0xdc>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d00e      	beq.n	8008d90 <HAL_TIM_Base_Start_IT+0x80>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a1e      	ldr	r2, [pc, #120]	; (8008df0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d009      	beq.n	8008d90 <HAL_TIM_Base_Start_IT+0x80>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a1c      	ldr	r2, [pc, #112]	; (8008df4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d004      	beq.n	8008d90 <HAL_TIM_Base_Start_IT+0x80>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a1b      	ldr	r2, [pc, #108]	; (8008df8 <HAL_TIM_Base_Start_IT+0xe8>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d115      	bne.n	8008dbc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	689a      	ldr	r2, [r3, #8]
 8008d96:	4b19      	ldr	r3, [pc, #100]	; (8008dfc <HAL_TIM_Base_Start_IT+0xec>)
 8008d98:	4013      	ands	r3, r2
 8008d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2b06      	cmp	r3, #6
 8008da0:	d015      	beq.n	8008dce <HAL_TIM_Base_Start_IT+0xbe>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da8:	d011      	beq.n	8008dce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0201 	orr.w	r2, r2, #1
 8008db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dba:	e008      	b.n	8008dce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f042 0201 	orr.w	r2, r2, #1
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	e000      	b.n	8008dd0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	40010000 	.word	0x40010000
 8008de4:	40000400 	.word	0x40000400
 8008de8:	40000800 	.word	0x40000800
 8008dec:	40000c00 	.word	0x40000c00
 8008df0:	40010400 	.word	0x40010400
 8008df4:	40014000 	.word	0x40014000
 8008df8:	40001800 	.word	0x40001800
 8008dfc:	00010007 	.word	0x00010007

08008e00 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e049      	b.n	8008ea6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d106      	bne.n	8008e2c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fa fe3e 	bl	8003aa8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f000 fddc 	bl	80099fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b082      	sub	sp, #8
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e049      	b.n	8008f54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 f841 	bl	8008f5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2202      	movs	r2, #2
 8008ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	3304      	adds	r3, #4
 8008eea:	4619      	mov	r1, r3
 8008eec:	4610      	mov	r0, r2
 8008eee:	f000 fd85 	bl	80099fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <HAL_TIM_PWM_Start+0x24>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	bf14      	ite	ne
 8008f8c:	2301      	movne	r3, #1
 8008f8e:	2300      	moveq	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	e03c      	b.n	800900e <HAL_TIM_PWM_Start+0x9e>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d109      	bne.n	8008fae <HAL_TIM_PWM_Start+0x3e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	bf14      	ite	ne
 8008fa6:	2301      	movne	r3, #1
 8008fa8:	2300      	moveq	r3, #0
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	e02f      	b.n	800900e <HAL_TIM_PWM_Start+0x9e>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d109      	bne.n	8008fc8 <HAL_TIM_PWM_Start+0x58>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	bf14      	ite	ne
 8008fc0:	2301      	movne	r3, #1
 8008fc2:	2300      	moveq	r3, #0
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	e022      	b.n	800900e <HAL_TIM_PWM_Start+0x9e>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b0c      	cmp	r3, #12
 8008fcc:	d109      	bne.n	8008fe2 <HAL_TIM_PWM_Start+0x72>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	bf14      	ite	ne
 8008fda:	2301      	movne	r3, #1
 8008fdc:	2300      	moveq	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	e015      	b.n	800900e <HAL_TIM_PWM_Start+0x9e>
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b10      	cmp	r3, #16
 8008fe6:	d109      	bne.n	8008ffc <HAL_TIM_PWM_Start+0x8c>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	bf14      	ite	ne
 8008ff4:	2301      	movne	r3, #1
 8008ff6:	2300      	moveq	r3, #0
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	e008      	b.n	800900e <HAL_TIM_PWM_Start+0x9e>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b01      	cmp	r3, #1
 8009006:	bf14      	ite	ne
 8009008:	2301      	movne	r3, #1
 800900a:	2300      	moveq	r3, #0
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	d001      	beq.n	8009016 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e092      	b.n	800913c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d104      	bne.n	8009026 <HAL_TIM_PWM_Start+0xb6>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009024:	e023      	b.n	800906e <HAL_TIM_PWM_Start+0xfe>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b04      	cmp	r3, #4
 800902a:	d104      	bne.n	8009036 <HAL_TIM_PWM_Start+0xc6>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009034:	e01b      	b.n	800906e <HAL_TIM_PWM_Start+0xfe>
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	2b08      	cmp	r3, #8
 800903a:	d104      	bne.n	8009046 <HAL_TIM_PWM_Start+0xd6>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2202      	movs	r2, #2
 8009040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009044:	e013      	b.n	800906e <HAL_TIM_PWM_Start+0xfe>
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	2b0c      	cmp	r3, #12
 800904a:	d104      	bne.n	8009056 <HAL_TIM_PWM_Start+0xe6>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2202      	movs	r2, #2
 8009050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009054:	e00b      	b.n	800906e <HAL_TIM_PWM_Start+0xfe>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b10      	cmp	r3, #16
 800905a:	d104      	bne.n	8009066 <HAL_TIM_PWM_Start+0xf6>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009064:	e003      	b.n	800906e <HAL_TIM_PWM_Start+0xfe>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2202      	movs	r2, #2
 800906a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2201      	movs	r2, #1
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	4618      	mov	r0, r3
 8009078:	f001 f8d1 	bl	800a21e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a30      	ldr	r2, [pc, #192]	; (8009144 <HAL_TIM_PWM_Start+0x1d4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d004      	beq.n	8009090 <HAL_TIM_PWM_Start+0x120>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a2f      	ldr	r2, [pc, #188]	; (8009148 <HAL_TIM_PWM_Start+0x1d8>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d101      	bne.n	8009094 <HAL_TIM_PWM_Start+0x124>
 8009090:	2301      	movs	r3, #1
 8009092:	e000      	b.n	8009096 <HAL_TIM_PWM_Start+0x126>
 8009094:	2300      	movs	r3, #0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d007      	beq.n	80090aa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a25      	ldr	r2, [pc, #148]	; (8009144 <HAL_TIM_PWM_Start+0x1d4>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d022      	beq.n	80090fa <HAL_TIM_PWM_Start+0x18a>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090bc:	d01d      	beq.n	80090fa <HAL_TIM_PWM_Start+0x18a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a22      	ldr	r2, [pc, #136]	; (800914c <HAL_TIM_PWM_Start+0x1dc>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d018      	beq.n	80090fa <HAL_TIM_PWM_Start+0x18a>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a20      	ldr	r2, [pc, #128]	; (8009150 <HAL_TIM_PWM_Start+0x1e0>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d013      	beq.n	80090fa <HAL_TIM_PWM_Start+0x18a>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a1f      	ldr	r2, [pc, #124]	; (8009154 <HAL_TIM_PWM_Start+0x1e4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d00e      	beq.n	80090fa <HAL_TIM_PWM_Start+0x18a>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a19      	ldr	r2, [pc, #100]	; (8009148 <HAL_TIM_PWM_Start+0x1d8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d009      	beq.n	80090fa <HAL_TIM_PWM_Start+0x18a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a1b      	ldr	r2, [pc, #108]	; (8009158 <HAL_TIM_PWM_Start+0x1e8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d004      	beq.n	80090fa <HAL_TIM_PWM_Start+0x18a>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a19      	ldr	r2, [pc, #100]	; (800915c <HAL_TIM_PWM_Start+0x1ec>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d115      	bne.n	8009126 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	4b17      	ldr	r3, [pc, #92]	; (8009160 <HAL_TIM_PWM_Start+0x1f0>)
 8009102:	4013      	ands	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b06      	cmp	r3, #6
 800910a:	d015      	beq.n	8009138 <HAL_TIM_PWM_Start+0x1c8>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009112:	d011      	beq.n	8009138 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009124:	e008      	b.n	8009138 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 0201 	orr.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	e000      	b.n	800913a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009138:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	40010000 	.word	0x40010000
 8009148:	40010400 	.word	0x40010400
 800914c:	40000400 	.word	0x40000400
 8009150:	40000800 	.word	0x40000800
 8009154:	40000c00 	.word	0x40000c00
 8009158:	40014000 	.word	0x40014000
 800915c:	40001800 	.word	0x40001800
 8009160:	00010007 	.word	0x00010007

08009164 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e08f      	b.n	8009298 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b00      	cmp	r3, #0
 8009182:	d106      	bne.n	8009192 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7fa fcdf 	bl	8003b50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2202      	movs	r2, #2
 8009196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6899      	ldr	r1, [r3, #8]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	4b3e      	ldr	r3, [pc, #248]	; (80092a0 <HAL_TIM_Encoder_Init+0x13c>)
 80091a6:	400b      	ands	r3, r1
 80091a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	3304      	adds	r3, #4
 80091b2:	4619      	mov	r1, r3
 80091b4:	4610      	mov	r0, r2
 80091b6:	f000 fc21 	bl	80099fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6a1b      	ldr	r3, [r3, #32]
 80091d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	697a      	ldr	r2, [r7, #20]
 80091d8:	4313      	orrs	r3, r2
 80091da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	4b31      	ldr	r3, [pc, #196]	; (80092a4 <HAL_TIM_Encoder_Init+0x140>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	689a      	ldr	r2, [r3, #8]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	021b      	lsls	r3, r3, #8
 80091ee:	4313      	orrs	r3, r2
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <HAL_TIM_Encoder_Init+0x144>)
 80091fa:	4013      	ands	r3, r2
 80091fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	4b2a      	ldr	r3, [pc, #168]	; (80092ac <HAL_TIM_Encoder_Init+0x148>)
 8009202:	4013      	ands	r3, r2
 8009204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	68da      	ldr	r2, [r3, #12]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	4313      	orrs	r3, r2
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	4313      	orrs	r3, r2
 8009216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	011a      	lsls	r2, r3, #4
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	031b      	lsls	r3, r3, #12
 8009224:	4313      	orrs	r3, r2
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	4313      	orrs	r3, r2
 800922a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009232:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800923a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	695b      	ldr	r3, [r3, #20]
 8009244:	011b      	lsls	r3, r3, #4
 8009246:	4313      	orrs	r3, r2
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	4313      	orrs	r3, r2
 800924c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2201      	movs	r2, #1
 8009272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3718      	adds	r7, #24
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	fffebff8 	.word	0xfffebff8
 80092a4:	fffffcfc 	.word	0xfffffcfc
 80092a8:	fffff3f3 	.word	0xfffff3f3
 80092ac:	ffff0f0f 	.word	0xffff0f0f

080092b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80092c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d110      	bne.n	8009302 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80092e0:	7bfb      	ldrb	r3, [r7, #15]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d102      	bne.n	80092ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80092e6:	7b7b      	ldrb	r3, [r7, #13]
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d001      	beq.n	80092f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	e069      	b.n	80093c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2202      	movs	r2, #2
 80092fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009300:	e031      	b.n	8009366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	2b04      	cmp	r3, #4
 8009306:	d110      	bne.n	800932a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d102      	bne.n	8009314 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800930e:	7b3b      	ldrb	r3, [r7, #12]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d001      	beq.n	8009318 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009314:	2301      	movs	r3, #1
 8009316:	e055      	b.n	80093c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2202      	movs	r2, #2
 800931c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009328:	e01d      	b.n	8009366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d108      	bne.n	8009342 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d105      	bne.n	8009342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009336:	7b7b      	ldrb	r3, [r7, #13]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d102      	bne.n	8009342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800933c:	7b3b      	ldrb	r3, [r7, #12]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d001      	beq.n	8009346 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e03e      	b.n	80093c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2202      	movs	r2, #2
 800934a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2202      	movs	r2, #2
 8009352:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2202      	movs	r2, #2
 800935a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2202      	movs	r2, #2
 8009362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <HAL_TIM_Encoder_Start+0xc4>
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	2b04      	cmp	r3, #4
 8009370:	d008      	beq.n	8009384 <HAL_TIM_Encoder_Start+0xd4>
 8009372:	e00f      	b.n	8009394 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2201      	movs	r2, #1
 800937a:	2100      	movs	r1, #0
 800937c:	4618      	mov	r0, r3
 800937e:	f000 ff4e 	bl	800a21e <TIM_CCxChannelCmd>
      break;
 8009382:	e016      	b.n	80093b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2201      	movs	r2, #1
 800938a:	2104      	movs	r1, #4
 800938c:	4618      	mov	r0, r3
 800938e:	f000 ff46 	bl	800a21e <TIM_CCxChannelCmd>
      break;
 8009392:	e00e      	b.n	80093b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2201      	movs	r2, #1
 800939a:	2100      	movs	r1, #0
 800939c:	4618      	mov	r0, r3
 800939e:	f000 ff3e 	bl	800a21e <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2201      	movs	r2, #1
 80093a8:	2104      	movs	r1, #4
 80093aa:	4618      	mov	r0, r3
 80093ac:	f000 ff37 	bl	800a21e <TIM_CCxChannelCmd>
      break;
 80093b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f042 0201 	orr.w	r2, r2, #1
 80093c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3710      	adds	r7, #16
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	f003 0302 	and.w	r3, r3, #2
 80093de:	2b02      	cmp	r3, #2
 80093e0:	d122      	bne.n	8009428 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d11b      	bne.n	8009428 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f06f 0202 	mvn.w	r2, #2
 80093f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 fad6 	bl	80099c0 <HAL_TIM_IC_CaptureCallback>
 8009414:	e005      	b.n	8009422 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fac8 	bl	80099ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fad9 	bl	80099d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2200      	movs	r2, #0
 8009426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	691b      	ldr	r3, [r3, #16]
 800942e:	f003 0304 	and.w	r3, r3, #4
 8009432:	2b04      	cmp	r3, #4
 8009434:	d122      	bne.n	800947c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 0304 	and.w	r3, r3, #4
 8009440:	2b04      	cmp	r3, #4
 8009442:	d11b      	bne.n	800947c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f06f 0204 	mvn.w	r2, #4
 800944c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2202      	movs	r2, #2
 8009452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	699b      	ldr	r3, [r3, #24]
 800945a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800945e:	2b00      	cmp	r3, #0
 8009460:	d003      	beq.n	800946a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 faac 	bl	80099c0 <HAL_TIM_IC_CaptureCallback>
 8009468:	e005      	b.n	8009476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fa9e 	bl	80099ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 faaf 	bl	80099d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	f003 0308 	and.w	r3, r3, #8
 8009486:	2b08      	cmp	r3, #8
 8009488:	d122      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	2b08      	cmp	r3, #8
 8009496:	d11b      	bne.n	80094d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f06f 0208 	mvn.w	r2, #8
 80094a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2204      	movs	r2, #4
 80094a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	f003 0303 	and.w	r3, r3, #3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d003      	beq.n	80094be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fa82 	bl	80099c0 <HAL_TIM_IC_CaptureCallback>
 80094bc:	e005      	b.n	80094ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fa74 	bl	80099ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 fa85 	bl	80099d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691b      	ldr	r3, [r3, #16]
 80094d6:	f003 0310 	and.w	r3, r3, #16
 80094da:	2b10      	cmp	r3, #16
 80094dc:	d122      	bne.n	8009524 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	68db      	ldr	r3, [r3, #12]
 80094e4:	f003 0310 	and.w	r3, r3, #16
 80094e8:	2b10      	cmp	r3, #16
 80094ea:	d11b      	bne.n	8009524 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f06f 0210 	mvn.w	r2, #16
 80094f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2208      	movs	r2, #8
 80094fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fa58 	bl	80099c0 <HAL_TIM_IC_CaptureCallback>
 8009510:	e005      	b.n	800951e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa4a 	bl	80099ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fa5b 	bl	80099d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0301 	and.w	r3, r3, #1
 800952e:	2b01      	cmp	r3, #1
 8009530:	d10e      	bne.n	8009550 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	2b01      	cmp	r3, #1
 800953e:	d107      	bne.n	8009550 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f06f 0201 	mvn.w	r2, #1
 8009548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7fa fa6c 	bl	8003a28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955a:	2b80      	cmp	r3, #128	; 0x80
 800955c:	d10e      	bne.n	800957c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009568:	2b80      	cmp	r3, #128	; 0x80
 800956a:	d107      	bne.n	800957c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 ff8c 	bl	800a494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800958a:	d10e      	bne.n	80095aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009596:	2b80      	cmp	r3, #128	; 0x80
 8009598:	d107      	bne.n	80095aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 ff7f 	bl	800a4a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b4:	2b40      	cmp	r3, #64	; 0x40
 80095b6:	d10e      	bne.n	80095d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c2:	2b40      	cmp	r3, #64	; 0x40
 80095c4:	d107      	bne.n	80095d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fa09 	bl	80099e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	f003 0320 	and.w	r3, r3, #32
 80095e0:	2b20      	cmp	r3, #32
 80095e2:	d10e      	bne.n	8009602 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b20      	cmp	r3, #32
 80095f0:	d107      	bne.n	8009602 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f06f 0220 	mvn.w	r2, #32
 80095fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 ff3f 	bl	800a480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009602:	bf00      	nop
 8009604:	3708      	adds	r7, #8
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009622:	2b01      	cmp	r3, #1
 8009624:	d101      	bne.n	800962a <HAL_TIM_OC_ConfigChannel+0x1e>
 8009626:	2302      	movs	r3, #2
 8009628:	e066      	b.n	80096f8 <HAL_TIM_OC_ConfigChannel+0xec>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b14      	cmp	r3, #20
 8009636:	d857      	bhi.n	80096e8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8009638:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <HAL_TIM_OC_ConfigChannel+0x34>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	08009695 	.word	0x08009695
 8009644:	080096e9 	.word	0x080096e9
 8009648:	080096e9 	.word	0x080096e9
 800964c:	080096e9 	.word	0x080096e9
 8009650:	080096a3 	.word	0x080096a3
 8009654:	080096e9 	.word	0x080096e9
 8009658:	080096e9 	.word	0x080096e9
 800965c:	080096e9 	.word	0x080096e9
 8009660:	080096b1 	.word	0x080096b1
 8009664:	080096e9 	.word	0x080096e9
 8009668:	080096e9 	.word	0x080096e9
 800966c:	080096e9 	.word	0x080096e9
 8009670:	080096bf 	.word	0x080096bf
 8009674:	080096e9 	.word	0x080096e9
 8009678:	080096e9 	.word	0x080096e9
 800967c:	080096e9 	.word	0x080096e9
 8009680:	080096cd 	.word	0x080096cd
 8009684:	080096e9 	.word	0x080096e9
 8009688:	080096e9 	.word	0x080096e9
 800968c:	080096e9 	.word	0x080096e9
 8009690:	080096db 	.word	0x080096db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	4618      	mov	r0, r3
 800969c:	f000 fa4e 	bl	8009b3c <TIM_OC1_SetConfig>
      break;
 80096a0:	e025      	b.n	80096ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	68b9      	ldr	r1, [r7, #8]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fab9 	bl	8009c20 <TIM_OC2_SetConfig>
      break;
 80096ae:	e01e      	b.n	80096ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68b9      	ldr	r1, [r7, #8]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 fb2a 	bl	8009d10 <TIM_OC3_SetConfig>
      break;
 80096bc:	e017      	b.n	80096ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68b9      	ldr	r1, [r7, #8]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 fb99 	bl	8009dfc <TIM_OC4_SetConfig>
      break;
 80096ca:	e010      	b.n	80096ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f000 fbea 	bl	8009eac <TIM_OC5_SetConfig>
      break;
 80096d8:	e009      	b.n	80096ee <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68b9      	ldr	r1, [r7, #8]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 fc35 	bl	8009f50 <TIM_OC6_SetConfig>
      break;
 80096e6:	e002      	b.n	80096ee <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	75fb      	strb	r3, [r7, #23]
      break;
 80096ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800970c:	2300      	movs	r3, #0
 800970e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800971a:	2302      	movs	r3, #2
 800971c:	e0ff      	b.n	800991e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b14      	cmp	r3, #20
 800972a:	f200 80f0 	bhi.w	800990e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800972e:	a201      	add	r2, pc, #4	; (adr r2, 8009734 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009734:	08009789 	.word	0x08009789
 8009738:	0800990f 	.word	0x0800990f
 800973c:	0800990f 	.word	0x0800990f
 8009740:	0800990f 	.word	0x0800990f
 8009744:	080097c9 	.word	0x080097c9
 8009748:	0800990f 	.word	0x0800990f
 800974c:	0800990f 	.word	0x0800990f
 8009750:	0800990f 	.word	0x0800990f
 8009754:	0800980b 	.word	0x0800980b
 8009758:	0800990f 	.word	0x0800990f
 800975c:	0800990f 	.word	0x0800990f
 8009760:	0800990f 	.word	0x0800990f
 8009764:	0800984b 	.word	0x0800984b
 8009768:	0800990f 	.word	0x0800990f
 800976c:	0800990f 	.word	0x0800990f
 8009770:	0800990f 	.word	0x0800990f
 8009774:	0800988d 	.word	0x0800988d
 8009778:	0800990f 	.word	0x0800990f
 800977c:	0800990f 	.word	0x0800990f
 8009780:	0800990f 	.word	0x0800990f
 8009784:	080098cd 	.word	0x080098cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68b9      	ldr	r1, [r7, #8]
 800978e:	4618      	mov	r0, r3
 8009790:	f000 f9d4 	bl	8009b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0208 	orr.w	r2, r2, #8
 80097a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	699a      	ldr	r2, [r3, #24]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f022 0204 	bic.w	r2, r2, #4
 80097b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6999      	ldr	r1, [r3, #24]
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	691a      	ldr	r2, [r3, #16]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	430a      	orrs	r2, r1
 80097c4:	619a      	str	r2, [r3, #24]
      break;
 80097c6:	e0a5      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68b9      	ldr	r1, [r7, #8]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 fa26 	bl	8009c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80097e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699a      	ldr	r2, [r3, #24]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6999      	ldr	r1, [r3, #24]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	021a      	lsls	r2, r3, #8
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	619a      	str	r2, [r3, #24]
      break;
 8009808:	e084      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68b9      	ldr	r1, [r7, #8]
 8009810:	4618      	mov	r0, r3
 8009812:	f000 fa7d 	bl	8009d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69da      	ldr	r2, [r3, #28]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f042 0208 	orr.w	r2, r2, #8
 8009824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	69da      	ldr	r2, [r3, #28]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f022 0204 	bic.w	r2, r2, #4
 8009834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69d9      	ldr	r1, [r3, #28]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	691a      	ldr	r2, [r3, #16]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	430a      	orrs	r2, r1
 8009846:	61da      	str	r2, [r3, #28]
      break;
 8009848:	e064      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	4618      	mov	r0, r3
 8009852:	f000 fad3 	bl	8009dfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69da      	ldr	r2, [r3, #28]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	69da      	ldr	r2, [r3, #28]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	69d9      	ldr	r1, [r3, #28]
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	021a      	lsls	r2, r3, #8
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	61da      	str	r2, [r3, #28]
      break;
 800988a:	e043      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68b9      	ldr	r1, [r7, #8]
 8009892:	4618      	mov	r0, r3
 8009894:	f000 fb0a 	bl	8009eac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f042 0208 	orr.w	r2, r2, #8
 80098a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0204 	bic.w	r2, r2, #4
 80098b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	691a      	ldr	r2, [r3, #16]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80098ca:	e023      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68b9      	ldr	r1, [r7, #8]
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fb3c 	bl	8009f50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	021a      	lsls	r2, r3, #8
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800990c:	e002      	b.n	8009914 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	75fb      	strb	r3, [r7, #23]
      break;
 8009912:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop

08009928 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_TIM_SlaveConfigSynchro+0x18>
 800993c:	2302      	movs	r3, #2
 800993e:	e031      	b.n	80099a4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009950:	6839      	ldr	r1, [r7, #0]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fb50 	bl	8009ff8 <TIM_SlaveTimer_SetConfig>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e018      	b.n	80099a4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009980:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68da      	ldr	r2, [r3, #12]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009990:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a40      	ldr	r2, [pc, #256]	; (8009b10 <TIM_Base_SetConfig+0x114>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d013      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a1a:	d00f      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a3d      	ldr	r2, [pc, #244]	; (8009b14 <TIM_Base_SetConfig+0x118>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d00b      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a3c      	ldr	r2, [pc, #240]	; (8009b18 <TIM_Base_SetConfig+0x11c>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d007      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a3b      	ldr	r2, [pc, #236]	; (8009b1c <TIM_Base_SetConfig+0x120>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d003      	beq.n	8009a3c <TIM_Base_SetConfig+0x40>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a3a      	ldr	r2, [pc, #232]	; (8009b20 <TIM_Base_SetConfig+0x124>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d108      	bne.n	8009a4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a2f      	ldr	r2, [pc, #188]	; (8009b10 <TIM_Base_SetConfig+0x114>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d02b      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a5c:	d027      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a2c      	ldr	r2, [pc, #176]	; (8009b14 <TIM_Base_SetConfig+0x118>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d023      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a2b      	ldr	r2, [pc, #172]	; (8009b18 <TIM_Base_SetConfig+0x11c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d01f      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a2a      	ldr	r2, [pc, #168]	; (8009b1c <TIM_Base_SetConfig+0x120>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d01b      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a29      	ldr	r2, [pc, #164]	; (8009b20 <TIM_Base_SetConfig+0x124>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d017      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a28      	ldr	r2, [pc, #160]	; (8009b24 <TIM_Base_SetConfig+0x128>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d013      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a27      	ldr	r2, [pc, #156]	; (8009b28 <TIM_Base_SetConfig+0x12c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d00f      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a26      	ldr	r2, [pc, #152]	; (8009b2c <TIM_Base_SetConfig+0x130>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d00b      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a25      	ldr	r2, [pc, #148]	; (8009b30 <TIM_Base_SetConfig+0x134>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d007      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a24      	ldr	r2, [pc, #144]	; (8009b34 <TIM_Base_SetConfig+0x138>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d003      	beq.n	8009aae <TIM_Base_SetConfig+0xb2>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4a23      	ldr	r2, [pc, #140]	; (8009b38 <TIM_Base_SetConfig+0x13c>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d108      	bne.n	8009ac0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ab4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	689a      	ldr	r2, [r3, #8]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a0a      	ldr	r2, [pc, #40]	; (8009b10 <TIM_Base_SetConfig+0x114>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d003      	beq.n	8009af4 <TIM_Base_SetConfig+0xf8>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a0c      	ldr	r2, [pc, #48]	; (8009b20 <TIM_Base_SetConfig+0x124>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d103      	bne.n	8009afc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	691a      	ldr	r2, [r3, #16]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	615a      	str	r2, [r3, #20]
}
 8009b02:	bf00      	nop
 8009b04:	3714      	adds	r7, #20
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	40010000 	.word	0x40010000
 8009b14:	40000400 	.word	0x40000400
 8009b18:	40000800 	.word	0x40000800
 8009b1c:	40000c00 	.word	0x40000c00
 8009b20:	40010400 	.word	0x40010400
 8009b24:	40014000 	.word	0x40014000
 8009b28:	40014400 	.word	0x40014400
 8009b2c:	40014800 	.word	0x40014800
 8009b30:	40001800 	.word	0x40001800
 8009b34:	40001c00 	.word	0x40001c00
 8009b38:	40002000 	.word	0x40002000

08009b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b087      	sub	sp, #28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	f023 0201 	bic.w	r2, r3, #1
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	699b      	ldr	r3, [r3, #24]
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	4b2b      	ldr	r3, [pc, #172]	; (8009c14 <TIM_OC1_SetConfig+0xd8>)
 8009b68:	4013      	ands	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	f023 0302 	bic.w	r3, r3, #2
 8009b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	697a      	ldr	r2, [r7, #20]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a21      	ldr	r2, [pc, #132]	; (8009c18 <TIM_OC1_SetConfig+0xdc>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <TIM_OC1_SetConfig+0x64>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a20      	ldr	r2, [pc, #128]	; (8009c1c <TIM_OC1_SetConfig+0xe0>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d10c      	bne.n	8009bba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f023 0308 	bic.w	r3, r3, #8
 8009ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	697a      	ldr	r2, [r7, #20]
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f023 0304 	bic.w	r3, r3, #4
 8009bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a16      	ldr	r2, [pc, #88]	; (8009c18 <TIM_OC1_SetConfig+0xdc>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d003      	beq.n	8009bca <TIM_OC1_SetConfig+0x8e>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	4a15      	ldr	r2, [pc, #84]	; (8009c1c <TIM_OC1_SetConfig+0xe0>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d111      	bne.n	8009bee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	693a      	ldr	r2, [r7, #16]
 8009bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	621a      	str	r2, [r3, #32]
}
 8009c08:	bf00      	nop
 8009c0a:	371c      	adds	r7, #28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	fffeff8f 	.word	0xfffeff8f
 8009c18:	40010000 	.word	0x40010000
 8009c1c:	40010400 	.word	0x40010400

08009c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	f023 0210 	bic.w	r2, r3, #16
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	4b2e      	ldr	r3, [pc, #184]	; (8009d04 <TIM_OC2_SetConfig+0xe4>)
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	021b      	lsls	r3, r3, #8
 8009c5e:	68fa      	ldr	r2, [r7, #12]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	f023 0320 	bic.w	r3, r3, #32
 8009c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	011b      	lsls	r3, r3, #4
 8009c72:	697a      	ldr	r2, [r7, #20]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a23      	ldr	r2, [pc, #140]	; (8009d08 <TIM_OC2_SetConfig+0xe8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d003      	beq.n	8009c88 <TIM_OC2_SetConfig+0x68>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a22      	ldr	r2, [pc, #136]	; (8009d0c <TIM_OC2_SetConfig+0xec>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d10d      	bne.n	8009ca4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	011b      	lsls	r3, r3, #4
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ca2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a18      	ldr	r2, [pc, #96]	; (8009d08 <TIM_OC2_SetConfig+0xe8>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d003      	beq.n	8009cb4 <TIM_OC2_SetConfig+0x94>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a17      	ldr	r2, [pc, #92]	; (8009d0c <TIM_OC2_SetConfig+0xec>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d113      	bne.n	8009cdc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009cba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4313      	orrs	r3, r2
 8009cda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	621a      	str	r2, [r3, #32]
}
 8009cf6:	bf00      	nop
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	feff8fff 	.word	0xfeff8fff
 8009d08:	40010000 	.word	0x40010000
 8009d0c:	40010400 	.word	0x40010400

08009d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b087      	sub	sp, #28
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6a1b      	ldr	r3, [r3, #32]
 8009d1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a1b      	ldr	r3, [r3, #32]
 8009d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	69db      	ldr	r3, [r3, #28]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4b2d      	ldr	r3, [pc, #180]	; (8009df0 <TIM_OC3_SetConfig+0xe0>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f023 0303 	bic.w	r3, r3, #3
 8009d46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	68fa      	ldr	r2, [r7, #12]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	021b      	lsls	r3, r3, #8
 8009d60:	697a      	ldr	r2, [r7, #20]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a22      	ldr	r2, [pc, #136]	; (8009df4 <TIM_OC3_SetConfig+0xe4>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d003      	beq.n	8009d76 <TIM_OC3_SetConfig+0x66>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a21      	ldr	r2, [pc, #132]	; (8009df8 <TIM_OC3_SetConfig+0xe8>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d10d      	bne.n	8009d92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	021b      	lsls	r3, r3, #8
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a17      	ldr	r2, [pc, #92]	; (8009df4 <TIM_OC3_SetConfig+0xe4>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d003      	beq.n	8009da2 <TIM_OC3_SetConfig+0x92>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a16      	ldr	r2, [pc, #88]	; (8009df8 <TIM_OC3_SetConfig+0xe8>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d113      	bne.n	8009dca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	695b      	ldr	r3, [r3, #20]
 8009db6:	011b      	lsls	r3, r3, #4
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	699b      	ldr	r3, [r3, #24]
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	693a      	ldr	r2, [r7, #16]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	68fa      	ldr	r2, [r7, #12]
 8009dd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	621a      	str	r2, [r3, #32]
}
 8009de4:	bf00      	nop
 8009de6:	371c      	adds	r7, #28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	fffeff8f 	.word	0xfffeff8f
 8009df4:	40010000 	.word	0x40010000
 8009df8:	40010400 	.word	0x40010400

08009dfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6a1b      	ldr	r3, [r3, #32]
 8009e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6a1b      	ldr	r3, [r3, #32]
 8009e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4b1e      	ldr	r3, [pc, #120]	; (8009ea0 <TIM_OC4_SetConfig+0xa4>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	021b      	lsls	r3, r3, #8
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	031b      	lsls	r3, r3, #12
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4a13      	ldr	r2, [pc, #76]	; (8009ea4 <TIM_OC4_SetConfig+0xa8>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d003      	beq.n	8009e64 <TIM_OC4_SetConfig+0x68>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4a12      	ldr	r2, [pc, #72]	; (8009ea8 <TIM_OC4_SetConfig+0xac>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d109      	bne.n	8009e78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	695b      	ldr	r3, [r3, #20]
 8009e70:	019b      	lsls	r3, r3, #6
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	693a      	ldr	r2, [r7, #16]
 8009e90:	621a      	str	r2, [r3, #32]
}
 8009e92:	bf00      	nop
 8009e94:	371c      	adds	r7, #28
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	feff8fff 	.word	0xfeff8fff
 8009ea4:	40010000 	.word	0x40010000
 8009ea8:	40010400 	.word	0x40010400

08009eac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b087      	sub	sp, #28
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ed4:	68fa      	ldr	r2, [r7, #12]
 8009ed6:	4b1b      	ldr	r3, [pc, #108]	; (8009f44 <TIM_OC5_SetConfig+0x98>)
 8009ed8:	4013      	ands	r3, r2
 8009eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68fa      	ldr	r2, [r7, #12]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009eec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	041b      	lsls	r3, r3, #16
 8009ef4:	693a      	ldr	r2, [r7, #16]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a12      	ldr	r2, [pc, #72]	; (8009f48 <TIM_OC5_SetConfig+0x9c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d003      	beq.n	8009f0a <TIM_OC5_SetConfig+0x5e>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	4a11      	ldr	r2, [pc, #68]	; (8009f4c <TIM_OC5_SetConfig+0xa0>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d109      	bne.n	8009f1e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	695b      	ldr	r3, [r3, #20]
 8009f16:	021b      	lsls	r3, r3, #8
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68fa      	ldr	r2, [r7, #12]
 8009f28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	693a      	ldr	r2, [r7, #16]
 8009f36:	621a      	str	r2, [r3, #32]
}
 8009f38:	bf00      	nop
 8009f3a:	371c      	adds	r7, #28
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	fffeff8f 	.word	0xfffeff8f
 8009f48:	40010000 	.word	0x40010000
 8009f4c:	40010400 	.word	0x40010400

08009f50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b087      	sub	sp, #28
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a1b      	ldr	r3, [r3, #32]
 8009f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4b1c      	ldr	r3, [pc, #112]	; (8009fec <TIM_OC6_SetConfig+0x9c>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	021b      	lsls	r3, r3, #8
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	051b      	lsls	r3, r3, #20
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a13      	ldr	r2, [pc, #76]	; (8009ff0 <TIM_OC6_SetConfig+0xa0>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d003      	beq.n	8009fb0 <TIM_OC6_SetConfig+0x60>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a12      	ldr	r2, [pc, #72]	; (8009ff4 <TIM_OC6_SetConfig+0xa4>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d109      	bne.n	8009fc4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	029b      	lsls	r3, r3, #10
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	697a      	ldr	r2, [r7, #20]
 8009fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685a      	ldr	r2, [r3, #4]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	621a      	str	r2, [r3, #32]
}
 8009fde:	bf00      	nop
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	feff8fff 	.word	0xfeff8fff
 8009ff0:	40010000 	.word	0x40010000
 8009ff4:	40010400 	.word	0x40010400

08009ff8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a014:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4b3e      	ldr	r3, [pc, #248]	; (800a11c <TIM_SlaveTimer_SetConfig+0x124>)
 800a024:	4013      	ands	r3, r2
 800a026:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	4313      	orrs	r3, r2
 800a030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	2b70      	cmp	r3, #112	; 0x70
 800a040:	d01a      	beq.n	800a078 <TIM_SlaveTimer_SetConfig+0x80>
 800a042:	2b70      	cmp	r3, #112	; 0x70
 800a044:	d860      	bhi.n	800a108 <TIM_SlaveTimer_SetConfig+0x110>
 800a046:	2b60      	cmp	r3, #96	; 0x60
 800a048:	d054      	beq.n	800a0f4 <TIM_SlaveTimer_SetConfig+0xfc>
 800a04a:	2b60      	cmp	r3, #96	; 0x60
 800a04c:	d85c      	bhi.n	800a108 <TIM_SlaveTimer_SetConfig+0x110>
 800a04e:	2b50      	cmp	r3, #80	; 0x50
 800a050:	d046      	beq.n	800a0e0 <TIM_SlaveTimer_SetConfig+0xe8>
 800a052:	2b50      	cmp	r3, #80	; 0x50
 800a054:	d858      	bhi.n	800a108 <TIM_SlaveTimer_SetConfig+0x110>
 800a056:	2b40      	cmp	r3, #64	; 0x40
 800a058:	d019      	beq.n	800a08e <TIM_SlaveTimer_SetConfig+0x96>
 800a05a:	2b40      	cmp	r3, #64	; 0x40
 800a05c:	d854      	bhi.n	800a108 <TIM_SlaveTimer_SetConfig+0x110>
 800a05e:	2b30      	cmp	r3, #48	; 0x30
 800a060:	d055      	beq.n	800a10e <TIM_SlaveTimer_SetConfig+0x116>
 800a062:	2b30      	cmp	r3, #48	; 0x30
 800a064:	d850      	bhi.n	800a108 <TIM_SlaveTimer_SetConfig+0x110>
 800a066:	2b20      	cmp	r3, #32
 800a068:	d051      	beq.n	800a10e <TIM_SlaveTimer_SetConfig+0x116>
 800a06a:	2b20      	cmp	r3, #32
 800a06c:	d84c      	bhi.n	800a108 <TIM_SlaveTimer_SetConfig+0x110>
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d04d      	beq.n	800a10e <TIM_SlaveTimer_SetConfig+0x116>
 800a072:	2b10      	cmp	r3, #16
 800a074:	d04b      	beq.n	800a10e <TIM_SlaveTimer_SetConfig+0x116>
 800a076:	e047      	b.n	800a108 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a088:	f000 f8a9 	bl	800a1de <TIM_ETR_SetConfig>
      break;
 800a08c:	e040      	b.n	800a110 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b05      	cmp	r3, #5
 800a094:	d101      	bne.n	800a09a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e03b      	b.n	800a112 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6a1b      	ldr	r3, [r3, #32]
 800a0a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6a1a      	ldr	r2, [r3, #32]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f022 0201 	bic.w	r2, r2, #1
 800a0b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	699b      	ldr	r3, [r3, #24]
 800a0b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	011b      	lsls	r3, r3, #4
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	68fa      	ldr	r2, [r7, #12]
 800a0dc:	621a      	str	r2, [r3, #32]
      break;
 800a0de:	e017      	b.n	800a110 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	f000 f817 	bl	800a120 <TIM_TI1_ConfigInputStage>
      break;
 800a0f2:	e00d      	b.n	800a110 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a100:	461a      	mov	r2, r3
 800a102:	f000 f83c 	bl	800a17e <TIM_TI2_ConfigInputStage>
      break;
 800a106:	e003      	b.n	800a110 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	75fb      	strb	r3, [r7, #23]
      break;
 800a10c:	e000      	b.n	800a110 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a10e:	bf00      	nop
  }

  return status;
 800a110:	7dfb      	ldrb	r3, [r7, #23]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	fffefff8 	.word	0xfffefff8

0800a120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a120:	b480      	push	{r7}
 800a122:	b087      	sub	sp, #28
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	f023 0201 	bic.w	r2, r3, #1
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a14a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	011b      	lsls	r3, r3, #4
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4313      	orrs	r3, r2
 800a154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f023 030a 	bic.w	r3, r3, #10
 800a15c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a15e:	697a      	ldr	r2, [r7, #20]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	4313      	orrs	r3, r2
 800a164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	621a      	str	r2, [r3, #32]
}
 800a172:	bf00      	nop
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a17e:	b480      	push	{r7}
 800a180:	b087      	sub	sp, #28
 800a182:	af00      	add	r7, sp, #0
 800a184:	60f8      	str	r0, [r7, #12]
 800a186:	60b9      	str	r1, [r7, #8]
 800a188:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6a1b      	ldr	r3, [r3, #32]
 800a18e:	f023 0210 	bic.w	r2, r3, #16
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6a1b      	ldr	r3, [r3, #32]
 800a1a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a1a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	031b      	lsls	r3, r3, #12
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a1ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	011b      	lsls	r3, r3, #4
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	621a      	str	r2, [r3, #32]
}
 800a1d2:	bf00      	nop
 800a1d4:	371c      	adds	r7, #28
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1de:	b480      	push	{r7}
 800a1e0:	b087      	sub	sp, #28
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a1f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	021a      	lsls	r2, r3, #8
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	431a      	orrs	r2, r3
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	4313      	orrs	r3, r2
 800a206:	697a      	ldr	r2, [r7, #20]
 800a208:	4313      	orrs	r3, r2
 800a20a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	609a      	str	r2, [r3, #8]
}
 800a212:	bf00      	nop
 800a214:	371c      	adds	r7, #28
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a21e:	b480      	push	{r7}
 800a220:	b087      	sub	sp, #28
 800a222:	af00      	add	r7, sp, #0
 800a224:	60f8      	str	r0, [r7, #12]
 800a226:	60b9      	str	r1, [r7, #8]
 800a228:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f003 031f 	and.w	r3, r3, #31
 800a230:	2201      	movs	r2, #1
 800a232:	fa02 f303 	lsl.w	r3, r2, r3
 800a236:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6a1a      	ldr	r2, [r3, #32]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	43db      	mvns	r3, r3
 800a240:	401a      	ands	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6a1a      	ldr	r2, [r3, #32]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	f003 031f 	and.w	r3, r3, #31
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	fa01 f303 	lsl.w	r3, r1, r3
 800a256:	431a      	orrs	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	621a      	str	r2, [r3, #32]
}
 800a25c:	bf00      	nop
 800a25e:	371c      	adds	r7, #28
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d101      	bne.n	800a280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a27c:	2302      	movs	r3, #2
 800a27e:	e06d      	b.n	800a35c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2202      	movs	r2, #2
 800a28c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a30      	ldr	r2, [pc, #192]	; (800a368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d004      	beq.n	800a2b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a2f      	ldr	r2, [pc, #188]	; (800a36c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d108      	bne.n	800a2c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a2ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a20      	ldr	r2, [pc, #128]	; (800a368 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d022      	beq.n	800a330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f2:	d01d      	beq.n	800a330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a1d      	ldr	r2, [pc, #116]	; (800a370 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d018      	beq.n	800a330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a1c      	ldr	r2, [pc, #112]	; (800a374 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d013      	beq.n	800a330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a1a      	ldr	r2, [pc, #104]	; (800a378 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d00e      	beq.n	800a330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a15      	ldr	r2, [pc, #84]	; (800a36c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d009      	beq.n	800a330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a16      	ldr	r2, [pc, #88]	; (800a37c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d004      	beq.n	800a330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a15      	ldr	r2, [pc, #84]	; (800a380 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d10c      	bne.n	800a34a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a336:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3714      	adds	r7, #20
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	40010000 	.word	0x40010000
 800a36c:	40010400 	.word	0x40010400
 800a370:	40000400 	.word	0x40000400
 800a374:	40000800 	.word	0x40000800
 800a378:	40000c00 	.word	0x40000c00
 800a37c:	40014000 	.word	0x40014000
 800a380:	40001800 	.word	0x40001800

0800a384 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d101      	bne.n	800a3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a39c:	2302      	movs	r3, #2
 800a39e:	e065      	b.n	800a46c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	041b      	lsls	r3, r3, #16
 800a416:	4313      	orrs	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a16      	ldr	r2, [pc, #88]	; (800a478 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d004      	beq.n	800a42e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a14      	ldr	r2, [pc, #80]	; (800a47c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d115      	bne.n	800a45a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a438:	051b      	lsls	r3, r3, #20
 800a43a:	4313      	orrs	r3, r2
 800a43c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	69db      	ldr	r3, [r3, #28]
 800a448:	4313      	orrs	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	4313      	orrs	r3, r2
 800a458:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68fa      	ldr	r2, [r7, #12]
 800a460:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	40010000 	.word	0x40010000
 800a47c:	40010400 	.word	0x40010400

0800a480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a488:	bf00      	nop
 800a48a:	370c      	adds	r7, #12
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a49c:	bf00      	nop
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a4b0:	bf00      	nop
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	e040      	b.n	800a550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d106      	bne.n	800a4e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7f9 fbd8 	bl	8003c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2224      	movs	r2, #36	; 0x24
 800a4e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f022 0201 	bic.w	r2, r2, #1
 800a4f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fbe6 	bl	800accc <UART_SetConfig>
 800a500:	4603      	mov	r3, r0
 800a502:	2b01      	cmp	r3, #1
 800a504:	d101      	bne.n	800a50a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	e022      	b.n	800a550 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fe3e 	bl	800b194 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	689a      	ldr	r2, [r3, #8]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f042 0201 	orr.w	r2, r2, #1
 800a546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fec5 	bl	800b2d8 <UART_CheckIdleState>
 800a54e:	4603      	mov	r3, r0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b08a      	sub	sp, #40	; 0x28
 800a55c:	af02      	add	r7, sp, #8
 800a55e:	60f8      	str	r0, [r7, #12]
 800a560:	60b9      	str	r1, [r7, #8]
 800a562:	603b      	str	r3, [r7, #0]
 800a564:	4613      	mov	r3, r2
 800a566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a56c:	2b20      	cmp	r3, #32
 800a56e:	d171      	bne.n	800a654 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d002      	beq.n	800a57c <HAL_UART_Transmit+0x24>
 800a576:	88fb      	ldrh	r3, [r7, #6]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d101      	bne.n	800a580 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	e06a      	b.n	800a656 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2221      	movs	r2, #33	; 0x21
 800a58c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a58e:	f7fa f983 	bl	8004898 <HAL_GetTick>
 800a592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	88fa      	ldrh	r2, [r7, #6]
 800a598:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	88fa      	ldrh	r2, [r7, #6]
 800a5a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5ac:	d108      	bne.n	800a5c0 <HAL_UART_Transmit+0x68>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d104      	bne.n	800a5c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	61bb      	str	r3, [r7, #24]
 800a5be:	e003      	b.n	800a5c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a5c8:	e02c      	b.n	800a624 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	2180      	movs	r1, #128	; 0x80
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 feb6 	bl	800b346 <UART_WaitOnFlagUntilTimeout>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d001      	beq.n	800a5e4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e038      	b.n	800a656 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10b      	bne.n	800a602 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	3302      	adds	r3, #2
 800a5fe:	61bb      	str	r3, [r7, #24]
 800a600:	e007      	b.n	800a612 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	781a      	ldrb	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	3301      	adds	r3, #1
 800a610:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a618:	b29b      	uxth	r3, r3
 800a61a:	3b01      	subs	r3, #1
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1cc      	bne.n	800a5ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	9300      	str	r3, [sp, #0]
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	2200      	movs	r2, #0
 800a638:	2140      	movs	r1, #64	; 0x40
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 fe83 	bl	800b346 <UART_WaitOnFlagUntilTimeout>
 800a640:	4603      	mov	r3, r0
 800a642:	2b00      	cmp	r3, #0
 800a644:	d001      	beq.n	800a64a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e005      	b.n	800a656 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2220      	movs	r2, #32
 800a64e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	e000      	b.n	800a656 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a654:	2302      	movs	r3, #2
  }
}
 800a656:	4618      	mov	r0, r3
 800a658:	3720      	adds	r7, #32
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b08a      	sub	sp, #40	; 0x28
 800a662:	af00      	add	r7, sp, #0
 800a664:	60f8      	str	r0, [r7, #12]
 800a666:	60b9      	str	r1, [r7, #8]
 800a668:	4613      	mov	r3, r2
 800a66a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a672:	2b20      	cmp	r3, #32
 800a674:	d132      	bne.n	800a6dc <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <HAL_UART_Receive_IT+0x24>
 800a67c:	88fb      	ldrh	r3, [r7, #6]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e02b      	b.n	800a6de <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a696:	2b00      	cmp	r3, #0
 800a698:	d018      	beq.n	800a6cc <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	e853 3f00 	ldrex	r3, [r3]
 800a6a6:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a8:	693b      	ldr	r3, [r7, #16]
 800a6aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a6ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	623b      	str	r3, [r7, #32]
 800a6ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6bc:	69f9      	ldr	r1, [r7, #28]
 800a6be:	6a3a      	ldr	r2, [r7, #32]
 800a6c0:	e841 2300 	strex	r3, r2, [r1]
 800a6c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d1e6      	bne.n	800a69a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a6cc:	88fb      	ldrh	r3, [r7, #6]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	68b9      	ldr	r1, [r7, #8]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 fefe 	bl	800b4d4 <UART_Start_Receive_IT>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	e000      	b.n	800a6de <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a6dc:	2302      	movs	r3, #2
  }
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3728      	adds	r7, #40	; 0x28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}
	...

0800a6e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b0ba      	sub	sp, #232	; 0xe8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	69db      	ldr	r3, [r3, #28]
 800a6f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	689b      	ldr	r3, [r3, #8]
 800a70a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a70e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a712:	f640 030f 	movw	r3, #2063	; 0x80f
 800a716:	4013      	ands	r3, r2
 800a718:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a71c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a720:	2b00      	cmp	r3, #0
 800a722:	d115      	bne.n	800a750 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a728:	f003 0320 	and.w	r3, r3, #32
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00f      	beq.n	800a750 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a734:	f003 0320 	and.w	r3, r3, #32
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d009      	beq.n	800a750 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a740:	2b00      	cmp	r3, #0
 800a742:	f000 8297 	beq.w	800ac74 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	4798      	blx	r3
      }
      return;
 800a74e:	e291      	b.n	800ac74 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 8117 	beq.w	800a988 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a75a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	2b00      	cmp	r3, #0
 800a764:	d106      	bne.n	800a774 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a76a:	4b85      	ldr	r3, [pc, #532]	; (800a980 <HAL_UART_IRQHandler+0x298>)
 800a76c:	4013      	ands	r3, r2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	f000 810a 	beq.w	800a988 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a778:	f003 0301 	and.w	r3, r3, #1
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d011      	beq.n	800a7a4 <HAL_UART_IRQHandler+0xbc>
 800a780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00b      	beq.n	800a7a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2201      	movs	r2, #1
 800a792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a79a:	f043 0201 	orr.w	r2, r3, #1
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7a8:	f003 0302 	and.w	r3, r3, #2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d011      	beq.n	800a7d4 <HAL_UART_IRQHandler+0xec>
 800a7b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7b4:	f003 0301 	and.w	r3, r3, #1
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00b      	beq.n	800a7d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2202      	movs	r2, #2
 800a7c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7ca:	f043 0204 	orr.w	r2, r3, #4
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7d8:	f003 0304 	and.w	r3, r3, #4
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d011      	beq.n	800a804 <HAL_UART_IRQHandler+0x11c>
 800a7e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00b      	beq.n	800a804 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2204      	movs	r2, #4
 800a7f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7fa:	f043 0202 	orr.w	r2, r3, #2
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a808:	f003 0308 	and.w	r3, r3, #8
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d017      	beq.n	800a840 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a814:	f003 0320 	and.w	r3, r3, #32
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d105      	bne.n	800a828 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a81c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a820:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a824:	2b00      	cmp	r3, #0
 800a826:	d00b      	beq.n	800a840 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2208      	movs	r2, #8
 800a82e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a836:	f043 0208 	orr.w	r2, r3, #8
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a844:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d012      	beq.n	800a872 <HAL_UART_IRQHandler+0x18a>
 800a84c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d00c      	beq.n	800a872 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a868:	f043 0220 	orr.w	r2, r3, #32
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 81fd 	beq.w	800ac78 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a882:	f003 0320 	and.w	r3, r3, #32
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00d      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a88a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a88e:	f003 0320 	and.w	r3, r3, #32
 800a892:	2b00      	cmp	r3, #0
 800a894:	d007      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ba:	2b40      	cmp	r3, #64	; 0x40
 800a8bc:	d005      	beq.n	800a8ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a8be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d04f      	beq.n	800a96a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fec8 	bl	800b660 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8da:	2b40      	cmp	r3, #64	; 0x40
 800a8dc:	d141      	bne.n	800a962 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a8f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a8f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	3308      	adds	r3, #8
 800a906:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a90a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a90e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a912:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a916:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a91a:	e841 2300 	strex	r3, r2, [r1]
 800a91e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d1d9      	bne.n	800a8de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d013      	beq.n	800a95a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a936:	4a13      	ldr	r2, [pc, #76]	; (800a984 <HAL_UART_IRQHandler+0x29c>)
 800a938:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fa f92c 	bl	8004b9c <HAL_DMA_Abort_IT>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d017      	beq.n	800a97a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a954:	4610      	mov	r0, r2
 800a956:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a958:	e00f      	b.n	800a97a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 f9a0 	bl	800aca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a960:	e00b      	b.n	800a97a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f99c 	bl	800aca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a968:	e007      	b.n	800a97a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f998 	bl	800aca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a978:	e17e      	b.n	800ac78 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a97a:	bf00      	nop
    return;
 800a97c:	e17c      	b.n	800ac78 <HAL_UART_IRQHandler+0x590>
 800a97e:	bf00      	nop
 800a980:	04000120 	.word	0x04000120
 800a984:	0800b729 	.word	0x0800b729

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	f040 814c 	bne.w	800ac2a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a996:	f003 0310 	and.w	r3, r3, #16
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 8145 	beq.w	800ac2a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a9a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9a4:	f003 0310 	and.w	r3, r3, #16
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 813e 	beq.w	800ac2a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2210      	movs	r2, #16
 800a9b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c0:	2b40      	cmp	r3, #64	; 0x40
 800a9c2:	f040 80b6 	bne.w	800ab32 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a9d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 8150 	beq.w	800ac7c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a9e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	f080 8148 	bcs.w	800ac7c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9fa:	69db      	ldr	r3, [r3, #28]
 800a9fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa00:	f000 8086 	beq.w	800ab10 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aa10:	e853 3f00 	ldrex	r3, [r3]
 800aa14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aa18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	461a      	mov	r2, r3
 800aa2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800aa32:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa36:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aa3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aa3e:	e841 2300 	strex	r3, r2, [r1]
 800aa42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1da      	bne.n	800aa04 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3308      	adds	r3, #8
 800aa54:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa58:	e853 3f00 	ldrex	r3, [r3]
 800aa5c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa60:	f023 0301 	bic.w	r3, r3, #1
 800aa64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa72:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa76:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa78:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa7e:	e841 2300 	strex	r3, r2, [r1]
 800aa82:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1e1      	bne.n	800aa4e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3308      	adds	r3, #8
 800aa90:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aaa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3308      	adds	r3, #8
 800aaaa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aaae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aab0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aab4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aab6:	e841 2300 	strex	r3, r2, [r1]
 800aaba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aabc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1e3      	bne.n	800aa8a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2220      	movs	r2, #32
 800aac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aad8:	e853 3f00 	ldrex	r3, [r3]
 800aadc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aade:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aae0:	f023 0310 	bic.w	r3, r3, #16
 800aae4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	461a      	mov	r2, r3
 800aaee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aaf2:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaf4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aaf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aafa:	e841 2300 	strex	r3, r2, [r1]
 800aafe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d1e4      	bne.n	800aad0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7f9 ffd6 	bl	8004abc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2202      	movs	r2, #2
 800ab14:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	1ad3      	subs	r3, r2, r3
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f8c2 	bl	800acb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ab30:	e0a4      	b.n	800ac7c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f000 8096 	beq.w	800ac80 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800ab54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f000 8091 	beq.w	800ac80 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab66:	e853 3f00 	ldrex	r3, [r3]
 800ab6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab80:	647b      	str	r3, [r7, #68]	; 0x44
 800ab82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab88:	e841 2300 	strex	r3, r2, [r1]
 800ab8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1e4      	bne.n	800ab5e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3308      	adds	r3, #8
 800ab9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9e:	e853 3f00 	ldrex	r3, [r3]
 800aba2:	623b      	str	r3, [r7, #32]
   return(result);
 800aba4:	6a3b      	ldr	r3, [r7, #32]
 800aba6:	f023 0301 	bic.w	r3, r3, #1
 800abaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3308      	adds	r3, #8
 800abb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800abb8:	633a      	str	r2, [r7, #48]	; 0x30
 800abba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abc0:	e841 2300 	strex	r3, r2, [r1]
 800abc4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e3      	bne.n	800ab94 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2220      	movs	r2, #32
 800abd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	e853 3f00 	ldrex	r3, [r3]
 800abec:	60fb      	str	r3, [r7, #12]
   return(result);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f023 0310 	bic.w	r3, r3, #16
 800abf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	461a      	mov	r2, r3
 800abfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac02:	61fb      	str	r3, [r7, #28]
 800ac04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac06:	69b9      	ldr	r1, [r7, #24]
 800ac08:	69fa      	ldr	r2, [r7, #28]
 800ac0a:	e841 2300 	strex	r3, r2, [r1]
 800ac0e:	617b      	str	r3, [r7, #20]
   return(result);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d1e4      	bne.n	800abe0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2202      	movs	r2, #2
 800ac1a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f846 	bl	800acb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac28:	e02a      	b.n	800ac80 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ac2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00e      	beq.n	800ac54 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ac36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d008      	beq.n	800ac54 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d01c      	beq.n	800ac84 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	4798      	blx	r3
    }
    return;
 800ac52:	e017      	b.n	800ac84 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d012      	beq.n	800ac86 <HAL_UART_IRQHandler+0x59e>
 800ac60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00c      	beq.n	800ac86 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fd71 	bl	800b754 <UART_EndTransmit_IT>
    return;
 800ac72:	e008      	b.n	800ac86 <HAL_UART_IRQHandler+0x59e>
      return;
 800ac74:	bf00      	nop
 800ac76:	e006      	b.n	800ac86 <HAL_UART_IRQHandler+0x59e>
    return;
 800ac78:	bf00      	nop
 800ac7a:	e004      	b.n	800ac86 <HAL_UART_IRQHandler+0x59e>
      return;
 800ac7c:	bf00      	nop
 800ac7e:	e002      	b.n	800ac86 <HAL_UART_IRQHandler+0x59e>
      return;
 800ac80:	bf00      	nop
 800ac82:	e000      	b.n	800ac86 <HAL_UART_IRQHandler+0x59e>
    return;
 800ac84:	bf00      	nop
  }

}
 800ac86:	37e8      	adds	r7, #232	; 0xe8
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}

0800ac8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b083      	sub	sp, #12
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aca8:	bf00      	nop
 800acaa:	370c      	adds	r7, #12
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr

0800acb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	460b      	mov	r3, r1
 800acbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b088      	sub	sp, #32
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800acd4:	2300      	movs	r3, #0
 800acd6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	689a      	ldr	r2, [r3, #8]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	431a      	orrs	r2, r3
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	431a      	orrs	r2, r3
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	69db      	ldr	r3, [r3, #28]
 800acec:	4313      	orrs	r3, r2
 800acee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	4ba6      	ldr	r3, [pc, #664]	; (800af90 <UART_SetConfig+0x2c4>)
 800acf8:	4013      	ands	r3, r2
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	6812      	ldr	r2, [r2, #0]
 800acfe:	6979      	ldr	r1, [r7, #20]
 800ad00:	430b      	orrs	r3, r1
 800ad02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68da      	ldr	r2, [r3, #12]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	697a      	ldr	r2, [r7, #20]
 800ad3a:	430a      	orrs	r2, r1
 800ad3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a94      	ldr	r2, [pc, #592]	; (800af94 <UART_SetConfig+0x2c8>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d120      	bne.n	800ad8a <UART_SetConfig+0xbe>
 800ad48:	4b93      	ldr	r3, [pc, #588]	; (800af98 <UART_SetConfig+0x2cc>)
 800ad4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad4e:	f003 0303 	and.w	r3, r3, #3
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d816      	bhi.n	800ad84 <UART_SetConfig+0xb8>
 800ad56:	a201      	add	r2, pc, #4	; (adr r2, 800ad5c <UART_SetConfig+0x90>)
 800ad58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5c:	0800ad6d 	.word	0x0800ad6d
 800ad60:	0800ad79 	.word	0x0800ad79
 800ad64:	0800ad73 	.word	0x0800ad73
 800ad68:	0800ad7f 	.word	0x0800ad7f
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	77fb      	strb	r3, [r7, #31]
 800ad70:	e150      	b.n	800b014 <UART_SetConfig+0x348>
 800ad72:	2302      	movs	r3, #2
 800ad74:	77fb      	strb	r3, [r7, #31]
 800ad76:	e14d      	b.n	800b014 <UART_SetConfig+0x348>
 800ad78:	2304      	movs	r3, #4
 800ad7a:	77fb      	strb	r3, [r7, #31]
 800ad7c:	e14a      	b.n	800b014 <UART_SetConfig+0x348>
 800ad7e:	2308      	movs	r3, #8
 800ad80:	77fb      	strb	r3, [r7, #31]
 800ad82:	e147      	b.n	800b014 <UART_SetConfig+0x348>
 800ad84:	2310      	movs	r3, #16
 800ad86:	77fb      	strb	r3, [r7, #31]
 800ad88:	e144      	b.n	800b014 <UART_SetConfig+0x348>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a83      	ldr	r2, [pc, #524]	; (800af9c <UART_SetConfig+0x2d0>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d132      	bne.n	800adfa <UART_SetConfig+0x12e>
 800ad94:	4b80      	ldr	r3, [pc, #512]	; (800af98 <UART_SetConfig+0x2cc>)
 800ad96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad9a:	f003 030c 	and.w	r3, r3, #12
 800ad9e:	2b0c      	cmp	r3, #12
 800ada0:	d828      	bhi.n	800adf4 <UART_SetConfig+0x128>
 800ada2:	a201      	add	r2, pc, #4	; (adr r2, 800ada8 <UART_SetConfig+0xdc>)
 800ada4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada8:	0800addd 	.word	0x0800addd
 800adac:	0800adf5 	.word	0x0800adf5
 800adb0:	0800adf5 	.word	0x0800adf5
 800adb4:	0800adf5 	.word	0x0800adf5
 800adb8:	0800ade9 	.word	0x0800ade9
 800adbc:	0800adf5 	.word	0x0800adf5
 800adc0:	0800adf5 	.word	0x0800adf5
 800adc4:	0800adf5 	.word	0x0800adf5
 800adc8:	0800ade3 	.word	0x0800ade3
 800adcc:	0800adf5 	.word	0x0800adf5
 800add0:	0800adf5 	.word	0x0800adf5
 800add4:	0800adf5 	.word	0x0800adf5
 800add8:	0800adef 	.word	0x0800adef
 800addc:	2300      	movs	r3, #0
 800adde:	77fb      	strb	r3, [r7, #31]
 800ade0:	e118      	b.n	800b014 <UART_SetConfig+0x348>
 800ade2:	2302      	movs	r3, #2
 800ade4:	77fb      	strb	r3, [r7, #31]
 800ade6:	e115      	b.n	800b014 <UART_SetConfig+0x348>
 800ade8:	2304      	movs	r3, #4
 800adea:	77fb      	strb	r3, [r7, #31]
 800adec:	e112      	b.n	800b014 <UART_SetConfig+0x348>
 800adee:	2308      	movs	r3, #8
 800adf0:	77fb      	strb	r3, [r7, #31]
 800adf2:	e10f      	b.n	800b014 <UART_SetConfig+0x348>
 800adf4:	2310      	movs	r3, #16
 800adf6:	77fb      	strb	r3, [r7, #31]
 800adf8:	e10c      	b.n	800b014 <UART_SetConfig+0x348>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a68      	ldr	r2, [pc, #416]	; (800afa0 <UART_SetConfig+0x2d4>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d120      	bne.n	800ae46 <UART_SetConfig+0x17a>
 800ae04:	4b64      	ldr	r3, [pc, #400]	; (800af98 <UART_SetConfig+0x2cc>)
 800ae06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae0a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ae0e:	2b30      	cmp	r3, #48	; 0x30
 800ae10:	d013      	beq.n	800ae3a <UART_SetConfig+0x16e>
 800ae12:	2b30      	cmp	r3, #48	; 0x30
 800ae14:	d814      	bhi.n	800ae40 <UART_SetConfig+0x174>
 800ae16:	2b20      	cmp	r3, #32
 800ae18:	d009      	beq.n	800ae2e <UART_SetConfig+0x162>
 800ae1a:	2b20      	cmp	r3, #32
 800ae1c:	d810      	bhi.n	800ae40 <UART_SetConfig+0x174>
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d002      	beq.n	800ae28 <UART_SetConfig+0x15c>
 800ae22:	2b10      	cmp	r3, #16
 800ae24:	d006      	beq.n	800ae34 <UART_SetConfig+0x168>
 800ae26:	e00b      	b.n	800ae40 <UART_SetConfig+0x174>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	77fb      	strb	r3, [r7, #31]
 800ae2c:	e0f2      	b.n	800b014 <UART_SetConfig+0x348>
 800ae2e:	2302      	movs	r3, #2
 800ae30:	77fb      	strb	r3, [r7, #31]
 800ae32:	e0ef      	b.n	800b014 <UART_SetConfig+0x348>
 800ae34:	2304      	movs	r3, #4
 800ae36:	77fb      	strb	r3, [r7, #31]
 800ae38:	e0ec      	b.n	800b014 <UART_SetConfig+0x348>
 800ae3a:	2308      	movs	r3, #8
 800ae3c:	77fb      	strb	r3, [r7, #31]
 800ae3e:	e0e9      	b.n	800b014 <UART_SetConfig+0x348>
 800ae40:	2310      	movs	r3, #16
 800ae42:	77fb      	strb	r3, [r7, #31]
 800ae44:	e0e6      	b.n	800b014 <UART_SetConfig+0x348>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a56      	ldr	r2, [pc, #344]	; (800afa4 <UART_SetConfig+0x2d8>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d120      	bne.n	800ae92 <UART_SetConfig+0x1c6>
 800ae50:	4b51      	ldr	r3, [pc, #324]	; (800af98 <UART_SetConfig+0x2cc>)
 800ae52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ae5a:	2bc0      	cmp	r3, #192	; 0xc0
 800ae5c:	d013      	beq.n	800ae86 <UART_SetConfig+0x1ba>
 800ae5e:	2bc0      	cmp	r3, #192	; 0xc0
 800ae60:	d814      	bhi.n	800ae8c <UART_SetConfig+0x1c0>
 800ae62:	2b80      	cmp	r3, #128	; 0x80
 800ae64:	d009      	beq.n	800ae7a <UART_SetConfig+0x1ae>
 800ae66:	2b80      	cmp	r3, #128	; 0x80
 800ae68:	d810      	bhi.n	800ae8c <UART_SetConfig+0x1c0>
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d002      	beq.n	800ae74 <UART_SetConfig+0x1a8>
 800ae6e:	2b40      	cmp	r3, #64	; 0x40
 800ae70:	d006      	beq.n	800ae80 <UART_SetConfig+0x1b4>
 800ae72:	e00b      	b.n	800ae8c <UART_SetConfig+0x1c0>
 800ae74:	2300      	movs	r3, #0
 800ae76:	77fb      	strb	r3, [r7, #31]
 800ae78:	e0cc      	b.n	800b014 <UART_SetConfig+0x348>
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	77fb      	strb	r3, [r7, #31]
 800ae7e:	e0c9      	b.n	800b014 <UART_SetConfig+0x348>
 800ae80:	2304      	movs	r3, #4
 800ae82:	77fb      	strb	r3, [r7, #31]
 800ae84:	e0c6      	b.n	800b014 <UART_SetConfig+0x348>
 800ae86:	2308      	movs	r3, #8
 800ae88:	77fb      	strb	r3, [r7, #31]
 800ae8a:	e0c3      	b.n	800b014 <UART_SetConfig+0x348>
 800ae8c:	2310      	movs	r3, #16
 800ae8e:	77fb      	strb	r3, [r7, #31]
 800ae90:	e0c0      	b.n	800b014 <UART_SetConfig+0x348>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a44      	ldr	r2, [pc, #272]	; (800afa8 <UART_SetConfig+0x2dc>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d125      	bne.n	800aee8 <UART_SetConfig+0x21c>
 800ae9c:	4b3e      	ldr	r3, [pc, #248]	; (800af98 <UART_SetConfig+0x2cc>)
 800ae9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aeaa:	d017      	beq.n	800aedc <UART_SetConfig+0x210>
 800aeac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aeb0:	d817      	bhi.n	800aee2 <UART_SetConfig+0x216>
 800aeb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeb6:	d00b      	beq.n	800aed0 <UART_SetConfig+0x204>
 800aeb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aebc:	d811      	bhi.n	800aee2 <UART_SetConfig+0x216>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <UART_SetConfig+0x1fe>
 800aec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aec6:	d006      	beq.n	800aed6 <UART_SetConfig+0x20a>
 800aec8:	e00b      	b.n	800aee2 <UART_SetConfig+0x216>
 800aeca:	2300      	movs	r3, #0
 800aecc:	77fb      	strb	r3, [r7, #31]
 800aece:	e0a1      	b.n	800b014 <UART_SetConfig+0x348>
 800aed0:	2302      	movs	r3, #2
 800aed2:	77fb      	strb	r3, [r7, #31]
 800aed4:	e09e      	b.n	800b014 <UART_SetConfig+0x348>
 800aed6:	2304      	movs	r3, #4
 800aed8:	77fb      	strb	r3, [r7, #31]
 800aeda:	e09b      	b.n	800b014 <UART_SetConfig+0x348>
 800aedc:	2308      	movs	r3, #8
 800aede:	77fb      	strb	r3, [r7, #31]
 800aee0:	e098      	b.n	800b014 <UART_SetConfig+0x348>
 800aee2:	2310      	movs	r3, #16
 800aee4:	77fb      	strb	r3, [r7, #31]
 800aee6:	e095      	b.n	800b014 <UART_SetConfig+0x348>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a2f      	ldr	r2, [pc, #188]	; (800afac <UART_SetConfig+0x2e0>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d125      	bne.n	800af3e <UART_SetConfig+0x272>
 800aef2:	4b29      	ldr	r3, [pc, #164]	; (800af98 <UART_SetConfig+0x2cc>)
 800aef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aefc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af00:	d017      	beq.n	800af32 <UART_SetConfig+0x266>
 800af02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800af06:	d817      	bhi.n	800af38 <UART_SetConfig+0x26c>
 800af08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af0c:	d00b      	beq.n	800af26 <UART_SetConfig+0x25a>
 800af0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af12:	d811      	bhi.n	800af38 <UART_SetConfig+0x26c>
 800af14:	2b00      	cmp	r3, #0
 800af16:	d003      	beq.n	800af20 <UART_SetConfig+0x254>
 800af18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af1c:	d006      	beq.n	800af2c <UART_SetConfig+0x260>
 800af1e:	e00b      	b.n	800af38 <UART_SetConfig+0x26c>
 800af20:	2301      	movs	r3, #1
 800af22:	77fb      	strb	r3, [r7, #31]
 800af24:	e076      	b.n	800b014 <UART_SetConfig+0x348>
 800af26:	2302      	movs	r3, #2
 800af28:	77fb      	strb	r3, [r7, #31]
 800af2a:	e073      	b.n	800b014 <UART_SetConfig+0x348>
 800af2c:	2304      	movs	r3, #4
 800af2e:	77fb      	strb	r3, [r7, #31]
 800af30:	e070      	b.n	800b014 <UART_SetConfig+0x348>
 800af32:	2308      	movs	r3, #8
 800af34:	77fb      	strb	r3, [r7, #31]
 800af36:	e06d      	b.n	800b014 <UART_SetConfig+0x348>
 800af38:	2310      	movs	r3, #16
 800af3a:	77fb      	strb	r3, [r7, #31]
 800af3c:	e06a      	b.n	800b014 <UART_SetConfig+0x348>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a1b      	ldr	r2, [pc, #108]	; (800afb0 <UART_SetConfig+0x2e4>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d138      	bne.n	800afba <UART_SetConfig+0x2ee>
 800af48:	4b13      	ldr	r3, [pc, #76]	; (800af98 <UART_SetConfig+0x2cc>)
 800af4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800af52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af56:	d017      	beq.n	800af88 <UART_SetConfig+0x2bc>
 800af58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af5c:	d82a      	bhi.n	800afb4 <UART_SetConfig+0x2e8>
 800af5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af62:	d00b      	beq.n	800af7c <UART_SetConfig+0x2b0>
 800af64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af68:	d824      	bhi.n	800afb4 <UART_SetConfig+0x2e8>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <UART_SetConfig+0x2aa>
 800af6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af72:	d006      	beq.n	800af82 <UART_SetConfig+0x2b6>
 800af74:	e01e      	b.n	800afb4 <UART_SetConfig+0x2e8>
 800af76:	2300      	movs	r3, #0
 800af78:	77fb      	strb	r3, [r7, #31]
 800af7a:	e04b      	b.n	800b014 <UART_SetConfig+0x348>
 800af7c:	2302      	movs	r3, #2
 800af7e:	77fb      	strb	r3, [r7, #31]
 800af80:	e048      	b.n	800b014 <UART_SetConfig+0x348>
 800af82:	2304      	movs	r3, #4
 800af84:	77fb      	strb	r3, [r7, #31]
 800af86:	e045      	b.n	800b014 <UART_SetConfig+0x348>
 800af88:	2308      	movs	r3, #8
 800af8a:	77fb      	strb	r3, [r7, #31]
 800af8c:	e042      	b.n	800b014 <UART_SetConfig+0x348>
 800af8e:	bf00      	nop
 800af90:	efff69f3 	.word	0xefff69f3
 800af94:	40011000 	.word	0x40011000
 800af98:	40023800 	.word	0x40023800
 800af9c:	40004400 	.word	0x40004400
 800afa0:	40004800 	.word	0x40004800
 800afa4:	40004c00 	.word	0x40004c00
 800afa8:	40005000 	.word	0x40005000
 800afac:	40011400 	.word	0x40011400
 800afb0:	40007800 	.word	0x40007800
 800afb4:	2310      	movs	r3, #16
 800afb6:	77fb      	strb	r3, [r7, #31]
 800afb8:	e02c      	b.n	800b014 <UART_SetConfig+0x348>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4a72      	ldr	r2, [pc, #456]	; (800b188 <UART_SetConfig+0x4bc>)
 800afc0:	4293      	cmp	r3, r2
 800afc2:	d125      	bne.n	800b010 <UART_SetConfig+0x344>
 800afc4:	4b71      	ldr	r3, [pc, #452]	; (800b18c <UART_SetConfig+0x4c0>)
 800afc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800afce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800afd2:	d017      	beq.n	800b004 <UART_SetConfig+0x338>
 800afd4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800afd8:	d817      	bhi.n	800b00a <UART_SetConfig+0x33e>
 800afda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afde:	d00b      	beq.n	800aff8 <UART_SetConfig+0x32c>
 800afe0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afe4:	d811      	bhi.n	800b00a <UART_SetConfig+0x33e>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <UART_SetConfig+0x326>
 800afea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afee:	d006      	beq.n	800affe <UART_SetConfig+0x332>
 800aff0:	e00b      	b.n	800b00a <UART_SetConfig+0x33e>
 800aff2:	2300      	movs	r3, #0
 800aff4:	77fb      	strb	r3, [r7, #31]
 800aff6:	e00d      	b.n	800b014 <UART_SetConfig+0x348>
 800aff8:	2302      	movs	r3, #2
 800affa:	77fb      	strb	r3, [r7, #31]
 800affc:	e00a      	b.n	800b014 <UART_SetConfig+0x348>
 800affe:	2304      	movs	r3, #4
 800b000:	77fb      	strb	r3, [r7, #31]
 800b002:	e007      	b.n	800b014 <UART_SetConfig+0x348>
 800b004:	2308      	movs	r3, #8
 800b006:	77fb      	strb	r3, [r7, #31]
 800b008:	e004      	b.n	800b014 <UART_SetConfig+0x348>
 800b00a:	2310      	movs	r3, #16
 800b00c:	77fb      	strb	r3, [r7, #31]
 800b00e:	e001      	b.n	800b014 <UART_SetConfig+0x348>
 800b010:	2310      	movs	r3, #16
 800b012:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	69db      	ldr	r3, [r3, #28]
 800b018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b01c:	d15b      	bne.n	800b0d6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b01e:	7ffb      	ldrb	r3, [r7, #31]
 800b020:	2b08      	cmp	r3, #8
 800b022:	d828      	bhi.n	800b076 <UART_SetConfig+0x3aa>
 800b024:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <UART_SetConfig+0x360>)
 800b026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02a:	bf00      	nop
 800b02c:	0800b051 	.word	0x0800b051
 800b030:	0800b059 	.word	0x0800b059
 800b034:	0800b061 	.word	0x0800b061
 800b038:	0800b077 	.word	0x0800b077
 800b03c:	0800b067 	.word	0x0800b067
 800b040:	0800b077 	.word	0x0800b077
 800b044:	0800b077 	.word	0x0800b077
 800b048:	0800b077 	.word	0x0800b077
 800b04c:	0800b06f 	.word	0x0800b06f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b050:	f7fd f94c 	bl	80082ec <HAL_RCC_GetPCLK1Freq>
 800b054:	61b8      	str	r0, [r7, #24]
        break;
 800b056:	e013      	b.n	800b080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b058:	f7fd f95c 	bl	8008314 <HAL_RCC_GetPCLK2Freq>
 800b05c:	61b8      	str	r0, [r7, #24]
        break;
 800b05e:	e00f      	b.n	800b080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b060:	4b4b      	ldr	r3, [pc, #300]	; (800b190 <UART_SetConfig+0x4c4>)
 800b062:	61bb      	str	r3, [r7, #24]
        break;
 800b064:	e00c      	b.n	800b080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b066:	f7fd f82f 	bl	80080c8 <HAL_RCC_GetSysClockFreq>
 800b06a:	61b8      	str	r0, [r7, #24]
        break;
 800b06c:	e008      	b.n	800b080 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b06e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b072:	61bb      	str	r3, [r7, #24]
        break;
 800b074:	e004      	b.n	800b080 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	77bb      	strb	r3, [r7, #30]
        break;
 800b07e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d074      	beq.n	800b170 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	005a      	lsls	r2, r3, #1
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	085b      	lsrs	r3, r3, #1
 800b090:	441a      	add	r2, r3
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	fbb2 f3f3 	udiv	r3, r2, r3
 800b09a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	2b0f      	cmp	r3, #15
 800b0a0:	d916      	bls.n	800b0d0 <UART_SetConfig+0x404>
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0a8:	d212      	bcs.n	800b0d0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	f023 030f 	bic.w	r3, r3, #15
 800b0b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b0b4:	693b      	ldr	r3, [r7, #16]
 800b0b6:	085b      	lsrs	r3, r3, #1
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	f003 0307 	and.w	r3, r3, #7
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	89fb      	ldrh	r3, [r7, #14]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	89fa      	ldrh	r2, [r7, #14]
 800b0cc:	60da      	str	r2, [r3, #12]
 800b0ce:	e04f      	b.n	800b170 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	77bb      	strb	r3, [r7, #30]
 800b0d4:	e04c      	b.n	800b170 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b0d6:	7ffb      	ldrb	r3, [r7, #31]
 800b0d8:	2b08      	cmp	r3, #8
 800b0da:	d828      	bhi.n	800b12e <UART_SetConfig+0x462>
 800b0dc:	a201      	add	r2, pc, #4	; (adr r2, 800b0e4 <UART_SetConfig+0x418>)
 800b0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e2:	bf00      	nop
 800b0e4:	0800b109 	.word	0x0800b109
 800b0e8:	0800b111 	.word	0x0800b111
 800b0ec:	0800b119 	.word	0x0800b119
 800b0f0:	0800b12f 	.word	0x0800b12f
 800b0f4:	0800b11f 	.word	0x0800b11f
 800b0f8:	0800b12f 	.word	0x0800b12f
 800b0fc:	0800b12f 	.word	0x0800b12f
 800b100:	0800b12f 	.word	0x0800b12f
 800b104:	0800b127 	.word	0x0800b127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b108:	f7fd f8f0 	bl	80082ec <HAL_RCC_GetPCLK1Freq>
 800b10c:	61b8      	str	r0, [r7, #24]
        break;
 800b10e:	e013      	b.n	800b138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b110:	f7fd f900 	bl	8008314 <HAL_RCC_GetPCLK2Freq>
 800b114:	61b8      	str	r0, [r7, #24]
        break;
 800b116:	e00f      	b.n	800b138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b118:	4b1d      	ldr	r3, [pc, #116]	; (800b190 <UART_SetConfig+0x4c4>)
 800b11a:	61bb      	str	r3, [r7, #24]
        break;
 800b11c:	e00c      	b.n	800b138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b11e:	f7fc ffd3 	bl	80080c8 <HAL_RCC_GetSysClockFreq>
 800b122:	61b8      	str	r0, [r7, #24]
        break;
 800b124:	e008      	b.n	800b138 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b126:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b12a:	61bb      	str	r3, [r7, #24]
        break;
 800b12c:	e004      	b.n	800b138 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b12e:	2300      	movs	r3, #0
 800b130:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	77bb      	strb	r3, [r7, #30]
        break;
 800b136:	bf00      	nop
    }

    if (pclk != 0U)
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d018      	beq.n	800b170 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	085a      	lsrs	r2, r3, #1
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	441a      	add	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b150:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	2b0f      	cmp	r3, #15
 800b156:	d909      	bls.n	800b16c <UART_SetConfig+0x4a0>
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b15e:	d205      	bcs.n	800b16c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	b29a      	uxth	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	60da      	str	r2, [r3, #12]
 800b16a:	e001      	b.n	800b170 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b17c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3720      	adds	r7, #32
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	40007c00 	.word	0x40007c00
 800b18c:	40023800 	.word	0x40023800
 800b190:	00f42400 	.word	0x00f42400

0800b194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d00a      	beq.n	800b1be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c2:	f003 0302 	and.w	r3, r3, #2
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	685b      	ldr	r3, [r3, #4]
 800b1d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d00a      	beq.n	800b202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	685b      	ldr	r3, [r3, #4]
 800b1f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	430a      	orrs	r2, r1
 800b200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b206:	f003 0308 	and.w	r3, r3, #8
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00a      	beq.n	800b224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	430a      	orrs	r2, r1
 800b222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	f003 0310 	and.w	r3, r3, #16
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00a      	beq.n	800b246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	430a      	orrs	r2, r1
 800b244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24a:	f003 0320 	and.w	r3, r3, #32
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d00a      	beq.n	800b268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	430a      	orrs	r2, r1
 800b266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b270:	2b00      	cmp	r3, #0
 800b272:	d01a      	beq.n	800b2aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	430a      	orrs	r2, r1
 800b288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b292:	d10a      	bne.n	800b2aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	430a      	orrs	r2, r1
 800b2a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00a      	beq.n	800b2cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	430a      	orrs	r2, r1
 800b2ca:	605a      	str	r2, [r3, #4]
  }
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af02      	add	r7, sp, #8
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b2e8:	f7f9 fad6 	bl	8004898 <HAL_GetTick>
 800b2ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0308 	and.w	r3, r3, #8
 800b2f8:	2b08      	cmp	r3, #8
 800b2fa:	d10e      	bne.n	800b31a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b2fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2200      	movs	r2, #0
 800b306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f81b 	bl	800b346 <UART_WaitOnFlagUntilTimeout>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b316:	2303      	movs	r3, #3
 800b318:	e011      	b.n	800b33e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2220      	movs	r2, #32
 800b31e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2220      	movs	r2, #32
 800b324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2200      	movs	r2, #0
 800b332:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b09c      	sub	sp, #112	; 0x70
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	60b9      	str	r1, [r7, #8]
 800b350:	603b      	str	r3, [r7, #0]
 800b352:	4613      	mov	r3, r2
 800b354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b356:	e0a7      	b.n	800b4a8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b35e:	f000 80a3 	beq.w	800b4a8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b362:	f7f9 fa99 	bl	8004898 <HAL_GetTick>
 800b366:	4602      	mov	r2, r0
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b36e:	429a      	cmp	r2, r3
 800b370:	d302      	bcc.n	800b378 <UART_WaitOnFlagUntilTimeout+0x32>
 800b372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b374:	2b00      	cmp	r3, #0
 800b376:	d13f      	bne.n	800b3f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b380:	e853 3f00 	ldrex	r3, [r3]
 800b384:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b38c:	667b      	str	r3, [r7, #100]	; 0x64
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	461a      	mov	r2, r3
 800b394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b396:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b398:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b39c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b39e:	e841 2300 	strex	r3, r2, [r1]
 800b3a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b3a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1e6      	bne.n	800b378 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b4:	e853 3f00 	ldrex	r3, [r3]
 800b3b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3bc:	f023 0301 	bic.w	r3, r3, #1
 800b3c0:	663b      	str	r3, [r7, #96]	; 0x60
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3308      	adds	r3, #8
 800b3c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3ca:	64ba      	str	r2, [r7, #72]	; 0x48
 800b3cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e5      	bne.n	800b3aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2220      	movs	r2, #32
 800b3e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2220      	movs	r2, #32
 800b3e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e068      	b.n	800b4ca <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f003 0304 	and.w	r3, r3, #4
 800b402:	2b00      	cmp	r3, #0
 800b404:	d050      	beq.n	800b4a8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b410:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b414:	d148      	bne.n	800b4a8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b41e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b428:	e853 3f00 	ldrex	r3, [r3]
 800b42c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b434:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	461a      	mov	r2, r3
 800b43c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b43e:	637b      	str	r3, [r7, #52]	; 0x34
 800b440:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b442:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b446:	e841 2300 	strex	r3, r2, [r1]
 800b44a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1e6      	bne.n	800b420 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3308      	adds	r3, #8
 800b458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	e853 3f00 	ldrex	r3, [r3]
 800b460:	613b      	str	r3, [r7, #16]
   return(result);
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f023 0301 	bic.w	r3, r3, #1
 800b468:	66bb      	str	r3, [r7, #104]	; 0x68
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3308      	adds	r3, #8
 800b470:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b472:	623a      	str	r2, [r7, #32]
 800b474:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b476:	69f9      	ldr	r1, [r7, #28]
 800b478:	6a3a      	ldr	r2, [r7, #32]
 800b47a:	e841 2300 	strex	r3, r2, [r1]
 800b47e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1e5      	bne.n	800b452 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2220      	movs	r2, #32
 800b48a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2220      	movs	r2, #32
 800b490:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2220      	movs	r2, #32
 800b498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e010      	b.n	800b4ca <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	69da      	ldr	r2, [r3, #28]
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	bf0c      	ite	eq
 800b4b8:	2301      	moveq	r3, #1
 800b4ba:	2300      	movne	r3, #0
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	461a      	mov	r2, r3
 800b4c0:	79fb      	ldrb	r3, [r7, #7]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	f43f af48 	beq.w	800b358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3770      	adds	r7, #112	; 0x70
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
	...

0800b4d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b097      	sub	sp, #92	; 0x5c
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	60f8      	str	r0, [r7, #12]
 800b4dc:	60b9      	str	r1, [r7, #8]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	68ba      	ldr	r2, [r7, #8]
 800b4e6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	88fa      	ldrh	r2, [r7, #6]
 800b4ec:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	88fa      	ldrh	r2, [r7, #6]
 800b4f4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	689b      	ldr	r3, [r3, #8]
 800b502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b506:	d10e      	bne.n	800b526 <UART_Start_Receive_IT+0x52>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d105      	bne.n	800b51c <UART_Start_Receive_IT+0x48>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b516:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b51a:	e02d      	b.n	800b578 <UART_Start_Receive_IT+0xa4>
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	22ff      	movs	r2, #255	; 0xff
 800b520:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b524:	e028      	b.n	800b578 <UART_Start_Receive_IT+0xa4>
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	689b      	ldr	r3, [r3, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10d      	bne.n	800b54a <UART_Start_Receive_IT+0x76>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d104      	bne.n	800b540 <UART_Start_Receive_IT+0x6c>
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	22ff      	movs	r2, #255	; 0xff
 800b53a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b53e:	e01b      	b.n	800b578 <UART_Start_Receive_IT+0xa4>
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	227f      	movs	r2, #127	; 0x7f
 800b544:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b548:	e016      	b.n	800b578 <UART_Start_Receive_IT+0xa4>
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b552:	d10d      	bne.n	800b570 <UART_Start_Receive_IT+0x9c>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d104      	bne.n	800b566 <UART_Start_Receive_IT+0x92>
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	227f      	movs	r2, #127	; 0x7f
 800b560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b564:	e008      	b.n	800b578 <UART_Start_Receive_IT+0xa4>
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	223f      	movs	r2, #63	; 0x3f
 800b56a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b56e:	e003      	b.n	800b578 <UART_Start_Receive_IT+0xa4>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2200      	movs	r2, #0
 800b57c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2222      	movs	r2, #34	; 0x22
 800b584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3308      	adds	r3, #8
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b592:	e853 3f00 	ldrex	r3, [r3]
 800b596:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59a:	f043 0301 	orr.w	r3, r3, #1
 800b59e:	657b      	str	r3, [r7, #84]	; 0x54
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5a8:	64ba      	str	r2, [r7, #72]	; 0x48
 800b5aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b5ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5b0:	e841 2300 	strex	r3, r2, [r1]
 800b5b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b5b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1e5      	bne.n	800b588 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c4:	d107      	bne.n	800b5d6 <UART_Start_Receive_IT+0x102>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d103      	bne.n	800b5d6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	4a21      	ldr	r2, [pc, #132]	; (800b658 <UART_Start_Receive_IT+0x184>)
 800b5d2:	669a      	str	r2, [r3, #104]	; 0x68
 800b5d4:	e002      	b.n	800b5dc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	4a20      	ldr	r2, [pc, #128]	; (800b65c <UART_Start_Receive_IT+0x188>)
 800b5da:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	691b      	ldr	r3, [r3, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d019      	beq.n	800b618 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ec:	e853 3f00 	ldrex	r3, [r3]
 800b5f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b5f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	461a      	mov	r2, r3
 800b600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b602:	637b      	str	r3, [r7, #52]	; 0x34
 800b604:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b606:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b612:	2b00      	cmp	r3, #0
 800b614:	d1e6      	bne.n	800b5e4 <UART_Start_Receive_IT+0x110>
 800b616:	e018      	b.n	800b64a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	e853 3f00 	ldrex	r3, [r3]
 800b624:	613b      	str	r3, [r7, #16]
   return(result);
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	f043 0320 	orr.w	r3, r3, #32
 800b62c:	653b      	str	r3, [r7, #80]	; 0x50
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	461a      	mov	r2, r3
 800b634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b636:	623b      	str	r3, [r7, #32]
 800b638:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b63a:	69f9      	ldr	r1, [r7, #28]
 800b63c:	6a3a      	ldr	r2, [r7, #32]
 800b63e:	e841 2300 	strex	r3, r2, [r1]
 800b642:	61bb      	str	r3, [r7, #24]
   return(result);
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1e6      	bne.n	800b618 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	375c      	adds	r7, #92	; 0x5c
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	0800b90f 	.word	0x0800b90f
 800b65c:	0800b7a9 	.word	0x0800b7a9

0800b660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b660:	b480      	push	{r7}
 800b662:	b095      	sub	sp, #84	; 0x54
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b670:	e853 3f00 	ldrex	r3, [r3]
 800b674:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b678:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b67c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	461a      	mov	r2, r3
 800b684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b686:	643b      	str	r3, [r7, #64]	; 0x40
 800b688:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b68c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b68e:	e841 2300 	strex	r3, r2, [r1]
 800b692:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1e6      	bne.n	800b668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	3308      	adds	r3, #8
 800b6a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	e853 3f00 	ldrex	r3, [r3]
 800b6a8:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	f023 0301 	bic.w	r3, r3, #1
 800b6b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	3308      	adds	r3, #8
 800b6b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c2:	e841 2300 	strex	r3, r2, [r1]
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1e5      	bne.n	800b69a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d118      	bne.n	800b708 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	e853 3f00 	ldrex	r3, [r3]
 800b6e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	f023 0310 	bic.w	r3, r3, #16
 800b6ea:	647b      	str	r3, [r7, #68]	; 0x44
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6f4:	61bb      	str	r3, [r7, #24]
 800b6f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f8:	6979      	ldr	r1, [r7, #20]
 800b6fa:	69ba      	ldr	r2, [r7, #24]
 800b6fc:	e841 2300 	strex	r3, r2, [r1]
 800b700:	613b      	str	r3, [r7, #16]
   return(result);
 800b702:	693b      	ldr	r3, [r7, #16]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1e6      	bne.n	800b6d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2220      	movs	r2, #32
 800b70c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b71c:	bf00      	nop
 800b71e:	3754      	adds	r7, #84	; 0x54
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7ff faaa 	bl	800aca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b74c:	bf00      	nop
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	e853 3f00 	ldrex	r3, [r3]
 800b768:	60bb      	str	r3, [r7, #8]
   return(result);
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b770:	61fb      	str	r3, [r7, #28]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77e:	6979      	ldr	r1, [r7, #20]
 800b780:	69ba      	ldr	r2, [r7, #24]
 800b782:	e841 2300 	strex	r3, r2, [r1]
 800b786:	613b      	str	r3, [r7, #16]
   return(result);
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d1e6      	bne.n	800b75c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2220      	movs	r2, #32
 800b792:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7ff fa76 	bl	800ac8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7a0:	bf00      	nop
 800b7a2:	3720      	adds	r7, #32
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b096      	sub	sp, #88	; 0x58
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7c0:	2b22      	cmp	r3, #34	; 0x22
 800b7c2:	f040 8098 	bne.w	800b8f6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b7d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b7d4:	b2d9      	uxtb	r1, r3
 800b7d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7e0:	400a      	ands	r2, r1
 800b7e2:	b2d2      	uxtb	r2, r2
 800b7e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ea:	1c5a      	adds	r2, r3, #1
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b808:	b29b      	uxth	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d17b      	bne.n	800b906 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	e853 3f00 	ldrex	r3, [r3]
 800b81a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b822:	653b      	str	r3, [r7, #80]	; 0x50
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	461a      	mov	r2, r3
 800b82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b82c:	647b      	str	r3, [r7, #68]	; 0x44
 800b82e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b830:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b834:	e841 2300 	strex	r3, r2, [r1]
 800b838:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b83a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1e6      	bne.n	800b80e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3308      	adds	r3, #8
 800b846:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	e853 3f00 	ldrex	r3, [r3]
 800b84e:	623b      	str	r3, [r7, #32]
   return(result);
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	f023 0301 	bic.w	r3, r3, #1
 800b856:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3308      	adds	r3, #8
 800b85e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b860:	633a      	str	r2, [r7, #48]	; 0x30
 800b862:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b868:	e841 2300 	strex	r3, r2, [r1]
 800b86c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e5      	bne.n	800b840 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2220      	movs	r2, #32
 800b878:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d12e      	bne.n	800b8ee <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2200      	movs	r2, #0
 800b894:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	e853 3f00 	ldrex	r3, [r3]
 800b8a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f023 0310 	bic.w	r3, r3, #16
 800b8aa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8b4:	61fb      	str	r3, [r7, #28]
 800b8b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b8:	69b9      	ldr	r1, [r7, #24]
 800b8ba:	69fa      	ldr	r2, [r7, #28]
 800b8bc:	e841 2300 	strex	r3, r2, [r1]
 800b8c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d1e6      	bne.n	800b896 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	69db      	ldr	r3, [r3, #28]
 800b8ce:	f003 0310 	and.w	r3, r3, #16
 800b8d2:	2b10      	cmp	r3, #16
 800b8d4:	d103      	bne.n	800b8de <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2210      	movs	r2, #16
 800b8dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7ff f9e4 	bl	800acb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8ec:	e00b      	b.n	800b906 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f7f7 fbfa 	bl	80030e8 <HAL_UART_RxCpltCallback>
}
 800b8f4:	e007      	b.n	800b906 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	699a      	ldr	r2, [r3, #24]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f042 0208 	orr.w	r2, r2, #8
 800b904:	619a      	str	r2, [r3, #24]
}
 800b906:	bf00      	nop
 800b908:	3758      	adds	r7, #88	; 0x58
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}

0800b90e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b096      	sub	sp, #88	; 0x58
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b91c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b926:	2b22      	cmp	r3, #34	; 0x22
 800b928:	f040 8098 	bne.w	800ba5c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b932:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b93c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b940:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b944:	4013      	ands	r3, r2
 800b946:	b29a      	uxth	r2, r3
 800b948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b94a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b950:	1c9a      	adds	r2, r3, #2
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	3b01      	subs	r3, #1
 800b960:	b29a      	uxth	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b96e:	b29b      	uxth	r3, r3
 800b970:	2b00      	cmp	r3, #0
 800b972:	d17b      	bne.n	800ba6c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97c:	e853 3f00 	ldrex	r3, [r3]
 800b980:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b988:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	461a      	mov	r2, r3
 800b990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b992:	643b      	str	r3, [r7, #64]	; 0x40
 800b994:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b99a:	e841 2300 	strex	r3, r2, [r1]
 800b99e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1e6      	bne.n	800b974 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ae:	6a3b      	ldr	r3, [r7, #32]
 800b9b0:	e853 3f00 	ldrex	r3, [r3]
 800b9b4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	f023 0301 	bic.w	r3, r3, #1
 800b9bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3308      	adds	r3, #8
 800b9c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9ce:	e841 2300 	strex	r3, r2, [r1]
 800b9d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1e5      	bne.n	800b9a6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d12e      	bne.n	800ba54 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	e853 3f00 	ldrex	r3, [r3]
 800ba08:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	f023 0310 	bic.w	r3, r3, #16
 800ba10:	647b      	str	r3, [r7, #68]	; 0x44
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	461a      	mov	r2, r3
 800ba18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba1a:	61bb      	str	r3, [r7, #24]
 800ba1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba1e:	6979      	ldr	r1, [r7, #20]
 800ba20:	69ba      	ldr	r2, [r7, #24]
 800ba22:	e841 2300 	strex	r3, r2, [r1]
 800ba26:	613b      	str	r3, [r7, #16]
   return(result);
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d1e6      	bne.n	800b9fc <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	69db      	ldr	r3, [r3, #28]
 800ba34:	f003 0310 	and.w	r3, r3, #16
 800ba38:	2b10      	cmp	r3, #16
 800ba3a:	d103      	bne.n	800ba44 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	2210      	movs	r2, #16
 800ba42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f7ff f931 	bl	800acb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ba52:	e00b      	b.n	800ba6c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f7f7 fb47 	bl	80030e8 <HAL_UART_RxCpltCallback>
}
 800ba5a:	e007      	b.n	800ba6c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	699a      	ldr	r2, [r3, #24]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f042 0208 	orr.w	r2, r2, #8
 800ba6a:	619a      	str	r2, [r3, #24]
}
 800ba6c:	bf00      	nop
 800ba6e:	3758      	adds	r7, #88	; 0x58
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba74:	b084      	sub	sp, #16
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
 800ba7e:	f107 001c 	add.w	r0, r7, #28
 800ba82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d120      	bne.n	800bace <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	68da      	ldr	r2, [r3, #12]
 800ba9c:	4b20      	ldr	r3, [pc, #128]	; (800bb20 <USB_CoreInit+0xac>)
 800ba9e:	4013      	ands	r3, r2
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d105      	bne.n	800bac2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f001 fbee 	bl	800d2a4 <USB_CoreReset>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]
 800bacc:	e010      	b.n	800baf0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f001 fbe2 	bl	800d2a4 <USB_CoreReset>
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d10b      	bne.n	800bb0e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	689b      	ldr	r3, [r3, #8]
 800bafa:	f043 0206 	orr.w	r2, r3, #6
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	689b      	ldr	r3, [r3, #8]
 800bb06:	f043 0220 	orr.w	r2, r3, #32
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb1a:	b004      	add	sp, #16
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	ffbdffbf 	.word	0xffbdffbf

0800bb24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bb32:	79fb      	ldrb	r3, [r7, #7]
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d165      	bne.n	800bc04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	4a41      	ldr	r2, [pc, #260]	; (800bc40 <USB_SetTurnaroundTime+0x11c>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d906      	bls.n	800bb4e <USB_SetTurnaroundTime+0x2a>
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	4a40      	ldr	r2, [pc, #256]	; (800bc44 <USB_SetTurnaroundTime+0x120>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d202      	bcs.n	800bb4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bb48:	230f      	movs	r3, #15
 800bb4a:	617b      	str	r3, [r7, #20]
 800bb4c:	e062      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	4a3c      	ldr	r2, [pc, #240]	; (800bc44 <USB_SetTurnaroundTime+0x120>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d306      	bcc.n	800bb64 <USB_SetTurnaroundTime+0x40>
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	4a3b      	ldr	r2, [pc, #236]	; (800bc48 <USB_SetTurnaroundTime+0x124>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d202      	bcs.n	800bb64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bb5e:	230e      	movs	r3, #14
 800bb60:	617b      	str	r3, [r7, #20]
 800bb62:	e057      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	4a38      	ldr	r2, [pc, #224]	; (800bc48 <USB_SetTurnaroundTime+0x124>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d306      	bcc.n	800bb7a <USB_SetTurnaroundTime+0x56>
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	4a37      	ldr	r2, [pc, #220]	; (800bc4c <USB_SetTurnaroundTime+0x128>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d202      	bcs.n	800bb7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bb74:	230d      	movs	r3, #13
 800bb76:	617b      	str	r3, [r7, #20]
 800bb78:	e04c      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	4a33      	ldr	r2, [pc, #204]	; (800bc4c <USB_SetTurnaroundTime+0x128>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d306      	bcc.n	800bb90 <USB_SetTurnaroundTime+0x6c>
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	4a32      	ldr	r2, [pc, #200]	; (800bc50 <USB_SetTurnaroundTime+0x12c>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d802      	bhi.n	800bb90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bb8a:	230c      	movs	r3, #12
 800bb8c:	617b      	str	r3, [r7, #20]
 800bb8e:	e041      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	4a2f      	ldr	r2, [pc, #188]	; (800bc50 <USB_SetTurnaroundTime+0x12c>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	d906      	bls.n	800bba6 <USB_SetTurnaroundTime+0x82>
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	4a2e      	ldr	r2, [pc, #184]	; (800bc54 <USB_SetTurnaroundTime+0x130>)
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d802      	bhi.n	800bba6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bba0:	230b      	movs	r3, #11
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	e036      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	4a2a      	ldr	r2, [pc, #168]	; (800bc54 <USB_SetTurnaroundTime+0x130>)
 800bbaa:	4293      	cmp	r3, r2
 800bbac:	d906      	bls.n	800bbbc <USB_SetTurnaroundTime+0x98>
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	4a29      	ldr	r2, [pc, #164]	; (800bc58 <USB_SetTurnaroundTime+0x134>)
 800bbb2:	4293      	cmp	r3, r2
 800bbb4:	d802      	bhi.n	800bbbc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bbb6:	230a      	movs	r3, #10
 800bbb8:	617b      	str	r3, [r7, #20]
 800bbba:	e02b      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	4a26      	ldr	r2, [pc, #152]	; (800bc58 <USB_SetTurnaroundTime+0x134>)
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d906      	bls.n	800bbd2 <USB_SetTurnaroundTime+0xae>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	4a25      	ldr	r2, [pc, #148]	; (800bc5c <USB_SetTurnaroundTime+0x138>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d202      	bcs.n	800bbd2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bbcc:	2309      	movs	r3, #9
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	e020      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	4a21      	ldr	r2, [pc, #132]	; (800bc5c <USB_SetTurnaroundTime+0x138>)
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d306      	bcc.n	800bbe8 <USB_SetTurnaroundTime+0xc4>
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	4a20      	ldr	r2, [pc, #128]	; (800bc60 <USB_SetTurnaroundTime+0x13c>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d802      	bhi.n	800bbe8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800bbe2:	2308      	movs	r3, #8
 800bbe4:	617b      	str	r3, [r7, #20]
 800bbe6:	e015      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	4a1d      	ldr	r2, [pc, #116]	; (800bc60 <USB_SetTurnaroundTime+0x13c>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d906      	bls.n	800bbfe <USB_SetTurnaroundTime+0xda>
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	4a1c      	ldr	r2, [pc, #112]	; (800bc64 <USB_SetTurnaroundTime+0x140>)
 800bbf4:	4293      	cmp	r3, r2
 800bbf6:	d202      	bcs.n	800bbfe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800bbf8:	2307      	movs	r3, #7
 800bbfa:	617b      	str	r3, [r7, #20]
 800bbfc:	e00a      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800bbfe:	2306      	movs	r3, #6
 800bc00:	617b      	str	r3, [r7, #20]
 800bc02:	e007      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800bc04:	79fb      	ldrb	r3, [r7, #7]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d102      	bne.n	800bc10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800bc0a:	2309      	movs	r3, #9
 800bc0c:	617b      	str	r3, [r7, #20]
 800bc0e:	e001      	b.n	800bc14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bc10:	2309      	movs	r3, #9
 800bc12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	68da      	ldr	r2, [r3, #12]
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	029b      	lsls	r3, r3, #10
 800bc28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bc2c:	431a      	orrs	r2, r3
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	371c      	adds	r7, #28
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	00d8acbf 	.word	0x00d8acbf
 800bc44:	00e4e1c0 	.word	0x00e4e1c0
 800bc48:	00f42400 	.word	0x00f42400
 800bc4c:	01067380 	.word	0x01067380
 800bc50:	011a499f 	.word	0x011a499f
 800bc54:	01312cff 	.word	0x01312cff
 800bc58:	014ca43f 	.word	0x014ca43f
 800bc5c:	016e3600 	.word	0x016e3600
 800bc60:	01a6ab1f 	.word	0x01a6ab1f
 800bc64:	01e84800 	.word	0x01e84800

0800bc68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	f043 0201 	orr.w	r2, r3, #1
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	f023 0201 	bic.w	r2, r3, #1
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	68db      	ldr	r3, [r3, #12]
 800bcc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bcc8:	78fb      	ldrb	r3, [r7, #3]
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d115      	bne.n	800bcfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bcda:	2001      	movs	r0, #1
 800bcdc:	f7f8 fde8 	bl	80048b0 <HAL_Delay>
      ms++;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3301      	adds	r3, #1
 800bce4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f001 fa4b 	bl	800d182 <USB_GetMode>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d01e      	beq.n	800bd30 <USB_SetCurrentMode+0x84>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b31      	cmp	r3, #49	; 0x31
 800bcf6:	d9f0      	bls.n	800bcda <USB_SetCurrentMode+0x2e>
 800bcf8:	e01a      	b.n	800bd30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bcfa:	78fb      	ldrb	r3, [r7, #3]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d115      	bne.n	800bd2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bd0c:	2001      	movs	r0, #1
 800bd0e:	f7f8 fdcf 	bl	80048b0 <HAL_Delay>
      ms++;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3301      	adds	r3, #1
 800bd16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f001 fa32 	bl	800d182 <USB_GetMode>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d005      	beq.n	800bd30 <USB_SetCurrentMode+0x84>
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2b31      	cmp	r3, #49	; 0x31
 800bd28:	d9f0      	bls.n	800bd0c <USB_SetCurrentMode+0x60>
 800bd2a:	e001      	b.n	800bd30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e005      	b.n	800bd3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2b32      	cmp	r3, #50	; 0x32
 800bd34:	d101      	bne.n	800bd3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd44:	b084      	sub	sp, #16
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b086      	sub	sp, #24
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
 800bd4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bd52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bd5e:	2300      	movs	r3, #0
 800bd60:	613b      	str	r3, [r7, #16]
 800bd62:	e009      	b.n	800bd78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	693b      	ldr	r3, [r7, #16]
 800bd68:	3340      	adds	r3, #64	; 0x40
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	4413      	add	r3, r2
 800bd6e:	2200      	movs	r2, #0
 800bd70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	3301      	adds	r3, #1
 800bd76:	613b      	str	r3, [r7, #16]
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	2b0e      	cmp	r3, #14
 800bd7c:	d9f2      	bls.n	800bd64 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bd7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d11c      	bne.n	800bdbe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bd92:	f043 0302 	orr.w	r3, r3, #2
 800bd96:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd9c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	601a      	str	r2, [r3, #0]
 800bdbc:	e005      	b.n	800bdca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bddc:	4619      	mov	r1, r3
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bde4:	461a      	mov	r2, r3
 800bde6:	680b      	ldr	r3, [r1, #0]
 800bde8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d10c      	bne.n	800be0a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d104      	bne.n	800be00 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 f965 	bl	800c0c8 <USB_SetDevSpeed>
 800bdfe:	e008      	b.n	800be12 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800be00:	2101      	movs	r1, #1
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 f960 	bl	800c0c8 <USB_SetDevSpeed>
 800be08:	e003      	b.n	800be12 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800be0a:	2103      	movs	r1, #3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f000 f95b 	bl	800c0c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be12:	2110      	movs	r1, #16
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 f8f3 	bl	800c000 <USB_FlushTxFifo>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800be20:	2301      	movs	r3, #1
 800be22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 f91f 	bl	800c068 <USB_FlushRxFifo>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800be30:	2301      	movs	r3, #1
 800be32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be3a:	461a      	mov	r2, r3
 800be3c:	2300      	movs	r3, #0
 800be3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be46:	461a      	mov	r2, r3
 800be48:	2300      	movs	r3, #0
 800be4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be52:	461a      	mov	r2, r3
 800be54:	2300      	movs	r3, #0
 800be56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be58:	2300      	movs	r3, #0
 800be5a:	613b      	str	r3, [r7, #16]
 800be5c:	e043      	b.n	800bee6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	015a      	lsls	r2, r3, #5
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	4413      	add	r3, r2
 800be66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be74:	d118      	bne.n	800bea8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10a      	bne.n	800be92 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	015a      	lsls	r2, r3, #5
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	4413      	add	r3, r2
 800be84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be88:	461a      	mov	r2, r3
 800be8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	e013      	b.n	800beba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be9e:	461a      	mov	r2, r3
 800bea0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	e008      	b.n	800beba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	015a      	lsls	r2, r3, #5
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	4413      	add	r3, r2
 800beb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beb4:	461a      	mov	r2, r3
 800beb6:	2300      	movs	r3, #0
 800beb8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	015a      	lsls	r2, r3, #5
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	4413      	add	r3, r2
 800bec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec6:	461a      	mov	r2, r3
 800bec8:	2300      	movs	r3, #0
 800beca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	015a      	lsls	r2, r3, #5
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	4413      	add	r3, r2
 800bed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bed8:	461a      	mov	r2, r3
 800beda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bede:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	3301      	adds	r3, #1
 800bee4:	613b      	str	r3, [r7, #16]
 800bee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	429a      	cmp	r2, r3
 800beec:	d3b7      	bcc.n	800be5e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800beee:	2300      	movs	r3, #0
 800bef0:	613b      	str	r3, [r7, #16]
 800bef2:	e043      	b.n	800bf7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	015a      	lsls	r2, r3, #5
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4413      	add	r3, r2
 800befc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bf06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bf0a:	d118      	bne.n	800bf3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10a      	bne.n	800bf28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	015a      	lsls	r2, r3, #5
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	4413      	add	r3, r2
 800bf1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bf24:	6013      	str	r3, [r2, #0]
 800bf26:	e013      	b.n	800bf50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	015a      	lsls	r2, r3, #5
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4413      	add	r3, r2
 800bf30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf34:	461a      	mov	r2, r3
 800bf36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	e008      	b.n	800bf50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	015a      	lsls	r2, r3, #5
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	4413      	add	r3, r2
 800bf46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	015a      	lsls	r2, r3, #5
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	4413      	add	r3, r2
 800bf58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	2300      	movs	r3, #0
 800bf60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	015a      	lsls	r2, r3, #5
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	4413      	add	r3, r2
 800bf6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf6e:	461a      	mov	r2, r3
 800bf70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bf74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	613b      	str	r3, [r7, #16]
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d3b7      	bcc.n	800bef4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bfa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d105      	bne.n	800bfb8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	699b      	ldr	r3, [r3, #24]
 800bfb0:	f043 0210 	orr.w	r2, r3, #16
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	699a      	ldr	r2, [r3, #24]
 800bfbc:	4b0e      	ldr	r3, [pc, #56]	; (800bff8 <USB_DevInit+0x2b4>)
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bfc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d005      	beq.n	800bfd6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	f043 0208 	orr.w	r2, r3, #8
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bfd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d105      	bne.n	800bfe8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	699a      	ldr	r2, [r3, #24]
 800bfe0:	4b06      	ldr	r3, [pc, #24]	; (800bffc <USB_DevInit+0x2b8>)
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3718      	adds	r7, #24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bff4:	b004      	add	sp, #16
 800bff6:	4770      	bx	lr
 800bff8:	803c3800 	.word	0x803c3800
 800bffc:	40000004 	.word	0x40000004

0800c000 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c00a:	2300      	movs	r3, #0
 800c00c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3301      	adds	r3, #1
 800c012:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	4a13      	ldr	r2, [pc, #76]	; (800c064 <USB_FlushTxFifo+0x64>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d901      	bls.n	800c020 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c01c:	2303      	movs	r3, #3
 800c01e:	e01b      	b.n	800c058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	daf2      	bge.n	800c00e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c028:	2300      	movs	r3, #0
 800c02a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	019b      	lsls	r3, r3, #6
 800c030:	f043 0220 	orr.w	r2, r3, #32
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	3301      	adds	r3, #1
 800c03c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	4a08      	ldr	r2, [pc, #32]	; (800c064 <USB_FlushTxFifo+0x64>)
 800c042:	4293      	cmp	r3, r2
 800c044:	d901      	bls.n	800c04a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c046:	2303      	movs	r3, #3
 800c048:	e006      	b.n	800c058 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	f003 0320 	and.w	r3, r3, #32
 800c052:	2b20      	cmp	r3, #32
 800c054:	d0f0      	beq.n	800c038 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr
 800c064:	00030d40 	.word	0x00030d40

0800c068 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c070:	2300      	movs	r3, #0
 800c072:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	3301      	adds	r3, #1
 800c078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	4a11      	ldr	r2, [pc, #68]	; (800c0c4 <USB_FlushRxFifo+0x5c>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d901      	bls.n	800c086 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c082:	2303      	movs	r3, #3
 800c084:	e018      	b.n	800c0b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	691b      	ldr	r3, [r3, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	daf2      	bge.n	800c074 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c08e:	2300      	movs	r3, #0
 800c090:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2210      	movs	r2, #16
 800c096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	3301      	adds	r3, #1
 800c09c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	4a08      	ldr	r2, [pc, #32]	; (800c0c4 <USB_FlushRxFifo+0x5c>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d901      	bls.n	800c0aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e006      	b.n	800c0b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	f003 0310 	and.w	r3, r3, #16
 800c0b2:	2b10      	cmp	r3, #16
 800c0b4:	d0f0      	beq.n	800c098 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	00030d40 	.word	0x00030d40

0800c0c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0de:	681a      	ldr	r2, [r3, #0]
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	68f9      	ldr	r1, [r7, #12]
 800c0e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3714      	adds	r7, #20
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr

0800c0fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c0fa:	b480      	push	{r7}
 800c0fc:	b087      	sub	sp, #28
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	f003 0306 	and.w	r3, r3, #6
 800c112:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d102      	bne.n	800c120 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c11a:	2300      	movs	r3, #0
 800c11c:	75fb      	strb	r3, [r7, #23]
 800c11e:	e00a      	b.n	800c136 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2b02      	cmp	r3, #2
 800c124:	d002      	beq.n	800c12c <USB_GetDevSpeed+0x32>
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b06      	cmp	r3, #6
 800c12a:	d102      	bne.n	800c132 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c12c:	2302      	movs	r3, #2
 800c12e:	75fb      	strb	r3, [r7, #23]
 800c130:	e001      	b.n	800c136 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c132:	230f      	movs	r3, #15
 800c134:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c136:	7dfb      	ldrb	r3, [r7, #23]
}
 800c138:	4618      	mov	r0, r3
 800c13a:	371c      	adds	r7, #28
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	785b      	ldrb	r3, [r3, #1]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d139      	bne.n	800c1d4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c166:	69da      	ldr	r2, [r3, #28]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	f003 030f 	and.w	r3, r3, #15
 800c170:	2101      	movs	r1, #1
 800c172:	fa01 f303 	lsl.w	r3, r1, r3
 800c176:	b29b      	uxth	r3, r3
 800c178:	68f9      	ldr	r1, [r7, #12]
 800c17a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c17e:	4313      	orrs	r3, r2
 800c180:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	015a      	lsls	r2, r3, #5
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	4413      	add	r3, r2
 800c18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d153      	bne.n	800c240 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	015a      	lsls	r2, r3, #5
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	4413      	add	r3, r2
 800c1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	791b      	ldrb	r3, [r3, #4]
 800c1b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c1b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	059b      	lsls	r3, r3, #22
 800c1ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c1bc:	431a      	orrs	r2, r3
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	0159      	lsls	r1, r3, #5
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	440b      	add	r3, r1
 800c1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4b20      	ldr	r3, [pc, #128]	; (800c250 <USB_ActivateEndpoint+0x10c>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	600b      	str	r3, [r1, #0]
 800c1d2:	e035      	b.n	800c240 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1da:	69da      	ldr	r2, [r3, #28]
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	f003 030f 	and.w	r3, r3, #15
 800c1e4:	2101      	movs	r1, #1
 800c1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ea:	041b      	lsls	r3, r3, #16
 800c1ec:	68f9      	ldr	r1, [r7, #12]
 800c1ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	015a      	lsls	r2, r3, #5
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d119      	bne.n	800c240 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	015a      	lsls	r2, r3, #5
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	4413      	add	r3, r2
 800c214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	68db      	ldr	r3, [r3, #12]
 800c21e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	791b      	ldrb	r3, [r3, #4]
 800c226:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c228:	430b      	orrs	r3, r1
 800c22a:	431a      	orrs	r2, r3
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	0159      	lsls	r1, r3, #5
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	440b      	add	r3, r1
 800c234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c238:	4619      	mov	r1, r3
 800c23a:	4b05      	ldr	r3, [pc, #20]	; (800c250 <USB_ActivateEndpoint+0x10c>)
 800c23c:	4313      	orrs	r3, r2
 800c23e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c240:	2300      	movs	r3, #0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3714      	adds	r7, #20
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop
 800c250:	10008000 	.word	0x10008000

0800c254 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	785b      	ldrb	r3, [r3, #1]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d161      	bne.n	800c334 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	015a      	lsls	r2, r3, #5
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	4413      	add	r3, r2
 800c278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c286:	d11f      	bne.n	800c2c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	68ba      	ldr	r2, [r7, #8]
 800c298:	0151      	lsls	r1, r2, #5
 800c29a:	68fa      	ldr	r2, [r7, #12]
 800c29c:	440a      	add	r2, r1
 800c29e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c2a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	015a      	lsls	r2, r3, #5
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68ba      	ldr	r2, [r7, #8]
 800c2b8:	0151      	lsls	r1, r2, #5
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	440a      	add	r2, r1
 800c2be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	f003 030f 	and.w	r3, r3, #15
 800c2d8:	2101      	movs	r1, #1
 800c2da:	fa01 f303 	lsl.w	r3, r1, r3
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	43db      	mvns	r3, r3
 800c2e2:	68f9      	ldr	r1, [r7, #12]
 800c2e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2f2:	69da      	ldr	r2, [r3, #28]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	f003 030f 	and.w	r3, r3, #15
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c302:	b29b      	uxth	r3, r3
 800c304:	43db      	mvns	r3, r3
 800c306:	68f9      	ldr	r1, [r7, #12]
 800c308:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c30c:	4013      	ands	r3, r2
 800c30e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	015a      	lsls	r2, r3, #5
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	4413      	add	r3, r2
 800c318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	0159      	lsls	r1, r3, #5
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	440b      	add	r3, r1
 800c326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c32a:	4619      	mov	r1, r3
 800c32c:	4b35      	ldr	r3, [pc, #212]	; (800c404 <USB_DeactivateEndpoint+0x1b0>)
 800c32e:	4013      	ands	r3, r2
 800c330:	600b      	str	r3, [r1, #0]
 800c332:	e060      	b.n	800c3f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	015a      	lsls	r2, r3, #5
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	4413      	add	r3, r2
 800c33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c34a:	d11f      	bne.n	800c38c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	015a      	lsls	r2, r3, #5
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	4413      	add	r3, r2
 800c354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68ba      	ldr	r2, [r7, #8]
 800c35c:	0151      	lsls	r1, r2, #5
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	440a      	add	r2, r1
 800c362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c366:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c36a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	015a      	lsls	r2, r3, #5
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	4413      	add	r3, r2
 800c374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	68ba      	ldr	r2, [r7, #8]
 800c37c:	0151      	lsls	r1, r2, #5
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	440a      	add	r2, r1
 800c382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c386:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c38a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c392:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	f003 030f 	and.w	r3, r3, #15
 800c39c:	2101      	movs	r1, #1
 800c39e:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a2:	041b      	lsls	r3, r3, #16
 800c3a4:	43db      	mvns	r3, r3
 800c3a6:	68f9      	ldr	r1, [r7, #12]
 800c3a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3b6:	69da      	ldr	r2, [r3, #28]
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	f003 030f 	and.w	r3, r3, #15
 800c3c0:	2101      	movs	r1, #1
 800c3c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c3c6:	041b      	lsls	r3, r3, #16
 800c3c8:	43db      	mvns	r3, r3
 800c3ca:	68f9      	ldr	r1, [r7, #12]
 800c3cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	681a      	ldr	r2, [r3, #0]
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	0159      	lsls	r1, r3, #5
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	440b      	add	r3, r1
 800c3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	4b05      	ldr	r3, [pc, #20]	; (800c408 <USB_DeactivateEndpoint+0x1b4>)
 800c3f2:	4013      	ands	r3, r2
 800c3f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr
 800c404:	ec337800 	.word	0xec337800
 800c408:	eff37800 	.word	0xeff37800

0800c40c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b08a      	sub	sp, #40	; 0x28
 800c410:	af02      	add	r7, sp, #8
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	4613      	mov	r3, r2
 800c418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	785b      	ldrb	r3, [r3, #1]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	f040 8163 	bne.w	800c6f4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	699b      	ldr	r3, [r3, #24]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d132      	bne.n	800c49c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c436:	69bb      	ldr	r3, [r7, #24]
 800c438:	015a      	lsls	r2, r3, #5
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	4413      	add	r3, r2
 800c43e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c442:	691a      	ldr	r2, [r3, #16]
 800c444:	69bb      	ldr	r3, [r7, #24]
 800c446:	0159      	lsls	r1, r3, #5
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	440b      	add	r3, r1
 800c44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c450:	4619      	mov	r1, r3
 800c452:	4ba5      	ldr	r3, [pc, #660]	; (800c6e8 <USB_EPStartXfer+0x2dc>)
 800c454:	4013      	ands	r3, r2
 800c456:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	015a      	lsls	r2, r3, #5
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	4413      	add	r3, r2
 800c460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c464:	691b      	ldr	r3, [r3, #16]
 800c466:	69ba      	ldr	r2, [r7, #24]
 800c468:	0151      	lsls	r1, r2, #5
 800c46a:	69fa      	ldr	r2, [r7, #28]
 800c46c:	440a      	add	r2, r1
 800c46e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	015a      	lsls	r2, r3, #5
 800c47c:	69fb      	ldr	r3, [r7, #28]
 800c47e:	4413      	add	r3, r2
 800c480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c484:	691a      	ldr	r2, [r3, #16]
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	0159      	lsls	r1, r3, #5
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	440b      	add	r3, r1
 800c48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c492:	4619      	mov	r1, r3
 800c494:	4b95      	ldr	r3, [pc, #596]	; (800c6ec <USB_EPStartXfer+0x2e0>)
 800c496:	4013      	ands	r3, r2
 800c498:	610b      	str	r3, [r1, #16]
 800c49a:	e074      	b.n	800c586 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	015a      	lsls	r2, r3, #5
 800c4a0:	69fb      	ldr	r3, [r7, #28]
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4a8:	691a      	ldr	r2, [r3, #16]
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	0159      	lsls	r1, r3, #5
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	440b      	add	r3, r1
 800c4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b6:	4619      	mov	r1, r3
 800c4b8:	4b8c      	ldr	r3, [pc, #560]	; (800c6ec <USB_EPStartXfer+0x2e0>)
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	015a      	lsls	r2, r3, #5
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ca:	691a      	ldr	r2, [r3, #16]
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	0159      	lsls	r1, r3, #5
 800c4d0:	69fb      	ldr	r3, [r7, #28]
 800c4d2:	440b      	add	r3, r1
 800c4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d8:	4619      	mov	r1, r3
 800c4da:	4b83      	ldr	r3, [pc, #524]	; (800c6e8 <USB_EPStartXfer+0x2dc>)
 800c4dc:	4013      	ands	r3, r2
 800c4de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c4e0:	69bb      	ldr	r3, [r7, #24]
 800c4e2:	015a      	lsls	r2, r3, #5
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	6999      	ldr	r1, [r3, #24]
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	68db      	ldr	r3, [r3, #12]
 800c4f6:	440b      	add	r3, r1
 800c4f8:	1e59      	subs	r1, r3, #1
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800c502:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c504:	4b7a      	ldr	r3, [pc, #488]	; (800c6f0 <USB_EPStartXfer+0x2e4>)
 800c506:	400b      	ands	r3, r1
 800c508:	69b9      	ldr	r1, [r7, #24]
 800c50a:	0148      	lsls	r0, r1, #5
 800c50c:	69f9      	ldr	r1, [r7, #28]
 800c50e:	4401      	add	r1, r0
 800c510:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c514:	4313      	orrs	r3, r2
 800c516:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	015a      	lsls	r2, r3, #5
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	4413      	add	r3, r2
 800c520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c524:	691a      	ldr	r2, [r3, #16]
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	699b      	ldr	r3, [r3, #24]
 800c52a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c52e:	69b9      	ldr	r1, [r7, #24]
 800c530:	0148      	lsls	r0, r1, #5
 800c532:	69f9      	ldr	r1, [r7, #28]
 800c534:	4401      	add	r1, r0
 800c536:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c53a:	4313      	orrs	r3, r2
 800c53c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	791b      	ldrb	r3, [r3, #4]
 800c542:	2b01      	cmp	r3, #1
 800c544:	d11f      	bne.n	800c586 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	015a      	lsls	r2, r3, #5
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	4413      	add	r3, r2
 800c54e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c552:	691b      	ldr	r3, [r3, #16]
 800c554:	69ba      	ldr	r2, [r7, #24]
 800c556:	0151      	lsls	r1, r2, #5
 800c558:	69fa      	ldr	r2, [r7, #28]
 800c55a:	440a      	add	r2, r1
 800c55c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c560:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c564:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	015a      	lsls	r2, r3, #5
 800c56a:	69fb      	ldr	r3, [r7, #28]
 800c56c:	4413      	add	r3, r2
 800c56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	69ba      	ldr	r2, [r7, #24]
 800c576:	0151      	lsls	r1, r2, #5
 800c578:	69fa      	ldr	r2, [r7, #28]
 800c57a:	440a      	add	r2, r1
 800c57c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c580:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c584:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c586:	79fb      	ldrb	r3, [r7, #7]
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d14b      	bne.n	800c624 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d009      	beq.n	800c5a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c594:	69bb      	ldr	r3, [r7, #24]
 800c596:	015a      	lsls	r2, r3, #5
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	4413      	add	r3, r2
 800c59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	695b      	ldr	r3, [r3, #20]
 800c5a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	791b      	ldrb	r3, [r3, #4]
 800c5ac:	2b01      	cmp	r3, #1
 800c5ae:	d128      	bne.n	800c602 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5b6:	689b      	ldr	r3, [r3, #8]
 800c5b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d110      	bne.n	800c5e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	015a      	lsls	r2, r3, #5
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	69ba      	ldr	r2, [r7, #24]
 800c5d0:	0151      	lsls	r1, r2, #5
 800c5d2:	69fa      	ldr	r2, [r7, #28]
 800c5d4:	440a      	add	r2, r1
 800c5d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	e00f      	b.n	800c602 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	015a      	lsls	r2, r3, #5
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	4413      	add	r3, r2
 800c5ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	69ba      	ldr	r2, [r7, #24]
 800c5f2:	0151      	lsls	r1, r2, #5
 800c5f4:	69fa      	ldr	r2, [r7, #28]
 800c5f6:	440a      	add	r2, r1
 800c5f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c600:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	015a      	lsls	r2, r3, #5
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	4413      	add	r3, r2
 800c60a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	69ba      	ldr	r2, [r7, #24]
 800c612:	0151      	lsls	r1, r2, #5
 800c614:	69fa      	ldr	r2, [r7, #28]
 800c616:	440a      	add	r2, r1
 800c618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c61c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c620:	6013      	str	r3, [r2, #0]
 800c622:	e137      	b.n	800c894 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	015a      	lsls	r2, r3, #5
 800c628:	69fb      	ldr	r3, [r7, #28]
 800c62a:	4413      	add	r3, r2
 800c62c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	69ba      	ldr	r2, [r7, #24]
 800c634:	0151      	lsls	r1, r2, #5
 800c636:	69fa      	ldr	r2, [r7, #28]
 800c638:	440a      	add	r2, r1
 800c63a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c63e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c642:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	791b      	ldrb	r3, [r3, #4]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d015      	beq.n	800c678 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	2b00      	cmp	r3, #0
 800c652:	f000 811f 	beq.w	800c894 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c656:	69fb      	ldr	r3, [r7, #28]
 800c658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c65c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	f003 030f 	and.w	r3, r3, #15
 800c666:	2101      	movs	r1, #1
 800c668:	fa01 f303 	lsl.w	r3, r1, r3
 800c66c:	69f9      	ldr	r1, [r7, #28]
 800c66e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c672:	4313      	orrs	r3, r2
 800c674:	634b      	str	r3, [r1, #52]	; 0x34
 800c676:	e10d      	b.n	800c894 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c684:	2b00      	cmp	r3, #0
 800c686:	d110      	bne.n	800c6aa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	69ba      	ldr	r2, [r7, #24]
 800c698:	0151      	lsls	r1, r2, #5
 800c69a:	69fa      	ldr	r2, [r7, #28]
 800c69c:	440a      	add	r2, r1
 800c69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c6a6:	6013      	str	r3, [r2, #0]
 800c6a8:	e00f      	b.n	800c6ca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	015a      	lsls	r2, r3, #5
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	69ba      	ldr	r2, [r7, #24]
 800c6ba:	0151      	lsls	r1, r2, #5
 800c6bc:	69fa      	ldr	r2, [r7, #28]
 800c6be:	440a      	add	r2, r1
 800c6c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	6919      	ldr	r1, [r3, #16]
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	781a      	ldrb	r2, [r3, #0]
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	699b      	ldr	r3, [r3, #24]
 800c6d6:	b298      	uxth	r0, r3
 800c6d8:	79fb      	ldrb	r3, [r7, #7]
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	4603      	mov	r3, r0
 800c6de:	68f8      	ldr	r0, [r7, #12]
 800c6e0:	f000 faea 	bl	800ccb8 <USB_WritePacket>
 800c6e4:	e0d6      	b.n	800c894 <USB_EPStartXfer+0x488>
 800c6e6:	bf00      	nop
 800c6e8:	e007ffff 	.word	0xe007ffff
 800c6ec:	fff80000 	.word	0xfff80000
 800c6f0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	015a      	lsls	r2, r3, #5
 800c6f8:	69fb      	ldr	r3, [r7, #28]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c700:	691a      	ldr	r2, [r3, #16]
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	0159      	lsls	r1, r3, #5
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	440b      	add	r3, r1
 800c70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c70e:	4619      	mov	r1, r3
 800c710:	4b63      	ldr	r3, [pc, #396]	; (800c8a0 <USB_EPStartXfer+0x494>)
 800c712:	4013      	ands	r3, r2
 800c714:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	015a      	lsls	r2, r3, #5
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	4413      	add	r3, r2
 800c71e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c722:	691a      	ldr	r2, [r3, #16]
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	0159      	lsls	r1, r3, #5
 800c728:	69fb      	ldr	r3, [r7, #28]
 800c72a:	440b      	add	r3, r1
 800c72c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c730:	4619      	mov	r1, r3
 800c732:	4b5c      	ldr	r3, [pc, #368]	; (800c8a4 <USB_EPStartXfer+0x498>)
 800c734:	4013      	ands	r3, r2
 800c736:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d123      	bne.n	800c788 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c74c:	691a      	ldr	r2, [r3, #16]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c756:	69b9      	ldr	r1, [r7, #24]
 800c758:	0148      	lsls	r0, r1, #5
 800c75a:	69f9      	ldr	r1, [r7, #28]
 800c75c:	4401      	add	r1, r0
 800c75e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c762:	4313      	orrs	r3, r2
 800c764:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	015a      	lsls	r2, r3, #5
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	4413      	add	r3, r2
 800c76e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	69ba      	ldr	r2, [r7, #24]
 800c776:	0151      	lsls	r1, r2, #5
 800c778:	69fa      	ldr	r2, [r7, #28]
 800c77a:	440a      	add	r2, r1
 800c77c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c780:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c784:	6113      	str	r3, [r2, #16]
 800c786:	e037      	b.n	800c7f8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	699a      	ldr	r2, [r3, #24]
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	4413      	add	r3, r2
 800c792:	1e5a      	subs	r2, r3, #1
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	fbb2 f3f3 	udiv	r3, r2, r3
 800c79c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	8afa      	ldrh	r2, [r7, #22]
 800c7a4:	fb03 f202 	mul.w	r2, r3, r2
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	015a      	lsls	r2, r3, #5
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	4413      	add	r3, r2
 800c7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7b8:	691a      	ldr	r2, [r3, #16]
 800c7ba:	8afb      	ldrh	r3, [r7, #22]
 800c7bc:	04d9      	lsls	r1, r3, #19
 800c7be:	4b3a      	ldr	r3, [pc, #232]	; (800c8a8 <USB_EPStartXfer+0x49c>)
 800c7c0:	400b      	ands	r3, r1
 800c7c2:	69b9      	ldr	r1, [r7, #24]
 800c7c4:	0148      	lsls	r0, r1, #5
 800c7c6:	69f9      	ldr	r1, [r7, #28]
 800c7c8:	4401      	add	r1, r0
 800c7ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c7d2:	69bb      	ldr	r3, [r7, #24]
 800c7d4:	015a      	lsls	r2, r3, #5
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	4413      	add	r3, r2
 800c7da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7de:	691a      	ldr	r2, [r3, #16]
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	69db      	ldr	r3, [r3, #28]
 800c7e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7e8:	69b9      	ldr	r1, [r7, #24]
 800c7ea:	0148      	lsls	r0, r1, #5
 800c7ec:	69f9      	ldr	r1, [r7, #28]
 800c7ee:	4401      	add	r1, r0
 800c7f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c7f8:	79fb      	ldrb	r3, [r7, #7]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d10d      	bne.n	800c81a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d009      	beq.n	800c81a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	6919      	ldr	r1, [r3, #16]
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	015a      	lsls	r2, r3, #5
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	4413      	add	r3, r2
 800c812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c816:	460a      	mov	r2, r1
 800c818:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	791b      	ldrb	r3, [r3, #4]
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d128      	bne.n	800c874 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d110      	bne.n	800c854 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	015a      	lsls	r2, r3, #5
 800c836:	69fb      	ldr	r3, [r7, #28]
 800c838:	4413      	add	r3, r2
 800c83a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	69ba      	ldr	r2, [r7, #24]
 800c842:	0151      	lsls	r1, r2, #5
 800c844:	69fa      	ldr	r2, [r7, #28]
 800c846:	440a      	add	r2, r1
 800c848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c84c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c850:	6013      	str	r3, [r2, #0]
 800c852:	e00f      	b.n	800c874 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c854:	69bb      	ldr	r3, [r7, #24]
 800c856:	015a      	lsls	r2, r3, #5
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	4413      	add	r3, r2
 800c85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	69ba      	ldr	r2, [r7, #24]
 800c864:	0151      	lsls	r1, r2, #5
 800c866:	69fa      	ldr	r2, [r7, #28]
 800c868:	440a      	add	r2, r1
 800c86a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c86e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c872:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	015a      	lsls	r2, r3, #5
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	4413      	add	r3, r2
 800c87c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	69ba      	ldr	r2, [r7, #24]
 800c884:	0151      	lsls	r1, r2, #5
 800c886:	69fa      	ldr	r2, [r7, #28]
 800c888:	440a      	add	r2, r1
 800c88a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c88e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c892:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3720      	adds	r7, #32
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	fff80000 	.word	0xfff80000
 800c8a4:	e007ffff 	.word	0xe007ffff
 800c8a8:	1ff80000 	.word	0x1ff80000

0800c8ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b087      	sub	sp, #28
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	60b9      	str	r1, [r7, #8]
 800c8b6:	4613      	mov	r3, r2
 800c8b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	785b      	ldrb	r3, [r3, #1]
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	f040 80ce 	bne.w	800ca6a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d132      	bne.n	800c93c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	015a      	lsls	r2, r3, #5
 800c8da:	697b      	ldr	r3, [r7, #20]
 800c8dc:	4413      	add	r3, r2
 800c8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8e2:	691a      	ldr	r2, [r3, #16]
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	0159      	lsls	r1, r3, #5
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	440b      	add	r3, r1
 800c8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	4b9a      	ldr	r3, [pc, #616]	; (800cb5c <USB_EP0StartXfer+0x2b0>)
 800c8f4:	4013      	ands	r3, r2
 800c8f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	015a      	lsls	r2, r3, #5
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	4413      	add	r3, r2
 800c900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c904:	691b      	ldr	r3, [r3, #16]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	0151      	lsls	r1, r2, #5
 800c90a:	697a      	ldr	r2, [r7, #20]
 800c90c:	440a      	add	r2, r1
 800c90e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c912:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c916:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	015a      	lsls	r2, r3, #5
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	4413      	add	r3, r2
 800c920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c924:	691a      	ldr	r2, [r3, #16]
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	0159      	lsls	r1, r3, #5
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	440b      	add	r3, r1
 800c92e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c932:	4619      	mov	r1, r3
 800c934:	4b8a      	ldr	r3, [pc, #552]	; (800cb60 <USB_EP0StartXfer+0x2b4>)
 800c936:	4013      	ands	r3, r2
 800c938:	610b      	str	r3, [r1, #16]
 800c93a:	e04e      	b.n	800c9da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	697b      	ldr	r3, [r7, #20]
 800c942:	4413      	add	r3, r2
 800c944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c948:	691a      	ldr	r2, [r3, #16]
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	0159      	lsls	r1, r3, #5
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	440b      	add	r3, r1
 800c952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c956:	4619      	mov	r1, r3
 800c958:	4b81      	ldr	r3, [pc, #516]	; (800cb60 <USB_EP0StartXfer+0x2b4>)
 800c95a:	4013      	ands	r3, r2
 800c95c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	015a      	lsls	r2, r3, #5
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	4413      	add	r3, r2
 800c966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c96a:	691a      	ldr	r2, [r3, #16]
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	0159      	lsls	r1, r3, #5
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	440b      	add	r3, r1
 800c974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c978:	4619      	mov	r1, r3
 800c97a:	4b78      	ldr	r3, [pc, #480]	; (800cb5c <USB_EP0StartXfer+0x2b0>)
 800c97c:	4013      	ands	r3, r2
 800c97e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	699a      	ldr	r2, [r3, #24]
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	68db      	ldr	r3, [r3, #12]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d903      	bls.n	800c994 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	68da      	ldr	r2, [r3, #12]
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	015a      	lsls	r2, r3, #5
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	4413      	add	r3, r2
 800c99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	0151      	lsls	r1, r2, #5
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	440a      	add	r2, r1
 800c9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c9b4:	693b      	ldr	r3, [r7, #16]
 800c9b6:	015a      	lsls	r2, r3, #5
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c0:	691a      	ldr	r2, [r3, #16]
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9ca:	6939      	ldr	r1, [r7, #16]
 800c9cc:	0148      	lsls	r0, r1, #5
 800c9ce:	6979      	ldr	r1, [r7, #20]
 800c9d0:	4401      	add	r1, r0
 800c9d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c9da:	79fb      	ldrb	r3, [r7, #7]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d11e      	bne.n	800ca1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	695b      	ldr	r3, [r3, #20]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d009      	beq.n	800c9fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	015a      	lsls	r2, r3, #5
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	695b      	ldr	r3, [r3, #20]
 800c9fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	015a      	lsls	r2, r3, #5
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	4413      	add	r3, r2
 800ca04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	693a      	ldr	r2, [r7, #16]
 800ca0c:	0151      	lsls	r1, r2, #5
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	440a      	add	r2, r1
 800ca12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca1a:	6013      	str	r3, [r2, #0]
 800ca1c:	e097      	b.n	800cb4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	015a      	lsls	r2, r3, #5
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	4413      	add	r3, r2
 800ca26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	693a      	ldr	r2, [r7, #16]
 800ca2e:	0151      	lsls	r1, r2, #5
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	440a      	add	r2, r1
 800ca34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ca3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	699b      	ldr	r3, [r3, #24]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f000 8083 	beq.w	800cb4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	f003 030f 	and.w	r3, r3, #15
 800ca58:	2101      	movs	r1, #1
 800ca5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca5e:	6979      	ldr	r1, [r7, #20]
 800ca60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca64:	4313      	orrs	r3, r2
 800ca66:	634b      	str	r3, [r1, #52]	; 0x34
 800ca68:	e071      	b.n	800cb4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	015a      	lsls	r2, r3, #5
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	4413      	add	r3, r2
 800ca72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca76:	691a      	ldr	r2, [r3, #16]
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	0159      	lsls	r1, r3, #5
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	440b      	add	r3, r1
 800ca80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca84:	4619      	mov	r1, r3
 800ca86:	4b36      	ldr	r3, [pc, #216]	; (800cb60 <USB_EP0StartXfer+0x2b4>)
 800ca88:	4013      	ands	r3, r2
 800ca8a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ca8c:	693b      	ldr	r3, [r7, #16]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca98:	691a      	ldr	r2, [r3, #16]
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	0159      	lsls	r1, r3, #5
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	440b      	add	r3, r1
 800caa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa6:	4619      	mov	r1, r3
 800caa8:	4b2c      	ldr	r3, [pc, #176]	; (800cb5c <USB_EP0StartXfer+0x2b0>)
 800caaa:	4013      	ands	r3, r2
 800caac:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d003      	beq.n	800cabe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	68da      	ldr	r2, [r3, #12]
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	68da      	ldr	r2, [r3, #12]
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cac6:	693b      	ldr	r3, [r7, #16]
 800cac8:	015a      	lsls	r2, r3, #5
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	4413      	add	r3, r2
 800cace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	0151      	lsls	r1, r2, #5
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	440a      	add	r2, r1
 800cadc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cae0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	015a      	lsls	r2, r3, #5
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	4413      	add	r3, r2
 800caee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf2:	691a      	ldr	r2, [r3, #16]
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	69db      	ldr	r3, [r3, #28]
 800caf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cafc:	6939      	ldr	r1, [r7, #16]
 800cafe:	0148      	lsls	r0, r1, #5
 800cb00:	6979      	ldr	r1, [r7, #20]
 800cb02:	4401      	add	r1, r0
 800cb04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cb0c:	79fb      	ldrb	r3, [r7, #7]
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d10d      	bne.n	800cb2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d009      	beq.n	800cb2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	6919      	ldr	r1, [r3, #16]
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	015a      	lsls	r2, r3, #5
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	4413      	add	r3, r2
 800cb26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb2a:	460a      	mov	r2, r1
 800cb2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	015a      	lsls	r2, r3, #5
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	4413      	add	r3, r2
 800cb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	693a      	ldr	r2, [r7, #16]
 800cb3e:	0151      	lsls	r1, r2, #5
 800cb40:	697a      	ldr	r2, [r7, #20]
 800cb42:	440a      	add	r2, r1
 800cb44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cb4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	371c      	adds	r7, #28
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr
 800cb5c:	e007ffff 	.word	0xe007ffff
 800cb60:	fff80000 	.word	0xfff80000

0800cb64 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b087      	sub	sp, #28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	785b      	ldrb	r3, [r3, #1]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	d14a      	bne.n	800cc18 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	015a      	lsls	r2, r3, #5
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb9a:	f040 8086 	bne.w	800ccaa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	7812      	ldrb	r2, [r2, #0]
 800cbb2:	0151      	lsls	r1, r2, #5
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	440a      	add	r2, r1
 800cbb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cbc0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	015a      	lsls	r2, r3, #5
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	4413      	add	r3, r2
 800cbcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	683a      	ldr	r2, [r7, #0]
 800cbd4:	7812      	ldrb	r2, [r2, #0]
 800cbd6:	0151      	lsls	r1, r2, #5
 800cbd8:	693a      	ldr	r2, [r7, #16]
 800cbda:	440a      	add	r2, r1
 800cbdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbe4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f242 7210 	movw	r2, #10000	; 0x2710
 800cbf2:	4293      	cmp	r3, r2
 800cbf4:	d902      	bls.n	800cbfc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	75fb      	strb	r3, [r7, #23]
          break;
 800cbfa:	e056      	b.n	800ccaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	015a      	lsls	r2, r3, #5
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	4413      	add	r3, r2
 800cc06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc14:	d0e7      	beq.n	800cbe6 <USB_EPStopXfer+0x82>
 800cc16:	e048      	b.n	800ccaa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	015a      	lsls	r2, r3, #5
 800cc1e:	693b      	ldr	r3, [r7, #16]
 800cc20:	4413      	add	r3, r2
 800cc22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc30:	d13b      	bne.n	800ccaa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	015a      	lsls	r2, r3, #5
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	4413      	add	r3, r2
 800cc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	7812      	ldrb	r2, [r2, #0]
 800cc46:	0151      	lsls	r1, r2, #5
 800cc48:	693a      	ldr	r2, [r7, #16]
 800cc4a:	440a      	add	r2, r1
 800cc4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cc54:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	781b      	ldrb	r3, [r3, #0]
 800cc5a:	015a      	lsls	r2, r3, #5
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	4413      	add	r3, r2
 800cc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	7812      	ldrb	r2, [r2, #0]
 800cc6a:	0151      	lsls	r1, r2, #5
 800cc6c:	693a      	ldr	r2, [r7, #16]
 800cc6e:	440a      	add	r2, r1
 800cc70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f242 7210 	movw	r2, #10000	; 0x2710
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d902      	bls.n	800cc90 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	75fb      	strb	r3, [r7, #23]
          break;
 800cc8e:	e00c      	b.n	800ccaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	015a      	lsls	r2, r3, #5
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	4413      	add	r3, r2
 800cc9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cca8:	d0e7      	beq.n	800cc7a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	371c      	adds	r7, #28
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b089      	sub	sp, #36	; 0x24
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	71fb      	strb	r3, [r7, #7]
 800ccca:	4613      	mov	r3, r2
 800cccc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ccd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d123      	bne.n	800cd26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ccde:	88bb      	ldrh	r3, [r7, #4]
 800cce0:	3303      	adds	r3, #3
 800cce2:	089b      	lsrs	r3, r3, #2
 800cce4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cce6:	2300      	movs	r3, #0
 800cce8:	61bb      	str	r3, [r7, #24]
 800ccea:	e018      	b.n	800cd1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ccec:	79fb      	ldrb	r3, [r7, #7]
 800ccee:	031a      	lsls	r2, r3, #12
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cd00:	69fb      	ldr	r3, [r7, #28]
 800cd02:	3301      	adds	r3, #1
 800cd04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cd12:	69fb      	ldr	r3, [r7, #28]
 800cd14:	3301      	adds	r3, #1
 800cd16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cd18:	69bb      	ldr	r3, [r7, #24]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	61bb      	str	r3, [r7, #24]
 800cd1e:	69ba      	ldr	r2, [r7, #24]
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d3e2      	bcc.n	800ccec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3724      	adds	r7, #36	; 0x24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b08b      	sub	sp, #44	; 0x2c
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	4613      	mov	r3, r2
 800cd40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800cd4a:	88fb      	ldrh	r3, [r7, #6]
 800cd4c:	089b      	lsrs	r3, r3, #2
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800cd52:	88fb      	ldrh	r3, [r7, #6]
 800cd54:	f003 0303 	and.w	r3, r3, #3
 800cd58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	623b      	str	r3, [r7, #32]
 800cd5e:	e014      	b.n	800cd8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	601a      	str	r2, [r3, #0]
    pDest++;
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6e:	3301      	adds	r3, #1
 800cd70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd74:	3301      	adds	r3, #1
 800cd76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd80:	3301      	adds	r3, #1
 800cd82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800cd84:	6a3b      	ldr	r3, [r7, #32]
 800cd86:	3301      	adds	r3, #1
 800cd88:	623b      	str	r3, [r7, #32]
 800cd8a:	6a3a      	ldr	r2, [r7, #32]
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d3e6      	bcc.n	800cd60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800cd92:	8bfb      	ldrh	r3, [r7, #30]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d01e      	beq.n	800cdd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cda2:	461a      	mov	r2, r3
 800cda4:	f107 0310 	add.w	r3, r7, #16
 800cda8:	6812      	ldr	r2, [r2, #0]
 800cdaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	b2db      	uxtb	r3, r3
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	fa22 f303 	lsr.w	r3, r2, r3
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbc:	701a      	strb	r2, [r3, #0]
      i++;
 800cdbe:	6a3b      	ldr	r3, [r7, #32]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	623b      	str	r3, [r7, #32]
      pDest++;
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cdca:	8bfb      	ldrh	r3, [r7, #30]
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800cdd0:	8bfb      	ldrh	r3, [r7, #30]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1ea      	bne.n	800cdac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	372c      	adds	r7, #44	; 0x2c
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	785b      	ldrb	r3, [r3, #1]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d12c      	bne.n	800ce5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	015a      	lsls	r2, r3, #5
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	4413      	add	r3, r2
 800ce08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	db12      	blt.n	800ce38 <USB_EPSetStall+0x54>
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d00f      	beq.n	800ce38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	015a      	lsls	r2, r3, #5
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	4413      	add	r3, r2
 800ce20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	0151      	lsls	r1, r2, #5
 800ce2a:	68fa      	ldr	r2, [r7, #12]
 800ce2c:	440a      	add	r2, r1
 800ce2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	015a      	lsls	r2, r3, #5
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	4413      	add	r3, r2
 800ce40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	68ba      	ldr	r2, [r7, #8]
 800ce48:	0151      	lsls	r1, r2, #5
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	440a      	add	r2, r1
 800ce4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ce52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	e02b      	b.n	800ceb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	015a      	lsls	r2, r3, #5
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4413      	add	r3, r2
 800ce62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	db12      	blt.n	800ce92 <USB_EPSetStall+0xae>
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00f      	beq.n	800ce92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	015a      	lsls	r2, r3, #5
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	4413      	add	r3, r2
 800ce7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	0151      	lsls	r1, r2, #5
 800ce84:	68fa      	ldr	r2, [r7, #12]
 800ce86:	440a      	add	r2, r1
 800ce88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ce90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	015a      	lsls	r2, r3, #5
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	4413      	add	r3, r2
 800ce9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68ba      	ldr	r2, [r7, #8]
 800cea2:	0151      	lsls	r1, r2, #5
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	440a      	add	r2, r1
 800cea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ceac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ceb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ceb2:	2300      	movs	r3, #0
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	785b      	ldrb	r3, [r3, #1]
 800ced8:	2b01      	cmp	r3, #1
 800ceda:	d128      	bne.n	800cf2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	015a      	lsls	r2, r3, #5
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4413      	add	r3, r2
 800cee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68ba      	ldr	r2, [r7, #8]
 800ceec:	0151      	lsls	r1, r2, #5
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	440a      	add	r2, r1
 800cef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cefa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	791b      	ldrb	r3, [r3, #4]
 800cf00:	2b03      	cmp	r3, #3
 800cf02:	d003      	beq.n	800cf0c <USB_EPClearStall+0x4c>
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	791b      	ldrb	r3, [r3, #4]
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d138      	bne.n	800cf7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	015a      	lsls	r2, r3, #5
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	4413      	add	r3, r2
 800cf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68ba      	ldr	r2, [r7, #8]
 800cf1c:	0151      	lsls	r1, r2, #5
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	440a      	add	r2, r1
 800cf22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf2a:	6013      	str	r3, [r2, #0]
 800cf2c:	e027      	b.n	800cf7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	015a      	lsls	r2, r3, #5
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	4413      	add	r3, r2
 800cf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	68ba      	ldr	r2, [r7, #8]
 800cf3e:	0151      	lsls	r1, r2, #5
 800cf40:	68fa      	ldr	r2, [r7, #12]
 800cf42:	440a      	add	r2, r1
 800cf44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	791b      	ldrb	r3, [r3, #4]
 800cf52:	2b03      	cmp	r3, #3
 800cf54:	d003      	beq.n	800cf5e <USB_EPClearStall+0x9e>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	791b      	ldrb	r3, [r3, #4]
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	d10f      	bne.n	800cf7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	015a      	lsls	r2, r3, #5
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	4413      	add	r3, r2
 800cf66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	0151      	lsls	r1, r2, #5
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	440a      	add	r2, r1
 800cf74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b085      	sub	sp, #20
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cfaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cfae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	78fb      	ldrb	r3, [r7, #3]
 800cfba:	011b      	lsls	r3, r3, #4
 800cfbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cfc0:	68f9      	ldr	r1, [r7, #12]
 800cfc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cfca:	2300      	movs	r3, #0
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3714      	adds	r7, #20
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b085      	sub	sp, #20
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	68fa      	ldr	r2, [r7, #12]
 800cfee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cff2:	f023 0303 	bic.w	r3, r3, #3
 800cff6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d006:	f023 0302 	bic.w	r3, r3, #2
 800d00a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b085      	sub	sp, #20
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d034:	f023 0303 	bic.w	r3, r3, #3
 800d038:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d040:	685b      	ldr	r3, [r3, #4]
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d048:	f043 0302 	orr.w	r3, r3, #2
 800d04c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	695b      	ldr	r3, [r3, #20]
 800d068:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	68fa      	ldr	r2, [r7, #12]
 800d070:	4013      	ands	r3, r2
 800d072:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d074:	68fb      	ldr	r3, [r7, #12]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d082:	b480      	push	{r7}
 800d084:	b085      	sub	sp, #20
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d094:	699b      	ldr	r3, [r3, #24]
 800d096:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d09e:	69db      	ldr	r3, [r3, #28]
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	0c1b      	lsrs	r3, r3, #16
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3714      	adds	r7, #20
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	b085      	sub	sp, #20
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0c8:	699b      	ldr	r3, [r3, #24]
 800d0ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d2:	69db      	ldr	r3, [r3, #28]
 800d0d4:	68ba      	ldr	r2, [r7, #8]
 800d0d6:	4013      	ands	r3, r2
 800d0d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	b29b      	uxth	r3, r3
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3714      	adds	r7, #20
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr

0800d0ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d0ea:	b480      	push	{r7}
 800d0ec:	b085      	sub	sp, #20
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	460b      	mov	r3, r1
 800d0f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d0fa:	78fb      	ldrb	r3, [r7, #3]
 800d0fc:	015a      	lsls	r2, r3, #5
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	4413      	add	r3, r2
 800d102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d110:	695b      	ldr	r3, [r3, #20]
 800d112:	68ba      	ldr	r2, [r7, #8]
 800d114:	4013      	ands	r3, r2
 800d116:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d118:	68bb      	ldr	r3, [r7, #8]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	3714      	adds	r7, #20
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d126:	b480      	push	{r7}
 800d128:	b087      	sub	sp, #28
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
 800d12e:	460b      	mov	r3, r1
 800d130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d148:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d14a:	78fb      	ldrb	r3, [r7, #3]
 800d14c:	f003 030f 	and.w	r3, r3, #15
 800d150:	68fa      	ldr	r2, [r7, #12]
 800d152:	fa22 f303 	lsr.w	r3, r2, r3
 800d156:	01db      	lsls	r3, r3, #7
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	693a      	ldr	r2, [r7, #16]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d160:	78fb      	ldrb	r3, [r7, #3]
 800d162:	015a      	lsls	r2, r3, #5
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	4413      	add	r3, r2
 800d168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	693a      	ldr	r2, [r7, #16]
 800d170:	4013      	ands	r3, r2
 800d172:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d174:	68bb      	ldr	r3, [r7, #8]
}
 800d176:	4618      	mov	r0, r3
 800d178:	371c      	adds	r7, #28
 800d17a:	46bd      	mov	sp, r7
 800d17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d180:	4770      	bx	lr

0800d182 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	f003 0301 	and.w	r3, r3, #1
}
 800d192:	4618      	mov	r0, r3
 800d194:	370c      	adds	r7, #12
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
	...

0800d1a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b085      	sub	sp, #20
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	4b09      	ldr	r3, [pc, #36]	; (800d1e4 <USB_ActivateSetup+0x44>)
 800d1be:	4013      	ands	r3, r2
 800d1c0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	68fa      	ldr	r2, [r7, #12]
 800d1cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr
 800d1e4:	fffff800 	.word	0xfffff800

0800d1e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	607a      	str	r2, [r7, #4]
 800d1f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	333c      	adds	r3, #60	; 0x3c
 800d1fe:	3304      	adds	r3, #4
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	4a26      	ldr	r2, [pc, #152]	; (800d2a0 <USB_EP0_OutStart+0xb8>)
 800d208:	4293      	cmp	r3, r2
 800d20a:	d90a      	bls.n	800d222 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d21c:	d101      	bne.n	800d222 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d21e:	2300      	movs	r3, #0
 800d220:	e037      	b.n	800d292 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d228:	461a      	mov	r2, r3
 800d22a:	2300      	movs	r3, #0
 800d22c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	697a      	ldr	r2, [r7, #20]
 800d238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d23c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d240:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d248:	691b      	ldr	r3, [r3, #16]
 800d24a:	697a      	ldr	r2, [r7, #20]
 800d24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d250:	f043 0318 	orr.w	r3, r3, #24
 800d254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25c:	691b      	ldr	r3, [r3, #16]
 800d25e:	697a      	ldr	r2, [r7, #20]
 800d260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d264:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d268:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d26a:	7afb      	ldrb	r3, [r7, #11]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d10f      	bne.n	800d290 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d276:	461a      	mov	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	697a      	ldr	r2, [r7, #20]
 800d286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d28a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d28e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d290:	2300      	movs	r3, #0
}
 800d292:	4618      	mov	r0, r3
 800d294:	371c      	adds	r7, #28
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr
 800d29e:	bf00      	nop
 800d2a0:	4f54300a 	.word	0x4f54300a

0800d2a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	4a13      	ldr	r2, [pc, #76]	; (800d308 <USB_CoreReset+0x64>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d901      	bls.n	800d2c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	e01b      	b.n	800d2fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	691b      	ldr	r3, [r3, #16]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	daf2      	bge.n	800d2b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	f043 0201 	orr.w	r2, r3, #1
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4a09      	ldr	r2, [pc, #36]	; (800d308 <USB_CoreReset+0x64>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d901      	bls.n	800d2ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e006      	b.n	800d2fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	f003 0301 	and.w	r3, r3, #1
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d0f0      	beq.n	800d2da <USB_CoreReset+0x36>

  return HAL_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3714      	adds	r7, #20
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	00030d40 	.word	0x00030d40

0800d30c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800d312:	4b98      	ldr	r3, [pc, #608]	; (800d574 <MX_LWIP_Init+0x268>)
 800d314:	22c0      	movs	r2, #192	; 0xc0
 800d316:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800d318:	4b96      	ldr	r3, [pc, #600]	; (800d574 <MX_LWIP_Init+0x268>)
 800d31a:	22a8      	movs	r2, #168	; 0xa8
 800d31c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800d31e:	4b95      	ldr	r3, [pc, #596]	; (800d574 <MX_LWIP_Init+0x268>)
 800d320:	2200      	movs	r2, #0
 800d322:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 222;
 800d324:	4b93      	ldr	r3, [pc, #588]	; (800d574 <MX_LWIP_Init+0x268>)
 800d326:	22de      	movs	r2, #222	; 0xde
 800d328:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800d32a:	4b93      	ldr	r3, [pc, #588]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d32c:	22ff      	movs	r2, #255	; 0xff
 800d32e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800d330:	4b91      	ldr	r3, [pc, #580]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d332:	22ff      	movs	r2, #255	; 0xff
 800d334:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800d336:	4b90      	ldr	r3, [pc, #576]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d338:	22ff      	movs	r2, #255	; 0xff
 800d33a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800d33c:	4b8e      	ldr	r3, [pc, #568]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d33e:	2200      	movs	r2, #0
 800d340:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800d342:	4b8e      	ldr	r3, [pc, #568]	; (800d57c <MX_LWIP_Init+0x270>)
 800d344:	22c0      	movs	r2, #192	; 0xc0
 800d346:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800d348:	4b8c      	ldr	r3, [pc, #560]	; (800d57c <MX_LWIP_Init+0x270>)
 800d34a:	22a8      	movs	r2, #168	; 0xa8
 800d34c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800d34e:	4b8b      	ldr	r3, [pc, #556]	; (800d57c <MX_LWIP_Init+0x270>)
 800d350:	2200      	movs	r2, #0
 800d352:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800d354:	4b89      	ldr	r3, [pc, #548]	; (800d57c <MX_LWIP_Init+0x270>)
 800d356:	2201      	movs	r2, #1
 800d358:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d35a:	2100      	movs	r1, #0
 800d35c:	2000      	movs	r0, #0
 800d35e:	f011 ffd7 	bl	801f310 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800d362:	4b84      	ldr	r3, [pc, #528]	; (800d574 <MX_LWIP_Init+0x268>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	061a      	lsls	r2, r3, #24
 800d368:	4b82      	ldr	r3, [pc, #520]	; (800d574 <MX_LWIP_Init+0x268>)
 800d36a:	785b      	ldrb	r3, [r3, #1]
 800d36c:	041b      	lsls	r3, r3, #16
 800d36e:	431a      	orrs	r2, r3
 800d370:	4b80      	ldr	r3, [pc, #512]	; (800d574 <MX_LWIP_Init+0x268>)
 800d372:	789b      	ldrb	r3, [r3, #2]
 800d374:	021b      	lsls	r3, r3, #8
 800d376:	4313      	orrs	r3, r2
 800d378:	4a7e      	ldr	r2, [pc, #504]	; (800d574 <MX_LWIP_Init+0x268>)
 800d37a:	78d2      	ldrb	r2, [r2, #3]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	061a      	lsls	r2, r3, #24
 800d380:	4b7c      	ldr	r3, [pc, #496]	; (800d574 <MX_LWIP_Init+0x268>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	0619      	lsls	r1, r3, #24
 800d386:	4b7b      	ldr	r3, [pc, #492]	; (800d574 <MX_LWIP_Init+0x268>)
 800d388:	785b      	ldrb	r3, [r3, #1]
 800d38a:	041b      	lsls	r3, r3, #16
 800d38c:	4319      	orrs	r1, r3
 800d38e:	4b79      	ldr	r3, [pc, #484]	; (800d574 <MX_LWIP_Init+0x268>)
 800d390:	789b      	ldrb	r3, [r3, #2]
 800d392:	021b      	lsls	r3, r3, #8
 800d394:	430b      	orrs	r3, r1
 800d396:	4977      	ldr	r1, [pc, #476]	; (800d574 <MX_LWIP_Init+0x268>)
 800d398:	78c9      	ldrb	r1, [r1, #3]
 800d39a:	430b      	orrs	r3, r1
 800d39c:	021b      	lsls	r3, r3, #8
 800d39e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3a2:	431a      	orrs	r2, r3
 800d3a4:	4b73      	ldr	r3, [pc, #460]	; (800d574 <MX_LWIP_Init+0x268>)
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	0619      	lsls	r1, r3, #24
 800d3aa:	4b72      	ldr	r3, [pc, #456]	; (800d574 <MX_LWIP_Init+0x268>)
 800d3ac:	785b      	ldrb	r3, [r3, #1]
 800d3ae:	041b      	lsls	r3, r3, #16
 800d3b0:	4319      	orrs	r1, r3
 800d3b2:	4b70      	ldr	r3, [pc, #448]	; (800d574 <MX_LWIP_Init+0x268>)
 800d3b4:	789b      	ldrb	r3, [r3, #2]
 800d3b6:	021b      	lsls	r3, r3, #8
 800d3b8:	430b      	orrs	r3, r1
 800d3ba:	496e      	ldr	r1, [pc, #440]	; (800d574 <MX_LWIP_Init+0x268>)
 800d3bc:	78c9      	ldrb	r1, [r1, #3]
 800d3be:	430b      	orrs	r3, r1
 800d3c0:	0a1b      	lsrs	r3, r3, #8
 800d3c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d3c6:	431a      	orrs	r2, r3
 800d3c8:	4b6a      	ldr	r3, [pc, #424]	; (800d574 <MX_LWIP_Init+0x268>)
 800d3ca:	781b      	ldrb	r3, [r3, #0]
 800d3cc:	0619      	lsls	r1, r3, #24
 800d3ce:	4b69      	ldr	r3, [pc, #420]	; (800d574 <MX_LWIP_Init+0x268>)
 800d3d0:	785b      	ldrb	r3, [r3, #1]
 800d3d2:	041b      	lsls	r3, r3, #16
 800d3d4:	4319      	orrs	r1, r3
 800d3d6:	4b67      	ldr	r3, [pc, #412]	; (800d574 <MX_LWIP_Init+0x268>)
 800d3d8:	789b      	ldrb	r3, [r3, #2]
 800d3da:	021b      	lsls	r3, r3, #8
 800d3dc:	430b      	orrs	r3, r1
 800d3de:	4965      	ldr	r1, [pc, #404]	; (800d574 <MX_LWIP_Init+0x268>)
 800d3e0:	78c9      	ldrb	r1, [r1, #3]
 800d3e2:	430b      	orrs	r3, r1
 800d3e4:	0e1b      	lsrs	r3, r3, #24
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	4a65      	ldr	r2, [pc, #404]	; (800d580 <MX_LWIP_Init+0x274>)
 800d3ea:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800d3ec:	4b62      	ldr	r3, [pc, #392]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	061a      	lsls	r2, r3, #24
 800d3f2:	4b61      	ldr	r3, [pc, #388]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d3f4:	785b      	ldrb	r3, [r3, #1]
 800d3f6:	041b      	lsls	r3, r3, #16
 800d3f8:	431a      	orrs	r2, r3
 800d3fa:	4b5f      	ldr	r3, [pc, #380]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d3fc:	789b      	ldrb	r3, [r3, #2]
 800d3fe:	021b      	lsls	r3, r3, #8
 800d400:	4313      	orrs	r3, r2
 800d402:	4a5d      	ldr	r2, [pc, #372]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d404:	78d2      	ldrb	r2, [r2, #3]
 800d406:	4313      	orrs	r3, r2
 800d408:	061a      	lsls	r2, r3, #24
 800d40a:	4b5b      	ldr	r3, [pc, #364]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	0619      	lsls	r1, r3, #24
 800d410:	4b59      	ldr	r3, [pc, #356]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d412:	785b      	ldrb	r3, [r3, #1]
 800d414:	041b      	lsls	r3, r3, #16
 800d416:	4319      	orrs	r1, r3
 800d418:	4b57      	ldr	r3, [pc, #348]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d41a:	789b      	ldrb	r3, [r3, #2]
 800d41c:	021b      	lsls	r3, r3, #8
 800d41e:	430b      	orrs	r3, r1
 800d420:	4955      	ldr	r1, [pc, #340]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d422:	78c9      	ldrb	r1, [r1, #3]
 800d424:	430b      	orrs	r3, r1
 800d426:	021b      	lsls	r3, r3, #8
 800d428:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d42c:	431a      	orrs	r2, r3
 800d42e:	4b52      	ldr	r3, [pc, #328]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	0619      	lsls	r1, r3, #24
 800d434:	4b50      	ldr	r3, [pc, #320]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d436:	785b      	ldrb	r3, [r3, #1]
 800d438:	041b      	lsls	r3, r3, #16
 800d43a:	4319      	orrs	r1, r3
 800d43c:	4b4e      	ldr	r3, [pc, #312]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d43e:	789b      	ldrb	r3, [r3, #2]
 800d440:	021b      	lsls	r3, r3, #8
 800d442:	430b      	orrs	r3, r1
 800d444:	494c      	ldr	r1, [pc, #304]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d446:	78c9      	ldrb	r1, [r1, #3]
 800d448:	430b      	orrs	r3, r1
 800d44a:	0a1b      	lsrs	r3, r3, #8
 800d44c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d450:	431a      	orrs	r2, r3
 800d452:	4b49      	ldr	r3, [pc, #292]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	0619      	lsls	r1, r3, #24
 800d458:	4b47      	ldr	r3, [pc, #284]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d45a:	785b      	ldrb	r3, [r3, #1]
 800d45c:	041b      	lsls	r3, r3, #16
 800d45e:	4319      	orrs	r1, r3
 800d460:	4b45      	ldr	r3, [pc, #276]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d462:	789b      	ldrb	r3, [r3, #2]
 800d464:	021b      	lsls	r3, r3, #8
 800d466:	430b      	orrs	r3, r1
 800d468:	4943      	ldr	r1, [pc, #268]	; (800d578 <MX_LWIP_Init+0x26c>)
 800d46a:	78c9      	ldrb	r1, [r1, #3]
 800d46c:	430b      	orrs	r3, r1
 800d46e:	0e1b      	lsrs	r3, r3, #24
 800d470:	4313      	orrs	r3, r2
 800d472:	4a44      	ldr	r2, [pc, #272]	; (800d584 <MX_LWIP_Init+0x278>)
 800d474:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800d476:	4b41      	ldr	r3, [pc, #260]	; (800d57c <MX_LWIP_Init+0x270>)
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	061a      	lsls	r2, r3, #24
 800d47c:	4b3f      	ldr	r3, [pc, #252]	; (800d57c <MX_LWIP_Init+0x270>)
 800d47e:	785b      	ldrb	r3, [r3, #1]
 800d480:	041b      	lsls	r3, r3, #16
 800d482:	431a      	orrs	r2, r3
 800d484:	4b3d      	ldr	r3, [pc, #244]	; (800d57c <MX_LWIP_Init+0x270>)
 800d486:	789b      	ldrb	r3, [r3, #2]
 800d488:	021b      	lsls	r3, r3, #8
 800d48a:	4313      	orrs	r3, r2
 800d48c:	4a3b      	ldr	r2, [pc, #236]	; (800d57c <MX_LWIP_Init+0x270>)
 800d48e:	78d2      	ldrb	r2, [r2, #3]
 800d490:	4313      	orrs	r3, r2
 800d492:	061a      	lsls	r2, r3, #24
 800d494:	4b39      	ldr	r3, [pc, #228]	; (800d57c <MX_LWIP_Init+0x270>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	0619      	lsls	r1, r3, #24
 800d49a:	4b38      	ldr	r3, [pc, #224]	; (800d57c <MX_LWIP_Init+0x270>)
 800d49c:	785b      	ldrb	r3, [r3, #1]
 800d49e:	041b      	lsls	r3, r3, #16
 800d4a0:	4319      	orrs	r1, r3
 800d4a2:	4b36      	ldr	r3, [pc, #216]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4a4:	789b      	ldrb	r3, [r3, #2]
 800d4a6:	021b      	lsls	r3, r3, #8
 800d4a8:	430b      	orrs	r3, r1
 800d4aa:	4934      	ldr	r1, [pc, #208]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4ac:	78c9      	ldrb	r1, [r1, #3]
 800d4ae:	430b      	orrs	r3, r1
 800d4b0:	021b      	lsls	r3, r3, #8
 800d4b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d4b6:	431a      	orrs	r2, r3
 800d4b8:	4b30      	ldr	r3, [pc, #192]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	0619      	lsls	r1, r3, #24
 800d4be:	4b2f      	ldr	r3, [pc, #188]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4c0:	785b      	ldrb	r3, [r3, #1]
 800d4c2:	041b      	lsls	r3, r3, #16
 800d4c4:	4319      	orrs	r1, r3
 800d4c6:	4b2d      	ldr	r3, [pc, #180]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4c8:	789b      	ldrb	r3, [r3, #2]
 800d4ca:	021b      	lsls	r3, r3, #8
 800d4cc:	430b      	orrs	r3, r1
 800d4ce:	492b      	ldr	r1, [pc, #172]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4d0:	78c9      	ldrb	r1, [r1, #3]
 800d4d2:	430b      	orrs	r3, r1
 800d4d4:	0a1b      	lsrs	r3, r3, #8
 800d4d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d4da:	431a      	orrs	r2, r3
 800d4dc:	4b27      	ldr	r3, [pc, #156]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4de:	781b      	ldrb	r3, [r3, #0]
 800d4e0:	0619      	lsls	r1, r3, #24
 800d4e2:	4b26      	ldr	r3, [pc, #152]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4e4:	785b      	ldrb	r3, [r3, #1]
 800d4e6:	041b      	lsls	r3, r3, #16
 800d4e8:	4319      	orrs	r1, r3
 800d4ea:	4b24      	ldr	r3, [pc, #144]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4ec:	789b      	ldrb	r3, [r3, #2]
 800d4ee:	021b      	lsls	r3, r3, #8
 800d4f0:	430b      	orrs	r3, r1
 800d4f2:	4922      	ldr	r1, [pc, #136]	; (800d57c <MX_LWIP_Init+0x270>)
 800d4f4:	78c9      	ldrb	r1, [r1, #3]
 800d4f6:	430b      	orrs	r3, r1
 800d4f8:	0e1b      	lsrs	r3, r3, #24
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	4a22      	ldr	r2, [pc, #136]	; (800d588 <MX_LWIP_Init+0x27c>)
 800d4fe:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800d500:	4b22      	ldr	r3, [pc, #136]	; (800d58c <MX_LWIP_Init+0x280>)
 800d502:	9302      	str	r3, [sp, #8]
 800d504:	4b22      	ldr	r3, [pc, #136]	; (800d590 <MX_LWIP_Init+0x284>)
 800d506:	9301      	str	r3, [sp, #4]
 800d508:	2300      	movs	r3, #0
 800d50a:	9300      	str	r3, [sp, #0]
 800d50c:	4b1e      	ldr	r3, [pc, #120]	; (800d588 <MX_LWIP_Init+0x27c>)
 800d50e:	4a1d      	ldr	r2, [pc, #116]	; (800d584 <MX_LWIP_Init+0x278>)
 800d510:	491b      	ldr	r1, [pc, #108]	; (800d580 <MX_LWIP_Init+0x274>)
 800d512:	4820      	ldr	r0, [pc, #128]	; (800d594 <MX_LWIP_Init+0x288>)
 800d514:	f00a f91c 	bl	8017750 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d518:	481e      	ldr	r0, [pc, #120]	; (800d594 <MX_LWIP_Init+0x288>)
 800d51a:	f00a facb 	bl	8017ab4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d51e:	4b1d      	ldr	r3, [pc, #116]	; (800d594 <MX_LWIP_Init+0x288>)
 800d520:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d524:	089b      	lsrs	r3, r3, #2
 800d526:	f003 0301 	and.w	r3, r3, #1
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d003      	beq.n	800d538 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800d530:	4818      	ldr	r0, [pc, #96]	; (800d594 <MX_LWIP_Init+0x288>)
 800d532:	f00a facf 	bl	8017ad4 <netif_set_up>
 800d536:	e002      	b.n	800d53e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800d538:	4816      	ldr	r0, [pc, #88]	; (800d594 <MX_LWIP_Init+0x288>)
 800d53a:	f00a fb37 	bl	8017bac <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800d53e:	4916      	ldr	r1, [pc, #88]	; (800d598 <MX_LWIP_Init+0x28c>)
 800d540:	4814      	ldr	r0, [pc, #80]	; (800d594 <MX_LWIP_Init+0x288>)
 800d542:	f00a fbc9 	bl	8017cd8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800d546:	2224      	movs	r2, #36	; 0x24
 800d548:	2100      	movs	r1, #0
 800d54a:	4814      	ldr	r0, [pc, #80]	; (800d59c <MX_LWIP_Init+0x290>)
 800d54c:	f015 fc8f 	bl	8022e6e <memset>
  attributes.name = "EthLink";
 800d550:	4b12      	ldr	r3, [pc, #72]	; (800d59c <MX_LWIP_Init+0x290>)
 800d552:	4a13      	ldr	r2, [pc, #76]	; (800d5a0 <MX_LWIP_Init+0x294>)
 800d554:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800d556:	4b11      	ldr	r3, [pc, #68]	; (800d59c <MX_LWIP_Init+0x290>)
 800d558:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d55c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800d55e:	4b0f      	ldr	r3, [pc, #60]	; (800d59c <MX_LWIP_Init+0x290>)
 800d560:	2210      	movs	r2, #16
 800d562:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800d564:	4a0d      	ldr	r2, [pc, #52]	; (800d59c <MX_LWIP_Init+0x290>)
 800d566:	490b      	ldr	r1, [pc, #44]	; (800d594 <MX_LWIP_Init+0x288>)
 800d568:	480e      	ldr	r0, [pc, #56]	; (800d5a4 <MX_LWIP_Init+0x298>)
 800d56a:	f000 fd8f 	bl	800e08c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800d56e:	bf00      	nop
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	20000960 	.word	0x20000960
 800d578:	20000964 	.word	0x20000964
 800d57c:	20000968 	.word	0x20000968
 800d580:	20000954 	.word	0x20000954
 800d584:	20000958 	.word	0x20000958
 800d588:	2000095c 	.word	0x2000095c
 800d58c:	0801f221 	.word	0x0801f221
 800d590:	0800da7d 	.word	0x0800da7d
 800d594:	20000920 	.word	0x20000920
 800d598:	0800d5a9 	.word	0x0800d5a9
 800d59c:	2000096c 	.word	0x2000096c
 800d5a0:	080245c8 	.word	0x080245c8
 800d5a4:	0800dd45 	.word	0x0800dd45

0800d5a8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b087      	sub	sp, #28
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800d5ce:	2320      	movs	r3, #32
 800d5d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d5d2:	f3bf 8f4f 	dsb	sy
}
 800d5d6:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800d5d8:	e00b      	b.n	800d5f2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800d5da:	4a0d      	ldr	r2, [pc, #52]	; (800d610 <SCB_InvalidateDCache_by_Addr+0x54>)
 800d5dc:	693b      	ldr	r3, [r7, #16]
 800d5de:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	693a      	ldr	r2, [r7, #16]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800d5ea:	697a      	ldr	r2, [r7, #20]
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	1ad3      	subs	r3, r2, r3
 800d5f0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800d5f2:	697b      	ldr	r3, [r7, #20]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	dcf0      	bgt.n	800d5da <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800d5f8:	f3bf 8f4f 	dsb	sy
}
 800d5fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d5fe:	f3bf 8f6f 	isb	sy
}
 800d602:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800d604:	bf00      	nop
 800d606:	371c      	adds	r7, #28
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr
 800d610:	e000ed00 	.word	0xe000ed00

0800d614 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800d61c:	4b04      	ldr	r3, [pc, #16]	; (800d630 <HAL_ETH_RxCpltCallback+0x1c>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4618      	mov	r0, r3
 800d622:	f001 f92b 	bl	800e87c <osSemaphoreRelease>
}
 800d626:	bf00      	nop
 800d628:	3708      	adds	r7, #8
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	2000531c 	.word	0x2000531c

0800d634 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800d634:	b480      	push	{r7}
 800d636:	b083      	sub	sp, #12
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
  //osSemaphoreRelease(TxPktSemaphore);
}
 800d63c:	bf00      	nop
 800d63e:	370c      	adds	r7, #12
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr

0800d648 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b082      	sub	sp, #8
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7f8 f903 	bl	800585c <HAL_ETH_GetDMAError>
 800d656:	4603      	mov	r3, r0
 800d658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d65c:	2b80      	cmp	r3, #128	; 0x80
 800d65e:	d104      	bne.n	800d66a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800d660:	4b04      	ldr	r3, [pc, #16]	; (800d674 <HAL_ETH_ErrorCallback+0x2c>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4618      	mov	r0, r3
 800d666:	f001 f909 	bl	800e87c <osSemaphoreRelease>
  }
}
 800d66a:	bf00      	nop
 800d66c:	3708      	adds	r7, #8
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}
 800d672:	bf00      	nop
 800d674:	2000531c 	.word	0x2000531c

0800d678 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b0aa      	sub	sp, #168	; 0xa8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800d686:	2300      	movs	r3, #0
 800d688:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800d692:	f107 0310 	add.w	r3, r7, #16
 800d696:	2264      	movs	r2, #100	; 0x64
 800d698:	2100      	movs	r1, #0
 800d69a:	4618      	mov	r0, r3
 800d69c:	f015 fbe7 	bl	8022e6e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800d6a0:	4b85      	ldr	r3, [pc, #532]	; (800d8b8 <low_level_init+0x240>)
 800d6a2:	4a86      	ldr	r2, [pc, #536]	; (800d8bc <low_level_init+0x244>)
 800d6a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800d6aa:	2380      	movs	r3, #128	; 0x80
 800d6ac:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800d6ae:	23e1      	movs	r3, #225	; 0xe1
 800d6b0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800d6be:	4a7e      	ldr	r2, [pc, #504]	; (800d8b8 <low_level_init+0x240>)
 800d6c0:	f107 0308 	add.w	r3, r7, #8
 800d6c4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800d6c6:	4b7c      	ldr	r3, [pc, #496]	; (800d8b8 <low_level_init+0x240>)
 800d6c8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800d6cc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800d6ce:	4b7a      	ldr	r3, [pc, #488]	; (800d8b8 <low_level_init+0x240>)
 800d6d0:	4a7b      	ldr	r2, [pc, #492]	; (800d8c0 <low_level_init+0x248>)
 800d6d2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800d6d4:	4b78      	ldr	r3, [pc, #480]	; (800d8b8 <low_level_init+0x240>)
 800d6d6:	4a7b      	ldr	r2, [pc, #492]	; (800d8c4 <low_level_init+0x24c>)
 800d6d8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800d6da:	4b77      	ldr	r3, [pc, #476]	; (800d8b8 <low_level_init+0x240>)
 800d6dc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800d6e0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d6e2:	4875      	ldr	r0, [pc, #468]	; (800d8b8 <low_level_init+0x240>)
 800d6e4:	f7f7 fa7c 	bl	8004be0 <HAL_ETH_Init>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800d6ee:	2238      	movs	r2, #56	; 0x38
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	4875      	ldr	r0, [pc, #468]	; (800d8c8 <low_level_init+0x250>)
 800d6f4:	f015 fbbb 	bl	8022e6e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800d6f8:	4b73      	ldr	r3, [pc, #460]	; (800d8c8 <low_level_init+0x250>)
 800d6fa:	2221      	movs	r2, #33	; 0x21
 800d6fc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800d6fe:	4b72      	ldr	r3, [pc, #456]	; (800d8c8 <low_level_init+0x250>)
 800d700:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800d704:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800d706:	4b70      	ldr	r3, [pc, #448]	; (800d8c8 <low_level_init+0x250>)
 800d708:	2200      	movs	r2, #0
 800d70a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800d70c:	486f      	ldr	r0, [pc, #444]	; (800d8cc <low_level_init+0x254>)
 800d70e:	f009 fe89 	bl	8017424 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2206      	movs	r2, #6
 800d716:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d71a:	4b67      	ldr	r3, [pc, #412]	; (800d8b8 <low_level_init+0x240>)
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	781a      	ldrb	r2, [r3, #0]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d726:	4b64      	ldr	r3, [pc, #400]	; (800d8b8 <low_level_init+0x240>)
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	785a      	ldrb	r2, [r3, #1]
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d732:	4b61      	ldr	r3, [pc, #388]	; (800d8b8 <low_level_init+0x240>)
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	789a      	ldrb	r2, [r3, #2]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d73e:	4b5e      	ldr	r3, [pc, #376]	; (800d8b8 <low_level_init+0x240>)
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	78da      	ldrb	r2, [r3, #3]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d74a:	4b5b      	ldr	r3, [pc, #364]	; (800d8b8 <low_level_init+0x240>)
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	791a      	ldrb	r2, [r3, #4]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d756:	4b58      	ldr	r3, [pc, #352]	; (800d8b8 <low_level_init+0x240>)
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	795a      	ldrb	r2, [r3, #5]
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d768:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d770:	f043 030a 	orr.w	r3, r3, #10
 800d774:	b2da      	uxtb	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800d77c:	2200      	movs	r2, #0
 800d77e:	2100      	movs	r1, #0
 800d780:	2001      	movs	r0, #1
 800d782:	f000 ff79 	bl	800e678 <osSemaphoreNew>
 800d786:	4603      	mov	r3, r0
 800d788:	4a51      	ldr	r2, [pc, #324]	; (800d8d0 <low_level_init+0x258>)
 800d78a:	6013      	str	r3, [r2, #0]
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800d78c:	2200      	movs	r2, #0
 800d78e:	2100      	movs	r1, #0
 800d790:	2001      	movs	r0, #1
 800d792:	f000 ff71 	bl	800e678 <osSemaphoreNew>
 800d796:	4603      	mov	r3, r0
 800d798:	4a4e      	ldr	r2, [pc, #312]	; (800d8d4 <low_level_init+0x25c>)
 800d79a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800d79c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d7a0:	2224      	movs	r2, #36	; 0x24
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	f015 fb62 	bl	8022e6e <memset>
  attributes.name = "EthIf";
 800d7aa:	4b4b      	ldr	r3, [pc, #300]	; (800d8d8 <low_level_init+0x260>)
 800d7ac:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800d7ae:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800d7b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800d7b6:	2330      	movs	r3, #48	; 0x30
 800d7b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800d7bc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	6879      	ldr	r1, [r7, #4]
 800d7c4:	4845      	ldr	r0, [pc, #276]	; (800d8dc <low_level_init+0x264>)
 800d7c6:	f000 fc61 	bl	800e08c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800d7ca:	4945      	ldr	r1, [pc, #276]	; (800d8e0 <low_level_init+0x268>)
 800d7cc:	4845      	ldr	r0, [pc, #276]	; (800d8e4 <low_level_init+0x26c>)
 800d7ce:	f7f6 fee0 	bl	8004592 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800d7d2:	4844      	ldr	r0, [pc, #272]	; (800d8e4 <low_level_init+0x26c>)
 800d7d4:	f7f6 ff0f 	bl	80045f6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800d7d8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d164      	bne.n	800d8aa <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800d7e0:	4840      	ldr	r0, [pc, #256]	; (800d8e4 <low_level_init+0x26c>)
 800d7e2:	f7f6 ffb0 	bl	8004746 <LAN8742_GetLinkState>
 800d7e6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800d7ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	dc06      	bgt.n	800d800 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f00a fa40 	bl	8017c78 <netif_set_link_down>
      netif_set_down(netif);
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f00a f9d7 	bl	8017bac <netif_set_down>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800d7fe:	e056      	b.n	800d8ae <low_level_init+0x236>
      switch (PHYLinkState)
 800d800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d804:	3b02      	subs	r3, #2
 800d806:	2b03      	cmp	r3, #3
 800d808:	d82a      	bhi.n	800d860 <low_level_init+0x1e8>
 800d80a:	a201      	add	r2, pc, #4	; (adr r2, 800d810 <low_level_init+0x198>)
 800d80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d810:	0800d821 	.word	0x0800d821
 800d814:	0800d833 	.word	0x0800d833
 800d818:	0800d843 	.word	0x0800d843
 800d81c:	0800d853 	.word	0x0800d853
        duplex = ETH_FULLDUPLEX_MODE;
 800d820:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d824:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800d828:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d82c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800d830:	e01f      	b.n	800d872 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800d832:	2300      	movs	r3, #0
 800d834:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800d838:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d83c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800d840:	e017      	b.n	800d872 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800d842:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800d84a:	2300      	movs	r3, #0
 800d84c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800d850:	e00f      	b.n	800d872 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 800d852:	2300      	movs	r3, #0
 800d854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800d858:	2300      	movs	r3, #0
 800d85a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800d85e:	e008      	b.n	800d872 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 800d860:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d864:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 800d868:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d86c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800d870:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800d872:	f107 0310 	add.w	r3, r7, #16
 800d876:	4619      	mov	r1, r3
 800d878:	480f      	ldr	r0, [pc, #60]	; (800d8b8 <low_level_init+0x240>)
 800d87a:	f7f7 fe95 	bl	80055a8 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800d87e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d882:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800d884:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d888:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800d88a:	f107 0310 	add.w	r3, r7, #16
 800d88e:	4619      	mov	r1, r3
 800d890:	4809      	ldr	r0, [pc, #36]	; (800d8b8 <low_level_init+0x240>)
 800d892:	f7f7 ff73 	bl	800577c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800d896:	4808      	ldr	r0, [pc, #32]	; (800d8b8 <low_level_init+0x240>)
 800d898:	f7f7 fa1e 	bl	8004cd8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f00a f919 	bl	8017ad4 <netif_set_up>
    netif_set_link_up(netif);
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f00a f9b4 	bl	8017c10 <netif_set_link_up>
}
 800d8a8:	e001      	b.n	800d8ae <low_level_init+0x236>
    Error_Handler();
 800d8aa:	f7f6 f8cf 	bl	8003a4c <Error_Handler>
}
 800d8ae:	bf00      	nop
 800d8b0:	37a8      	adds	r7, #168	; 0xa8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	20005324 	.word	0x20005324
 800d8bc:	40028000 	.word	0x40028000
 800d8c0:	20000234 	.word	0x20000234
 800d8c4:	20000194 	.word	0x20000194
 800d8c8:	200053d4 	.word	0x200053d4
 800d8cc:	080284a8 	.word	0x080284a8
 800d8d0:	2000531c 	.word	0x2000531c
 800d8d4:	20005320 	.word	0x20005320
 800d8d8:	080245d0 	.word	0x080245d0
 800d8dc:	0800da29 	.word	0x0800da29
 800d8e0:	20000014 	.word	0x20000014
 800d8e4:	2000540c 	.word	0x2000540c

0800d8e8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b092      	sub	sp, #72	; 0x48
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800d900:	f107 030c 	add.w	r3, r7, #12
 800d904:	2230      	movs	r2, #48	; 0x30
 800d906:	2100      	movs	r1, #0
 800d908:	4618      	mov	r0, r3
 800d90a:	f015 fab0 	bl	8022e6e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800d90e:	f107 030c 	add.w	r3, r7, #12
 800d912:	2230      	movs	r2, #48	; 0x30
 800d914:	2100      	movs	r1, #0
 800d916:	4618      	mov	r0, r3
 800d918:	f015 faa9 	bl	8022e6e <memset>

  for(q = p; q != NULL; q = q->next)
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	643b      	str	r3, [r7, #64]	; 0x40
 800d920:	e045      	b.n	800d9ae <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800d922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d924:	2b03      	cmp	r3, #3
 800d926:	d902      	bls.n	800d92e <low_level_output+0x46>
      return ERR_IF;
 800d928:	f06f 030b 	mvn.w	r3, #11
 800d92c:	e05a      	b.n	800d9e4 <low_level_output+0xfc>

    Txbuffer[i].buffer = q->payload;
 800d92e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d930:	6859      	ldr	r1, [r3, #4]
 800d932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d934:	4613      	mov	r3, r2
 800d936:	005b      	lsls	r3, r3, #1
 800d938:	4413      	add	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	3348      	adds	r3, #72	; 0x48
 800d93e:	443b      	add	r3, r7
 800d940:	3b3c      	subs	r3, #60	; 0x3c
 800d942:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800d944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d946:	895b      	ldrh	r3, [r3, #10]
 800d948:	4619      	mov	r1, r3
 800d94a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d94c:	4613      	mov	r3, r2
 800d94e:	005b      	lsls	r3, r3, #1
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	3348      	adds	r3, #72	; 0x48
 800d956:	443b      	add	r3, r7
 800d958:	3b38      	subs	r3, #56	; 0x38
 800d95a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800d95c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d011      	beq.n	800d986 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800d962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d964:	1e5a      	subs	r2, r3, #1
 800d966:	f107 000c 	add.w	r0, r7, #12
 800d96a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d96c:	460b      	mov	r3, r1
 800d96e:	005b      	lsls	r3, r3, #1
 800d970:	440b      	add	r3, r1
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	18c1      	adds	r1, r0, r3
 800d976:	4613      	mov	r3, r2
 800d978:	005b      	lsls	r3, r3, #1
 800d97a:	4413      	add	r3, r2
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	3348      	adds	r3, #72	; 0x48
 800d980:	443b      	add	r3, r7
 800d982:	3b34      	subs	r3, #52	; 0x34
 800d984:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800d986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d109      	bne.n	800d9a2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800d98e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d990:	4613      	mov	r3, r2
 800d992:	005b      	lsls	r3, r3, #1
 800d994:	4413      	add	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	3348      	adds	r3, #72	; 0x48
 800d99a:	443b      	add	r3, r7
 800d99c:	3b34      	subs	r3, #52	; 0x34
 800d99e:	2200      	movs	r2, #0
 800d9a0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800d9a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800d9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	643b      	str	r3, [r7, #64]	; 0x40
 800d9ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d1b6      	bne.n	800d922 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	891b      	ldrh	r3, [r3, #8]
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	4b0c      	ldr	r3, [pc, #48]	; (800d9ec <low_level_output+0x104>)
 800d9bc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800d9be:	4a0b      	ldr	r2, [pc, #44]	; (800d9ec <low_level_output+0x104>)
 800d9c0:	f107 030c 	add.w	r3, r7, #12
 800d9c4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800d9c6:	4a09      	ldr	r2, [pc, #36]	; (800d9ec <low_level_output+0x104>)
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800d9cc:	6838      	ldr	r0, [r7, #0]
 800d9ce:	f00a fdd7 	bl	8018580 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800d9d2:	4906      	ldr	r1, [pc, #24]	; (800d9ec <low_level_output+0x104>)
 800d9d4:	4806      	ldr	r0, [pc, #24]	; (800d9f0 <low_level_output+0x108>)
 800d9d6:	f7f7 fa8d 	bl	8004ef4 <HAL_ETH_Transmit_IT>
  //while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 800d9da:	4805      	ldr	r0, [pc, #20]	; (800d9f0 <low_level_output+0x108>)
 800d9dc:	f7f7 fc1e 	bl	800521c <HAL_ETH_ReleaseTxPacket>

  return errval;
 800d9e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	3748      	adds	r7, #72	; 0x48
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}
 800d9ec:	200053d4 	.word	0x200053d4
 800d9f0:	20005324 	.word	0x20005324

0800d9f4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800da00:	4b07      	ldr	r3, [pc, #28]	; (800da20 <low_level_input+0x2c>)
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d105      	bne.n	800da14 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800da08:	f107 030c 	add.w	r3, r7, #12
 800da0c:	4619      	mov	r1, r3
 800da0e:	4805      	ldr	r0, [pc, #20]	; (800da24 <low_level_input+0x30>)
 800da10:	f7f7 facc 	bl	8004fac <HAL_ETH_ReadData>
  }

  return p;
 800da14:	68fb      	ldr	r3, [r7, #12]
}
 800da16:	4618      	mov	r0, r3
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20005318 	.word	0x20005318
 800da24:	20005324 	.word	0x20005324

0800da28 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800da30:	2300      	movs	r3, #0
 800da32:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800da38:	4b0f      	ldr	r3, [pc, #60]	; (800da78 <ethernetif_input+0x50>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f04f 31ff 	mov.w	r1, #4294967295
 800da40:	4618      	mov	r0, r3
 800da42:	f000 feb5 	bl	800e7b0 <osSemaphoreAcquire>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d1f5      	bne.n	800da38 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800da4c:	68b8      	ldr	r0, [r7, #8]
 800da4e:	f7ff ffd1 	bl	800d9f4 <low_level_input>
 800da52:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00a      	beq.n	800da70 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	691b      	ldr	r3, [r3, #16]
 800da5e:	68b9      	ldr	r1, [r7, #8]
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	4798      	blx	r3
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d002      	beq.n	800da70 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f00a fce2 	bl	8018434 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1ea      	bne.n	800da4c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800da76:	e7df      	b.n	800da38 <ethernetif_input+0x10>
 800da78:	2000531c 	.word	0x2000531c

0800da7c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d106      	bne.n	800da98 <ethernetif_init+0x1c>
 800da8a:	4b0e      	ldr	r3, [pc, #56]	; (800dac4 <ethernetif_init+0x48>)
 800da8c:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
 800da90:	490d      	ldr	r1, [pc, #52]	; (800dac8 <ethernetif_init+0x4c>)
 800da92:	480e      	ldr	r0, [pc, #56]	; (800dacc <ethernetif_init+0x50>)
 800da94:	f015 f94c 	bl	8022d30 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2273      	movs	r2, #115	; 0x73
 800da9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2274      	movs	r2, #116	; 0x74
 800daa4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	4a09      	ldr	r2, [pc, #36]	; (800dad0 <ethernetif_init+0x54>)
 800daac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	4a08      	ldr	r2, [pc, #32]	; (800dad4 <ethernetif_init+0x58>)
 800dab2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7ff fddf 	bl	800d678 <low_level_init>

  return ERR_OK;
 800daba:	2300      	movs	r3, #0
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3708      	adds	r7, #8
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}
 800dac4:	080245d8 	.word	0x080245d8
 800dac8:	080245f4 	.word	0x080245f4
 800dacc:	08024604 	.word	0x08024604
 800dad0:	08014f19 	.word	0x08014f19
 800dad4:	0800d8e9 	.word	0x0800d8e9

0800dad8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800dae4:	68f9      	ldr	r1, [r7, #12]
 800dae6:	4809      	ldr	r0, [pc, #36]	; (800db0c <pbuf_free_custom+0x34>)
 800dae8:	f009 fd8c 	bl	8017604 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800daec:	4b08      	ldr	r3, [pc, #32]	; (800db10 <pbuf_free_custom+0x38>)
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d107      	bne.n	800db04 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800daf4:	4b06      	ldr	r3, [pc, #24]	; (800db10 <pbuf_free_custom+0x38>)
 800daf6:	2200      	movs	r2, #0
 800daf8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800dafa:	4b06      	ldr	r3, [pc, #24]	; (800db14 <pbuf_free_custom+0x3c>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4618      	mov	r0, r3
 800db00:	f000 febc 	bl	800e87c <osSemaphoreRelease>
  }
}
 800db04:	bf00      	nop
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	080284a8 	.word	0x080284a8
 800db10:	20005318 	.word	0x20005318
 800db14:	2000531c 	.word	0x2000531c

0800db18 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800db1c:	f7f6 febc 	bl	8004898 <HAL_GetTick>
 800db20:	4603      	mov	r3, r0
}
 800db22:	4618      	mov	r0, r3
 800db24:	bd80      	pop	{r7, pc}
	...

0800db28 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b08e      	sub	sp, #56	; 0x38
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800db30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db34:	2200      	movs	r2, #0
 800db36:	601a      	str	r2, [r3, #0]
 800db38:	605a      	str	r2, [r3, #4]
 800db3a:	609a      	str	r2, [r3, #8]
 800db3c:	60da      	str	r2, [r3, #12]
 800db3e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a52      	ldr	r2, [pc, #328]	; (800dc90 <HAL_ETH_MspInit+0x168>)
 800db46:	4293      	cmp	r3, r2
 800db48:	f040 809e 	bne.w	800dc88 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800db4c:	4b51      	ldr	r3, [pc, #324]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db50:	4a50      	ldr	r2, [pc, #320]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800db56:	6313      	str	r3, [r2, #48]	; 0x30
 800db58:	4b4e      	ldr	r3, [pc, #312]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db60:	623b      	str	r3, [r7, #32]
 800db62:	6a3b      	ldr	r3, [r7, #32]
 800db64:	4b4b      	ldr	r3, [pc, #300]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db68:	4a4a      	ldr	r2, [pc, #296]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800db6e:	6313      	str	r3, [r2, #48]	; 0x30
 800db70:	4b48      	ldr	r3, [pc, #288]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800db78:	61fb      	str	r3, [r7, #28]
 800db7a:	69fb      	ldr	r3, [r7, #28]
 800db7c:	4b45      	ldr	r3, [pc, #276]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db80:	4a44      	ldr	r2, [pc, #272]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800db86:	6313      	str	r3, [r2, #48]	; 0x30
 800db88:	4b42      	ldr	r3, [pc, #264]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db90:	61bb      	str	r3, [r7, #24]
 800db92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800db94:	4b3f      	ldr	r3, [pc, #252]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db98:	4a3e      	ldr	r2, [pc, #248]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800db9a:	f043 0304 	orr.w	r3, r3, #4
 800db9e:	6313      	str	r3, [r2, #48]	; 0x30
 800dba0:	4b3c      	ldr	r3, [pc, #240]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba4:	f003 0304 	and.w	r3, r3, #4
 800dba8:	617b      	str	r3, [r7, #20]
 800dbaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dbac:	4b39      	ldr	r3, [pc, #228]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb0:	4a38      	ldr	r2, [pc, #224]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dbb2:	f043 0301 	orr.w	r3, r3, #1
 800dbb6:	6313      	str	r3, [r2, #48]	; 0x30
 800dbb8:	4b36      	ldr	r3, [pc, #216]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dbba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbbc:	f003 0301 	and.w	r3, r3, #1
 800dbc0:	613b      	str	r3, [r7, #16]
 800dbc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800dbc4:	4b33      	ldr	r3, [pc, #204]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc8:	4a32      	ldr	r2, [pc, #200]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dbca:	f043 0302 	orr.w	r3, r3, #2
 800dbce:	6313      	str	r3, [r2, #48]	; 0x30
 800dbd0:	4b30      	ldr	r3, [pc, #192]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dbd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd4:	f003 0302 	and.w	r3, r3, #2
 800dbd8:	60fb      	str	r3, [r7, #12]
 800dbda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800dbdc:	4b2d      	ldr	r3, [pc, #180]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbe0:	4a2c      	ldr	r2, [pc, #176]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dbe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbe6:	6313      	str	r3, [r2, #48]	; 0x30
 800dbe8:	4b2a      	ldr	r3, [pc, #168]	; (800dc94 <HAL_ETH_MspInit+0x16c>)
 800dbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbf0:	60bb      	str	r3, [r7, #8]
 800dbf2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800dbf4:	2332      	movs	r3, #50	; 0x32
 800dbf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dbf8:	2302      	movs	r3, #2
 800dbfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc00:	2303      	movs	r3, #3
 800dc02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dc04:	230b      	movs	r3, #11
 800dc06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800dc08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	4822      	ldr	r0, [pc, #136]	; (800dc98 <HAL_ETH_MspInit+0x170>)
 800dc10:	f7f8 fa34 	bl	800607c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800dc14:	2386      	movs	r3, #134	; 0x86
 800dc16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc18:	2302      	movs	r3, #2
 800dc1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc20:	2303      	movs	r3, #3
 800dc22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dc24:	230b      	movs	r3, #11
 800dc26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	481b      	ldr	r0, [pc, #108]	; (800dc9c <HAL_ETH_MspInit+0x174>)
 800dc30:	f7f8 fa24 	bl	800607c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800dc34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc3a:	2302      	movs	r3, #2
 800dc3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc42:	2303      	movs	r3, #3
 800dc44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dc46:	230b      	movs	r3, #11
 800dc48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4813      	ldr	r0, [pc, #76]	; (800dca0 <HAL_ETH_MspInit+0x178>)
 800dc52:	f7f8 fa13 	bl	800607c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800dc56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dc5c:	2302      	movs	r3, #2
 800dc5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dc60:	2300      	movs	r3, #0
 800dc62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dc64:	2303      	movs	r3, #3
 800dc66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800dc68:	230b      	movs	r3, #11
 800dc6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800dc6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dc70:	4619      	mov	r1, r3
 800dc72:	480c      	ldr	r0, [pc, #48]	; (800dca4 <HAL_ETH_MspInit+0x17c>)
 800dc74:	f7f8 fa02 	bl	800607c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800dc78:	2200      	movs	r2, #0
 800dc7a:	2105      	movs	r1, #5
 800dc7c:	203d      	movs	r0, #61	; 0x3d
 800dc7e:	f7f6 fef3 	bl	8004a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800dc82:	203d      	movs	r0, #61	; 0x3d
 800dc84:	f7f6 ff0c 	bl	8004aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800dc88:	bf00      	nop
 800dc8a:	3738      	adds	r7, #56	; 0x38
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	40028000 	.word	0x40028000
 800dc94:	40023800 	.word	0x40023800
 800dc98:	40020800 	.word	0x40020800
 800dc9c:	40020000 	.word	0x40020000
 800dca0:	40020400 	.word	0x40020400
 800dca4:	40021800 	.word	0x40021800

0800dca8 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800dcac:	4802      	ldr	r0, [pc, #8]	; (800dcb8 <ETH_PHY_IO_Init+0x10>)
 800dcae:	f7f7 fd7f 	bl	80057b0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800dcb2:	2300      	movs	r3, #0
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20005324 	.word	0x20005324

0800dcbc <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	af00      	add	r7, sp, #0
  return 0;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	68ba      	ldr	r2, [r7, #8]
 800dcdc:	68f9      	ldr	r1, [r7, #12]
 800dcde:	4807      	ldr	r0, [pc, #28]	; (800dcfc <ETH_PHY_IO_ReadReg+0x30>)
 800dce0:	f7f7 fbce 	bl	8005480 <HAL_ETH_ReadPHYRegister>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d002      	beq.n	800dcf0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800dcea:	f04f 33ff 	mov.w	r3, #4294967295
 800dcee:	e000      	b.n	800dcf2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800dcf0:	2300      	movs	r3, #0
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3710      	adds	r7, #16
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	20005324 	.word	0x20005324

0800dd00 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	68f9      	ldr	r1, [r7, #12]
 800dd12:	4807      	ldr	r0, [pc, #28]	; (800dd30 <ETH_PHY_IO_WriteReg+0x30>)
 800dd14:	f7f7 fbff 	bl	8005516 <HAL_ETH_WritePHYRegister>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d002      	beq.n	800dd24 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800dd1e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd22:	e000      	b.n	800dd26 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800dd24:	2300      	movs	r3, #0
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}
 800dd2e:	bf00      	nop
 800dd30:	20005324 	.word	0x20005324

0800dd34 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800dd38:	f7f6 fdae 	bl	8004898 <HAL_GetTick>
 800dd3c:	4603      	mov	r3, r0
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	bd80      	pop	{r7, pc}
	...

0800dd44 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b0a0      	sub	sp, #128	; 0x80
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800dd4c:	f107 0308 	add.w	r3, r7, #8
 800dd50:	2264      	movs	r2, #100	; 0x64
 800dd52:	2100      	movs	r1, #0
 800dd54:	4618      	mov	r0, r3
 800dd56:	f015 f88a 	bl	8022e6e <memset>
  int32_t PHYLinkState = 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dd62:	2300      	movs	r3, #0
 800dd64:	67bb      	str	r3, [r7, #120]	; 0x78
 800dd66:	2300      	movs	r3, #0
 800dd68:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800dd6e:	483a      	ldr	r0, [pc, #232]	; (800de58 <ethernet_link_thread+0x114>)
 800dd70:	f7f6 fce9 	bl	8004746 <LAN8742_GetLinkState>
 800dd74:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800dd76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd7c:	089b      	lsrs	r3, r3, #2
 800dd7e:	f003 0301 	and.w	r3, r3, #1
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d00c      	beq.n	800dda2 <ethernet_link_thread+0x5e>
 800dd88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dd8a:	2b01      	cmp	r3, #1
 800dd8c:	dc09      	bgt.n	800dda2 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800dd8e:	4833      	ldr	r0, [pc, #204]	; (800de5c <ethernet_link_thread+0x118>)
 800dd90:	f7f7 f830 	bl	8004df4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800dd94:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dd96:	f009 ff09 	bl	8017bac <netif_set_down>
    netif_set_link_down(netif);
 800dd9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dd9c:	f009 ff6c 	bl	8017c78 <netif_set_link_down>
 800dda0:	e055      	b.n	800de4e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800dda2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dda4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dda8:	f003 0304 	and.w	r3, r3, #4
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d14e      	bne.n	800de4e <ethernet_link_thread+0x10a>
 800ddb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddb2:	2b01      	cmp	r3, #1
 800ddb4:	dd4b      	ble.n	800de4e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800ddb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ddb8:	3b02      	subs	r3, #2
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d82a      	bhi.n	800de14 <ethernet_link_thread+0xd0>
 800ddbe:	a201      	add	r2, pc, #4	; (adr r2, 800ddc4 <ethernet_link_thread+0x80>)
 800ddc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc4:	0800ddd5 	.word	0x0800ddd5
 800ddc8:	0800dde7 	.word	0x0800dde7
 800ddcc:	0800ddf7 	.word	0x0800ddf7
 800ddd0:	0800de07 	.word	0x0800de07
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ddd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddd8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ddda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ddde:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800dde0:	2301      	movs	r3, #1
 800dde2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800dde4:	e017      	b.n	800de16 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800dde6:	2300      	movs	r3, #0
 800dde8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ddea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ddee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ddf4:	e00f      	b.n	800de16 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ddf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddfa:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800de00:	2301      	movs	r3, #1
 800de02:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800de04:	e007      	b.n	800de16 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800de06:	2300      	movs	r3, #0
 800de08:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800de0a:	2300      	movs	r3, #0
 800de0c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800de0e:	2301      	movs	r3, #1
 800de10:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800de12:	e000      	b.n	800de16 <ethernet_link_thread+0xd2>
    default:
      break;
 800de14:	bf00      	nop
    }

    if(linkchanged)
 800de16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d018      	beq.n	800de4e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800de1c:	f107 0308 	add.w	r3, r7, #8
 800de20:	4619      	mov	r1, r3
 800de22:	480e      	ldr	r0, [pc, #56]	; (800de5c <ethernet_link_thread+0x118>)
 800de24:	f7f7 fbc0 	bl	80055a8 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800de28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800de2a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800de2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de2e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800de30:	f107 0308 	add.w	r3, r7, #8
 800de34:	4619      	mov	r1, r3
 800de36:	4809      	ldr	r0, [pc, #36]	; (800de5c <ethernet_link_thread+0x118>)
 800de38:	f7f7 fca0 	bl	800577c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800de3c:	4807      	ldr	r0, [pc, #28]	; (800de5c <ethernet_link_thread+0x118>)
 800de3e:	f7f6 ff4b 	bl	8004cd8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800de42:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800de44:	f009 fe46 	bl	8017ad4 <netif_set_up>
      netif_set_link_up(netif);
 800de48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800de4a:	f009 fee1 	bl	8017c10 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800de4e:	2064      	movs	r0, #100	; 0x64
 800de50:	f000 f9c2 	bl	800e1d8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800de54:	e78b      	b.n	800dd6e <ethernet_link_thread+0x2a>
 800de56:	bf00      	nop
 800de58:	2000540c 	.word	0x2000540c
 800de5c:	20005324 	.word	0x20005324

0800de60 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af02      	add	r7, sp, #8
 800de66:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800de68:	4812      	ldr	r0, [pc, #72]	; (800deb4 <HAL_ETH_RxAllocateCallback+0x54>)
 800de6a:	f009 fb57 	bl	801751c <memp_malloc_pool>
 800de6e:	60f8      	str	r0, [r7, #12]
  if (p)
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d014      	beq.n	800dea0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f103 0220 	add.w	r2, r3, #32
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	4a0d      	ldr	r2, [pc, #52]	; (800deb8 <HAL_ETH_RxAllocateCallback+0x58>)
 800de84:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800de8e:	9201      	str	r2, [sp, #4]
 800de90:	9300      	str	r3, [sp, #0]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2241      	movs	r2, #65	; 0x41
 800de96:	2100      	movs	r1, #0
 800de98:	2000      	movs	r0, #0
 800de9a:	f00a f911 	bl	80180c0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800de9e:	e005      	b.n	800deac <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800dea0:	4b06      	ldr	r3, [pc, #24]	; (800debc <HAL_ETH_RxAllocateCallback+0x5c>)
 800dea2:	2201      	movs	r2, #1
 800dea4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2200      	movs	r2, #0
 800deaa:	601a      	str	r2, [r3, #0]
}
 800deac:	bf00      	nop
 800deae:	3710      	adds	r7, #16
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	080284a8 	.word	0x080284a8
 800deb8:	0800dad9 	.word	0x0800dad9
 800debc:	20005318 	.word	0x20005318

0800dec0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b088      	sub	sp, #32
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	607a      	str	r2, [r7, #4]
 800decc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ded6:	2300      	movs	r3, #0
 800ded8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	3b20      	subs	r3, #32
 800dede:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	2200      	movs	r2, #0
 800dee4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	2200      	movs	r2, #0
 800deea:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	887a      	ldrh	r2, [r7, #2]
 800def0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800def2:	69bb      	ldr	r3, [r7, #24]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d103      	bne.n	800df02 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	69fa      	ldr	r2, [r7, #28]
 800defe:	601a      	str	r2, [r3, #0]
 800df00:	e003      	b.n	800df0a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	69fa      	ldr	r2, [r7, #28]
 800df08:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	69fa      	ldr	r2, [r7, #28]
 800df0e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800df10:	69bb      	ldr	r3, [r7, #24]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	61fb      	str	r3, [r7, #28]
 800df16:	e009      	b.n	800df2c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	891a      	ldrh	r2, [r3, #8]
 800df1c:	887b      	ldrh	r3, [r7, #2]
 800df1e:	4413      	add	r3, r2
 800df20:	b29a      	uxth	r2, r3
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	61fb      	str	r3, [r7, #28]
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1f2      	bne.n	800df18 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800df32:	887b      	ldrh	r3, [r7, #2]
 800df34:	4619      	mov	r1, r3
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff fb40 	bl	800d5bc <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800df3c:	bf00      	nop
 800df3e:	3720      	adds	r7, #32
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b082      	sub	sp, #8
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f00a fa71 	bl	8018434 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800df52:	bf00      	nop
 800df54:	3708      	adds	r7, #8
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800df5a:	b480      	push	{r7}
 800df5c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800df5e:	bf00      	nop
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr

0800df68 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df6e:	f3ef 8305 	mrs	r3, IPSR
 800df72:	60bb      	str	r3, [r7, #8]
  return(result);
 800df74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10f      	bne.n	800df9a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df7a:	f3ef 8310 	mrs	r3, PRIMASK
 800df7e:	607b      	str	r3, [r7, #4]
  return(result);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d105      	bne.n	800df92 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800df86:	f3ef 8311 	mrs	r3, BASEPRI
 800df8a:	603b      	str	r3, [r7, #0]
  return(result);
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d007      	beq.n	800dfa2 <osKernelInitialize+0x3a>
 800df92:	4b0e      	ldr	r3, [pc, #56]	; (800dfcc <osKernelInitialize+0x64>)
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b02      	cmp	r3, #2
 800df98:	d103      	bne.n	800dfa2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800df9a:	f06f 0305 	mvn.w	r3, #5
 800df9e:	60fb      	str	r3, [r7, #12]
 800dfa0:	e00c      	b.n	800dfbc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dfa2:	4b0a      	ldr	r3, [pc, #40]	; (800dfcc <osKernelInitialize+0x64>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d105      	bne.n	800dfb6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dfaa:	4b08      	ldr	r3, [pc, #32]	; (800dfcc <osKernelInitialize+0x64>)
 800dfac:	2201      	movs	r2, #1
 800dfae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	60fb      	str	r3, [r7, #12]
 800dfb4:	e002      	b.n	800dfbc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800dfb6:	f04f 33ff 	mov.w	r3, #4294967295
 800dfba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800dfbc:	68fb      	ldr	r3, [r7, #12]
}
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3714      	adds	r7, #20
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	2000542c 	.word	0x2000542c

0800dfd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dfd6:	f3ef 8305 	mrs	r3, IPSR
 800dfda:	60bb      	str	r3, [r7, #8]
  return(result);
 800dfdc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10f      	bne.n	800e002 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfe2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfe6:	607b      	str	r3, [r7, #4]
  return(result);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d105      	bne.n	800dffa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dfee:	f3ef 8311 	mrs	r3, BASEPRI
 800dff2:	603b      	str	r3, [r7, #0]
  return(result);
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d007      	beq.n	800e00a <osKernelStart+0x3a>
 800dffa:	4b0f      	ldr	r3, [pc, #60]	; (800e038 <osKernelStart+0x68>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b02      	cmp	r3, #2
 800e000:	d103      	bne.n	800e00a <osKernelStart+0x3a>
    stat = osErrorISR;
 800e002:	f06f 0305 	mvn.w	r3, #5
 800e006:	60fb      	str	r3, [r7, #12]
 800e008:	e010      	b.n	800e02c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e00a:	4b0b      	ldr	r3, [pc, #44]	; (800e038 <osKernelStart+0x68>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d109      	bne.n	800e026 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e012:	f7ff ffa2 	bl	800df5a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e016:	4b08      	ldr	r3, [pc, #32]	; (800e038 <osKernelStart+0x68>)
 800e018:	2202      	movs	r2, #2
 800e01a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e01c:	f002 ffe4 	bl	8010fe8 <vTaskStartScheduler>
      stat = osOK;
 800e020:	2300      	movs	r3, #0
 800e022:	60fb      	str	r3, [r7, #12]
 800e024:	e002      	b.n	800e02c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800e026:	f04f 33ff 	mov.w	r3, #4294967295
 800e02a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800e02c:	68fb      	ldr	r3, [r7, #12]
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	2000542c 	.word	0x2000542c

0800e03c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e042:	f3ef 8305 	mrs	r3, IPSR
 800e046:	60bb      	str	r3, [r7, #8]
  return(result);
 800e048:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d10f      	bne.n	800e06e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e04e:	f3ef 8310 	mrs	r3, PRIMASK
 800e052:	607b      	str	r3, [r7, #4]
  return(result);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d105      	bne.n	800e066 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e05a:	f3ef 8311 	mrs	r3, BASEPRI
 800e05e:	603b      	str	r3, [r7, #0]
  return(result);
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d007      	beq.n	800e076 <osKernelGetTickCount+0x3a>
 800e066:	4b08      	ldr	r3, [pc, #32]	; (800e088 <osKernelGetTickCount+0x4c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b02      	cmp	r3, #2
 800e06c:	d103      	bne.n	800e076 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800e06e:	f003 f8ed 	bl	801124c <xTaskGetTickCountFromISR>
 800e072:	60f8      	str	r0, [r7, #12]
 800e074:	e002      	b.n	800e07c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800e076:	f003 f8d9 	bl	801122c <xTaskGetTickCount>
 800e07a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800e07c:	68fb      	ldr	r3, [r7, #12]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3710      	adds	r7, #16
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	2000542c 	.word	0x2000542c

0800e08c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b090      	sub	sp, #64	; 0x40
 800e090:	af04      	add	r7, sp, #16
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e098:	2300      	movs	r3, #0
 800e09a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e09c:	f3ef 8305 	mrs	r3, IPSR
 800e0a0:	61fb      	str	r3, [r7, #28]
  return(result);
 800e0a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f040 808f 	bne.w	800e1c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0aa:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ae:	61bb      	str	r3, [r7, #24]
  return(result);
 800e0b0:	69bb      	ldr	r3, [r7, #24]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d105      	bne.n	800e0c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e0b6:	f3ef 8311 	mrs	r3, BASEPRI
 800e0ba:	617b      	str	r3, [r7, #20]
  return(result);
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d003      	beq.n	800e0ca <osThreadNew+0x3e>
 800e0c2:	4b44      	ldr	r3, [pc, #272]	; (800e1d4 <osThreadNew+0x148>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2b02      	cmp	r3, #2
 800e0c8:	d07e      	beq.n	800e1c8 <osThreadNew+0x13c>
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d07b      	beq.n	800e1c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800e0d0:	2380      	movs	r3, #128	; 0x80
 800e0d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800e0d4:	2318      	movs	r3, #24
 800e0d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800e0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d045      	beq.n	800e174 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <osThreadNew+0x6a>
        name = attr->name;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d002      	beq.n	800e104 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e106:	2b00      	cmp	r3, #0
 800e108:	d008      	beq.n	800e11c <osThreadNew+0x90>
 800e10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10c:	2b38      	cmp	r3, #56	; 0x38
 800e10e:	d805      	bhi.n	800e11c <osThreadNew+0x90>
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	f003 0301 	and.w	r3, r3, #1
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d001      	beq.n	800e120 <osThreadNew+0x94>
        return (NULL);
 800e11c:	2300      	movs	r3, #0
 800e11e:	e054      	b.n	800e1ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	695b      	ldr	r3, [r3, #20]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	695b      	ldr	r3, [r3, #20]
 800e12c:	089b      	lsrs	r3, r3, #2
 800e12e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00e      	beq.n	800e156 <osThreadNew+0xca>
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	2bab      	cmp	r3, #171	; 0xab
 800e13e:	d90a      	bls.n	800e156 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e144:	2b00      	cmp	r3, #0
 800e146:	d006      	beq.n	800e156 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	695b      	ldr	r3, [r3, #20]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d002      	beq.n	800e156 <osThreadNew+0xca>
        mem = 1;
 800e150:	2301      	movs	r3, #1
 800e152:	623b      	str	r3, [r7, #32]
 800e154:	e010      	b.n	800e178 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	689b      	ldr	r3, [r3, #8]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d10c      	bne.n	800e178 <osThreadNew+0xec>
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d108      	bne.n	800e178 <osThreadNew+0xec>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	691b      	ldr	r3, [r3, #16]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d104      	bne.n	800e178 <osThreadNew+0xec>
          mem = 0;
 800e16e:	2300      	movs	r3, #0
 800e170:	623b      	str	r3, [r7, #32]
 800e172:	e001      	b.n	800e178 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	d110      	bne.n	800e1a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e186:	9202      	str	r2, [sp, #8]
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f002 fc25 	bl	80109e4 <xTaskCreateStatic>
 800e19a:	4603      	mov	r3, r0
 800e19c:	613b      	str	r3, [r7, #16]
 800e19e:	e013      	b.n	800e1c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800e1a0:	6a3b      	ldr	r3, [r7, #32]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d110      	bne.n	800e1c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	f107 0310 	add.w	r3, r7, #16
 800e1ae:	9301      	str	r3, [sp, #4]
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b2:	9300      	str	r3, [sp, #0]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f002 fc76 	bl	8010aaa <xTaskCreate>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d001      	beq.n	800e1c8 <osThreadNew+0x13c>
          hTask = NULL;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e1c8:	693b      	ldr	r3, [r7, #16]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3730      	adds	r7, #48	; 0x30
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	2000542c 	.word	0x2000542c

0800e1d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e1e0:	f3ef 8305 	mrs	r3, IPSR
 800e1e4:	613b      	str	r3, [r7, #16]
  return(result);
 800e1e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10f      	bne.n	800e20c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1ec:	f3ef 8310 	mrs	r3, PRIMASK
 800e1f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d105      	bne.n	800e204 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e1f8:	f3ef 8311 	mrs	r3, BASEPRI
 800e1fc:	60bb      	str	r3, [r7, #8]
  return(result);
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d007      	beq.n	800e214 <osDelay+0x3c>
 800e204:	4b0a      	ldr	r3, [pc, #40]	; (800e230 <osDelay+0x58>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d103      	bne.n	800e214 <osDelay+0x3c>
    stat = osErrorISR;
 800e20c:	f06f 0305 	mvn.w	r3, #5
 800e210:	617b      	str	r3, [r7, #20]
 800e212:	e007      	b.n	800e224 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800e214:	2300      	movs	r3, #0
 800e216:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <osDelay+0x4c>
      vTaskDelay(ticks);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f002 fda0 	bl	8010d64 <vTaskDelay>
    }
  }

  return (stat);
 800e224:	697b      	ldr	r3, [r7, #20]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3718      	adds	r7, #24
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	2000542c 	.word	0x2000542c

0800e234 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800e234:	b580      	push	{r7, lr}
 800e236:	b084      	sub	sp, #16
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f004 f949 	bl	80124d4 <pvTimerGetTimerID>
 800e242:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d005      	beq.n	800e256 <TimerCallback+0x22>
    callb->func (callb->arg);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	68fa      	ldr	r2, [r7, #12]
 800e250:	6852      	ldr	r2, [r2, #4]
 800e252:	4610      	mov	r0, r2
 800e254:	4798      	blx	r3
  }
}
 800e256:	bf00      	nop
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}
	...

0800e260 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800e260:	b580      	push	{r7, lr}
 800e262:	b08e      	sub	sp, #56	; 0x38
 800e264:	af02      	add	r7, sp, #8
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	607a      	str	r2, [r7, #4]
 800e26a:	603b      	str	r3, [r7, #0]
 800e26c:	460b      	mov	r3, r1
 800e26e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800e270:	2300      	movs	r3, #0
 800e272:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e274:	f3ef 8305 	mrs	r3, IPSR
 800e278:	61bb      	str	r3, [r7, #24]
  return(result);
 800e27a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d16a      	bne.n	800e356 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e280:	f3ef 8310 	mrs	r3, PRIMASK
 800e284:	617b      	str	r3, [r7, #20]
  return(result);
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d105      	bne.n	800e298 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e28c:	f3ef 8311 	mrs	r3, BASEPRI
 800e290:	613b      	str	r3, [r7, #16]
  return(result);
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d003      	beq.n	800e2a0 <osTimerNew+0x40>
 800e298:	4b31      	ldr	r3, [pc, #196]	; (800e360 <osTimerNew+0x100>)
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b02      	cmp	r3, #2
 800e29e:	d05a      	beq.n	800e356 <osTimerNew+0xf6>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d057      	beq.n	800e356 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800e2a6:	2008      	movs	r0, #8
 800e2a8:	f000 fd7e 	bl	800eda8 <pvPortMalloc>
 800e2ac:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d050      	beq.n	800e356 <osTimerNew+0xf6>
      callb->func = func;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	68fa      	ldr	r2, [r7, #12]
 800e2b8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800e2c0:	7afb      	ldrb	r3, [r7, #11]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d102      	bne.n	800e2cc <osTimerNew+0x6c>
        reload = pdFALSE;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	627b      	str	r3, [r7, #36]	; 0x24
 800e2ca:	e001      	b.n	800e2d0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800e2d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d4:	623b      	str	r3, [r7, #32]
      name = NULL;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d01c      	beq.n	800e31a <osTimerNew+0xba>
        if (attr->name != NULL) {
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d002      	beq.n	800e2ee <osTimerNew+0x8e>
          name = attr->name;
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	689b      	ldr	r3, [r3, #8]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d006      	beq.n	800e304 <osTimerNew+0xa4>
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	2b2b      	cmp	r3, #43	; 0x2b
 800e2fc:	d902      	bls.n	800e304 <osTimerNew+0xa4>
          mem = 1;
 800e2fe:	2301      	movs	r3, #1
 800e300:	623b      	str	r3, [r7, #32]
 800e302:	e00c      	b.n	800e31e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d108      	bne.n	800e31e <osTimerNew+0xbe>
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d104      	bne.n	800e31e <osTimerNew+0xbe>
            mem = 0;
 800e314:	2300      	movs	r3, #0
 800e316:	623b      	str	r3, [r7, #32]
 800e318:	e001      	b.n	800e31e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d10c      	bne.n	800e33e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	9301      	str	r3, [sp, #4]
 800e32a:	4b0e      	ldr	r3, [pc, #56]	; (800e364 <osTimerNew+0x104>)
 800e32c:	9300      	str	r3, [sp, #0]
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e332:	2101      	movs	r1, #1
 800e334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e336:	f003 fd3c 	bl	8011db2 <xTimerCreateStatic>
 800e33a:	62b8      	str	r0, [r7, #40]	; 0x28
 800e33c:	e00b      	b.n	800e356 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800e33e:	6a3b      	ldr	r3, [r7, #32]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d108      	bne.n	800e356 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800e344:	4b07      	ldr	r3, [pc, #28]	; (800e364 <osTimerNew+0x104>)
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e34c:	2101      	movs	r1, #1
 800e34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e350:	f003 fd0e 	bl	8011d70 <xTimerCreate>
 800e354:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800e356:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3730      	adds	r7, #48	; 0x30
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	2000542c 	.word	0x2000542c
 800e364:	0800e235 	.word	0x0800e235

0800e368 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800e368:	b580      	push	{r7, lr}
 800e36a:	b08a      	sub	sp, #40	; 0x28
 800e36c:	af02      	add	r7, sp, #8
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e376:	f3ef 8305 	mrs	r3, IPSR
 800e37a:	617b      	str	r3, [r7, #20]
  return(result);
 800e37c:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d10f      	bne.n	800e3a2 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e382:	f3ef 8310 	mrs	r3, PRIMASK
 800e386:	613b      	str	r3, [r7, #16]
  return(result);
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d105      	bne.n	800e39a <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e38e:	f3ef 8311 	mrs	r3, BASEPRI
 800e392:	60fb      	str	r3, [r7, #12]
  return(result);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d007      	beq.n	800e3aa <osTimerStart+0x42>
 800e39a:	4b12      	ldr	r3, [pc, #72]	; (800e3e4 <osTimerStart+0x7c>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	2b02      	cmp	r3, #2
 800e3a0:	d103      	bne.n	800e3aa <osTimerStart+0x42>
    stat = osErrorISR;
 800e3a2:	f06f 0305 	mvn.w	r3, #5
 800e3a6:	61fb      	str	r3, [r7, #28]
 800e3a8:	e017      	b.n	800e3da <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d103      	bne.n	800e3b8 <osTimerStart+0x50>
    stat = osErrorParameter;
 800e3b0:	f06f 0303 	mvn.w	r3, #3
 800e3b4:	61fb      	str	r3, [r7, #28]
 800e3b6:	e010      	b.n	800e3da <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	9300      	str	r3, [sp, #0]
 800e3bc:	2300      	movs	r3, #0
 800e3be:	683a      	ldr	r2, [r7, #0]
 800e3c0:	2104      	movs	r1, #4
 800e3c2:	69b8      	ldr	r0, [r7, #24]
 800e3c4:	f003 fd74 	bl	8011eb0 <xTimerGenericCommand>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d102      	bne.n	800e3d4 <osTimerStart+0x6c>
      stat = osOK;
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	61fb      	str	r3, [r7, #28]
 800e3d2:	e002      	b.n	800e3da <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800e3d4:	f06f 0302 	mvn.w	r3, #2
 800e3d8:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800e3da:	69fb      	ldr	r3, [r7, #28]
}
 800e3dc:	4618      	mov	r0, r3
 800e3de:	3720      	adds	r7, #32
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}
 800e3e4:	2000542c 	.word	0x2000542c

0800e3e8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b08a      	sub	sp, #40	; 0x28
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3f4:	f3ef 8305 	mrs	r3, IPSR
 800e3f8:	613b      	str	r3, [r7, #16]
  return(result);
 800e3fa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f040 8085 	bne.w	800e50c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e402:	f3ef 8310 	mrs	r3, PRIMASK
 800e406:	60fb      	str	r3, [r7, #12]
  return(result);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d105      	bne.n	800e41a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e40e:	f3ef 8311 	mrs	r3, BASEPRI
 800e412:	60bb      	str	r3, [r7, #8]
  return(result);
 800e414:	68bb      	ldr	r3, [r7, #8]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d003      	beq.n	800e422 <osMutexNew+0x3a>
 800e41a:	4b3f      	ldr	r3, [pc, #252]	; (800e518 <osMutexNew+0x130>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	2b02      	cmp	r3, #2
 800e420:	d074      	beq.n	800e50c <osMutexNew+0x124>
    if (attr != NULL) {
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d003      	beq.n	800e430 <osMutexNew+0x48>
      type = attr->attr_bits;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	623b      	str	r3, [r7, #32]
 800e42e:	e001      	b.n	800e434 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800e430:	2300      	movs	r3, #0
 800e432:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e434:	6a3b      	ldr	r3, [r7, #32]
 800e436:	f003 0301 	and.w	r3, r3, #1
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <osMutexNew+0x5c>
      rmtx = 1U;
 800e43e:	2301      	movs	r3, #1
 800e440:	61fb      	str	r3, [r7, #28]
 800e442:	e001      	b.n	800e448 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800e444:	2300      	movs	r3, #0
 800e446:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e448:	6a3b      	ldr	r3, [r7, #32]
 800e44a:	f003 0308 	and.w	r3, r3, #8
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d15c      	bne.n	800e50c <osMutexNew+0x124>
      mem = -1;
 800e452:	f04f 33ff 	mov.w	r3, #4294967295
 800e456:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d015      	beq.n	800e48a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	689b      	ldr	r3, [r3, #8]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d006      	beq.n	800e474 <osMutexNew+0x8c>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	2b4f      	cmp	r3, #79	; 0x4f
 800e46c:	d902      	bls.n	800e474 <osMutexNew+0x8c>
          mem = 1;
 800e46e:	2301      	movs	r3, #1
 800e470:	61bb      	str	r3, [r7, #24]
 800e472:	e00c      	b.n	800e48e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	689b      	ldr	r3, [r3, #8]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d108      	bne.n	800e48e <osMutexNew+0xa6>
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	2b00      	cmp	r3, #0
 800e482:	d104      	bne.n	800e48e <osMutexNew+0xa6>
            mem = 0;
 800e484:	2300      	movs	r3, #0
 800e486:	61bb      	str	r3, [r7, #24]
 800e488:	e001      	b.n	800e48e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800e48a:	2300      	movs	r3, #0
 800e48c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d112      	bne.n	800e4ba <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d007      	beq.n	800e4aa <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	4619      	mov	r1, r3
 800e4a0:	2004      	movs	r0, #4
 800e4a2:	f001 fad2 	bl	800fa4a <xQueueCreateMutexStatic>
 800e4a6:	6278      	str	r0, [r7, #36]	; 0x24
 800e4a8:	e016      	b.n	800e4d8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	689b      	ldr	r3, [r3, #8]
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	2001      	movs	r0, #1
 800e4b2:	f001 faca 	bl	800fa4a <xQueueCreateMutexStatic>
 800e4b6:	6278      	str	r0, [r7, #36]	; 0x24
 800e4b8:	e00e      	b.n	800e4d8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d10b      	bne.n	800e4d8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800e4c0:	69fb      	ldr	r3, [r7, #28]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d004      	beq.n	800e4d0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800e4c6:	2004      	movs	r0, #4
 800e4c8:	f001 faa7 	bl	800fa1a <xQueueCreateMutex>
 800e4cc:	6278      	str	r0, [r7, #36]	; 0x24
 800e4ce:	e003      	b.n	800e4d8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800e4d0:	2001      	movs	r0, #1
 800e4d2:	f001 faa2 	bl	800fa1a <xQueueCreateMutex>
 800e4d6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00c      	beq.n	800e4f8 <osMutexNew+0x110>
        if (attr != NULL) {
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d003      	beq.n	800e4ec <osMutexNew+0x104>
          name = attr->name;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	617b      	str	r3, [r7, #20]
 800e4ea:	e001      	b.n	800e4f0 <osMutexNew+0x108>
        } else {
          name = NULL;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800e4f0:	6979      	ldr	r1, [r7, #20]
 800e4f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4f4:	f002 f9ee 	bl	80108d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d006      	beq.n	800e50c <osMutexNew+0x124>
 800e4fe:	69fb      	ldr	r3, [r7, #28]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d003      	beq.n	800e50c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e506:	f043 0301 	orr.w	r3, r3, #1
 800e50a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3728      	adds	r7, #40	; 0x28
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	2000542c 	.word	0x2000542c

0800e51c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b088      	sub	sp, #32
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f023 0301 	bic.w	r3, r3, #1
 800e52c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f003 0301 	and.w	r3, r3, #1
 800e534:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e536:	2300      	movs	r3, #0
 800e538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e53a:	f3ef 8305 	mrs	r3, IPSR
 800e53e:	613b      	str	r3, [r7, #16]
  return(result);
 800e540:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e542:	2b00      	cmp	r3, #0
 800e544:	d10f      	bne.n	800e566 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e546:	f3ef 8310 	mrs	r3, PRIMASK
 800e54a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d105      	bne.n	800e55e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e552:	f3ef 8311 	mrs	r3, BASEPRI
 800e556:	60bb      	str	r3, [r7, #8]
  return(result);
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d007      	beq.n	800e56e <osMutexAcquire+0x52>
 800e55e:	4b1d      	ldr	r3, [pc, #116]	; (800e5d4 <osMutexAcquire+0xb8>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2b02      	cmp	r3, #2
 800e564:	d103      	bne.n	800e56e <osMutexAcquire+0x52>
    stat = osErrorISR;
 800e566:	f06f 0305 	mvn.w	r3, #5
 800e56a:	61fb      	str	r3, [r7, #28]
 800e56c:	e02c      	b.n	800e5c8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800e56e:	69bb      	ldr	r3, [r7, #24]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d103      	bne.n	800e57c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800e574:	f06f 0303 	mvn.w	r3, #3
 800e578:	61fb      	str	r3, [r7, #28]
 800e57a:	e025      	b.n	800e5c8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d011      	beq.n	800e5a6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800e582:	6839      	ldr	r1, [r7, #0]
 800e584:	69b8      	ldr	r0, [r7, #24]
 800e586:	f001 fab1 	bl	800faec <xQueueTakeMutexRecursive>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d01b      	beq.n	800e5c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d003      	beq.n	800e59e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800e596:	f06f 0301 	mvn.w	r3, #1
 800e59a:	61fb      	str	r3, [r7, #28]
 800e59c:	e014      	b.n	800e5c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e59e:	f06f 0302 	mvn.w	r3, #2
 800e5a2:	61fb      	str	r3, [r7, #28]
 800e5a4:	e010      	b.n	800e5c8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	69b8      	ldr	r0, [r7, #24]
 800e5aa:	f001 fe6b 	bl	8010284 <xQueueSemaphoreTake>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d009      	beq.n	800e5c8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d003      	beq.n	800e5c2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800e5ba:	f06f 0301 	mvn.w	r3, #1
 800e5be:	61fb      	str	r3, [r7, #28]
 800e5c0:	e002      	b.n	800e5c8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800e5c2:	f06f 0302 	mvn.w	r3, #2
 800e5c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800e5c8:	69fb      	ldr	r3, [r7, #28]
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3720      	adds	r7, #32
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	2000542c 	.word	0x2000542c

0800e5d8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b088      	sub	sp, #32
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f023 0301 	bic.w	r3, r3, #1
 800e5e6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f003 0301 	and.w	r3, r3, #1
 800e5ee:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5f4:	f3ef 8305 	mrs	r3, IPSR
 800e5f8:	613b      	str	r3, [r7, #16]
  return(result);
 800e5fa:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d10f      	bne.n	800e620 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e600:	f3ef 8310 	mrs	r3, PRIMASK
 800e604:	60fb      	str	r3, [r7, #12]
  return(result);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d105      	bne.n	800e618 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e60c:	f3ef 8311 	mrs	r3, BASEPRI
 800e610:	60bb      	str	r3, [r7, #8]
  return(result);
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d007      	beq.n	800e628 <osMutexRelease+0x50>
 800e618:	4b16      	ldr	r3, [pc, #88]	; (800e674 <osMutexRelease+0x9c>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d103      	bne.n	800e628 <osMutexRelease+0x50>
    stat = osErrorISR;
 800e620:	f06f 0305 	mvn.w	r3, #5
 800e624:	61fb      	str	r3, [r7, #28]
 800e626:	e01f      	b.n	800e668 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d103      	bne.n	800e636 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800e62e:	f06f 0303 	mvn.w	r3, #3
 800e632:	61fb      	str	r3, [r7, #28]
 800e634:	e018      	b.n	800e668 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d009      	beq.n	800e650 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800e63c:	69b8      	ldr	r0, [r7, #24]
 800e63e:	f001 fa1f 	bl	800fa80 <xQueueGiveMutexRecursive>
 800e642:	4603      	mov	r3, r0
 800e644:	2b01      	cmp	r3, #1
 800e646:	d00f      	beq.n	800e668 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e648:	f06f 0302 	mvn.w	r3, #2
 800e64c:	61fb      	str	r3, [r7, #28]
 800e64e:	e00b      	b.n	800e668 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800e650:	2300      	movs	r3, #0
 800e652:	2200      	movs	r2, #0
 800e654:	2100      	movs	r1, #0
 800e656:	69b8      	ldr	r0, [r7, #24]
 800e658:	f001 faf2 	bl	800fc40 <xQueueGenericSend>
 800e65c:	4603      	mov	r3, r0
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d002      	beq.n	800e668 <osMutexRelease+0x90>
        stat = osErrorResource;
 800e662:	f06f 0302 	mvn.w	r3, #2
 800e666:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800e668:	69fb      	ldr	r3, [r7, #28]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3720      	adds	r7, #32
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	2000542c 	.word	0x2000542c

0800e678 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e678:	b580      	push	{r7, lr}
 800e67a:	b08c      	sub	sp, #48	; 0x30
 800e67c:	af02      	add	r7, sp, #8
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	60b9      	str	r1, [r7, #8]
 800e682:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e684:	2300      	movs	r3, #0
 800e686:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e688:	f3ef 8305 	mrs	r3, IPSR
 800e68c:	61bb      	str	r3, [r7, #24]
  return(result);
 800e68e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e690:	2b00      	cmp	r3, #0
 800e692:	f040 8086 	bne.w	800e7a2 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e696:	f3ef 8310 	mrs	r3, PRIMASK
 800e69a:	617b      	str	r3, [r7, #20]
  return(result);
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d105      	bne.n	800e6ae <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e6a2:	f3ef 8311 	mrs	r3, BASEPRI
 800e6a6:	613b      	str	r3, [r7, #16]
  return(result);
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d003      	beq.n	800e6b6 <osSemaphoreNew+0x3e>
 800e6ae:	4b3f      	ldr	r3, [pc, #252]	; (800e7ac <osSemaphoreNew+0x134>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d075      	beq.n	800e7a2 <osSemaphoreNew+0x12a>
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d072      	beq.n	800e7a2 <osSemaphoreNew+0x12a>
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	d86e      	bhi.n	800e7a2 <osSemaphoreNew+0x12a>
    mem = -1;
 800e6c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e6c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d015      	beq.n	800e6fc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d006      	beq.n	800e6e6 <osSemaphoreNew+0x6e>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	2b4f      	cmp	r3, #79	; 0x4f
 800e6de:	d902      	bls.n	800e6e6 <osSemaphoreNew+0x6e>
        mem = 1;
 800e6e0:	2301      	movs	r3, #1
 800e6e2:	623b      	str	r3, [r7, #32]
 800e6e4:	e00c      	b.n	800e700 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d108      	bne.n	800e700 <osSemaphoreNew+0x88>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d104      	bne.n	800e700 <osSemaphoreNew+0x88>
          mem = 0;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	623b      	str	r3, [r7, #32]
 800e6fa:	e001      	b.n	800e700 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800e700:	6a3b      	ldr	r3, [r7, #32]
 800e702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e706:	d04c      	beq.n	800e7a2 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d128      	bne.n	800e760 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800e70e:	6a3b      	ldr	r3, [r7, #32]
 800e710:	2b01      	cmp	r3, #1
 800e712:	d10a      	bne.n	800e72a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	2203      	movs	r2, #3
 800e71a:	9200      	str	r2, [sp, #0]
 800e71c:	2200      	movs	r2, #0
 800e71e:	2100      	movs	r1, #0
 800e720:	2001      	movs	r0, #1
 800e722:	f001 f879 	bl	800f818 <xQueueGenericCreateStatic>
 800e726:	6278      	str	r0, [r7, #36]	; 0x24
 800e728:	e005      	b.n	800e736 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800e72a:	2203      	movs	r2, #3
 800e72c:	2100      	movs	r1, #0
 800e72e:	2001      	movs	r0, #1
 800e730:	f001 f8f4 	bl	800f91c <xQueueGenericCreate>
 800e734:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d022      	beq.n	800e782 <osSemaphoreNew+0x10a>
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d01f      	beq.n	800e782 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e742:	2300      	movs	r3, #0
 800e744:	2200      	movs	r2, #0
 800e746:	2100      	movs	r1, #0
 800e748:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e74a:	f001 fa79 	bl	800fc40 <xQueueGenericSend>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b01      	cmp	r3, #1
 800e752:	d016      	beq.n	800e782 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800e754:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e756:	f001 ff6f 	bl	8010638 <vQueueDelete>
            hSemaphore = NULL;
 800e75a:	2300      	movs	r3, #0
 800e75c:	627b      	str	r3, [r7, #36]	; 0x24
 800e75e:	e010      	b.n	800e782 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800e760:	6a3b      	ldr	r3, [r7, #32]
 800e762:	2b01      	cmp	r3, #1
 800e764:	d108      	bne.n	800e778 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	689b      	ldr	r3, [r3, #8]
 800e76a:	461a      	mov	r2, r3
 800e76c:	68b9      	ldr	r1, [r7, #8]
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f001 f9f4 	bl	800fb5c <xQueueCreateCountingSemaphoreStatic>
 800e774:	6278      	str	r0, [r7, #36]	; 0x24
 800e776:	e004      	b.n	800e782 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e778:	68b9      	ldr	r1, [r7, #8]
 800e77a:	68f8      	ldr	r0, [r7, #12]
 800e77c:	f001 fa29 	bl	800fbd2 <xQueueCreateCountingSemaphore>
 800e780:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00c      	beq.n	800e7a2 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d003      	beq.n	800e796 <osSemaphoreNew+0x11e>
          name = attr->name;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	61fb      	str	r3, [r7, #28]
 800e794:	e001      	b.n	800e79a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800e796:	2300      	movs	r3, #0
 800e798:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e79a:	69f9      	ldr	r1, [r7, #28]
 800e79c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e79e:	f002 f899 	bl	80108d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3728      	adds	r7, #40	; 0x28
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	2000542c 	.word	0x2000542c

0800e7b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b088      	sub	sp, #32
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d103      	bne.n	800e7d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800e7c8:	f06f 0303 	mvn.w	r3, #3
 800e7cc:	61fb      	str	r3, [r7, #28]
 800e7ce:	e04b      	b.n	800e868 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e7d0:	f3ef 8305 	mrs	r3, IPSR
 800e7d4:	617b      	str	r3, [r7, #20]
  return(result);
 800e7d6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10f      	bne.n	800e7fc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7dc:	f3ef 8310 	mrs	r3, PRIMASK
 800e7e0:	613b      	str	r3, [r7, #16]
  return(result);
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d105      	bne.n	800e7f4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e7e8:	f3ef 8311 	mrs	r3, BASEPRI
 800e7ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d026      	beq.n	800e842 <osSemaphoreAcquire+0x92>
 800e7f4:	4b1f      	ldr	r3, [pc, #124]	; (800e874 <osSemaphoreAcquire+0xc4>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	2b02      	cmp	r3, #2
 800e7fa:	d122      	bne.n	800e842 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d003      	beq.n	800e80a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800e802:	f06f 0303 	mvn.w	r3, #3
 800e806:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e808:	e02d      	b.n	800e866 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800e80a:	2300      	movs	r3, #0
 800e80c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800e80e:	f107 0308 	add.w	r3, r7, #8
 800e812:	461a      	mov	r2, r3
 800e814:	2100      	movs	r1, #0
 800e816:	69b8      	ldr	r0, [r7, #24]
 800e818:	f001 fe48 	bl	80104ac <xQueueReceiveFromISR>
 800e81c:	4603      	mov	r3, r0
 800e81e:	2b01      	cmp	r3, #1
 800e820:	d003      	beq.n	800e82a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800e822:	f06f 0302 	mvn.w	r3, #2
 800e826:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800e828:	e01d      	b.n	800e866 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d01a      	beq.n	800e866 <osSemaphoreAcquire+0xb6>
 800e830:	4b11      	ldr	r3, [pc, #68]	; (800e878 <osSemaphoreAcquire+0xc8>)
 800e832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e836:	601a      	str	r2, [r3, #0]
 800e838:	f3bf 8f4f 	dsb	sy
 800e83c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800e840:	e011      	b.n	800e866 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800e842:	6839      	ldr	r1, [r7, #0]
 800e844:	69b8      	ldr	r0, [r7, #24]
 800e846:	f001 fd1d 	bl	8010284 <xQueueSemaphoreTake>
 800e84a:	4603      	mov	r3, r0
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d00b      	beq.n	800e868 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d003      	beq.n	800e85e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800e856:	f06f 0301 	mvn.w	r3, #1
 800e85a:	61fb      	str	r3, [r7, #28]
 800e85c:	e004      	b.n	800e868 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800e85e:	f06f 0302 	mvn.w	r3, #2
 800e862:	61fb      	str	r3, [r7, #28]
 800e864:	e000      	b.n	800e868 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800e866:	bf00      	nop
      }
    }
  }

  return (stat);
 800e868:	69fb      	ldr	r3, [r7, #28]
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3720      	adds	r7, #32
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	2000542c 	.word	0x2000542c
 800e878:	e000ed04 	.word	0xe000ed04

0800e87c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b088      	sub	sp, #32
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800e888:	2300      	movs	r3, #0
 800e88a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800e88c:	69bb      	ldr	r3, [r7, #24]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d103      	bne.n	800e89a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800e892:	f06f 0303 	mvn.w	r3, #3
 800e896:	61fb      	str	r3, [r7, #28]
 800e898:	e03e      	b.n	800e918 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e89a:	f3ef 8305 	mrs	r3, IPSR
 800e89e:	617b      	str	r3, [r7, #20]
  return(result);
 800e8a0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d10f      	bne.n	800e8c6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8a6:	f3ef 8310 	mrs	r3, PRIMASK
 800e8aa:	613b      	str	r3, [r7, #16]
  return(result);
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d105      	bne.n	800e8be <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e8b2:	f3ef 8311 	mrs	r3, BASEPRI
 800e8b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d01e      	beq.n	800e8fc <osSemaphoreRelease+0x80>
 800e8be:	4b19      	ldr	r3, [pc, #100]	; (800e924 <osSemaphoreRelease+0xa8>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	2b02      	cmp	r3, #2
 800e8c4:	d11a      	bne.n	800e8fc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e8ca:	f107 0308 	add.w	r3, r7, #8
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	69b8      	ldr	r0, [r7, #24]
 800e8d2:	f001 fb5b 	bl	800ff8c <xQueueGiveFromISR>
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d003      	beq.n	800e8e4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800e8dc:	f06f 0302 	mvn.w	r3, #2
 800e8e0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e8e2:	e018      	b.n	800e916 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d015      	beq.n	800e916 <osSemaphoreRelease+0x9a>
 800e8ea:	4b0f      	ldr	r3, [pc, #60]	; (800e928 <osSemaphoreRelease+0xac>)
 800e8ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8f0:	601a      	str	r2, [r3, #0]
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e8fa:	e00c      	b.n	800e916 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	2200      	movs	r2, #0
 800e900:	2100      	movs	r1, #0
 800e902:	69b8      	ldr	r0, [r7, #24]
 800e904:	f001 f99c 	bl	800fc40 <xQueueGenericSend>
 800e908:	4603      	mov	r3, r0
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d004      	beq.n	800e918 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800e90e:	f06f 0302 	mvn.w	r3, #2
 800e912:	61fb      	str	r3, [r7, #28]
 800e914:	e000      	b.n	800e918 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800e916:	bf00      	nop
    }
  }

  return (stat);
 800e918:	69fb      	ldr	r3, [r7, #28]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3720      	adds	r7, #32
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}
 800e922:	bf00      	nop
 800e924:	2000542c 	.word	0x2000542c
 800e928:	e000ed04 	.word	0xe000ed04

0800e92c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b088      	sub	sp, #32
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e938:	f3ef 8305 	mrs	r3, IPSR
 800e93c:	617b      	str	r3, [r7, #20]
  return(result);
 800e93e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10f      	bne.n	800e964 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e944:	f3ef 8310 	mrs	r3, PRIMASK
 800e948:	613b      	str	r3, [r7, #16]
  return(result);
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d105      	bne.n	800e95c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e950:	f3ef 8311 	mrs	r3, BASEPRI
 800e954:	60fb      	str	r3, [r7, #12]
  return(result);
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d007      	beq.n	800e96c <osSemaphoreDelete+0x40>
 800e95c:	4b0d      	ldr	r3, [pc, #52]	; (800e994 <osSemaphoreDelete+0x68>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2b02      	cmp	r3, #2
 800e962:	d103      	bne.n	800e96c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800e964:	f06f 0305 	mvn.w	r3, #5
 800e968:	61fb      	str	r3, [r7, #28]
 800e96a:	e00e      	b.n	800e98a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800e96c:	69bb      	ldr	r3, [r7, #24]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d103      	bne.n	800e97a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800e972:	f06f 0303 	mvn.w	r3, #3
 800e976:	61fb      	str	r3, [r7, #28]
 800e978:	e007      	b.n	800e98a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800e97a:	69b8      	ldr	r0, [r7, #24]
 800e97c:	f001 ffd4 	bl	8010928 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800e980:	2300      	movs	r3, #0
 800e982:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800e984:	69b8      	ldr	r0, [r7, #24]
 800e986:	f001 fe57 	bl	8010638 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800e98a:	69fb      	ldr	r3, [r7, #28]
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	3720      	adds	r7, #32
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	2000542c 	.word	0x2000542c

0800e998 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e998:	b580      	push	{r7, lr}
 800e99a:	b08c      	sub	sp, #48	; 0x30
 800e99c:	af02      	add	r7, sp, #8
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9a8:	f3ef 8305 	mrs	r3, IPSR
 800e9ac:	61bb      	str	r3, [r7, #24]
  return(result);
 800e9ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d16f      	bne.n	800ea94 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800e9b8:	617b      	str	r3, [r7, #20]
  return(result);
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d105      	bne.n	800e9cc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800e9c0:	f3ef 8311 	mrs	r3, BASEPRI
 800e9c4:	613b      	str	r3, [r7, #16]
  return(result);
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d003      	beq.n	800e9d4 <osMessageQueueNew+0x3c>
 800e9cc:	4b34      	ldr	r3, [pc, #208]	; (800eaa0 <osMessageQueueNew+0x108>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b02      	cmp	r3, #2
 800e9d2:	d05f      	beq.n	800ea94 <osMessageQueueNew+0xfc>
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d05c      	beq.n	800ea94 <osMessageQueueNew+0xfc>
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d059      	beq.n	800ea94 <osMessageQueueNew+0xfc>
    mem = -1;
 800e9e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d029      	beq.n	800ea40 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d012      	beq.n	800ea1a <osMessageQueueNew+0x82>
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	2b4f      	cmp	r3, #79	; 0x4f
 800e9fa:	d90e      	bls.n	800ea1a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00a      	beq.n	800ea1a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	695a      	ldr	r2, [r3, #20]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	68b9      	ldr	r1, [r7, #8]
 800ea0c:	fb01 f303 	mul.w	r3, r1, r3
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d302      	bcc.n	800ea1a <osMessageQueueNew+0x82>
        mem = 1;
 800ea14:	2301      	movs	r3, #1
 800ea16:	623b      	str	r3, [r7, #32]
 800ea18:	e014      	b.n	800ea44 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d110      	bne.n	800ea44 <osMessageQueueNew+0xac>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d10c      	bne.n	800ea44 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d108      	bne.n	800ea44 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	695b      	ldr	r3, [r3, #20]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d104      	bne.n	800ea44 <osMessageQueueNew+0xac>
          mem = 0;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	623b      	str	r3, [r7, #32]
 800ea3e:	e001      	b.n	800ea44 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800ea40:	2300      	movs	r3, #0
 800ea42:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ea44:	6a3b      	ldr	r3, [r7, #32]
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d10b      	bne.n	800ea62 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	691a      	ldr	r2, [r3, #16]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	689b      	ldr	r3, [r3, #8]
 800ea52:	2100      	movs	r1, #0
 800ea54:	9100      	str	r1, [sp, #0]
 800ea56:	68b9      	ldr	r1, [r7, #8]
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f000 fedd 	bl	800f818 <xQueueGenericCreateStatic>
 800ea5e:	6278      	str	r0, [r7, #36]	; 0x24
 800ea60:	e008      	b.n	800ea74 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800ea62:	6a3b      	ldr	r3, [r7, #32]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d105      	bne.n	800ea74 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800ea68:	2200      	movs	r2, #0
 800ea6a:	68b9      	ldr	r1, [r7, #8]
 800ea6c:	68f8      	ldr	r0, [r7, #12]
 800ea6e:	f000 ff55 	bl	800f91c <xQueueGenericCreate>
 800ea72:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00c      	beq.n	800ea94 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d003      	beq.n	800ea88 <osMessageQueueNew+0xf0>
        name = attr->name;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	61fb      	str	r3, [r7, #28]
 800ea86:	e001      	b.n	800ea8c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800ea8c:	69f9      	ldr	r1, [r7, #28]
 800ea8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea90:	f001 ff20 	bl	80108d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3728      	adds	r7, #40	; 0x28
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	2000542c 	.word	0x2000542c

0800eaa4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b08a      	sub	sp, #40	; 0x28
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	603b      	str	r3, [r7, #0]
 800eab0:	4613      	mov	r3, r2
 800eab2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eab8:	2300      	movs	r3, #0
 800eaba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eabc:	f3ef 8305 	mrs	r3, IPSR
 800eac0:	61fb      	str	r3, [r7, #28]
  return(result);
 800eac2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d10f      	bne.n	800eae8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eac8:	f3ef 8310 	mrs	r3, PRIMASK
 800eacc:	61bb      	str	r3, [r7, #24]
  return(result);
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d105      	bne.n	800eae0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ead4:	f3ef 8311 	mrs	r3, BASEPRI
 800ead8:	617b      	str	r3, [r7, #20]
  return(result);
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d02c      	beq.n	800eb3a <osMessageQueuePut+0x96>
 800eae0:	4b28      	ldr	r3, [pc, #160]	; (800eb84 <osMessageQueuePut+0xe0>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b02      	cmp	r3, #2
 800eae6:	d128      	bne.n	800eb3a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eae8:	6a3b      	ldr	r3, [r7, #32]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d005      	beq.n	800eafa <osMessageQueuePut+0x56>
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d002      	beq.n	800eafa <osMessageQueuePut+0x56>
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d003      	beq.n	800eb02 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800eafa:	f06f 0303 	mvn.w	r3, #3
 800eafe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb00:	e039      	b.n	800eb76 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800eb02:	2300      	movs	r3, #0
 800eb04:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800eb06:	f107 0210 	add.w	r2, r7, #16
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	68b9      	ldr	r1, [r7, #8]
 800eb0e:	6a38      	ldr	r0, [r7, #32]
 800eb10:	f001 f99c 	bl	800fe4c <xQueueGenericSendFromISR>
 800eb14:	4603      	mov	r3, r0
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d003      	beq.n	800eb22 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800eb1a:	f06f 0302 	mvn.w	r3, #2
 800eb1e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb20:	e029      	b.n	800eb76 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d026      	beq.n	800eb76 <osMessageQueuePut+0xd2>
 800eb28:	4b17      	ldr	r3, [pc, #92]	; (800eb88 <osMessageQueuePut+0xe4>)
 800eb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb2e:	601a      	str	r2, [r3, #0]
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb38:	e01d      	b.n	800eb76 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eb3a:	6a3b      	ldr	r3, [r7, #32]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d002      	beq.n	800eb46 <osMessageQueuePut+0xa2>
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d103      	bne.n	800eb4e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800eb46:	f06f 0303 	mvn.w	r3, #3
 800eb4a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb4c:	e014      	b.n	800eb78 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eb4e:	2300      	movs	r3, #0
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	68b9      	ldr	r1, [r7, #8]
 800eb54:	6a38      	ldr	r0, [r7, #32]
 800eb56:	f001 f873 	bl	800fc40 <xQueueGenericSend>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d00b      	beq.n	800eb78 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800eb66:	f06f 0301 	mvn.w	r3, #1
 800eb6a:	627b      	str	r3, [r7, #36]	; 0x24
 800eb6c:	e004      	b.n	800eb78 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800eb6e:	f06f 0302 	mvn.w	r3, #2
 800eb72:	627b      	str	r3, [r7, #36]	; 0x24
 800eb74:	e000      	b.n	800eb78 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb76:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3728      	adds	r7, #40	; 0x28
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	2000542c 	.word	0x2000542c
 800eb88:	e000ed04 	.word	0xe000ed04

0800eb8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b08a      	sub	sp, #40	; 0x28
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
 800eb98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eba2:	f3ef 8305 	mrs	r3, IPSR
 800eba6:	61fb      	str	r3, [r7, #28]
  return(result);
 800eba8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d10f      	bne.n	800ebce <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebae:	f3ef 8310 	mrs	r3, PRIMASK
 800ebb2:	61bb      	str	r3, [r7, #24]
  return(result);
 800ebb4:	69bb      	ldr	r3, [r7, #24]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d105      	bne.n	800ebc6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ebba:	f3ef 8311 	mrs	r3, BASEPRI
 800ebbe:	617b      	str	r3, [r7, #20]
  return(result);
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d02c      	beq.n	800ec20 <osMessageQueueGet+0x94>
 800ebc6:	4b28      	ldr	r3, [pc, #160]	; (800ec68 <osMessageQueueGet+0xdc>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	2b02      	cmp	r3, #2
 800ebcc:	d128      	bne.n	800ec20 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ebce:	6a3b      	ldr	r3, [r7, #32]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <osMessageQueueGet+0x54>
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <osMessageQueueGet+0x54>
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d003      	beq.n	800ebe8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800ebe0:	f06f 0303 	mvn.w	r3, #3
 800ebe4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ebe6:	e038      	b.n	800ec5a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ebec:	f107 0310 	add.w	r3, r7, #16
 800ebf0:	461a      	mov	r2, r3
 800ebf2:	68b9      	ldr	r1, [r7, #8]
 800ebf4:	6a38      	ldr	r0, [r7, #32]
 800ebf6:	f001 fc59 	bl	80104ac <xQueueReceiveFromISR>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d003      	beq.n	800ec08 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800ec00:	f06f 0302 	mvn.w	r3, #2
 800ec04:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec06:	e028      	b.n	800ec5a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d025      	beq.n	800ec5a <osMessageQueueGet+0xce>
 800ec0e:	4b17      	ldr	r3, [pc, #92]	; (800ec6c <osMessageQueueGet+0xe0>)
 800ec10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec14:	601a      	str	r2, [r3, #0]
 800ec16:	f3bf 8f4f 	dsb	sy
 800ec1a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec1e:	e01c      	b.n	800ec5a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ec20:	6a3b      	ldr	r3, [r7, #32]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d002      	beq.n	800ec2c <osMessageQueueGet+0xa0>
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d103      	bne.n	800ec34 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ec2c:	f06f 0303 	mvn.w	r3, #3
 800ec30:	627b      	str	r3, [r7, #36]	; 0x24
 800ec32:	e013      	b.n	800ec5c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ec34:	683a      	ldr	r2, [r7, #0]
 800ec36:	68b9      	ldr	r1, [r7, #8]
 800ec38:	6a38      	ldr	r0, [r7, #32]
 800ec3a:	f001 fa3d 	bl	80100b8 <xQueueReceive>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b01      	cmp	r3, #1
 800ec42:	d00b      	beq.n	800ec5c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d003      	beq.n	800ec52 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ec4a:	f06f 0301 	mvn.w	r3, #1
 800ec4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ec50:	e004      	b.n	800ec5c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ec52:	f06f 0302 	mvn.w	r3, #2
 800ec56:	627b      	str	r3, [r7, #36]	; 0x24
 800ec58:	e000      	b.n	800ec5c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ec5a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ec5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3728      	adds	r7, #40	; 0x28
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	2000542c 	.word	0x2000542c
 800ec6c:	e000ed04 	.word	0xe000ed04

0800ec70 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b088      	sub	sp, #32
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d102      	bne.n	800ec88 <osMessageQueueGetCount+0x18>
    count = 0U;
 800ec82:	2300      	movs	r3, #0
 800ec84:	61fb      	str	r3, [r7, #28]
 800ec86:	e01e      	b.n	800ecc6 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec88:	f3ef 8305 	mrs	r3, IPSR
 800ec8c:	617b      	str	r3, [r7, #20]
  return(result);
 800ec8e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d10f      	bne.n	800ecb4 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec94:	f3ef 8310 	mrs	r3, PRIMASK
 800ec98:	613b      	str	r3, [r7, #16]
  return(result);
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d105      	bne.n	800ecac <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800eca0:	f3ef 8311 	mrs	r3, BASEPRI
 800eca4:	60fb      	str	r3, [r7, #12]
  return(result);
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d008      	beq.n	800ecbe <osMessageQueueGetCount+0x4e>
 800ecac:	4b08      	ldr	r3, [pc, #32]	; (800ecd0 <osMessageQueueGetCount+0x60>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	d104      	bne.n	800ecbe <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800ecb4:	69b8      	ldr	r0, [r7, #24]
 800ecb6:	f001 fc9f 	bl	80105f8 <uxQueueMessagesWaitingFromISR>
 800ecba:	61f8      	str	r0, [r7, #28]
 800ecbc:	e003      	b.n	800ecc6 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800ecbe:	69b8      	ldr	r0, [r7, #24]
 800ecc0:	f001 fc7a 	bl	80105b8 <uxQueueMessagesWaiting>
 800ecc4:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800ecc6:	69fb      	ldr	r3, [r7, #28]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3720      	adds	r7, #32
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	2000542c 	.word	0x2000542c

0800ecd4 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b088      	sub	sp, #32
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ece0:	f3ef 8305 	mrs	r3, IPSR
 800ece4:	617b      	str	r3, [r7, #20]
  return(result);
 800ece6:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10f      	bne.n	800ed0c <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecec:	f3ef 8310 	mrs	r3, PRIMASK
 800ecf0:	613b      	str	r3, [r7, #16]
  return(result);
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d105      	bne.n	800ed04 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ecf8:	f3ef 8311 	mrs	r3, BASEPRI
 800ecfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d007      	beq.n	800ed14 <osMessageQueueDelete+0x40>
 800ed04:	4b0d      	ldr	r3, [pc, #52]	; (800ed3c <osMessageQueueDelete+0x68>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b02      	cmp	r3, #2
 800ed0a:	d103      	bne.n	800ed14 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800ed0c:	f06f 0305 	mvn.w	r3, #5
 800ed10:	61fb      	str	r3, [r7, #28]
 800ed12:	e00e      	b.n	800ed32 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800ed14:	69bb      	ldr	r3, [r7, #24]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d103      	bne.n	800ed22 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800ed1a:	f06f 0303 	mvn.w	r3, #3
 800ed1e:	61fb      	str	r3, [r7, #28]
 800ed20:	e007      	b.n	800ed32 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800ed22:	69b8      	ldr	r0, [r7, #24]
 800ed24:	f001 fe00 	bl	8010928 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800ed2c:	69b8      	ldr	r0, [r7, #24]
 800ed2e:	f001 fc83 	bl	8010638 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800ed32:	69fb      	ldr	r3, [r7, #28]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3720      	adds	r7, #32
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	2000542c 	.word	0x2000542c

0800ed40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	4a07      	ldr	r2, [pc, #28]	; (800ed6c <vApplicationGetIdleTaskMemory+0x2c>)
 800ed50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	4a06      	ldr	r2, [pc, #24]	; (800ed70 <vApplicationGetIdleTaskMemory+0x30>)
 800ed56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2280      	movs	r2, #128	; 0x80
 800ed5c:	601a      	str	r2, [r3, #0]
}
 800ed5e:	bf00      	nop
 800ed60:	3714      	adds	r7, #20
 800ed62:	46bd      	mov	sp, r7
 800ed64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed68:	4770      	bx	lr
 800ed6a:	bf00      	nop
 800ed6c:	20005430 	.word	0x20005430
 800ed70:	200054dc 	.word	0x200054dc

0800ed74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ed74:	b480      	push	{r7}
 800ed76:	b085      	sub	sp, #20
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	4a07      	ldr	r2, [pc, #28]	; (800eda0 <vApplicationGetTimerTaskMemory+0x2c>)
 800ed84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	4a06      	ldr	r2, [pc, #24]	; (800eda4 <vApplicationGetTimerTaskMemory+0x30>)
 800ed8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed92:	601a      	str	r2, [r3, #0]
}
 800ed94:	bf00      	nop
 800ed96:	3714      	adds	r7, #20
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	200056dc 	.word	0x200056dc
 800eda4:	20005788 	.word	0x20005788

0800eda8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08a      	sub	sp, #40	; 0x28
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800edb0:	2300      	movs	r3, #0
 800edb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800edb4:	f002 f98c 	bl	80110d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800edb8:	4b5b      	ldr	r3, [pc, #364]	; (800ef28 <pvPortMalloc+0x180>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d101      	bne.n	800edc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800edc0:	f000 f91a 	bl	800eff8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800edc4:	4b59      	ldr	r3, [pc, #356]	; (800ef2c <pvPortMalloc+0x184>)
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	4013      	ands	r3, r2
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f040 8092 	bne.w	800eef6 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d01f      	beq.n	800ee18 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800edd8:	2208      	movs	r2, #8
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	4413      	add	r3, r2
 800edde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f003 0307 	and.w	r3, r3, #7
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d016      	beq.n	800ee18 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f023 0307 	bic.w	r3, r3, #7
 800edf0:	3308      	adds	r3, #8
 800edf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f003 0307 	and.w	r3, r3, #7
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00c      	beq.n	800ee18 <pvPortMalloc+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee02:	b672      	cpsid	i
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	b662      	cpsie	i
 800ee12:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ee14:	bf00      	nop
 800ee16:	e7fe      	b.n	800ee16 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d06b      	beq.n	800eef6 <pvPortMalloc+0x14e>
 800ee1e:	4b44      	ldr	r3, [pc, #272]	; (800ef30 <pvPortMalloc+0x188>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	429a      	cmp	r2, r3
 800ee26:	d866      	bhi.n	800eef6 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ee28:	4b42      	ldr	r3, [pc, #264]	; (800ef34 <pvPortMalloc+0x18c>)
 800ee2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ee2c:	4b41      	ldr	r3, [pc, #260]	; (800ef34 <pvPortMalloc+0x18c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee32:	e004      	b.n	800ee3e <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ee34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d903      	bls.n	800ee50 <pvPortMalloc+0xa8>
 800ee48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d1f1      	bne.n	800ee34 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee50:	4b35      	ldr	r3, [pc, #212]	; (800ef28 <pvPortMalloc+0x180>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d04d      	beq.n	800eef6 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ee5a:	6a3b      	ldr	r3, [r7, #32]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	2208      	movs	r2, #8
 800ee60:	4413      	add	r3, r2
 800ee62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ee64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee66:	681a      	ldr	r2, [r3, #0]
 800ee68:	6a3b      	ldr	r3, [r7, #32]
 800ee6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ee6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6e:	685a      	ldr	r2, [r3, #4]
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	1ad2      	subs	r2, r2, r3
 800ee74:	2308      	movs	r3, #8
 800ee76:	005b      	lsls	r3, r3, #1
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d921      	bls.n	800eec0 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ee7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	4413      	add	r3, r2
 800ee82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	f003 0307 	and.w	r3, r3, #7
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00c      	beq.n	800eea8 <pvPortMalloc+0x100>
	__asm volatile
 800ee8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee92:	b672      	cpsid	i
 800ee94:	f383 8811 	msr	BASEPRI, r3
 800ee98:	f3bf 8f6f 	isb	sy
 800ee9c:	f3bf 8f4f 	dsb	sy
 800eea0:	b662      	cpsie	i
 800eea2:	613b      	str	r3, [r7, #16]
}
 800eea4:	bf00      	nop
 800eea6:	e7fe      	b.n	800eea6 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeaa:	685a      	ldr	r2, [r3, #4]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	1ad2      	subs	r2, r2, r3
 800eeb0:	69bb      	ldr	r3, [r7, #24]
 800eeb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb6:	687a      	ldr	r2, [r7, #4]
 800eeb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eeba:	69b8      	ldr	r0, [r7, #24]
 800eebc:	f000 f8fe 	bl	800f0bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eec0:	4b1b      	ldr	r3, [pc, #108]	; (800ef30 <pvPortMalloc+0x188>)
 800eec2:	681a      	ldr	r2, [r3, #0]
 800eec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	1ad3      	subs	r3, r2, r3
 800eeca:	4a19      	ldr	r2, [pc, #100]	; (800ef30 <pvPortMalloc+0x188>)
 800eecc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eece:	4b18      	ldr	r3, [pc, #96]	; (800ef30 <pvPortMalloc+0x188>)
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	4b19      	ldr	r3, [pc, #100]	; (800ef38 <pvPortMalloc+0x190>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d203      	bcs.n	800eee2 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eeda:	4b15      	ldr	r3, [pc, #84]	; (800ef30 <pvPortMalloc+0x188>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4a16      	ldr	r2, [pc, #88]	; (800ef38 <pvPortMalloc+0x190>)
 800eee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	685a      	ldr	r2, [r3, #4]
 800eee6:	4b11      	ldr	r3, [pc, #68]	; (800ef2c <pvPortMalloc+0x184>)
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	431a      	orrs	r2, r3
 800eeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	2200      	movs	r2, #0
 800eef4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eef6:	f002 f8f9 	bl	80110ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	f003 0307 	and.w	r3, r3, #7
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00c      	beq.n	800ef1e <pvPortMalloc+0x176>
	__asm volatile
 800ef04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef08:	b672      	cpsid	i
 800ef0a:	f383 8811 	msr	BASEPRI, r3
 800ef0e:	f3bf 8f6f 	isb	sy
 800ef12:	f3bf 8f4f 	dsb	sy
 800ef16:	b662      	cpsie	i
 800ef18:	60fb      	str	r3, [r7, #12]
}
 800ef1a:	bf00      	nop
 800ef1c:	e7fe      	b.n	800ef1c <pvPortMalloc+0x174>
	return pvReturn;
 800ef1e:	69fb      	ldr	r3, [r7, #28]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3728      	adds	r7, #40	; 0x28
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	20018790 	.word	0x20018790
 800ef2c:	2001879c 	.word	0x2001879c
 800ef30:	20018794 	.word	0x20018794
 800ef34:	20018788 	.word	0x20018788
 800ef38:	20018798 	.word	0x20018798

0800ef3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b086      	sub	sp, #24
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d04c      	beq.n	800efe8 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ef4e:	2308      	movs	r3, #8
 800ef50:	425b      	negs	r3, r3
 800ef52:	697a      	ldr	r2, [r7, #20]
 800ef54:	4413      	add	r3, r2
 800ef56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	685a      	ldr	r2, [r3, #4]
 800ef60:	4b23      	ldr	r3, [pc, #140]	; (800eff0 <vPortFree+0xb4>)
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4013      	ands	r3, r2
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d10c      	bne.n	800ef84 <vPortFree+0x48>
	__asm volatile
 800ef6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6e:	b672      	cpsid	i
 800ef70:	f383 8811 	msr	BASEPRI, r3
 800ef74:	f3bf 8f6f 	isb	sy
 800ef78:	f3bf 8f4f 	dsb	sy
 800ef7c:	b662      	cpsie	i
 800ef7e:	60fb      	str	r3, [r7, #12]
}
 800ef80:	bf00      	nop
 800ef82:	e7fe      	b.n	800ef82 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ef84:	693b      	ldr	r3, [r7, #16]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00c      	beq.n	800efa6 <vPortFree+0x6a>
	__asm volatile
 800ef8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef90:	b672      	cpsid	i
 800ef92:	f383 8811 	msr	BASEPRI, r3
 800ef96:	f3bf 8f6f 	isb	sy
 800ef9a:	f3bf 8f4f 	dsb	sy
 800ef9e:	b662      	cpsie	i
 800efa0:	60bb      	str	r3, [r7, #8]
}
 800efa2:	bf00      	nop
 800efa4:	e7fe      	b.n	800efa4 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	685a      	ldr	r2, [r3, #4]
 800efaa:	4b11      	ldr	r3, [pc, #68]	; (800eff0 <vPortFree+0xb4>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	4013      	ands	r3, r2
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d019      	beq.n	800efe8 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d115      	bne.n	800efe8 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800efbc:	693b      	ldr	r3, [r7, #16]
 800efbe:	685a      	ldr	r2, [r3, #4]
 800efc0:	4b0b      	ldr	r3, [pc, #44]	; (800eff0 <vPortFree+0xb4>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	43db      	mvns	r3, r3
 800efc6:	401a      	ands	r2, r3
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800efcc:	f002 f880 	bl	80110d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	685a      	ldr	r2, [r3, #4]
 800efd4:	4b07      	ldr	r3, [pc, #28]	; (800eff4 <vPortFree+0xb8>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4413      	add	r3, r2
 800efda:	4a06      	ldr	r2, [pc, #24]	; (800eff4 <vPortFree+0xb8>)
 800efdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800efde:	6938      	ldr	r0, [r7, #16]
 800efe0:	f000 f86c 	bl	800f0bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800efe4:	f002 f882 	bl	80110ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800efe8:	bf00      	nop
 800efea:	3718      	adds	r7, #24
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	2001879c 	.word	0x2001879c
 800eff4:	20018794 	.word	0x20018794

0800eff8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800effe:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800f002:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f004:	4b27      	ldr	r3, [pc, #156]	; (800f0a4 <prvHeapInit+0xac>)
 800f006:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f003 0307 	and.w	r3, r3, #7
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d00c      	beq.n	800f02c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	3307      	adds	r3, #7
 800f016:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f023 0307 	bic.w	r3, r3, #7
 800f01e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	1ad3      	subs	r3, r2, r3
 800f026:	4a1f      	ldr	r2, [pc, #124]	; (800f0a4 <prvHeapInit+0xac>)
 800f028:	4413      	add	r3, r2
 800f02a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f030:	4a1d      	ldr	r2, [pc, #116]	; (800f0a8 <prvHeapInit+0xb0>)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f036:	4b1c      	ldr	r3, [pc, #112]	; (800f0a8 <prvHeapInit+0xb0>)
 800f038:	2200      	movs	r2, #0
 800f03a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	68ba      	ldr	r2, [r7, #8]
 800f040:	4413      	add	r3, r2
 800f042:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f044:	2208      	movs	r2, #8
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	1a9b      	subs	r3, r3, r2
 800f04a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f023 0307 	bic.w	r3, r3, #7
 800f052:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	4a15      	ldr	r2, [pc, #84]	; (800f0ac <prvHeapInit+0xb4>)
 800f058:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f05a:	4b14      	ldr	r3, [pc, #80]	; (800f0ac <prvHeapInit+0xb4>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	2200      	movs	r2, #0
 800f060:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f062:	4b12      	ldr	r3, [pc, #72]	; (800f0ac <prvHeapInit+0xb4>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2200      	movs	r2, #0
 800f068:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	1ad2      	subs	r2, r2, r3
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f078:	4b0c      	ldr	r3, [pc, #48]	; (800f0ac <prvHeapInit+0xb4>)
 800f07a:	681a      	ldr	r2, [r3, #0]
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	4a0a      	ldr	r2, [pc, #40]	; (800f0b0 <prvHeapInit+0xb8>)
 800f086:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f088:	683b      	ldr	r3, [r7, #0]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	4a09      	ldr	r2, [pc, #36]	; (800f0b4 <prvHeapInit+0xbc>)
 800f08e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f090:	4b09      	ldr	r3, [pc, #36]	; (800f0b8 <prvHeapInit+0xc0>)
 800f092:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f096:	601a      	str	r2, [r3, #0]
}
 800f098:	bf00      	nop
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr
 800f0a4:	20005b88 	.word	0x20005b88
 800f0a8:	20018788 	.word	0x20018788
 800f0ac:	20018790 	.word	0x20018790
 800f0b0:	20018798 	.word	0x20018798
 800f0b4:	20018794 	.word	0x20018794
 800f0b8:	2001879c 	.word	0x2001879c

0800f0bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f0c4:	4b28      	ldr	r3, [pc, #160]	; (800f168 <prvInsertBlockIntoFreeList+0xac>)
 800f0c6:	60fb      	str	r3, [r7, #12]
 800f0c8:	e002      	b.n	800f0d0 <prvInsertBlockIntoFreeList+0x14>
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	60fb      	str	r3, [r7, #12]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d8f7      	bhi.n	800f0ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	68ba      	ldr	r2, [r7, #8]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	687a      	ldr	r2, [r7, #4]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d108      	bne.n	800f0fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	685a      	ldr	r2, [r3, #4]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	441a      	add	r2, r3
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	68ba      	ldr	r2, [r7, #8]
 800f108:	441a      	add	r2, r3
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	429a      	cmp	r2, r3
 800f110:	d118      	bne.n	800f144 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	4b15      	ldr	r3, [pc, #84]	; (800f16c <prvInsertBlockIntoFreeList+0xb0>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d00d      	beq.n	800f13a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	685a      	ldr	r2, [r3, #4]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	441a      	add	r2, r3
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	601a      	str	r2, [r3, #0]
 800f138:	e008      	b.n	800f14c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f13a:	4b0c      	ldr	r3, [pc, #48]	; (800f16c <prvInsertBlockIntoFreeList+0xb0>)
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	601a      	str	r2, [r3, #0]
 800f142:	e003      	b.n	800f14c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	429a      	cmp	r2, r3
 800f152:	d002      	beq.n	800f15a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	687a      	ldr	r2, [r7, #4]
 800f158:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f15a:	bf00      	nop
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	20018788 	.word	0x20018788
 800f16c:	20018790 	.word	0x20018790

0800f170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f103 0208 	add.w	r2, r3, #8
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	f04f 32ff 	mov.w	r2, #4294967295
 800f188:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f103 0208 	add.w	r2, r3, #8
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f103 0208 	add.w	r2, r3, #8
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f1be:	bf00      	nop
 800f1c0:	370c      	adds	r7, #12
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c8:	4770      	bx	lr

0800f1ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f1ca:	b480      	push	{r7}
 800f1cc:	b085      	sub	sp, #20
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
 800f1d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	685b      	ldr	r3, [r3, #4]
 800f1d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	689a      	ldr	r2, [r3, #8]
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	683a      	ldr	r2, [r7, #0]
 800f1ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	683a      	ldr	r2, [r7, #0]
 800f1f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	1c5a      	adds	r2, r3, #1
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	601a      	str	r2, [r3, #0]
}
 800f206:	bf00      	nop
 800f208:	3714      	adds	r7, #20
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f212:	b480      	push	{r7}
 800f214:	b085      	sub	sp, #20
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
 800f21a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f228:	d103      	bne.n	800f232 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	691b      	ldr	r3, [r3, #16]
 800f22e:	60fb      	str	r3, [r7, #12]
 800f230:	e00c      	b.n	800f24c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	3308      	adds	r3, #8
 800f236:	60fb      	str	r3, [r7, #12]
 800f238:	e002      	b.n	800f240 <vListInsert+0x2e>
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	60fb      	str	r3, [r7, #12]
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	429a      	cmp	r2, r3
 800f24a:	d2f6      	bcs.n	800f23a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	685a      	ldr	r2, [r3, #4]
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	683a      	ldr	r2, [r7, #0]
 800f25a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f25c:	683b      	ldr	r3, [r7, #0]
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	683a      	ldr	r2, [r7, #0]
 800f266:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	1c5a      	adds	r2, r3, #1
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	601a      	str	r2, [r3, #0]
}
 800f278:	bf00      	nop
 800f27a:	3714      	adds	r7, #20
 800f27c:	46bd      	mov	sp, r7
 800f27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f282:	4770      	bx	lr

0800f284 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f284:	b480      	push	{r7}
 800f286:	b085      	sub	sp, #20
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	687a      	ldr	r2, [r7, #4]
 800f298:	6892      	ldr	r2, [r2, #8]
 800f29a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	6852      	ldr	r2, [r2, #4]
 800f2a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d103      	bne.n	800f2b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	689a      	ldr	r2, [r3, #8]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	1e5a      	subs	r2, r3, #1
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3714      	adds	r7, #20
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b085      	sub	sp, #20
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	60f8      	str	r0, [r7, #12]
 800f2e0:	60b9      	str	r1, [r7, #8]
 800f2e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	3b04      	subs	r3, #4
 800f2e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f2f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	3b04      	subs	r3, #4
 800f2f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f2f8:	68bb      	ldr	r3, [r7, #8]
 800f2fa:	f023 0201 	bic.w	r2, r3, #1
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	3b04      	subs	r3, #4
 800f306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f308:	4a0c      	ldr	r2, [pc, #48]	; (800f33c <pxPortInitialiseStack+0x64>)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	3b14      	subs	r3, #20
 800f312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f314:	687a      	ldr	r2, [r7, #4]
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	3b04      	subs	r3, #4
 800f31e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f06f 0202 	mvn.w	r2, #2
 800f326:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	3b20      	subs	r3, #32
 800f32c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f32e:	68fb      	ldr	r3, [r7, #12]
}
 800f330:	4618      	mov	r0, r3
 800f332:	3714      	adds	r7, #20
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr
 800f33c:	0800f341 	.word	0x0800f341

0800f340 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f346:	2300      	movs	r3, #0
 800f348:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f34a:	4b14      	ldr	r3, [pc, #80]	; (800f39c <prvTaskExitError+0x5c>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f352:	d00c      	beq.n	800f36e <prvTaskExitError+0x2e>
	__asm volatile
 800f354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f358:	b672      	cpsid	i
 800f35a:	f383 8811 	msr	BASEPRI, r3
 800f35e:	f3bf 8f6f 	isb	sy
 800f362:	f3bf 8f4f 	dsb	sy
 800f366:	b662      	cpsie	i
 800f368:	60fb      	str	r3, [r7, #12]
}
 800f36a:	bf00      	nop
 800f36c:	e7fe      	b.n	800f36c <prvTaskExitError+0x2c>
	__asm volatile
 800f36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f372:	b672      	cpsid	i
 800f374:	f383 8811 	msr	BASEPRI, r3
 800f378:	f3bf 8f6f 	isb	sy
 800f37c:	f3bf 8f4f 	dsb	sy
 800f380:	b662      	cpsie	i
 800f382:	60bb      	str	r3, [r7, #8]
}
 800f384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f386:	bf00      	nop
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d0fc      	beq.n	800f388 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f38e:	bf00      	nop
 800f390:	bf00      	nop
 800f392:	3714      	adds	r7, #20
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr
 800f39c:	20000028 	.word	0x20000028

0800f3a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f3a0:	4b07      	ldr	r3, [pc, #28]	; (800f3c0 <pxCurrentTCBConst2>)
 800f3a2:	6819      	ldr	r1, [r3, #0]
 800f3a4:	6808      	ldr	r0, [r1, #0]
 800f3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3aa:	f380 8809 	msr	PSP, r0
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	f04f 0000 	mov.w	r0, #0
 800f3b6:	f380 8811 	msr	BASEPRI, r0
 800f3ba:	4770      	bx	lr
 800f3bc:	f3af 8000 	nop.w

0800f3c0 <pxCurrentTCBConst2>:
 800f3c0:	200187e8 	.word	0x200187e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f3c4:	bf00      	nop
 800f3c6:	bf00      	nop

0800f3c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f3c8:	4808      	ldr	r0, [pc, #32]	; (800f3ec <prvPortStartFirstTask+0x24>)
 800f3ca:	6800      	ldr	r0, [r0, #0]
 800f3cc:	6800      	ldr	r0, [r0, #0]
 800f3ce:	f380 8808 	msr	MSP, r0
 800f3d2:	f04f 0000 	mov.w	r0, #0
 800f3d6:	f380 8814 	msr	CONTROL, r0
 800f3da:	b662      	cpsie	i
 800f3dc:	b661      	cpsie	f
 800f3de:	f3bf 8f4f 	dsb	sy
 800f3e2:	f3bf 8f6f 	isb	sy
 800f3e6:	df00      	svc	0
 800f3e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f3ea:	bf00      	nop
 800f3ec:	e000ed08 	.word	0xe000ed08

0800f3f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b084      	sub	sp, #16
 800f3f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f3f6:	4b37      	ldr	r3, [pc, #220]	; (800f4d4 <xPortStartScheduler+0xe4>)
 800f3f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	b2db      	uxtb	r3, r3
 800f400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	22ff      	movs	r2, #255	; 0xff
 800f406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	b2db      	uxtb	r3, r3
 800f40e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f410:	78fb      	ldrb	r3, [r7, #3]
 800f412:	b2db      	uxtb	r3, r3
 800f414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f418:	b2da      	uxtb	r2, r3
 800f41a:	4b2f      	ldr	r3, [pc, #188]	; (800f4d8 <xPortStartScheduler+0xe8>)
 800f41c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f41e:	4b2f      	ldr	r3, [pc, #188]	; (800f4dc <xPortStartScheduler+0xec>)
 800f420:	2207      	movs	r2, #7
 800f422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f424:	e009      	b.n	800f43a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800f426:	4b2d      	ldr	r3, [pc, #180]	; (800f4dc <xPortStartScheduler+0xec>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	3b01      	subs	r3, #1
 800f42c:	4a2b      	ldr	r2, [pc, #172]	; (800f4dc <xPortStartScheduler+0xec>)
 800f42e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f430:	78fb      	ldrb	r3, [r7, #3]
 800f432:	b2db      	uxtb	r3, r3
 800f434:	005b      	lsls	r3, r3, #1
 800f436:	b2db      	uxtb	r3, r3
 800f438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f43a:	78fb      	ldrb	r3, [r7, #3]
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f442:	2b80      	cmp	r3, #128	; 0x80
 800f444:	d0ef      	beq.n	800f426 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f446:	4b25      	ldr	r3, [pc, #148]	; (800f4dc <xPortStartScheduler+0xec>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f1c3 0307 	rsb	r3, r3, #7
 800f44e:	2b04      	cmp	r3, #4
 800f450:	d00c      	beq.n	800f46c <xPortStartScheduler+0x7c>
	__asm volatile
 800f452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f456:	b672      	cpsid	i
 800f458:	f383 8811 	msr	BASEPRI, r3
 800f45c:	f3bf 8f6f 	isb	sy
 800f460:	f3bf 8f4f 	dsb	sy
 800f464:	b662      	cpsie	i
 800f466:	60bb      	str	r3, [r7, #8]
}
 800f468:	bf00      	nop
 800f46a:	e7fe      	b.n	800f46a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f46c:	4b1b      	ldr	r3, [pc, #108]	; (800f4dc <xPortStartScheduler+0xec>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	021b      	lsls	r3, r3, #8
 800f472:	4a1a      	ldr	r2, [pc, #104]	; (800f4dc <xPortStartScheduler+0xec>)
 800f474:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f476:	4b19      	ldr	r3, [pc, #100]	; (800f4dc <xPortStartScheduler+0xec>)
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f47e:	4a17      	ldr	r2, [pc, #92]	; (800f4dc <xPortStartScheduler+0xec>)
 800f480:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	b2da      	uxtb	r2, r3
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f48a:	4b15      	ldr	r3, [pc, #84]	; (800f4e0 <xPortStartScheduler+0xf0>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4a14      	ldr	r2, [pc, #80]	; (800f4e0 <xPortStartScheduler+0xf0>)
 800f490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f494:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f496:	4b12      	ldr	r3, [pc, #72]	; (800f4e0 <xPortStartScheduler+0xf0>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a11      	ldr	r2, [pc, #68]	; (800f4e0 <xPortStartScheduler+0xf0>)
 800f49c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f4a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f4a2:	f000 f8dd 	bl	800f660 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f4a6:	4b0f      	ldr	r3, [pc, #60]	; (800f4e4 <xPortStartScheduler+0xf4>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f4ac:	f000 f8fc 	bl	800f6a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f4b0:	4b0d      	ldr	r3, [pc, #52]	; (800f4e8 <xPortStartScheduler+0xf8>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a0c      	ldr	r2, [pc, #48]	; (800f4e8 <xPortStartScheduler+0xf8>)
 800f4b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f4ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f4bc:	f7ff ff84 	bl	800f3c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f4c0:	f001 ff92 	bl	80113e8 <vTaskSwitchContext>
	prvTaskExitError();
 800f4c4:	f7ff ff3c 	bl	800f340 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f4c8:	2300      	movs	r3, #0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3710      	adds	r7, #16
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	e000e400 	.word	0xe000e400
 800f4d8:	200187a0 	.word	0x200187a0
 800f4dc:	200187a4 	.word	0x200187a4
 800f4e0:	e000ed20 	.word	0xe000ed20
 800f4e4:	20000028 	.word	0x20000028
 800f4e8:	e000ef34 	.word	0xe000ef34

0800f4ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f4ec:	b480      	push	{r7}
 800f4ee:	b083      	sub	sp, #12
 800f4f0:	af00      	add	r7, sp, #0
	__asm volatile
 800f4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f6:	b672      	cpsid	i
 800f4f8:	f383 8811 	msr	BASEPRI, r3
 800f4fc:	f3bf 8f6f 	isb	sy
 800f500:	f3bf 8f4f 	dsb	sy
 800f504:	b662      	cpsie	i
 800f506:	607b      	str	r3, [r7, #4]
}
 800f508:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f50a:	4b10      	ldr	r3, [pc, #64]	; (800f54c <vPortEnterCritical+0x60>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	3301      	adds	r3, #1
 800f510:	4a0e      	ldr	r2, [pc, #56]	; (800f54c <vPortEnterCritical+0x60>)
 800f512:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f514:	4b0d      	ldr	r3, [pc, #52]	; (800f54c <vPortEnterCritical+0x60>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d111      	bne.n	800f540 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f51c:	4b0c      	ldr	r3, [pc, #48]	; (800f550 <vPortEnterCritical+0x64>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	b2db      	uxtb	r3, r3
 800f522:	2b00      	cmp	r3, #0
 800f524:	d00c      	beq.n	800f540 <vPortEnterCritical+0x54>
	__asm volatile
 800f526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f52a:	b672      	cpsid	i
 800f52c:	f383 8811 	msr	BASEPRI, r3
 800f530:	f3bf 8f6f 	isb	sy
 800f534:	f3bf 8f4f 	dsb	sy
 800f538:	b662      	cpsie	i
 800f53a:	603b      	str	r3, [r7, #0]
}
 800f53c:	bf00      	nop
 800f53e:	e7fe      	b.n	800f53e <vPortEnterCritical+0x52>
	}
}
 800f540:	bf00      	nop
 800f542:	370c      	adds	r7, #12
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr
 800f54c:	20000028 	.word	0x20000028
 800f550:	e000ed04 	.word	0xe000ed04

0800f554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f55a:	4b13      	ldr	r3, [pc, #76]	; (800f5a8 <vPortExitCritical+0x54>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d10c      	bne.n	800f57c <vPortExitCritical+0x28>
	__asm volatile
 800f562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f566:	b672      	cpsid	i
 800f568:	f383 8811 	msr	BASEPRI, r3
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f3bf 8f4f 	dsb	sy
 800f574:	b662      	cpsie	i
 800f576:	607b      	str	r3, [r7, #4]
}
 800f578:	bf00      	nop
 800f57a:	e7fe      	b.n	800f57a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800f57c:	4b0a      	ldr	r3, [pc, #40]	; (800f5a8 <vPortExitCritical+0x54>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	3b01      	subs	r3, #1
 800f582:	4a09      	ldr	r2, [pc, #36]	; (800f5a8 <vPortExitCritical+0x54>)
 800f584:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f586:	4b08      	ldr	r3, [pc, #32]	; (800f5a8 <vPortExitCritical+0x54>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d105      	bne.n	800f59a <vPortExitCritical+0x46>
 800f58e:	2300      	movs	r3, #0
 800f590:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f592:	683b      	ldr	r3, [r7, #0]
 800f594:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f598:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f59a:	bf00      	nop
 800f59c:	370c      	adds	r7, #12
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop
 800f5a8:	20000028 	.word	0x20000028
 800f5ac:	00000000 	.word	0x00000000

0800f5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f5b0:	f3ef 8009 	mrs	r0, PSP
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	4b15      	ldr	r3, [pc, #84]	; (800f610 <pxCurrentTCBConst>)
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	f01e 0f10 	tst.w	lr, #16
 800f5c0:	bf08      	it	eq
 800f5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ca:	6010      	str	r0, [r2, #0]
 800f5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f5d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f5d4:	b672      	cpsid	i
 800f5d6:	f380 8811 	msr	BASEPRI, r0
 800f5da:	f3bf 8f4f 	dsb	sy
 800f5de:	f3bf 8f6f 	isb	sy
 800f5e2:	b662      	cpsie	i
 800f5e4:	f001 ff00 	bl	80113e8 <vTaskSwitchContext>
 800f5e8:	f04f 0000 	mov.w	r0, #0
 800f5ec:	f380 8811 	msr	BASEPRI, r0
 800f5f0:	bc09      	pop	{r0, r3}
 800f5f2:	6819      	ldr	r1, [r3, #0]
 800f5f4:	6808      	ldr	r0, [r1, #0]
 800f5f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5fa:	f01e 0f10 	tst.w	lr, #16
 800f5fe:	bf08      	it	eq
 800f600:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f604:	f380 8809 	msr	PSP, r0
 800f608:	f3bf 8f6f 	isb	sy
 800f60c:	4770      	bx	lr
 800f60e:	bf00      	nop

0800f610 <pxCurrentTCBConst>:
 800f610:	200187e8 	.word	0x200187e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f614:	bf00      	nop
 800f616:	bf00      	nop

0800f618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
	__asm volatile
 800f61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f622:	b672      	cpsid	i
 800f624:	f383 8811 	msr	BASEPRI, r3
 800f628:	f3bf 8f6f 	isb	sy
 800f62c:	f3bf 8f4f 	dsb	sy
 800f630:	b662      	cpsie	i
 800f632:	607b      	str	r3, [r7, #4]
}
 800f634:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f636:	f001 fe1b 	bl	8011270 <xTaskIncrementTick>
 800f63a:	4603      	mov	r3, r0
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d003      	beq.n	800f648 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f640:	4b06      	ldr	r3, [pc, #24]	; (800f65c <SysTick_Handler+0x44>)
 800f642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f646:	601a      	str	r2, [r3, #0]
 800f648:	2300      	movs	r3, #0
 800f64a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f64c:	683b      	ldr	r3, [r7, #0]
 800f64e:	f383 8811 	msr	BASEPRI, r3
}
 800f652:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f654:	bf00      	nop
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	e000ed04 	.word	0xe000ed04

0800f660 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f660:	b480      	push	{r7}
 800f662:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f664:	4b0b      	ldr	r3, [pc, #44]	; (800f694 <vPortSetupTimerInterrupt+0x34>)
 800f666:	2200      	movs	r2, #0
 800f668:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f66a:	4b0b      	ldr	r3, [pc, #44]	; (800f698 <vPortSetupTimerInterrupt+0x38>)
 800f66c:	2200      	movs	r2, #0
 800f66e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f670:	4b0a      	ldr	r3, [pc, #40]	; (800f69c <vPortSetupTimerInterrupt+0x3c>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4a0a      	ldr	r2, [pc, #40]	; (800f6a0 <vPortSetupTimerInterrupt+0x40>)
 800f676:	fba2 2303 	umull	r2, r3, r2, r3
 800f67a:	099b      	lsrs	r3, r3, #6
 800f67c:	4a09      	ldr	r2, [pc, #36]	; (800f6a4 <vPortSetupTimerInterrupt+0x44>)
 800f67e:	3b01      	subs	r3, #1
 800f680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f682:	4b04      	ldr	r3, [pc, #16]	; (800f694 <vPortSetupTimerInterrupt+0x34>)
 800f684:	2207      	movs	r2, #7
 800f686:	601a      	str	r2, [r3, #0]
}
 800f688:	bf00      	nop
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	e000e010 	.word	0xe000e010
 800f698:	e000e018 	.word	0xe000e018
 800f69c:	20000008 	.word	0x20000008
 800f6a0:	10624dd3 	.word	0x10624dd3
 800f6a4:	e000e014 	.word	0xe000e014

0800f6a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f6a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f6b8 <vPortEnableVFP+0x10>
 800f6ac:	6801      	ldr	r1, [r0, #0]
 800f6ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f6b2:	6001      	str	r1, [r0, #0]
 800f6b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f6b6:	bf00      	nop
 800f6b8:	e000ed88 	.word	0xe000ed88

0800f6bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f6bc:	b480      	push	{r7}
 800f6be:	b085      	sub	sp, #20
 800f6c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f6c2:	f3ef 8305 	mrs	r3, IPSR
 800f6c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2b0f      	cmp	r3, #15
 800f6cc:	d916      	bls.n	800f6fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f6ce:	4a19      	ldr	r2, [pc, #100]	; (800f734 <vPortValidateInterruptPriority+0x78>)
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f6d8:	4b17      	ldr	r3, [pc, #92]	; (800f738 <vPortValidateInterruptPriority+0x7c>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	7afa      	ldrb	r2, [r7, #11]
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d20c      	bcs.n	800f6fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800f6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e6:	b672      	cpsid	i
 800f6e8:	f383 8811 	msr	BASEPRI, r3
 800f6ec:	f3bf 8f6f 	isb	sy
 800f6f0:	f3bf 8f4f 	dsb	sy
 800f6f4:	b662      	cpsie	i
 800f6f6:	607b      	str	r3, [r7, #4]
}
 800f6f8:	bf00      	nop
 800f6fa:	e7fe      	b.n	800f6fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f6fc:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <vPortValidateInterruptPriority+0x80>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f704:	4b0e      	ldr	r3, [pc, #56]	; (800f740 <vPortValidateInterruptPriority+0x84>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	429a      	cmp	r2, r3
 800f70a:	d90c      	bls.n	800f726 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800f70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f710:	b672      	cpsid	i
 800f712:	f383 8811 	msr	BASEPRI, r3
 800f716:	f3bf 8f6f 	isb	sy
 800f71a:	f3bf 8f4f 	dsb	sy
 800f71e:	b662      	cpsie	i
 800f720:	603b      	str	r3, [r7, #0]
}
 800f722:	bf00      	nop
 800f724:	e7fe      	b.n	800f724 <vPortValidateInterruptPriority+0x68>
	}
 800f726:	bf00      	nop
 800f728:	3714      	adds	r7, #20
 800f72a:	46bd      	mov	sp, r7
 800f72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f730:	4770      	bx	lr
 800f732:	bf00      	nop
 800f734:	e000e3f0 	.word	0xe000e3f0
 800f738:	200187a0 	.word	0x200187a0
 800f73c:	e000ed0c 	.word	0xe000ed0c
 800f740:	200187a4 	.word	0x200187a4

0800f744 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d10c      	bne.n	800f772 <xQueueGenericReset+0x2e>
	__asm volatile
 800f758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75c:	b672      	cpsid	i
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	b662      	cpsie	i
 800f76c:	60bb      	str	r3, [r7, #8]
}
 800f76e:	bf00      	nop
 800f770:	e7fe      	b.n	800f770 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f772:	f7ff febb 	bl	800f4ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681a      	ldr	r2, [r3, #0]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f77e:	68f9      	ldr	r1, [r7, #12]
 800f780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f782:	fb01 f303 	mul.w	r3, r1, r3
 800f786:	441a      	add	r2, r3
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2200      	movs	r2, #0
 800f790:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	681a      	ldr	r2, [r3, #0]
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7a2:	3b01      	subs	r3, #1
 800f7a4:	68f9      	ldr	r1, [r7, #12]
 800f7a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f7a8:	fb01 f303 	mul.w	r3, r1, r3
 800f7ac:	441a      	add	r2, r3
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	22ff      	movs	r2, #255	; 0xff
 800f7b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	22ff      	movs	r2, #255	; 0xff
 800f7be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d114      	bne.n	800f7f2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	691b      	ldr	r3, [r3, #16]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d01a      	beq.n	800f806 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	3310      	adds	r3, #16
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f001 fec1 	bl	801155c <xTaskRemoveFromEventList>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d012      	beq.n	800f806 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f7e0:	4b0c      	ldr	r3, [pc, #48]	; (800f814 <xQueueGenericReset+0xd0>)
 800f7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7e6:	601a      	str	r2, [r3, #0]
 800f7e8:	f3bf 8f4f 	dsb	sy
 800f7ec:	f3bf 8f6f 	isb	sy
 800f7f0:	e009      	b.n	800f806 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	3310      	adds	r3, #16
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7ff fcba 	bl	800f170 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	3324      	adds	r3, #36	; 0x24
 800f800:	4618      	mov	r0, r3
 800f802:	f7ff fcb5 	bl	800f170 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f806:	f7ff fea5 	bl	800f554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f80a:	2301      	movs	r3, #1
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3710      	adds	r7, #16
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	e000ed04 	.word	0xe000ed04

0800f818 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b08e      	sub	sp, #56	; 0x38
 800f81c:	af02      	add	r7, sp, #8
 800f81e:	60f8      	str	r0, [r7, #12]
 800f820:	60b9      	str	r1, [r7, #8]
 800f822:	607a      	str	r2, [r7, #4]
 800f824:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10c      	bne.n	800f846 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f830:	b672      	cpsid	i
 800f832:	f383 8811 	msr	BASEPRI, r3
 800f836:	f3bf 8f6f 	isb	sy
 800f83a:	f3bf 8f4f 	dsb	sy
 800f83e:	b662      	cpsie	i
 800f840:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f842:	bf00      	nop
 800f844:	e7fe      	b.n	800f844 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d10c      	bne.n	800f866 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f850:	b672      	cpsid	i
 800f852:	f383 8811 	msr	BASEPRI, r3
 800f856:	f3bf 8f6f 	isb	sy
 800f85a:	f3bf 8f4f 	dsb	sy
 800f85e:	b662      	cpsie	i
 800f860:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f862:	bf00      	nop
 800f864:	e7fe      	b.n	800f864 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d002      	beq.n	800f872 <xQueueGenericCreateStatic+0x5a>
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d001      	beq.n	800f876 <xQueueGenericCreateStatic+0x5e>
 800f872:	2301      	movs	r3, #1
 800f874:	e000      	b.n	800f878 <xQueueGenericCreateStatic+0x60>
 800f876:	2300      	movs	r3, #0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d10c      	bne.n	800f896 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f880:	b672      	cpsid	i
 800f882:	f383 8811 	msr	BASEPRI, r3
 800f886:	f3bf 8f6f 	isb	sy
 800f88a:	f3bf 8f4f 	dsb	sy
 800f88e:	b662      	cpsie	i
 800f890:	623b      	str	r3, [r7, #32]
}
 800f892:	bf00      	nop
 800f894:	e7fe      	b.n	800f894 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d102      	bne.n	800f8a2 <xQueueGenericCreateStatic+0x8a>
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d101      	bne.n	800f8a6 <xQueueGenericCreateStatic+0x8e>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	e000      	b.n	800f8a8 <xQueueGenericCreateStatic+0x90>
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10c      	bne.n	800f8c6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b0:	b672      	cpsid	i
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	b662      	cpsie	i
 800f8c0:	61fb      	str	r3, [r7, #28]
}
 800f8c2:	bf00      	nop
 800f8c4:	e7fe      	b.n	800f8c4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f8c6:	2350      	movs	r3, #80	; 0x50
 800f8c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	2b50      	cmp	r3, #80	; 0x50
 800f8ce:	d00c      	beq.n	800f8ea <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d4:	b672      	cpsid	i
 800f8d6:	f383 8811 	msr	BASEPRI, r3
 800f8da:	f3bf 8f6f 	isb	sy
 800f8de:	f3bf 8f4f 	dsb	sy
 800f8e2:	b662      	cpsie	i
 800f8e4:	61bb      	str	r3, [r7, #24]
}
 800f8e6:	bf00      	nop
 800f8e8:	e7fe      	b.n	800f8e8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f8ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00d      	beq.n	800f912 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f8:	2201      	movs	r2, #1
 800f8fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f8fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	4613      	mov	r3, r2
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	68b9      	ldr	r1, [r7, #8]
 800f90c:	68f8      	ldr	r0, [r7, #12]
 800f90e:	f000 f847 	bl	800f9a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f914:	4618      	mov	r0, r3
 800f916:	3730      	adds	r7, #48	; 0x30
 800f918:	46bd      	mov	sp, r7
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b08a      	sub	sp, #40	; 0x28
 800f920:	af02      	add	r7, sp, #8
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	4613      	mov	r3, r2
 800f928:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d10c      	bne.n	800f94a <xQueueGenericCreate+0x2e>
	__asm volatile
 800f930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f934:	b672      	cpsid	i
 800f936:	f383 8811 	msr	BASEPRI, r3
 800f93a:	f3bf 8f6f 	isb	sy
 800f93e:	f3bf 8f4f 	dsb	sy
 800f942:	b662      	cpsie	i
 800f944:	613b      	str	r3, [r7, #16]
}
 800f946:	bf00      	nop
 800f948:	e7fe      	b.n	800f948 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d102      	bne.n	800f956 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f950:	2300      	movs	r3, #0
 800f952:	61fb      	str	r3, [r7, #28]
 800f954:	e004      	b.n	800f960 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	fb02 f303 	mul.w	r3, r2, r3
 800f95e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	3350      	adds	r3, #80	; 0x50
 800f964:	4618      	mov	r0, r3
 800f966:	f7ff fa1f 	bl	800eda8 <pvPortMalloc>
 800f96a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f96c:	69bb      	ldr	r3, [r7, #24]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d011      	beq.n	800f996 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f972:	69bb      	ldr	r3, [r7, #24]
 800f974:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	3350      	adds	r3, #80	; 0x50
 800f97a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f97c:	69bb      	ldr	r3, [r7, #24]
 800f97e:	2200      	movs	r2, #0
 800f980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f984:	79fa      	ldrb	r2, [r7, #7]
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	9300      	str	r3, [sp, #0]
 800f98a:	4613      	mov	r3, r2
 800f98c:	697a      	ldr	r2, [r7, #20]
 800f98e:	68b9      	ldr	r1, [r7, #8]
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f000 f805 	bl	800f9a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f996:	69bb      	ldr	r3, [r7, #24]
	}
 800f998:	4618      	mov	r0, r3
 800f99a:	3720      	adds	r7, #32
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}

0800f9a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
 800f9ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d103      	bne.n	800f9bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f9b4:	69bb      	ldr	r3, [r7, #24]
 800f9b6:	69ba      	ldr	r2, [r7, #24]
 800f9b8:	601a      	str	r2, [r3, #0]
 800f9ba:	e002      	b.n	800f9c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	68ba      	ldr	r2, [r7, #8]
 800f9cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	69b8      	ldr	r0, [r7, #24]
 800f9d2:	f7ff feb7 	bl	800f744 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f9d6:	69bb      	ldr	r3, [r7, #24]
 800f9d8:	78fa      	ldrb	r2, [r7, #3]
 800f9da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f9de:	bf00      	nop
 800f9e0:	3710      	adds	r7, #16
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}

0800f9e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f9e6:	b580      	push	{r7, lr}
 800f9e8:	b082      	sub	sp, #8
 800f9ea:	af00      	add	r7, sp, #0
 800f9ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00e      	beq.n	800fa12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fa06:	2300      	movs	r3, #0
 800fa08:	2200      	movs	r2, #0
 800fa0a:	2100      	movs	r1, #0
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 f917 	bl	800fc40 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fa12:	bf00      	nop
 800fa14:	3708      	adds	r7, #8
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b086      	sub	sp, #24
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	4603      	mov	r3, r0
 800fa22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fa24:	2301      	movs	r3, #1
 800fa26:	617b      	str	r3, [r7, #20]
 800fa28:	2300      	movs	r3, #0
 800fa2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fa2c:	79fb      	ldrb	r3, [r7, #7]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	6939      	ldr	r1, [r7, #16]
 800fa32:	6978      	ldr	r0, [r7, #20]
 800fa34:	f7ff ff72 	bl	800f91c <xQueueGenericCreate>
 800fa38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	f7ff ffd3 	bl	800f9e6 <prvInitialiseMutex>

		return xNewQueue;
 800fa40:	68fb      	ldr	r3, [r7, #12]
	}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3718      	adds	r7, #24
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b088      	sub	sp, #32
 800fa4e:	af02      	add	r7, sp, #8
 800fa50:	4603      	mov	r3, r0
 800fa52:	6039      	str	r1, [r7, #0]
 800fa54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fa56:	2301      	movs	r3, #1
 800fa58:	617b      	str	r3, [r7, #20]
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fa5e:	79fb      	ldrb	r3, [r7, #7]
 800fa60:	9300      	str	r3, [sp, #0]
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	2200      	movs	r2, #0
 800fa66:	6939      	ldr	r1, [r7, #16]
 800fa68:	6978      	ldr	r0, [r7, #20]
 800fa6a:	f7ff fed5 	bl	800f818 <xQueueGenericCreateStatic>
 800fa6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fa70:	68f8      	ldr	r0, [r7, #12]
 800fa72:	f7ff ffb8 	bl	800f9e6 <prvInitialiseMutex>

		return xNewQueue;
 800fa76:	68fb      	ldr	r3, [r7, #12]
	}
 800fa78:	4618      	mov	r0, r3
 800fa7a:	3718      	adds	r7, #24
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fa80:	b590      	push	{r4, r7, lr}
 800fa82:	b087      	sub	sp, #28
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d10c      	bne.n	800faac <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800fa92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa96:	b672      	cpsid	i
 800fa98:	f383 8811 	msr	BASEPRI, r3
 800fa9c:	f3bf 8f6f 	isb	sy
 800faa0:	f3bf 8f4f 	dsb	sy
 800faa4:	b662      	cpsie	i
 800faa6:	60fb      	str	r3, [r7, #12]
}
 800faa8:	bf00      	nop
 800faaa:	e7fe      	b.n	800faaa <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	689c      	ldr	r4, [r3, #8]
 800fab0:	f001 ff1e 	bl	80118f0 <xTaskGetCurrentTaskHandle>
 800fab4:	4603      	mov	r3, r0
 800fab6:	429c      	cmp	r4, r3
 800fab8:	d111      	bne.n	800fade <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	1e5a      	subs	r2, r3, #1
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d105      	bne.n	800fad8 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800facc:	2300      	movs	r3, #0
 800face:	2200      	movs	r2, #0
 800fad0:	2100      	movs	r1, #0
 800fad2:	6938      	ldr	r0, [r7, #16]
 800fad4:	f000 f8b4 	bl	800fc40 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800fad8:	2301      	movs	r3, #1
 800fada:	617b      	str	r3, [r7, #20]
 800fadc:	e001      	b.n	800fae2 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fade:	2300      	movs	r3, #0
 800fae0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fae2:	697b      	ldr	r3, [r7, #20]
	}
 800fae4:	4618      	mov	r0, r3
 800fae6:	371c      	adds	r7, #28
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd90      	pop	{r4, r7, pc}

0800faec <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800faec:	b590      	push	{r4, r7, lr}
 800faee:	b087      	sub	sp, #28
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d10c      	bne.n	800fb1a <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800fb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb04:	b672      	cpsid	i
 800fb06:	f383 8811 	msr	BASEPRI, r3
 800fb0a:	f3bf 8f6f 	isb	sy
 800fb0e:	f3bf 8f4f 	dsb	sy
 800fb12:	b662      	cpsie	i
 800fb14:	60fb      	str	r3, [r7, #12]
}
 800fb16:	bf00      	nop
 800fb18:	e7fe      	b.n	800fb18 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	689c      	ldr	r4, [r3, #8]
 800fb1e:	f001 fee7 	bl	80118f0 <xTaskGetCurrentTaskHandle>
 800fb22:	4603      	mov	r3, r0
 800fb24:	429c      	cmp	r4, r3
 800fb26:	d107      	bne.n	800fb38 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fb28:	693b      	ldr	r3, [r7, #16]
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	1c5a      	adds	r2, r3, #1
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fb32:	2301      	movs	r3, #1
 800fb34:	617b      	str	r3, [r7, #20]
 800fb36:	e00c      	b.n	800fb52 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6938      	ldr	r0, [r7, #16]
 800fb3c:	f000 fba2 	bl	8010284 <xQueueSemaphoreTake>
 800fb40:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d004      	beq.n	800fb52 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	1c5a      	adds	r2, r3, #1
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fb52:	697b      	ldr	r3, [r7, #20]
	}
 800fb54:	4618      	mov	r0, r3
 800fb56:	371c      	adds	r7, #28
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd90      	pop	{r4, r7, pc}

0800fb5c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b08a      	sub	sp, #40	; 0x28
 800fb60:	af02      	add	r7, sp, #8
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d10c      	bne.n	800fb88 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800fb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb72:	b672      	cpsid	i
 800fb74:	f383 8811 	msr	BASEPRI, r3
 800fb78:	f3bf 8f6f 	isb	sy
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	b662      	cpsie	i
 800fb82:	61bb      	str	r3, [r7, #24]
}
 800fb84:	bf00      	nop
 800fb86:	e7fe      	b.n	800fb86 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fb88:	68ba      	ldr	r2, [r7, #8]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d90c      	bls.n	800fbaa <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800fb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb94:	b672      	cpsid	i
 800fb96:	f383 8811 	msr	BASEPRI, r3
 800fb9a:	f3bf 8f6f 	isb	sy
 800fb9e:	f3bf 8f4f 	dsb	sy
 800fba2:	b662      	cpsie	i
 800fba4:	617b      	str	r3, [r7, #20]
}
 800fba6:	bf00      	nop
 800fba8:	e7fe      	b.n	800fba8 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fbaa:	2302      	movs	r3, #2
 800fbac:	9300      	str	r3, [sp, #0]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	68f8      	ldr	r0, [r7, #12]
 800fbb6:	f7ff fe2f 	bl	800f818 <xQueueGenericCreateStatic>
 800fbba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d002      	beq.n	800fbc8 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	68ba      	ldr	r2, [r7, #8]
 800fbc6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fbc8:	69fb      	ldr	r3, [r7, #28]
	}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3720      	adds	r7, #32
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}

0800fbd2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fbd2:	b580      	push	{r7, lr}
 800fbd4:	b086      	sub	sp, #24
 800fbd6:	af00      	add	r7, sp, #0
 800fbd8:	6078      	str	r0, [r7, #4]
 800fbda:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d10c      	bne.n	800fbfc <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800fbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe6:	b672      	cpsid	i
 800fbe8:	f383 8811 	msr	BASEPRI, r3
 800fbec:	f3bf 8f6f 	isb	sy
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	b662      	cpsie	i
 800fbf6:	613b      	str	r3, [r7, #16]
}
 800fbf8:	bf00      	nop
 800fbfa:	e7fe      	b.n	800fbfa <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fbfc:	683a      	ldr	r2, [r7, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d90c      	bls.n	800fc1e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800fc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc08:	b672      	cpsid	i
 800fc0a:	f383 8811 	msr	BASEPRI, r3
 800fc0e:	f3bf 8f6f 	isb	sy
 800fc12:	f3bf 8f4f 	dsb	sy
 800fc16:	b662      	cpsie	i
 800fc18:	60fb      	str	r3, [r7, #12]
}
 800fc1a:	bf00      	nop
 800fc1c:	e7fe      	b.n	800fc1c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fc1e:	2202      	movs	r2, #2
 800fc20:	2100      	movs	r1, #0
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f7ff fe7a 	bl	800f91c <xQueueGenericCreate>
 800fc28:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d002      	beq.n	800fc36 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fc30:	697b      	ldr	r3, [r7, #20]
 800fc32:	683a      	ldr	r2, [r7, #0]
 800fc34:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fc36:	697b      	ldr	r3, [r7, #20]
	}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3718      	adds	r7, #24
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b08e      	sub	sp, #56	; 0x38
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	60b9      	str	r1, [r7, #8]
 800fc4a:	607a      	str	r2, [r7, #4]
 800fc4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fc4e:	2300      	movs	r3, #0
 800fc50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d10c      	bne.n	800fc76 <xQueueGenericSend+0x36>
	__asm volatile
 800fc5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc60:	b672      	cpsid	i
 800fc62:	f383 8811 	msr	BASEPRI, r3
 800fc66:	f3bf 8f6f 	isb	sy
 800fc6a:	f3bf 8f4f 	dsb	sy
 800fc6e:	b662      	cpsie	i
 800fc70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fc72:	bf00      	nop
 800fc74:	e7fe      	b.n	800fc74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d103      	bne.n	800fc84 <xQueueGenericSend+0x44>
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d101      	bne.n	800fc88 <xQueueGenericSend+0x48>
 800fc84:	2301      	movs	r3, #1
 800fc86:	e000      	b.n	800fc8a <xQueueGenericSend+0x4a>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d10c      	bne.n	800fca8 <xQueueGenericSend+0x68>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	b672      	cpsid	i
 800fc94:	f383 8811 	msr	BASEPRI, r3
 800fc98:	f3bf 8f6f 	isb	sy
 800fc9c:	f3bf 8f4f 	dsb	sy
 800fca0:	b662      	cpsie	i
 800fca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fca4:	bf00      	nop
 800fca6:	e7fe      	b.n	800fca6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fca8:	683b      	ldr	r3, [r7, #0]
 800fcaa:	2b02      	cmp	r3, #2
 800fcac:	d103      	bne.n	800fcb6 <xQueueGenericSend+0x76>
 800fcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fcb2:	2b01      	cmp	r3, #1
 800fcb4:	d101      	bne.n	800fcba <xQueueGenericSend+0x7a>
 800fcb6:	2301      	movs	r3, #1
 800fcb8:	e000      	b.n	800fcbc <xQueueGenericSend+0x7c>
 800fcba:	2300      	movs	r3, #0
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d10c      	bne.n	800fcda <xQueueGenericSend+0x9a>
	__asm volatile
 800fcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcc4:	b672      	cpsid	i
 800fcc6:	f383 8811 	msr	BASEPRI, r3
 800fcca:	f3bf 8f6f 	isb	sy
 800fcce:	f3bf 8f4f 	dsb	sy
 800fcd2:	b662      	cpsie	i
 800fcd4:	623b      	str	r3, [r7, #32]
}
 800fcd6:	bf00      	nop
 800fcd8:	e7fe      	b.n	800fcd8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fcda:	f001 fe19 	bl	8011910 <xTaskGetSchedulerState>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d102      	bne.n	800fcea <xQueueGenericSend+0xaa>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d101      	bne.n	800fcee <xQueueGenericSend+0xae>
 800fcea:	2301      	movs	r3, #1
 800fcec:	e000      	b.n	800fcf0 <xQueueGenericSend+0xb0>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d10c      	bne.n	800fd0e <xQueueGenericSend+0xce>
	__asm volatile
 800fcf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf8:	b672      	cpsid	i
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
 800fd06:	b662      	cpsie	i
 800fd08:	61fb      	str	r3, [r7, #28]
}
 800fd0a:	bf00      	nop
 800fd0c:	e7fe      	b.n	800fd0c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fd0e:	f7ff fbed 	bl	800f4ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d302      	bcc.n	800fd24 <xQueueGenericSend+0xe4>
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	2b02      	cmp	r3, #2
 800fd22:	d129      	bne.n	800fd78 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fd24:	683a      	ldr	r2, [r7, #0]
 800fd26:	68b9      	ldr	r1, [r7, #8]
 800fd28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd2a:	f000 fcc2 	bl	80106b2 <prvCopyDataToQueue>
 800fd2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d010      	beq.n	800fd5a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3a:	3324      	adds	r3, #36	; 0x24
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	f001 fc0d 	bl	801155c <xTaskRemoveFromEventList>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d013      	beq.n	800fd70 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fd48:	4b3f      	ldr	r3, [pc, #252]	; (800fe48 <xQueueGenericSend+0x208>)
 800fd4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd4e:	601a      	str	r2, [r3, #0]
 800fd50:	f3bf 8f4f 	dsb	sy
 800fd54:	f3bf 8f6f 	isb	sy
 800fd58:	e00a      	b.n	800fd70 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d007      	beq.n	800fd70 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fd60:	4b39      	ldr	r3, [pc, #228]	; (800fe48 <xQueueGenericSend+0x208>)
 800fd62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd66:	601a      	str	r2, [r3, #0]
 800fd68:	f3bf 8f4f 	dsb	sy
 800fd6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fd70:	f7ff fbf0 	bl	800f554 <vPortExitCritical>
				return pdPASS;
 800fd74:	2301      	movs	r3, #1
 800fd76:	e063      	b.n	800fe40 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d103      	bne.n	800fd86 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd7e:	f7ff fbe9 	bl	800f554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fd82:	2300      	movs	r3, #0
 800fd84:	e05c      	b.n	800fe40 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d106      	bne.n	800fd9a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd8c:	f107 0314 	add.w	r3, r7, #20
 800fd90:	4618      	mov	r0, r3
 800fd92:	f001 fc49 	bl	8011628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd96:	2301      	movs	r3, #1
 800fd98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd9a:	f7ff fbdb 	bl	800f554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd9e:	f001 f997 	bl	80110d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fda2:	f7ff fba3 	bl	800f4ec <vPortEnterCritical>
 800fda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fdac:	b25b      	sxtb	r3, r3
 800fdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdb2:	d103      	bne.n	800fdbc <xQueueGenericSend+0x17c>
 800fdb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fdc2:	b25b      	sxtb	r3, r3
 800fdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc8:	d103      	bne.n	800fdd2 <xQueueGenericSend+0x192>
 800fdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdcc:	2200      	movs	r2, #0
 800fdce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fdd2:	f7ff fbbf 	bl	800f554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fdd6:	1d3a      	adds	r2, r7, #4
 800fdd8:	f107 0314 	add.w	r3, r7, #20
 800fddc:	4611      	mov	r1, r2
 800fdde:	4618      	mov	r0, r3
 800fde0:	f001 fc38 	bl	8011654 <xTaskCheckForTimeOut>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d124      	bne.n	800fe34 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fdea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fdec:	f000 fd59 	bl	80108a2 <prvIsQueueFull>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d018      	beq.n	800fe28 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf8:	3310      	adds	r3, #16
 800fdfa:	687a      	ldr	r2, [r7, #4]
 800fdfc:	4611      	mov	r1, r2
 800fdfe:	4618      	mov	r0, r3
 800fe00:	f001 fb58 	bl	80114b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fe04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe06:	f000 fce4 	bl	80107d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fe0a:	f001 f96f 	bl	80110ec <xTaskResumeAll>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	f47f af7c 	bne.w	800fd0e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800fe16:	4b0c      	ldr	r3, [pc, #48]	; (800fe48 <xQueueGenericSend+0x208>)
 800fe18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe1c:	601a      	str	r2, [r3, #0]
 800fe1e:	f3bf 8f4f 	dsb	sy
 800fe22:	f3bf 8f6f 	isb	sy
 800fe26:	e772      	b.n	800fd0e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fe28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe2a:	f000 fcd2 	bl	80107d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe2e:	f001 f95d 	bl	80110ec <xTaskResumeAll>
 800fe32:	e76c      	b.n	800fd0e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fe34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe36:	f000 fccc 	bl	80107d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe3a:	f001 f957 	bl	80110ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fe3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3738      	adds	r7, #56	; 0x38
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	e000ed04 	.word	0xe000ed04

0800fe4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b08e      	sub	sp, #56	; 0x38
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	607a      	str	r2, [r7, #4]
 800fe58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fe5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d10c      	bne.n	800fe7e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800fe64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe68:	b672      	cpsid	i
 800fe6a:	f383 8811 	msr	BASEPRI, r3
 800fe6e:	f3bf 8f6f 	isb	sy
 800fe72:	f3bf 8f4f 	dsb	sy
 800fe76:	b662      	cpsie	i
 800fe78:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fe7a:	bf00      	nop
 800fe7c:	e7fe      	b.n	800fe7c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d103      	bne.n	800fe8c <xQueueGenericSendFromISR+0x40>
 800fe84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d101      	bne.n	800fe90 <xQueueGenericSendFromISR+0x44>
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	e000      	b.n	800fe92 <xQueueGenericSendFromISR+0x46>
 800fe90:	2300      	movs	r3, #0
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d10c      	bne.n	800feb0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800fe96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9a:	b672      	cpsid	i
 800fe9c:	f383 8811 	msr	BASEPRI, r3
 800fea0:	f3bf 8f6f 	isb	sy
 800fea4:	f3bf 8f4f 	dsb	sy
 800fea8:	b662      	cpsie	i
 800feaa:	623b      	str	r3, [r7, #32]
}
 800feac:	bf00      	nop
 800feae:	e7fe      	b.n	800feae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	2b02      	cmp	r3, #2
 800feb4:	d103      	bne.n	800febe <xQueueGenericSendFromISR+0x72>
 800feb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800feba:	2b01      	cmp	r3, #1
 800febc:	d101      	bne.n	800fec2 <xQueueGenericSendFromISR+0x76>
 800febe:	2301      	movs	r3, #1
 800fec0:	e000      	b.n	800fec4 <xQueueGenericSendFromISR+0x78>
 800fec2:	2300      	movs	r3, #0
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d10c      	bne.n	800fee2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800fec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fecc:	b672      	cpsid	i
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	b662      	cpsie	i
 800fedc:	61fb      	str	r3, [r7, #28]
}
 800fede:	bf00      	nop
 800fee0:	e7fe      	b.n	800fee0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fee2:	f7ff fbeb 	bl	800f6bc <vPortValidateInterruptPriority>
	__asm volatile
 800fee6:	f3ef 8211 	mrs	r2, BASEPRI
 800feea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feee:	b672      	cpsid	i
 800fef0:	f383 8811 	msr	BASEPRI, r3
 800fef4:	f3bf 8f6f 	isb	sy
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	b662      	cpsie	i
 800fefe:	61ba      	str	r2, [r7, #24]
 800ff00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ff02:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d302      	bcc.n	800ff18 <xQueueGenericSendFromISR+0xcc>
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	2b02      	cmp	r3, #2
 800ff16:	d12c      	bne.n	800ff72 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ff18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ff22:	683a      	ldr	r2, [r7, #0]
 800ff24:	68b9      	ldr	r1, [r7, #8]
 800ff26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff28:	f000 fbc3 	bl	80106b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ff2c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ff30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff34:	d112      	bne.n	800ff5c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d016      	beq.n	800ff6c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff40:	3324      	adds	r3, #36	; 0x24
 800ff42:	4618      	mov	r0, r3
 800ff44:	f001 fb0a 	bl	801155c <xTaskRemoveFromEventList>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00e      	beq.n	800ff6c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00b      	beq.n	800ff6c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2201      	movs	r2, #1
 800ff58:	601a      	str	r2, [r3, #0]
 800ff5a:	e007      	b.n	800ff6c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ff5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ff60:	3301      	adds	r3, #1
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	b25a      	sxtb	r2, r3
 800ff66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800ff70:	e001      	b.n	800ff76 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ff72:	2300      	movs	r3, #0
 800ff74:	637b      	str	r3, [r7, #52]	; 0x34
 800ff76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff78:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	f383 8811 	msr	BASEPRI, r3
}
 800ff80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ff84:	4618      	mov	r0, r3
 800ff86:	3738      	adds	r7, #56	; 0x38
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	bd80      	pop	{r7, pc}

0800ff8c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b08e      	sub	sp, #56	; 0x38
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
 800ff94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ff9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d10c      	bne.n	800ffba <xQueueGiveFromISR+0x2e>
	__asm volatile
 800ffa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffa4:	b672      	cpsid	i
 800ffa6:	f383 8811 	msr	BASEPRI, r3
 800ffaa:	f3bf 8f6f 	isb	sy
 800ffae:	f3bf 8f4f 	dsb	sy
 800ffb2:	b662      	cpsie	i
 800ffb4:	623b      	str	r3, [r7, #32]
}
 800ffb6:	bf00      	nop
 800ffb8:	e7fe      	b.n	800ffb8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ffba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d00c      	beq.n	800ffdc <xQueueGiveFromISR+0x50>
	__asm volatile
 800ffc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc6:	b672      	cpsid	i
 800ffc8:	f383 8811 	msr	BASEPRI, r3
 800ffcc:	f3bf 8f6f 	isb	sy
 800ffd0:	f3bf 8f4f 	dsb	sy
 800ffd4:	b662      	cpsie	i
 800ffd6:	61fb      	str	r3, [r7, #28]
}
 800ffd8:	bf00      	nop
 800ffda:	e7fe      	b.n	800ffda <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ffdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d103      	bne.n	800ffec <xQueueGiveFromISR+0x60>
 800ffe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d101      	bne.n	800fff0 <xQueueGiveFromISR+0x64>
 800ffec:	2301      	movs	r3, #1
 800ffee:	e000      	b.n	800fff2 <xQueueGiveFromISR+0x66>
 800fff0:	2300      	movs	r3, #0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d10c      	bne.n	8010010 <xQueueGiveFromISR+0x84>
	__asm volatile
 800fff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fffa:	b672      	cpsid	i
 800fffc:	f383 8811 	msr	BASEPRI, r3
 8010000:	f3bf 8f6f 	isb	sy
 8010004:	f3bf 8f4f 	dsb	sy
 8010008:	b662      	cpsie	i
 801000a:	61bb      	str	r3, [r7, #24]
}
 801000c:	bf00      	nop
 801000e:	e7fe      	b.n	801000e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010010:	f7ff fb54 	bl	800f6bc <vPortValidateInterruptPriority>
	__asm volatile
 8010014:	f3ef 8211 	mrs	r2, BASEPRI
 8010018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801001c:	b672      	cpsid	i
 801001e:	f383 8811 	msr	BASEPRI, r3
 8010022:	f3bf 8f6f 	isb	sy
 8010026:	f3bf 8f4f 	dsb	sy
 801002a:	b662      	cpsie	i
 801002c:	617a      	str	r2, [r7, #20]
 801002e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010030:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010032:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010038:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801003a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801003e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010040:	429a      	cmp	r2, r3
 8010042:	d22b      	bcs.n	801009c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801004a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801004e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010050:	1c5a      	adds	r2, r3, #1
 8010052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010054:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010056:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801005a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801005e:	d112      	bne.n	8010086 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010064:	2b00      	cmp	r3, #0
 8010066:	d016      	beq.n	8010096 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801006a:	3324      	adds	r3, #36	; 0x24
 801006c:	4618      	mov	r0, r3
 801006e:	f001 fa75 	bl	801155c <xTaskRemoveFromEventList>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d00e      	beq.n	8010096 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00b      	beq.n	8010096 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	2201      	movs	r2, #1
 8010082:	601a      	str	r2, [r3, #0]
 8010084:	e007      	b.n	8010096 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010086:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801008a:	3301      	adds	r3, #1
 801008c:	b2db      	uxtb	r3, r3
 801008e:	b25a      	sxtb	r2, r3
 8010090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010096:	2301      	movs	r3, #1
 8010098:	637b      	str	r3, [r7, #52]	; 0x34
 801009a:	e001      	b.n	80100a0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801009c:	2300      	movs	r3, #0
 801009e:	637b      	str	r3, [r7, #52]	; 0x34
 80100a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100a2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f383 8811 	msr	BASEPRI, r3
}
 80100aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3738      	adds	r7, #56	; 0x38
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bd80      	pop	{r7, pc}
	...

080100b8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b08c      	sub	sp, #48	; 0x30
 80100bc:	af00      	add	r7, sp, #0
 80100be:	60f8      	str	r0, [r7, #12]
 80100c0:	60b9      	str	r1, [r7, #8]
 80100c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80100c4:	2300      	movs	r3, #0
 80100c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80100cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d10c      	bne.n	80100ec <xQueueReceive+0x34>
	__asm volatile
 80100d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100d6:	b672      	cpsid	i
 80100d8:	f383 8811 	msr	BASEPRI, r3
 80100dc:	f3bf 8f6f 	isb	sy
 80100e0:	f3bf 8f4f 	dsb	sy
 80100e4:	b662      	cpsie	i
 80100e6:	623b      	str	r3, [r7, #32]
}
 80100e8:	bf00      	nop
 80100ea:	e7fe      	b.n	80100ea <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d103      	bne.n	80100fa <xQueueReceive+0x42>
 80100f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d101      	bne.n	80100fe <xQueueReceive+0x46>
 80100fa:	2301      	movs	r3, #1
 80100fc:	e000      	b.n	8010100 <xQueueReceive+0x48>
 80100fe:	2300      	movs	r3, #0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d10c      	bne.n	801011e <xQueueReceive+0x66>
	__asm volatile
 8010104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010108:	b672      	cpsid	i
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	b662      	cpsie	i
 8010118:	61fb      	str	r3, [r7, #28]
}
 801011a:	bf00      	nop
 801011c:	e7fe      	b.n	801011c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801011e:	f001 fbf7 	bl	8011910 <xTaskGetSchedulerState>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d102      	bne.n	801012e <xQueueReceive+0x76>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d101      	bne.n	8010132 <xQueueReceive+0x7a>
 801012e:	2301      	movs	r3, #1
 8010130:	e000      	b.n	8010134 <xQueueReceive+0x7c>
 8010132:	2300      	movs	r3, #0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10c      	bne.n	8010152 <xQueueReceive+0x9a>
	__asm volatile
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	b672      	cpsid	i
 801013e:	f383 8811 	msr	BASEPRI, r3
 8010142:	f3bf 8f6f 	isb	sy
 8010146:	f3bf 8f4f 	dsb	sy
 801014a:	b662      	cpsie	i
 801014c:	61bb      	str	r3, [r7, #24]
}
 801014e:	bf00      	nop
 8010150:	e7fe      	b.n	8010150 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010152:	f7ff f9cb 	bl	800f4ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801015a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	2b00      	cmp	r3, #0
 8010160:	d01f      	beq.n	80101a2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010162:	68b9      	ldr	r1, [r7, #8]
 8010164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010166:	f000 fb0e 	bl	8010786 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016c:	1e5a      	subs	r2, r3, #1
 801016e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010174:	691b      	ldr	r3, [r3, #16]
 8010176:	2b00      	cmp	r3, #0
 8010178:	d00f      	beq.n	801019a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801017a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801017c:	3310      	adds	r3, #16
 801017e:	4618      	mov	r0, r3
 8010180:	f001 f9ec 	bl	801155c <xTaskRemoveFromEventList>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d007      	beq.n	801019a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801018a:	4b3d      	ldr	r3, [pc, #244]	; (8010280 <xQueueReceive+0x1c8>)
 801018c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010190:	601a      	str	r2, [r3, #0]
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801019a:	f7ff f9db 	bl	800f554 <vPortExitCritical>
				return pdPASS;
 801019e:	2301      	movs	r3, #1
 80101a0:	e069      	b.n	8010276 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d103      	bne.n	80101b0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80101a8:	f7ff f9d4 	bl	800f554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80101ac:	2300      	movs	r3, #0
 80101ae:	e062      	b.n	8010276 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80101b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d106      	bne.n	80101c4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80101b6:	f107 0310 	add.w	r3, r7, #16
 80101ba:	4618      	mov	r0, r3
 80101bc:	f001 fa34 	bl	8011628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80101c0:	2301      	movs	r3, #1
 80101c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80101c4:	f7ff f9c6 	bl	800f554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80101c8:	f000 ff82 	bl	80110d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80101cc:	f7ff f98e 	bl	800f4ec <vPortEnterCritical>
 80101d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80101d6:	b25b      	sxtb	r3, r3
 80101d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101dc:	d103      	bne.n	80101e6 <xQueueReceive+0x12e>
 80101de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e0:	2200      	movs	r2, #0
 80101e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101ec:	b25b      	sxtb	r3, r3
 80101ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101f2:	d103      	bne.n	80101fc <xQueueReceive+0x144>
 80101f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f6:	2200      	movs	r2, #0
 80101f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80101fc:	f7ff f9aa 	bl	800f554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010200:	1d3a      	adds	r2, r7, #4
 8010202:	f107 0310 	add.w	r3, r7, #16
 8010206:	4611      	mov	r1, r2
 8010208:	4618      	mov	r0, r3
 801020a:	f001 fa23 	bl	8011654 <xTaskCheckForTimeOut>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d123      	bne.n	801025c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010216:	f000 fb2e 	bl	8010876 <prvIsQueueEmpty>
 801021a:	4603      	mov	r3, r0
 801021c:	2b00      	cmp	r3, #0
 801021e:	d017      	beq.n	8010250 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010222:	3324      	adds	r3, #36	; 0x24
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	4611      	mov	r1, r2
 8010228:	4618      	mov	r0, r3
 801022a:	f001 f943 	bl	80114b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801022e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010230:	f000 facf 	bl	80107d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010234:	f000 ff5a 	bl	80110ec <xTaskResumeAll>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	d189      	bne.n	8010152 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801023e:	4b10      	ldr	r3, [pc, #64]	; (8010280 <xQueueReceive+0x1c8>)
 8010240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010244:	601a      	str	r2, [r3, #0]
 8010246:	f3bf 8f4f 	dsb	sy
 801024a:	f3bf 8f6f 	isb	sy
 801024e:	e780      	b.n	8010152 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010252:	f000 fabe 	bl	80107d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010256:	f000 ff49 	bl	80110ec <xTaskResumeAll>
 801025a:	e77a      	b.n	8010152 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801025c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801025e:	f000 fab8 	bl	80107d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010262:	f000 ff43 	bl	80110ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010268:	f000 fb05 	bl	8010876 <prvIsQueueEmpty>
 801026c:	4603      	mov	r3, r0
 801026e:	2b00      	cmp	r3, #0
 8010270:	f43f af6f 	beq.w	8010152 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010276:	4618      	mov	r0, r3
 8010278:	3730      	adds	r7, #48	; 0x30
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	e000ed04 	.word	0xe000ed04

08010284 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010284:	b580      	push	{r7, lr}
 8010286:	b08e      	sub	sp, #56	; 0x38
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801028e:	2300      	movs	r3, #0
 8010290:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010296:	2300      	movs	r3, #0
 8010298:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801029a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029c:	2b00      	cmp	r3, #0
 801029e:	d10c      	bne.n	80102ba <xQueueSemaphoreTake+0x36>
	__asm volatile
 80102a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102a4:	b672      	cpsid	i
 80102a6:	f383 8811 	msr	BASEPRI, r3
 80102aa:	f3bf 8f6f 	isb	sy
 80102ae:	f3bf 8f4f 	dsb	sy
 80102b2:	b662      	cpsie	i
 80102b4:	623b      	str	r3, [r7, #32]
}
 80102b6:	bf00      	nop
 80102b8:	e7fe      	b.n	80102b8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80102ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00c      	beq.n	80102dc <xQueueSemaphoreTake+0x58>
	__asm volatile
 80102c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c6:	b672      	cpsid	i
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	b662      	cpsie	i
 80102d6:	61fb      	str	r3, [r7, #28]
}
 80102d8:	bf00      	nop
 80102da:	e7fe      	b.n	80102da <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80102dc:	f001 fb18 	bl	8011910 <xTaskGetSchedulerState>
 80102e0:	4603      	mov	r3, r0
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d102      	bne.n	80102ec <xQueueSemaphoreTake+0x68>
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d101      	bne.n	80102f0 <xQueueSemaphoreTake+0x6c>
 80102ec:	2301      	movs	r3, #1
 80102ee:	e000      	b.n	80102f2 <xQueueSemaphoreTake+0x6e>
 80102f0:	2300      	movs	r3, #0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d10c      	bne.n	8010310 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80102f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102fa:	b672      	cpsid	i
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	b662      	cpsie	i
 801030a:	61bb      	str	r3, [r7, #24]
}
 801030c:	bf00      	nop
 801030e:	e7fe      	b.n	801030e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010310:	f7ff f8ec 	bl	800f4ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010318:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801031a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031c:	2b00      	cmp	r3, #0
 801031e:	d024      	beq.n	801036a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010322:	1e5a      	subs	r2, r3, #1
 8010324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010326:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d104      	bne.n	801033a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010330:	f001 fc6c 	bl	8011c0c <pvTaskIncrementMutexHeldCount>
 8010334:	4602      	mov	r2, r0
 8010336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010338:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801033a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033c:	691b      	ldr	r3, [r3, #16]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00f      	beq.n	8010362 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010344:	3310      	adds	r3, #16
 8010346:	4618      	mov	r0, r3
 8010348:	f001 f908 	bl	801155c <xTaskRemoveFromEventList>
 801034c:	4603      	mov	r3, r0
 801034e:	2b00      	cmp	r3, #0
 8010350:	d007      	beq.n	8010362 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010352:	4b55      	ldr	r3, [pc, #340]	; (80104a8 <xQueueSemaphoreTake+0x224>)
 8010354:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010358:	601a      	str	r2, [r3, #0]
 801035a:	f3bf 8f4f 	dsb	sy
 801035e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010362:	f7ff f8f7 	bl	800f554 <vPortExitCritical>
				return pdPASS;
 8010366:	2301      	movs	r3, #1
 8010368:	e099      	b.n	801049e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d113      	bne.n	8010398 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010372:	2b00      	cmp	r3, #0
 8010374:	d00c      	beq.n	8010390 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8010376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801037a:	b672      	cpsid	i
 801037c:	f383 8811 	msr	BASEPRI, r3
 8010380:	f3bf 8f6f 	isb	sy
 8010384:	f3bf 8f4f 	dsb	sy
 8010388:	b662      	cpsie	i
 801038a:	617b      	str	r3, [r7, #20]
}
 801038c:	bf00      	nop
 801038e:	e7fe      	b.n	801038e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010390:	f7ff f8e0 	bl	800f554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010394:	2300      	movs	r3, #0
 8010396:	e082      	b.n	801049e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801039a:	2b00      	cmp	r3, #0
 801039c:	d106      	bne.n	80103ac <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801039e:	f107 030c 	add.w	r3, r7, #12
 80103a2:	4618      	mov	r0, r3
 80103a4:	f001 f940 	bl	8011628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80103a8:	2301      	movs	r3, #1
 80103aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80103ac:	f7ff f8d2 	bl	800f554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80103b0:	f000 fe8e 	bl	80110d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80103b4:	f7ff f89a 	bl	800f4ec <vPortEnterCritical>
 80103b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103be:	b25b      	sxtb	r3, r3
 80103c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c4:	d103      	bne.n	80103ce <xQueueSemaphoreTake+0x14a>
 80103c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c8:	2200      	movs	r2, #0
 80103ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103d4:	b25b      	sxtb	r3, r3
 80103d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103da:	d103      	bne.n	80103e4 <xQueueSemaphoreTake+0x160>
 80103dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103de:	2200      	movs	r2, #0
 80103e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103e4:	f7ff f8b6 	bl	800f554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80103e8:	463a      	mov	r2, r7
 80103ea:	f107 030c 	add.w	r3, r7, #12
 80103ee:	4611      	mov	r1, r2
 80103f0:	4618      	mov	r0, r3
 80103f2:	f001 f92f 	bl	8011654 <xTaskCheckForTimeOut>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d132      	bne.n	8010462 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103fe:	f000 fa3a 	bl	8010876 <prvIsQueueEmpty>
 8010402:	4603      	mov	r3, r0
 8010404:	2b00      	cmp	r3, #0
 8010406:	d026      	beq.n	8010456 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d109      	bne.n	8010424 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8010410:	f7ff f86c 	bl	800f4ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010416:	689b      	ldr	r3, [r3, #8]
 8010418:	4618      	mov	r0, r3
 801041a:	f001 fa97 	bl	801194c <xTaskPriorityInherit>
 801041e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010420:	f7ff f898 	bl	800f554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010426:	3324      	adds	r3, #36	; 0x24
 8010428:	683a      	ldr	r2, [r7, #0]
 801042a:	4611      	mov	r1, r2
 801042c:	4618      	mov	r0, r3
 801042e:	f001 f841 	bl	80114b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010434:	f000 f9cd 	bl	80107d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010438:	f000 fe58 	bl	80110ec <xTaskResumeAll>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	f47f af66 	bne.w	8010310 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8010444:	4b18      	ldr	r3, [pc, #96]	; (80104a8 <xQueueSemaphoreTake+0x224>)
 8010446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801044a:	601a      	str	r2, [r3, #0]
 801044c:	f3bf 8f4f 	dsb	sy
 8010450:	f3bf 8f6f 	isb	sy
 8010454:	e75c      	b.n	8010310 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010458:	f000 f9bb 	bl	80107d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801045c:	f000 fe46 	bl	80110ec <xTaskResumeAll>
 8010460:	e756      	b.n	8010310 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010464:	f000 f9b5 	bl	80107d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010468:	f000 fe40 	bl	80110ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801046c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801046e:	f000 fa02 	bl	8010876 <prvIsQueueEmpty>
 8010472:	4603      	mov	r3, r0
 8010474:	2b00      	cmp	r3, #0
 8010476:	f43f af4b 	beq.w	8010310 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801047a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047c:	2b00      	cmp	r3, #0
 801047e:	d00d      	beq.n	801049c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8010480:	f7ff f834 	bl	800f4ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010486:	f000 f8fc 	bl	8010682 <prvGetDisinheritPriorityAfterTimeout>
 801048a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801048c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010492:	4618      	mov	r0, r3
 8010494:	f001 fb34 	bl	8011b00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010498:	f7ff f85c 	bl	800f554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801049c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3738      	adds	r7, #56	; 0x38
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	e000ed04 	.word	0xe000ed04

080104ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b08e      	sub	sp, #56	; 0x38
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	60f8      	str	r0, [r7, #12]
 80104b4:	60b9      	str	r1, [r7, #8]
 80104b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80104bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10c      	bne.n	80104dc <xQueueReceiveFromISR+0x30>
	__asm volatile
 80104c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c6:	b672      	cpsid	i
 80104c8:	f383 8811 	msr	BASEPRI, r3
 80104cc:	f3bf 8f6f 	isb	sy
 80104d0:	f3bf 8f4f 	dsb	sy
 80104d4:	b662      	cpsie	i
 80104d6:	623b      	str	r3, [r7, #32]
}
 80104d8:	bf00      	nop
 80104da:	e7fe      	b.n	80104da <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d103      	bne.n	80104ea <xQueueReceiveFromISR+0x3e>
 80104e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d101      	bne.n	80104ee <xQueueReceiveFromISR+0x42>
 80104ea:	2301      	movs	r3, #1
 80104ec:	e000      	b.n	80104f0 <xQueueReceiveFromISR+0x44>
 80104ee:	2300      	movs	r3, #0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d10c      	bne.n	801050e <xQueueReceiveFromISR+0x62>
	__asm volatile
 80104f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f8:	b672      	cpsid	i
 80104fa:	f383 8811 	msr	BASEPRI, r3
 80104fe:	f3bf 8f6f 	isb	sy
 8010502:	f3bf 8f4f 	dsb	sy
 8010506:	b662      	cpsie	i
 8010508:	61fb      	str	r3, [r7, #28]
}
 801050a:	bf00      	nop
 801050c:	e7fe      	b.n	801050c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801050e:	f7ff f8d5 	bl	800f6bc <vPortValidateInterruptPriority>
	__asm volatile
 8010512:	f3ef 8211 	mrs	r2, BASEPRI
 8010516:	f04f 0350 	mov.w	r3, #80	; 0x50
 801051a:	b672      	cpsid	i
 801051c:	f383 8811 	msr	BASEPRI, r3
 8010520:	f3bf 8f6f 	isb	sy
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	b662      	cpsie	i
 801052a:	61ba      	str	r2, [r7, #24]
 801052c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801052e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010536:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801053a:	2b00      	cmp	r3, #0
 801053c:	d02f      	beq.n	801059e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801053e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010548:	68b9      	ldr	r1, [r7, #8]
 801054a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801054c:	f000 f91b 	bl	8010786 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010552:	1e5a      	subs	r2, r3, #1
 8010554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010556:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010558:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801055c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010560:	d112      	bne.n	8010588 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010564:	691b      	ldr	r3, [r3, #16]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d016      	beq.n	8010598 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801056a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056c:	3310      	adds	r3, #16
 801056e:	4618      	mov	r0, r3
 8010570:	f000 fff4 	bl	801155c <xTaskRemoveFromEventList>
 8010574:	4603      	mov	r3, r0
 8010576:	2b00      	cmp	r3, #0
 8010578:	d00e      	beq.n	8010598 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00b      	beq.n	8010598 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2201      	movs	r2, #1
 8010584:	601a      	str	r2, [r3, #0]
 8010586:	e007      	b.n	8010598 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801058c:	3301      	adds	r3, #1
 801058e:	b2db      	uxtb	r3, r3
 8010590:	b25a      	sxtb	r2, r3
 8010592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010598:	2301      	movs	r3, #1
 801059a:	637b      	str	r3, [r7, #52]	; 0x34
 801059c:	e001      	b.n	80105a2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801059e:	2300      	movs	r3, #0
 80105a0:	637b      	str	r3, [r7, #52]	; 0x34
 80105a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	f383 8811 	msr	BASEPRI, r3
}
 80105ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80105ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3738      	adds	r7, #56	; 0x38
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d10c      	bne.n	80105e0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 80105c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105ca:	b672      	cpsid	i
 80105cc:	f383 8811 	msr	BASEPRI, r3
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	f3bf 8f4f 	dsb	sy
 80105d8:	b662      	cpsie	i
 80105da:	60bb      	str	r3, [r7, #8]
}
 80105dc:	bf00      	nop
 80105de:	e7fe      	b.n	80105de <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 80105e0:	f7fe ff84 	bl	800f4ec <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105e8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80105ea:	f7fe ffb3 	bl	800f554 <vPortExitCritical>

	return uxReturn;
 80105ee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80105f0:	4618      	mov	r0, r3
 80105f2:	3710      	adds	r7, #16
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}

080105f8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80105f8:	b480      	push	{r7}
 80105fa:	b087      	sub	sp, #28
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d10c      	bne.n	8010624 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 801060a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801060e:	b672      	cpsid	i
 8010610:	f383 8811 	msr	BASEPRI, r3
 8010614:	f3bf 8f6f 	isb	sy
 8010618:	f3bf 8f4f 	dsb	sy
 801061c:	b662      	cpsie	i
 801061e:	60fb      	str	r3, [r7, #12]
}
 8010620:	bf00      	nop
 8010622:	e7fe      	b.n	8010622 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010628:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801062a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801062c:	4618      	mov	r0, r3
 801062e:	371c      	adds	r7, #28
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr

08010638 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d10c      	bne.n	8010664 <vQueueDelete+0x2c>
	__asm volatile
 801064a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801064e:	b672      	cpsid	i
 8010650:	f383 8811 	msr	BASEPRI, r3
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	b662      	cpsie	i
 801065e:	60bb      	str	r3, [r7, #8]
}
 8010660:	bf00      	nop
 8010662:	e7fe      	b.n	8010662 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010664:	68f8      	ldr	r0, [r7, #12]
 8010666:	f000 f95f 	bl	8010928 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010670:	2b00      	cmp	r3, #0
 8010672:	d102      	bne.n	801067a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f7fe fc61 	bl	800ef3c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801067a:	bf00      	nop
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010682:	b480      	push	{r7}
 8010684:	b085      	sub	sp, #20
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801068e:	2b00      	cmp	r3, #0
 8010690:	d006      	beq.n	80106a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801069c:	60fb      	str	r3, [r7, #12]
 801069e:	e001      	b.n	80106a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80106a0:	2300      	movs	r3, #0
 80106a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80106a4:	68fb      	ldr	r3, [r7, #12]
	}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3714      	adds	r7, #20
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr

080106b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80106b2:	b580      	push	{r7, lr}
 80106b4:	b086      	sub	sp, #24
 80106b6:	af00      	add	r7, sp, #0
 80106b8:	60f8      	str	r0, [r7, #12]
 80106ba:	60b9      	str	r1, [r7, #8]
 80106bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80106be:	2300      	movs	r3, #0
 80106c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d10d      	bne.n	80106ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d14d      	bne.n	8010774 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	689b      	ldr	r3, [r3, #8]
 80106dc:	4618      	mov	r0, r3
 80106de:	f001 f99d 	bl	8011a1c <xTaskPriorityDisinherit>
 80106e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2200      	movs	r2, #0
 80106e8:	609a      	str	r2, [r3, #8]
 80106ea:	e043      	b.n	8010774 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d119      	bne.n	8010726 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	6858      	ldr	r0, [r3, #4]
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106fa:	461a      	mov	r2, r3
 80106fc:	68b9      	ldr	r1, [r7, #8]
 80106fe:	f012 fd07 	bl	8023110 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	685a      	ldr	r2, [r3, #4]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801070a:	441a      	add	r2, r3
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	685a      	ldr	r2, [r3, #4]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	689b      	ldr	r3, [r3, #8]
 8010718:	429a      	cmp	r2, r3
 801071a:	d32b      	bcc.n	8010774 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	605a      	str	r2, [r3, #4]
 8010724:	e026      	b.n	8010774 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	68d8      	ldr	r0, [r3, #12]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801072e:	461a      	mov	r2, r3
 8010730:	68b9      	ldr	r1, [r7, #8]
 8010732:	f012 fced 	bl	8023110 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	68da      	ldr	r2, [r3, #12]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801073e:	425b      	negs	r3, r3
 8010740:	441a      	add	r2, r3
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	68da      	ldr	r2, [r3, #12]
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	429a      	cmp	r2, r3
 8010750:	d207      	bcs.n	8010762 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	689a      	ldr	r2, [r3, #8]
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801075a:	425b      	negs	r3, r3
 801075c:	441a      	add	r2, r3
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2b02      	cmp	r3, #2
 8010766:	d105      	bne.n	8010774 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d002      	beq.n	8010774 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	3b01      	subs	r3, #1
 8010772:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	1c5a      	adds	r2, r3, #1
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801077c:	697b      	ldr	r3, [r7, #20]
}
 801077e:	4618      	mov	r0, r3
 8010780:	3718      	adds	r7, #24
 8010782:	46bd      	mov	sp, r7
 8010784:	bd80      	pop	{r7, pc}

08010786 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010786:	b580      	push	{r7, lr}
 8010788:	b082      	sub	sp, #8
 801078a:	af00      	add	r7, sp, #0
 801078c:	6078      	str	r0, [r7, #4]
 801078e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010794:	2b00      	cmp	r3, #0
 8010796:	d018      	beq.n	80107ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	68da      	ldr	r2, [r3, #12]
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a0:	441a      	add	r2, r3
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	68da      	ldr	r2, [r3, #12]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	689b      	ldr	r3, [r3, #8]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d303      	bcc.n	80107ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681a      	ldr	r2, [r3, #0]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	68d9      	ldr	r1, [r3, #12]
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c2:	461a      	mov	r2, r3
 80107c4:	6838      	ldr	r0, [r7, #0]
 80107c6:	f012 fca3 	bl	8023110 <memcpy>
	}
}
 80107ca:	bf00      	nop
 80107cc:	3708      	adds	r7, #8
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b084      	sub	sp, #16
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80107da:	f7fe fe87 	bl	800f4ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80107e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80107e6:	e011      	b.n	801080c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d012      	beq.n	8010816 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	3324      	adds	r3, #36	; 0x24
 80107f4:	4618      	mov	r0, r3
 80107f6:	f000 feb1 	bl	801155c <xTaskRemoveFromEventList>
 80107fa:	4603      	mov	r3, r0
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d001      	beq.n	8010804 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010800:	f000 ff8e 	bl	8011720 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010804:	7bfb      	ldrb	r3, [r7, #15]
 8010806:	3b01      	subs	r3, #1
 8010808:	b2db      	uxtb	r3, r3
 801080a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801080c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010810:	2b00      	cmp	r3, #0
 8010812:	dce9      	bgt.n	80107e8 <prvUnlockQueue+0x16>
 8010814:	e000      	b.n	8010818 <prvUnlockQueue+0x46>
					break;
 8010816:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	22ff      	movs	r2, #255	; 0xff
 801081c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010820:	f7fe fe98 	bl	800f554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010824:	f7fe fe62 	bl	800f4ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801082e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010830:	e011      	b.n	8010856 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	691b      	ldr	r3, [r3, #16]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d012      	beq.n	8010860 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	3310      	adds	r3, #16
 801083e:	4618      	mov	r0, r3
 8010840:	f000 fe8c 	bl	801155c <xTaskRemoveFromEventList>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d001      	beq.n	801084e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801084a:	f000 ff69 	bl	8011720 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801084e:	7bbb      	ldrb	r3, [r7, #14]
 8010850:	3b01      	subs	r3, #1
 8010852:	b2db      	uxtb	r3, r3
 8010854:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010856:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801085a:	2b00      	cmp	r3, #0
 801085c:	dce9      	bgt.n	8010832 <prvUnlockQueue+0x60>
 801085e:	e000      	b.n	8010862 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010860:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	22ff      	movs	r2, #255	; 0xff
 8010866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801086a:	f7fe fe73 	bl	800f554 <vPortExitCritical>
}
 801086e:	bf00      	nop
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b084      	sub	sp, #16
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801087e:	f7fe fe35 	bl	800f4ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010886:	2b00      	cmp	r3, #0
 8010888:	d102      	bne.n	8010890 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801088a:	2301      	movs	r3, #1
 801088c:	60fb      	str	r3, [r7, #12]
 801088e:	e001      	b.n	8010894 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010890:	2300      	movs	r3, #0
 8010892:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010894:	f7fe fe5e 	bl	800f554 <vPortExitCritical>

	return xReturn;
 8010898:	68fb      	ldr	r3, [r7, #12]
}
 801089a:	4618      	mov	r0, r3
 801089c:	3710      	adds	r7, #16
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}

080108a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80108a2:	b580      	push	{r7, lr}
 80108a4:	b084      	sub	sp, #16
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80108aa:	f7fe fe1f 	bl	800f4ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d102      	bne.n	80108c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80108ba:	2301      	movs	r3, #1
 80108bc:	60fb      	str	r3, [r7, #12]
 80108be:	e001      	b.n	80108c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80108c0:	2300      	movs	r3, #0
 80108c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80108c4:	f7fe fe46 	bl	800f554 <vPortExitCritical>

	return xReturn;
 80108c8:	68fb      	ldr	r3, [r7, #12]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
	...

080108d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80108d4:	b480      	push	{r7}
 80108d6:	b085      	sub	sp, #20
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
 80108dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80108de:	2300      	movs	r3, #0
 80108e0:	60fb      	str	r3, [r7, #12]
 80108e2:	e014      	b.n	801090e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80108e4:	4a0f      	ldr	r2, [pc, #60]	; (8010924 <vQueueAddToRegistry+0x50>)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d10b      	bne.n	8010908 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80108f0:	490c      	ldr	r1, [pc, #48]	; (8010924 <vQueueAddToRegistry+0x50>)
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	683a      	ldr	r2, [r7, #0]
 80108f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80108fa:	4a0a      	ldr	r2, [pc, #40]	; (8010924 <vQueueAddToRegistry+0x50>)
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	00db      	lsls	r3, r3, #3
 8010900:	4413      	add	r3, r2
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010906:	e006      	b.n	8010916 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	3301      	adds	r3, #1
 801090c:	60fb      	str	r3, [r7, #12]
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	2b07      	cmp	r3, #7
 8010912:	d9e7      	bls.n	80108e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010914:	bf00      	nop
 8010916:	bf00      	nop
 8010918:	3714      	adds	r7, #20
 801091a:	46bd      	mov	sp, r7
 801091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010920:	4770      	bx	lr
 8010922:	bf00      	nop
 8010924:	200187a8 	.word	0x200187a8

08010928 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010928:	b480      	push	{r7}
 801092a:	b085      	sub	sp, #20
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010930:	2300      	movs	r3, #0
 8010932:	60fb      	str	r3, [r7, #12]
 8010934:	e016      	b.n	8010964 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010936:	4a10      	ldr	r2, [pc, #64]	; (8010978 <vQueueUnregisterQueue+0x50>)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	00db      	lsls	r3, r3, #3
 801093c:	4413      	add	r3, r2
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	429a      	cmp	r2, r3
 8010944:	d10b      	bne.n	801095e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010946:	4a0c      	ldr	r2, [pc, #48]	; (8010978 <vQueueUnregisterQueue+0x50>)
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2100      	movs	r1, #0
 801094c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010950:	4a09      	ldr	r2, [pc, #36]	; (8010978 <vQueueUnregisterQueue+0x50>)
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	00db      	lsls	r3, r3, #3
 8010956:	4413      	add	r3, r2
 8010958:	2200      	movs	r2, #0
 801095a:	605a      	str	r2, [r3, #4]
				break;
 801095c:	e006      	b.n	801096c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	3301      	adds	r3, #1
 8010962:	60fb      	str	r3, [r7, #12]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	2b07      	cmp	r3, #7
 8010968:	d9e5      	bls.n	8010936 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801096a:	bf00      	nop
 801096c:	bf00      	nop
 801096e:	3714      	adds	r7, #20
 8010970:	46bd      	mov	sp, r7
 8010972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010976:	4770      	bx	lr
 8010978:	200187a8 	.word	0x200187a8

0801097c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801097c:	b580      	push	{r7, lr}
 801097e:	b086      	sub	sp, #24
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801098c:	f7fe fdae 	bl	800f4ec <vPortEnterCritical>
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010996:	b25b      	sxtb	r3, r3
 8010998:	f1b3 3fff 	cmp.w	r3, #4294967295
 801099c:	d103      	bne.n	80109a6 <vQueueWaitForMessageRestricted+0x2a>
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	2200      	movs	r2, #0
 80109a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109ac:	b25b      	sxtb	r3, r3
 80109ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b2:	d103      	bne.n	80109bc <vQueueWaitForMessageRestricted+0x40>
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	2200      	movs	r2, #0
 80109b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109bc:	f7fe fdca 	bl	800f554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d106      	bne.n	80109d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80109c8:	697b      	ldr	r3, [r7, #20]
 80109ca:	3324      	adds	r3, #36	; 0x24
 80109cc:	687a      	ldr	r2, [r7, #4]
 80109ce:	68b9      	ldr	r1, [r7, #8]
 80109d0:	4618      	mov	r0, r3
 80109d2:	f000 fd95 	bl	8011500 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80109d6:	6978      	ldr	r0, [r7, #20]
 80109d8:	f7ff fefb 	bl	80107d2 <prvUnlockQueue>
	}
 80109dc:	bf00      	nop
 80109de:	3718      	adds	r7, #24
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}

080109e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b08e      	sub	sp, #56	; 0x38
 80109e8:	af04      	add	r7, sp, #16
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
 80109f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80109f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d10c      	bne.n	8010a12 <xTaskCreateStatic+0x2e>
	__asm volatile
 80109f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fc:	b672      	cpsid	i
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	b662      	cpsie	i
 8010a0c:	623b      	str	r3, [r7, #32]
}
 8010a0e:	bf00      	nop
 8010a10:	e7fe      	b.n	8010a10 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d10c      	bne.n	8010a32 <xTaskCreateStatic+0x4e>
	__asm volatile
 8010a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1c:	b672      	cpsid	i
 8010a1e:	f383 8811 	msr	BASEPRI, r3
 8010a22:	f3bf 8f6f 	isb	sy
 8010a26:	f3bf 8f4f 	dsb	sy
 8010a2a:	b662      	cpsie	i
 8010a2c:	61fb      	str	r3, [r7, #28]
}
 8010a2e:	bf00      	nop
 8010a30:	e7fe      	b.n	8010a30 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010a32:	23ac      	movs	r3, #172	; 0xac
 8010a34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	2bac      	cmp	r3, #172	; 0xac
 8010a3a:	d00c      	beq.n	8010a56 <xTaskCreateStatic+0x72>
	__asm volatile
 8010a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a40:	b672      	cpsid	i
 8010a42:	f383 8811 	msr	BASEPRI, r3
 8010a46:	f3bf 8f6f 	isb	sy
 8010a4a:	f3bf 8f4f 	dsb	sy
 8010a4e:	b662      	cpsie	i
 8010a50:	61bb      	str	r3, [r7, #24]
}
 8010a52:	bf00      	nop
 8010a54:	e7fe      	b.n	8010a54 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010a56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d01e      	beq.n	8010a9c <xTaskCreateStatic+0xb8>
 8010a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d01b      	beq.n	8010a9c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a70:	2202      	movs	r2, #2
 8010a72:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010a76:	2300      	movs	r3, #0
 8010a78:	9303      	str	r3, [sp, #12]
 8010a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7c:	9302      	str	r3, [sp, #8]
 8010a7e:	f107 0314 	add.w	r3, r7, #20
 8010a82:	9301      	str	r3, [sp, #4]
 8010a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a86:	9300      	str	r3, [sp, #0]
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	68b9      	ldr	r1, [r7, #8]
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f000 f850 	bl	8010b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a96:	f000 f8f5 	bl	8010c84 <prvAddNewTaskToReadyList>
 8010a9a:	e001      	b.n	8010aa0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010aa0:	697b      	ldr	r3, [r7, #20]
	}
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	3728      	adds	r7, #40	; 0x28
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}

08010aaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010aaa:	b580      	push	{r7, lr}
 8010aac:	b08c      	sub	sp, #48	; 0x30
 8010aae:	af04      	add	r7, sp, #16
 8010ab0:	60f8      	str	r0, [r7, #12]
 8010ab2:	60b9      	str	r1, [r7, #8]
 8010ab4:	603b      	str	r3, [r7, #0]
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010aba:	88fb      	ldrh	r3, [r7, #6]
 8010abc:	009b      	lsls	r3, r3, #2
 8010abe:	4618      	mov	r0, r3
 8010ac0:	f7fe f972 	bl	800eda8 <pvPortMalloc>
 8010ac4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d00e      	beq.n	8010aea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010acc:	20ac      	movs	r0, #172	; 0xac
 8010ace:	f7fe f96b 	bl	800eda8 <pvPortMalloc>
 8010ad2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010ad4:	69fb      	ldr	r3, [r7, #28]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d003      	beq.n	8010ae2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	697a      	ldr	r2, [r7, #20]
 8010ade:	631a      	str	r2, [r3, #48]	; 0x30
 8010ae0:	e005      	b.n	8010aee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010ae2:	6978      	ldr	r0, [r7, #20]
 8010ae4:	f7fe fa2a 	bl	800ef3c <vPortFree>
 8010ae8:	e001      	b.n	8010aee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010aea:	2300      	movs	r3, #0
 8010aec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d017      	beq.n	8010b24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	2200      	movs	r2, #0
 8010af8:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010afc:	88fa      	ldrh	r2, [r7, #6]
 8010afe:	2300      	movs	r3, #0
 8010b00:	9303      	str	r3, [sp, #12]
 8010b02:	69fb      	ldr	r3, [r7, #28]
 8010b04:	9302      	str	r3, [sp, #8]
 8010b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b08:	9301      	str	r3, [sp, #4]
 8010b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b0c:	9300      	str	r3, [sp, #0]
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	68b9      	ldr	r1, [r7, #8]
 8010b12:	68f8      	ldr	r0, [r7, #12]
 8010b14:	f000 f80e 	bl	8010b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b18:	69f8      	ldr	r0, [r7, #28]
 8010b1a:	f000 f8b3 	bl	8010c84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b1e:	2301      	movs	r3, #1
 8010b20:	61bb      	str	r3, [r7, #24]
 8010b22:	e002      	b.n	8010b2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010b24:	f04f 33ff 	mov.w	r3, #4294967295
 8010b28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010b2a:	69bb      	ldr	r3, [r7, #24]
	}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3720      	adds	r7, #32
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b088      	sub	sp, #32
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	607a      	str	r2, [r7, #4]
 8010b40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	461a      	mov	r2, r3
 8010b4c:	21a5      	movs	r1, #165	; 0xa5
 8010b4e:	f012 f98e 	bl	8022e6e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b56:	6879      	ldr	r1, [r7, #4]
 8010b58:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010b5c:	440b      	add	r3, r1
 8010b5e:	009b      	lsls	r3, r3, #2
 8010b60:	4413      	add	r3, r2
 8010b62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	f023 0307 	bic.w	r3, r3, #7
 8010b6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	f003 0307 	and.w	r3, r3, #7
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d00c      	beq.n	8010b90 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8010b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b7a:	b672      	cpsid	i
 8010b7c:	f383 8811 	msr	BASEPRI, r3
 8010b80:	f3bf 8f6f 	isb	sy
 8010b84:	f3bf 8f4f 	dsb	sy
 8010b88:	b662      	cpsie	i
 8010b8a:	617b      	str	r3, [r7, #20]
}
 8010b8c:	bf00      	nop
 8010b8e:	e7fe      	b.n	8010b8e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d01f      	beq.n	8010bd6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010b96:	2300      	movs	r3, #0
 8010b98:	61fb      	str	r3, [r7, #28]
 8010b9a:	e012      	b.n	8010bc2 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	7819      	ldrb	r1, [r3, #0]
 8010ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ba6:	69fb      	ldr	r3, [r7, #28]
 8010ba8:	4413      	add	r3, r2
 8010baa:	3334      	adds	r3, #52	; 0x34
 8010bac:	460a      	mov	r2, r1
 8010bae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010bb0:	68ba      	ldr	r2, [r7, #8]
 8010bb2:	69fb      	ldr	r3, [r7, #28]
 8010bb4:	4413      	add	r3, r2
 8010bb6:	781b      	ldrb	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d006      	beq.n	8010bca <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	3301      	adds	r3, #1
 8010bc0:	61fb      	str	r3, [r7, #28]
 8010bc2:	69fb      	ldr	r3, [r7, #28]
 8010bc4:	2b13      	cmp	r3, #19
 8010bc6:	d9e9      	bls.n	8010b9c <prvInitialiseNewTask+0x68>
 8010bc8:	e000      	b.n	8010bcc <prvInitialiseNewTask+0x98>
			{
				break;
 8010bca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bce:	2200      	movs	r2, #0
 8010bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8010bd4:	e003      	b.n	8010bde <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be0:	2b37      	cmp	r3, #55	; 0x37
 8010be2:	d901      	bls.n	8010be8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010be4:	2337      	movs	r3, #55	; 0x37
 8010be6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bf2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8010bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfc:	3304      	adds	r3, #4
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fe fad6 	bl	800f1b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c06:	3318      	adds	r3, #24
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fe fad1 	bl	800f1b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c26:	2200      	movs	r2, #0
 8010c28:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c2e:	2200      	movs	r2, #0
 8010c30:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c36:	3358      	adds	r3, #88	; 0x58
 8010c38:	224c      	movs	r2, #76	; 0x4c
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f012 f916 	bl	8022e6e <memset>
 8010c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c44:	4a0c      	ldr	r2, [pc, #48]	; (8010c78 <prvInitialiseNewTask+0x144>)
 8010c46:	65da      	str	r2, [r3, #92]	; 0x5c
 8010c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4a:	4a0c      	ldr	r2, [pc, #48]	; (8010c7c <prvInitialiseNewTask+0x148>)
 8010c4c:	661a      	str	r2, [r3, #96]	; 0x60
 8010c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c50:	4a0b      	ldr	r2, [pc, #44]	; (8010c80 <prvInitialiseNewTask+0x14c>)
 8010c52:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010c54:	683a      	ldr	r2, [r7, #0]
 8010c56:	68f9      	ldr	r1, [r7, #12]
 8010c58:	69b8      	ldr	r0, [r7, #24]
 8010c5a:	f7fe fb3d 	bl	800f2d8 <pxPortInitialiseStack>
 8010c5e:	4602      	mov	r2, r0
 8010c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c62:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d002      	beq.n	8010c70 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c6e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c70:	bf00      	nop
 8010c72:	3720      	adds	r7, #32
 8010c74:	46bd      	mov	sp, r7
 8010c76:	bd80      	pop	{r7, pc}
 8010c78:	20025344 	.word	0x20025344
 8010c7c:	200253ac 	.word	0x200253ac
 8010c80:	20025414 	.word	0x20025414

08010c84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010c8c:	f7fe fc2e 	bl	800f4ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010c90:	4b2d      	ldr	r3, [pc, #180]	; (8010d48 <prvAddNewTaskToReadyList+0xc4>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	3301      	adds	r3, #1
 8010c96:	4a2c      	ldr	r2, [pc, #176]	; (8010d48 <prvAddNewTaskToReadyList+0xc4>)
 8010c98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010c9a:	4b2c      	ldr	r3, [pc, #176]	; (8010d4c <prvAddNewTaskToReadyList+0xc8>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d109      	bne.n	8010cb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010ca2:	4a2a      	ldr	r2, [pc, #168]	; (8010d4c <prvAddNewTaskToReadyList+0xc8>)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ca8:	4b27      	ldr	r3, [pc, #156]	; (8010d48 <prvAddNewTaskToReadyList+0xc4>)
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d110      	bne.n	8010cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010cb0:	f000 fd5a 	bl	8011768 <prvInitialiseTaskLists>
 8010cb4:	e00d      	b.n	8010cd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010cb6:	4b26      	ldr	r3, [pc, #152]	; (8010d50 <prvAddNewTaskToReadyList+0xcc>)
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d109      	bne.n	8010cd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010cbe:	4b23      	ldr	r3, [pc, #140]	; (8010d4c <prvAddNewTaskToReadyList+0xc8>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d802      	bhi.n	8010cd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010ccc:	4a1f      	ldr	r2, [pc, #124]	; (8010d4c <prvAddNewTaskToReadyList+0xc8>)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010cd2:	4b20      	ldr	r3, [pc, #128]	; (8010d54 <prvAddNewTaskToReadyList+0xd0>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	3301      	adds	r3, #1
 8010cd8:	4a1e      	ldr	r2, [pc, #120]	; (8010d54 <prvAddNewTaskToReadyList+0xd0>)
 8010cda:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010cdc:	4b1d      	ldr	r3, [pc, #116]	; (8010d54 <prvAddNewTaskToReadyList+0xd0>)
 8010cde:	681a      	ldr	r2, [r3, #0]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ce8:	4b1b      	ldr	r3, [pc, #108]	; (8010d58 <prvAddNewTaskToReadyList+0xd4>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	429a      	cmp	r2, r3
 8010cee:	d903      	bls.n	8010cf8 <prvAddNewTaskToReadyList+0x74>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cf4:	4a18      	ldr	r2, [pc, #96]	; (8010d58 <prvAddNewTaskToReadyList+0xd4>)
 8010cf6:	6013      	str	r3, [r2, #0]
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cfc:	4613      	mov	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	4413      	add	r3, r2
 8010d02:	009b      	lsls	r3, r3, #2
 8010d04:	4a15      	ldr	r2, [pc, #84]	; (8010d5c <prvAddNewTaskToReadyList+0xd8>)
 8010d06:	441a      	add	r2, r3
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	3304      	adds	r3, #4
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	4610      	mov	r0, r2
 8010d10:	f7fe fa5b 	bl	800f1ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d14:	f7fe fc1e 	bl	800f554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d18:	4b0d      	ldr	r3, [pc, #52]	; (8010d50 <prvAddNewTaskToReadyList+0xcc>)
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d00e      	beq.n	8010d3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d20:	4b0a      	ldr	r3, [pc, #40]	; (8010d4c <prvAddNewTaskToReadyList+0xc8>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2a:	429a      	cmp	r2, r3
 8010d2c:	d207      	bcs.n	8010d3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d2e:	4b0c      	ldr	r3, [pc, #48]	; (8010d60 <prvAddNewTaskToReadyList+0xdc>)
 8010d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	f3bf 8f4f 	dsb	sy
 8010d3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d3e:	bf00      	nop
 8010d40:	3708      	adds	r7, #8
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
 8010d46:	bf00      	nop
 8010d48:	20018cbc 	.word	0x20018cbc
 8010d4c:	200187e8 	.word	0x200187e8
 8010d50:	20018cc8 	.word	0x20018cc8
 8010d54:	20018cd8 	.word	0x20018cd8
 8010d58:	20018cc4 	.word	0x20018cc4
 8010d5c:	200187ec 	.word	0x200187ec
 8010d60:	e000ed04 	.word	0xe000ed04

08010d64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d019      	beq.n	8010daa <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010d76:	4b14      	ldr	r3, [pc, #80]	; (8010dc8 <vTaskDelay+0x64>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d00c      	beq.n	8010d98 <vTaskDelay+0x34>
	__asm volatile
 8010d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d82:	b672      	cpsid	i
 8010d84:	f383 8811 	msr	BASEPRI, r3
 8010d88:	f3bf 8f6f 	isb	sy
 8010d8c:	f3bf 8f4f 	dsb	sy
 8010d90:	b662      	cpsie	i
 8010d92:	60bb      	str	r3, [r7, #8]
}
 8010d94:	bf00      	nop
 8010d96:	e7fe      	b.n	8010d96 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010d98:	f000 f99a 	bl	80110d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010d9c:	2100      	movs	r1, #0
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	f000 ff48 	bl	8011c34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010da4:	f000 f9a2 	bl	80110ec <xTaskResumeAll>
 8010da8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d107      	bne.n	8010dc0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8010db0:	4b06      	ldr	r3, [pc, #24]	; (8010dcc <vTaskDelay+0x68>)
 8010db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010db6:	601a      	str	r2, [r3, #0]
 8010db8:	f3bf 8f4f 	dsb	sy
 8010dbc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010dc0:	bf00      	nop
 8010dc2:	3710      	adds	r7, #16
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	20018ce4 	.word	0x20018ce4
 8010dcc:	e000ed04 	.word	0xe000ed04

08010dd0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010dd8:	f7fe fb88 	bl	800f4ec <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d102      	bne.n	8010de8 <vTaskSuspend+0x18>
 8010de2:	4b31      	ldr	r3, [pc, #196]	; (8010ea8 <vTaskSuspend+0xd8>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	e000      	b.n	8010dea <vTaskSuspend+0x1a>
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	3304      	adds	r3, #4
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fe fa47 	bl	800f284 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d004      	beq.n	8010e08 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	3318      	adds	r3, #24
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe fa3e 	bl	800f284 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	3304      	adds	r3, #4
 8010e0c:	4619      	mov	r1, r3
 8010e0e:	4827      	ldr	r0, [pc, #156]	; (8010eac <vTaskSuspend+0xdc>)
 8010e10:	f7fe f9db 	bl	800f1ca <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8010e1a:	b2db      	uxtb	r3, r3
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d103      	bne.n	8010e28 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2200      	movs	r2, #0
 8010e24:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8010e28:	f7fe fb94 	bl	800f554 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8010e2c:	4b20      	ldr	r3, [pc, #128]	; (8010eb0 <vTaskSuspend+0xe0>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d005      	beq.n	8010e40 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8010e34:	f7fe fb5a 	bl	800f4ec <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8010e38:	f000 fd3a 	bl	80118b0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8010e3c:	f7fe fb8a 	bl	800f554 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8010e40:	4b19      	ldr	r3, [pc, #100]	; (8010ea8 <vTaskSuspend+0xd8>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	68fa      	ldr	r2, [r7, #12]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d129      	bne.n	8010e9e <vTaskSuspend+0xce>
		{
			if( xSchedulerRunning != pdFALSE )
 8010e4a:	4b19      	ldr	r3, [pc, #100]	; (8010eb0 <vTaskSuspend+0xe0>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d019      	beq.n	8010e86 <vTaskSuspend+0xb6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8010e52:	4b18      	ldr	r3, [pc, #96]	; (8010eb4 <vTaskSuspend+0xe4>)
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00c      	beq.n	8010e74 <vTaskSuspend+0xa4>
	__asm volatile
 8010e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5e:	b672      	cpsid	i
 8010e60:	f383 8811 	msr	BASEPRI, r3
 8010e64:	f3bf 8f6f 	isb	sy
 8010e68:	f3bf 8f4f 	dsb	sy
 8010e6c:	b662      	cpsie	i
 8010e6e:	60bb      	str	r3, [r7, #8]
}
 8010e70:	bf00      	nop
 8010e72:	e7fe      	b.n	8010e72 <vTaskSuspend+0xa2>
				portYIELD_WITHIN_API();
 8010e74:	4b10      	ldr	r3, [pc, #64]	; (8010eb8 <vTaskSuspend+0xe8>)
 8010e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e7a:	601a      	str	r2, [r3, #0]
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e84:	e00b      	b.n	8010e9e <vTaskSuspend+0xce>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8010e86:	4b09      	ldr	r3, [pc, #36]	; (8010eac <vTaskSuspend+0xdc>)
 8010e88:	681a      	ldr	r2, [r3, #0]
 8010e8a:	4b0c      	ldr	r3, [pc, #48]	; (8010ebc <vTaskSuspend+0xec>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	429a      	cmp	r2, r3
 8010e90:	d103      	bne.n	8010e9a <vTaskSuspend+0xca>
					pxCurrentTCB = NULL;
 8010e92:	4b05      	ldr	r3, [pc, #20]	; (8010ea8 <vTaskSuspend+0xd8>)
 8010e94:	2200      	movs	r2, #0
 8010e96:	601a      	str	r2, [r3, #0]
	}
 8010e98:	e001      	b.n	8010e9e <vTaskSuspend+0xce>
					vTaskSwitchContext();
 8010e9a:	f000 faa5 	bl	80113e8 <vTaskSwitchContext>
	}
 8010e9e:	bf00      	nop
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	200187e8 	.word	0x200187e8
 8010eac:	20018ca8 	.word	0x20018ca8
 8010eb0:	20018cc8 	.word	0x20018cc8
 8010eb4:	20018ce4 	.word	0x20018ce4
 8010eb8:	e000ed04 	.word	0xe000ed04
 8010ebc:	20018cbc 	.word	0x20018cbc

08010ec0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8010ec0:	b480      	push	{r7}
 8010ec2:	b087      	sub	sp, #28
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d10c      	bne.n	8010ef0 <prvTaskIsTaskSuspended+0x30>
	__asm volatile
 8010ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eda:	b672      	cpsid	i
 8010edc:	f383 8811 	msr	BASEPRI, r3
 8010ee0:	f3bf 8f6f 	isb	sy
 8010ee4:	f3bf 8f4f 	dsb	sy
 8010ee8:	b662      	cpsie	i
 8010eea:	60fb      	str	r3, [r7, #12]
}
 8010eec:	bf00      	nop
 8010eee:	e7fe      	b.n	8010eee <prvTaskIsTaskSuspended+0x2e>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	695b      	ldr	r3, [r3, #20]
 8010ef4:	4a0a      	ldr	r2, [pc, #40]	; (8010f20 <prvTaskIsTaskSuspended+0x60>)
 8010ef6:	4293      	cmp	r3, r2
 8010ef8:	d10a      	bne.n	8010f10 <prvTaskIsTaskSuspended+0x50>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8010efa:	693b      	ldr	r3, [r7, #16]
 8010efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010efe:	4a09      	ldr	r2, [pc, #36]	; (8010f24 <prvTaskIsTaskSuspended+0x64>)
 8010f00:	4293      	cmp	r3, r2
 8010f02:	d005      	beq.n	8010f10 <prvTaskIsTaskSuspended+0x50>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d101      	bne.n	8010f10 <prvTaskIsTaskSuspended+0x50>
				{
					xReturn = pdTRUE;
 8010f0c:	2301      	movs	r3, #1
 8010f0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010f10:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8010f12:	4618      	mov	r0, r3
 8010f14:	371c      	adds	r7, #28
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	20018ca8 	.word	0x20018ca8
 8010f24:	20018c7c 	.word	0x20018c7c

08010f28 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b084      	sub	sp, #16
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d10c      	bne.n	8010f54 <vTaskResume+0x2c>
	__asm volatile
 8010f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3e:	b672      	cpsid	i
 8010f40:	f383 8811 	msr	BASEPRI, r3
 8010f44:	f3bf 8f6f 	isb	sy
 8010f48:	f3bf 8f4f 	dsb	sy
 8010f4c:	b662      	cpsie	i
 8010f4e:	60bb      	str	r3, [r7, #8]
}
 8010f50:	bf00      	nop
 8010f52:	e7fe      	b.n	8010f52 <vTaskResume+0x2a>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8010f54:	4b20      	ldr	r3, [pc, #128]	; (8010fd8 <vTaskResume+0xb0>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	68fa      	ldr	r2, [r7, #12]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d038      	beq.n	8010fd0 <vTaskResume+0xa8>
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d035      	beq.n	8010fd0 <vTaskResume+0xa8>
		{
			taskENTER_CRITICAL();
 8010f64:	f7fe fac2 	bl	800f4ec <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8010f68:	68f8      	ldr	r0, [r7, #12]
 8010f6a:	f7ff ffa9 	bl	8010ec0 <prvTaskIsTaskSuspended>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d02b      	beq.n	8010fcc <vTaskResume+0xa4>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	3304      	adds	r3, #4
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7fe f983 	bl	800f284 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f82:	4b16      	ldr	r3, [pc, #88]	; (8010fdc <vTaskResume+0xb4>)
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d903      	bls.n	8010f92 <vTaskResume+0x6a>
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f8e:	4a13      	ldr	r2, [pc, #76]	; (8010fdc <vTaskResume+0xb4>)
 8010f90:	6013      	str	r3, [r2, #0]
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f96:	4613      	mov	r3, r2
 8010f98:	009b      	lsls	r3, r3, #2
 8010f9a:	4413      	add	r3, r2
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	4a10      	ldr	r2, [pc, #64]	; (8010fe0 <vTaskResume+0xb8>)
 8010fa0:	441a      	add	r2, r3
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	4610      	mov	r0, r2
 8010faa:	f7fe f90e 	bl	800f1ca <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fb2:	4b09      	ldr	r3, [pc, #36]	; (8010fd8 <vTaskResume+0xb0>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d307      	bcc.n	8010fcc <vTaskResume+0xa4>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8010fbc:	4b09      	ldr	r3, [pc, #36]	; (8010fe4 <vTaskResume+0xbc>)
 8010fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	f3bf 8f4f 	dsb	sy
 8010fc8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8010fcc:	f7fe fac2 	bl	800f554 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010fd0:	bf00      	nop
 8010fd2:	3710      	adds	r7, #16
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	200187e8 	.word	0x200187e8
 8010fdc:	20018cc4 	.word	0x20018cc4
 8010fe0:	200187ec 	.word	0x200187ec
 8010fe4:	e000ed04 	.word	0xe000ed04

08010fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b08a      	sub	sp, #40	; 0x28
 8010fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010ff6:	463a      	mov	r2, r7
 8010ff8:	1d39      	adds	r1, r7, #4
 8010ffa:	f107 0308 	add.w	r3, r7, #8
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fd fe9e 	bl	800ed40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011004:	6839      	ldr	r1, [r7, #0]
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	68ba      	ldr	r2, [r7, #8]
 801100a:	9202      	str	r2, [sp, #8]
 801100c:	9301      	str	r3, [sp, #4]
 801100e:	2300      	movs	r3, #0
 8011010:	9300      	str	r3, [sp, #0]
 8011012:	2300      	movs	r3, #0
 8011014:	460a      	mov	r2, r1
 8011016:	4926      	ldr	r1, [pc, #152]	; (80110b0 <vTaskStartScheduler+0xc8>)
 8011018:	4826      	ldr	r0, [pc, #152]	; (80110b4 <vTaskStartScheduler+0xcc>)
 801101a:	f7ff fce3 	bl	80109e4 <xTaskCreateStatic>
 801101e:	4603      	mov	r3, r0
 8011020:	4a25      	ldr	r2, [pc, #148]	; (80110b8 <vTaskStartScheduler+0xd0>)
 8011022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011024:	4b24      	ldr	r3, [pc, #144]	; (80110b8 <vTaskStartScheduler+0xd0>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d002      	beq.n	8011032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801102c:	2301      	movs	r3, #1
 801102e:	617b      	str	r3, [r7, #20]
 8011030:	e001      	b.n	8011036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011032:	2300      	movs	r3, #0
 8011034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	2b01      	cmp	r3, #1
 801103a:	d102      	bne.n	8011042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801103c:	f000 fe4e 	bl	8011cdc <xTimerCreateTimerTask>
 8011040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	2b01      	cmp	r3, #1
 8011046:	d11d      	bne.n	8011084 <vTaskStartScheduler+0x9c>
	__asm volatile
 8011048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801104c:	b672      	cpsid	i
 801104e:	f383 8811 	msr	BASEPRI, r3
 8011052:	f3bf 8f6f 	isb	sy
 8011056:	f3bf 8f4f 	dsb	sy
 801105a:	b662      	cpsie	i
 801105c:	613b      	str	r3, [r7, #16]
}
 801105e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011060:	4b16      	ldr	r3, [pc, #88]	; (80110bc <vTaskStartScheduler+0xd4>)
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	3358      	adds	r3, #88	; 0x58
 8011066:	4a16      	ldr	r2, [pc, #88]	; (80110c0 <vTaskStartScheduler+0xd8>)
 8011068:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801106a:	4b16      	ldr	r3, [pc, #88]	; (80110c4 <vTaskStartScheduler+0xdc>)
 801106c:	f04f 32ff 	mov.w	r2, #4294967295
 8011070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011072:	4b15      	ldr	r3, [pc, #84]	; (80110c8 <vTaskStartScheduler+0xe0>)
 8011074:	2201      	movs	r2, #1
 8011076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011078:	4b14      	ldr	r3, [pc, #80]	; (80110cc <vTaskStartScheduler+0xe4>)
 801107a:	2200      	movs	r2, #0
 801107c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801107e:	f7fe f9b7 	bl	800f3f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011082:	e010      	b.n	80110a6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011084:	697b      	ldr	r3, [r7, #20]
 8011086:	f1b3 3fff 	cmp.w	r3, #4294967295
 801108a:	d10c      	bne.n	80110a6 <vTaskStartScheduler+0xbe>
	__asm volatile
 801108c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011090:	b672      	cpsid	i
 8011092:	f383 8811 	msr	BASEPRI, r3
 8011096:	f3bf 8f6f 	isb	sy
 801109a:	f3bf 8f4f 	dsb	sy
 801109e:	b662      	cpsie	i
 80110a0:	60fb      	str	r3, [r7, #12]
}
 80110a2:	bf00      	nop
 80110a4:	e7fe      	b.n	80110a4 <vTaskStartScheduler+0xbc>
}
 80110a6:	bf00      	nop
 80110a8:	3718      	adds	r7, #24
 80110aa:	46bd      	mov	sp, r7
 80110ac:	bd80      	pop	{r7, pc}
 80110ae:	bf00      	nop
 80110b0:	0802462c 	.word	0x0802462c
 80110b4:	08011739 	.word	0x08011739
 80110b8:	20018ce0 	.word	0x20018ce0
 80110bc:	200187e8 	.word	0x200187e8
 80110c0:	20000190 	.word	0x20000190
 80110c4:	20018cdc 	.word	0x20018cdc
 80110c8:	20018cc8 	.word	0x20018cc8
 80110cc:	20018cc0 	.word	0x20018cc0

080110d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110d0:	b480      	push	{r7}
 80110d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80110d4:	4b04      	ldr	r3, [pc, #16]	; (80110e8 <vTaskSuspendAll+0x18>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	3301      	adds	r3, #1
 80110da:	4a03      	ldr	r2, [pc, #12]	; (80110e8 <vTaskSuspendAll+0x18>)
 80110dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80110de:	bf00      	nop
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr
 80110e8:	20018ce4 	.word	0x20018ce4

080110ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80110f2:	2300      	movs	r3, #0
 80110f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80110f6:	2300      	movs	r3, #0
 80110f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80110fa:	4b43      	ldr	r3, [pc, #268]	; (8011208 <xTaskResumeAll+0x11c>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d10c      	bne.n	801111c <xTaskResumeAll+0x30>
	__asm volatile
 8011102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011106:	b672      	cpsid	i
 8011108:	f383 8811 	msr	BASEPRI, r3
 801110c:	f3bf 8f6f 	isb	sy
 8011110:	f3bf 8f4f 	dsb	sy
 8011114:	b662      	cpsie	i
 8011116:	603b      	str	r3, [r7, #0]
}
 8011118:	bf00      	nop
 801111a:	e7fe      	b.n	801111a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801111c:	f7fe f9e6 	bl	800f4ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011120:	4b39      	ldr	r3, [pc, #228]	; (8011208 <xTaskResumeAll+0x11c>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	3b01      	subs	r3, #1
 8011126:	4a38      	ldr	r2, [pc, #224]	; (8011208 <xTaskResumeAll+0x11c>)
 8011128:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801112a:	4b37      	ldr	r3, [pc, #220]	; (8011208 <xTaskResumeAll+0x11c>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d162      	bne.n	80111f8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011132:	4b36      	ldr	r3, [pc, #216]	; (801120c <xTaskResumeAll+0x120>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d05e      	beq.n	80111f8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801113a:	e02f      	b.n	801119c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801113c:	4b34      	ldr	r3, [pc, #208]	; (8011210 <xTaskResumeAll+0x124>)
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	3318      	adds	r3, #24
 8011148:	4618      	mov	r0, r3
 801114a:	f7fe f89b 	bl	800f284 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	3304      	adds	r3, #4
 8011152:	4618      	mov	r0, r3
 8011154:	f7fe f896 	bl	800f284 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801115c:	4b2d      	ldr	r3, [pc, #180]	; (8011214 <xTaskResumeAll+0x128>)
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	429a      	cmp	r2, r3
 8011162:	d903      	bls.n	801116c <xTaskResumeAll+0x80>
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011168:	4a2a      	ldr	r2, [pc, #168]	; (8011214 <xTaskResumeAll+0x128>)
 801116a:	6013      	str	r3, [r2, #0]
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011170:	4613      	mov	r3, r2
 8011172:	009b      	lsls	r3, r3, #2
 8011174:	4413      	add	r3, r2
 8011176:	009b      	lsls	r3, r3, #2
 8011178:	4a27      	ldr	r2, [pc, #156]	; (8011218 <xTaskResumeAll+0x12c>)
 801117a:	441a      	add	r2, r3
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	3304      	adds	r3, #4
 8011180:	4619      	mov	r1, r3
 8011182:	4610      	mov	r0, r2
 8011184:	f7fe f821 	bl	800f1ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801118c:	4b23      	ldr	r3, [pc, #140]	; (801121c <xTaskResumeAll+0x130>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011192:	429a      	cmp	r2, r3
 8011194:	d302      	bcc.n	801119c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8011196:	4b22      	ldr	r3, [pc, #136]	; (8011220 <xTaskResumeAll+0x134>)
 8011198:	2201      	movs	r2, #1
 801119a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801119c:	4b1c      	ldr	r3, [pc, #112]	; (8011210 <xTaskResumeAll+0x124>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d1cb      	bne.n	801113c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d001      	beq.n	80111ae <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111aa:	f000 fb81 	bl	80118b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80111ae:	4b1d      	ldr	r3, [pc, #116]	; (8011224 <xTaskResumeAll+0x138>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d010      	beq.n	80111dc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111ba:	f000 f859 	bl	8011270 <xTaskIncrementTick>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d002      	beq.n	80111ca <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80111c4:	4b16      	ldr	r3, [pc, #88]	; (8011220 <xTaskResumeAll+0x134>)
 80111c6:	2201      	movs	r2, #1
 80111c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	3b01      	subs	r3, #1
 80111ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1f1      	bne.n	80111ba <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80111d6:	4b13      	ldr	r3, [pc, #76]	; (8011224 <xTaskResumeAll+0x138>)
 80111d8:	2200      	movs	r2, #0
 80111da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111dc:	4b10      	ldr	r3, [pc, #64]	; (8011220 <xTaskResumeAll+0x134>)
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d009      	beq.n	80111f8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111e4:	2301      	movs	r3, #1
 80111e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80111e8:	4b0f      	ldr	r3, [pc, #60]	; (8011228 <xTaskResumeAll+0x13c>)
 80111ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111ee:	601a      	str	r2, [r3, #0]
 80111f0:	f3bf 8f4f 	dsb	sy
 80111f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80111f8:	f7fe f9ac 	bl	800f554 <vPortExitCritical>

	return xAlreadyYielded;
 80111fc:	68bb      	ldr	r3, [r7, #8]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3710      	adds	r7, #16
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
 8011206:	bf00      	nop
 8011208:	20018ce4 	.word	0x20018ce4
 801120c:	20018cbc 	.word	0x20018cbc
 8011210:	20018c7c 	.word	0x20018c7c
 8011214:	20018cc4 	.word	0x20018cc4
 8011218:	200187ec 	.word	0x200187ec
 801121c:	200187e8 	.word	0x200187e8
 8011220:	20018cd0 	.word	0x20018cd0
 8011224:	20018ccc 	.word	0x20018ccc
 8011228:	e000ed04 	.word	0xe000ed04

0801122c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )

{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011232:	4b05      	ldr	r3, [pc, #20]	; (8011248 <xTaskGetTickCount+0x1c>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011238:	687b      	ldr	r3, [r7, #4]
}
 801123a:	4618      	mov	r0, r3
 801123c:	370c      	adds	r7, #12
 801123e:	46bd      	mov	sp, r7
 8011240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011244:	4770      	bx	lr
 8011246:	bf00      	nop
 8011248:	20018cc0 	.word	0x20018cc0

0801124c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011252:	f7fe fa33 	bl	800f6bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011256:	2300      	movs	r3, #0
 8011258:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801125a:	4b04      	ldr	r3, [pc, #16]	; (801126c <xTaskGetTickCountFromISR+0x20>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011260:	683b      	ldr	r3, [r7, #0]
}
 8011262:	4618      	mov	r0, r3
 8011264:	3708      	adds	r7, #8
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	20018cc0 	.word	0x20018cc0

08011270 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b086      	sub	sp, #24
 8011274:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011276:	2300      	movs	r3, #0
 8011278:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801127a:	4b50      	ldr	r3, [pc, #320]	; (80113bc <xTaskIncrementTick+0x14c>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	f040 808b 	bne.w	801139a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011284:	4b4e      	ldr	r3, [pc, #312]	; (80113c0 <xTaskIncrementTick+0x150>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	3301      	adds	r3, #1
 801128a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801128c:	4a4c      	ldr	r2, [pc, #304]	; (80113c0 <xTaskIncrementTick+0x150>)
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d122      	bne.n	80112de <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8011298:	4b4a      	ldr	r3, [pc, #296]	; (80113c4 <xTaskIncrementTick+0x154>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d00c      	beq.n	80112bc <xTaskIncrementTick+0x4c>
	__asm volatile
 80112a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112a6:	b672      	cpsid	i
 80112a8:	f383 8811 	msr	BASEPRI, r3
 80112ac:	f3bf 8f6f 	isb	sy
 80112b0:	f3bf 8f4f 	dsb	sy
 80112b4:	b662      	cpsie	i
 80112b6:	603b      	str	r3, [r7, #0]
}
 80112b8:	bf00      	nop
 80112ba:	e7fe      	b.n	80112ba <xTaskIncrementTick+0x4a>
 80112bc:	4b41      	ldr	r3, [pc, #260]	; (80113c4 <xTaskIncrementTick+0x154>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	60fb      	str	r3, [r7, #12]
 80112c2:	4b41      	ldr	r3, [pc, #260]	; (80113c8 <xTaskIncrementTick+0x158>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	4a3f      	ldr	r2, [pc, #252]	; (80113c4 <xTaskIncrementTick+0x154>)
 80112c8:	6013      	str	r3, [r2, #0]
 80112ca:	4a3f      	ldr	r2, [pc, #252]	; (80113c8 <xTaskIncrementTick+0x158>)
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	6013      	str	r3, [r2, #0]
 80112d0:	4b3e      	ldr	r3, [pc, #248]	; (80113cc <xTaskIncrementTick+0x15c>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	3301      	adds	r3, #1
 80112d6:	4a3d      	ldr	r2, [pc, #244]	; (80113cc <xTaskIncrementTick+0x15c>)
 80112d8:	6013      	str	r3, [r2, #0]
 80112da:	f000 fae9 	bl	80118b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112de:	4b3c      	ldr	r3, [pc, #240]	; (80113d0 <xTaskIncrementTick+0x160>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	693a      	ldr	r2, [r7, #16]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d349      	bcc.n	801137c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112e8:	4b36      	ldr	r3, [pc, #216]	; (80113c4 <xTaskIncrementTick+0x154>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d104      	bne.n	80112fc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112f2:	4b37      	ldr	r3, [pc, #220]	; (80113d0 <xTaskIncrementTick+0x160>)
 80112f4:	f04f 32ff 	mov.w	r2, #4294967295
 80112f8:	601a      	str	r2, [r3, #0]
					break;
 80112fa:	e03f      	b.n	801137c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112fc:	4b31      	ldr	r3, [pc, #196]	; (80113c4 <xTaskIncrementTick+0x154>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	68db      	ldr	r3, [r3, #12]
 8011302:	68db      	ldr	r3, [r3, #12]
 8011304:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801130c:	693a      	ldr	r2, [r7, #16]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	429a      	cmp	r2, r3
 8011312:	d203      	bcs.n	801131c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011314:	4a2e      	ldr	r2, [pc, #184]	; (80113d0 <xTaskIncrementTick+0x160>)
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801131a:	e02f      	b.n	801137c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	3304      	adds	r3, #4
 8011320:	4618      	mov	r0, r3
 8011322:	f7fd ffaf 	bl	800f284 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801132a:	2b00      	cmp	r3, #0
 801132c:	d004      	beq.n	8011338 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	3318      	adds	r3, #24
 8011332:	4618      	mov	r0, r3
 8011334:	f7fd ffa6 	bl	800f284 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801133c:	4b25      	ldr	r3, [pc, #148]	; (80113d4 <xTaskIncrementTick+0x164>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	429a      	cmp	r2, r3
 8011342:	d903      	bls.n	801134c <xTaskIncrementTick+0xdc>
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011348:	4a22      	ldr	r2, [pc, #136]	; (80113d4 <xTaskIncrementTick+0x164>)
 801134a:	6013      	str	r3, [r2, #0]
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011350:	4613      	mov	r3, r2
 8011352:	009b      	lsls	r3, r3, #2
 8011354:	4413      	add	r3, r2
 8011356:	009b      	lsls	r3, r3, #2
 8011358:	4a1f      	ldr	r2, [pc, #124]	; (80113d8 <xTaskIncrementTick+0x168>)
 801135a:	441a      	add	r2, r3
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	3304      	adds	r3, #4
 8011360:	4619      	mov	r1, r3
 8011362:	4610      	mov	r0, r2
 8011364:	f7fd ff31 	bl	800f1ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801136c:	4b1b      	ldr	r3, [pc, #108]	; (80113dc <xTaskIncrementTick+0x16c>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011372:	429a      	cmp	r2, r3
 8011374:	d3b8      	bcc.n	80112e8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8011376:	2301      	movs	r3, #1
 8011378:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801137a:	e7b5      	b.n	80112e8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801137c:	4b17      	ldr	r3, [pc, #92]	; (80113dc <xTaskIncrementTick+0x16c>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011382:	4915      	ldr	r1, [pc, #84]	; (80113d8 <xTaskIncrementTick+0x168>)
 8011384:	4613      	mov	r3, r2
 8011386:	009b      	lsls	r3, r3, #2
 8011388:	4413      	add	r3, r2
 801138a:	009b      	lsls	r3, r3, #2
 801138c:	440b      	add	r3, r1
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	2b01      	cmp	r3, #1
 8011392:	d907      	bls.n	80113a4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8011394:	2301      	movs	r3, #1
 8011396:	617b      	str	r3, [r7, #20]
 8011398:	e004      	b.n	80113a4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801139a:	4b11      	ldr	r3, [pc, #68]	; (80113e0 <xTaskIncrementTick+0x170>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	3301      	adds	r3, #1
 80113a0:	4a0f      	ldr	r2, [pc, #60]	; (80113e0 <xTaskIncrementTick+0x170>)
 80113a2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80113a4:	4b0f      	ldr	r3, [pc, #60]	; (80113e4 <xTaskIncrementTick+0x174>)
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d001      	beq.n	80113b0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80113ac:	2301      	movs	r3, #1
 80113ae:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80113b0:	697b      	ldr	r3, [r7, #20]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3718      	adds	r7, #24
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}
 80113ba:	bf00      	nop
 80113bc:	20018ce4 	.word	0x20018ce4
 80113c0:	20018cc0 	.word	0x20018cc0
 80113c4:	20018c74 	.word	0x20018c74
 80113c8:	20018c78 	.word	0x20018c78
 80113cc:	20018cd4 	.word	0x20018cd4
 80113d0:	20018cdc 	.word	0x20018cdc
 80113d4:	20018cc4 	.word	0x20018cc4
 80113d8:	200187ec 	.word	0x200187ec
 80113dc:	200187e8 	.word	0x200187e8
 80113e0:	20018ccc 	.word	0x20018ccc
 80113e4:	20018cd0 	.word	0x20018cd0

080113e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113ee:	4b2b      	ldr	r3, [pc, #172]	; (801149c <vTaskSwitchContext+0xb4>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d003      	beq.n	80113fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113f6:	4b2a      	ldr	r3, [pc, #168]	; (80114a0 <vTaskSwitchContext+0xb8>)
 80113f8:	2201      	movs	r2, #1
 80113fa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80113fc:	e048      	b.n	8011490 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 80113fe:	4b28      	ldr	r3, [pc, #160]	; (80114a0 <vTaskSwitchContext+0xb8>)
 8011400:	2200      	movs	r2, #0
 8011402:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011404:	4b27      	ldr	r3, [pc, #156]	; (80114a4 <vTaskSwitchContext+0xbc>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	60fb      	str	r3, [r7, #12]
 801140a:	e012      	b.n	8011432 <vTaskSwitchContext+0x4a>
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d10c      	bne.n	801142c <vTaskSwitchContext+0x44>
	__asm volatile
 8011412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011416:	b672      	cpsid	i
 8011418:	f383 8811 	msr	BASEPRI, r3
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	f3bf 8f4f 	dsb	sy
 8011424:	b662      	cpsie	i
 8011426:	607b      	str	r3, [r7, #4]
}
 8011428:	bf00      	nop
 801142a:	e7fe      	b.n	801142a <vTaskSwitchContext+0x42>
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	3b01      	subs	r3, #1
 8011430:	60fb      	str	r3, [r7, #12]
 8011432:	491d      	ldr	r1, [pc, #116]	; (80114a8 <vTaskSwitchContext+0xc0>)
 8011434:	68fa      	ldr	r2, [r7, #12]
 8011436:	4613      	mov	r3, r2
 8011438:	009b      	lsls	r3, r3, #2
 801143a:	4413      	add	r3, r2
 801143c:	009b      	lsls	r3, r3, #2
 801143e:	440b      	add	r3, r1
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d0e2      	beq.n	801140c <vTaskSwitchContext+0x24>
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	4613      	mov	r3, r2
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	4413      	add	r3, r2
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	4a15      	ldr	r2, [pc, #84]	; (80114a8 <vTaskSwitchContext+0xc0>)
 8011452:	4413      	add	r3, r2
 8011454:	60bb      	str	r3, [r7, #8]
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	68bb      	ldr	r3, [r7, #8]
 801145e:	605a      	str	r2, [r3, #4]
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	685a      	ldr	r2, [r3, #4]
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	3308      	adds	r3, #8
 8011468:	429a      	cmp	r2, r3
 801146a:	d104      	bne.n	8011476 <vTaskSwitchContext+0x8e>
 801146c:	68bb      	ldr	r3, [r7, #8]
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	685a      	ldr	r2, [r3, #4]
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	605a      	str	r2, [r3, #4]
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	4a0b      	ldr	r2, [pc, #44]	; (80114ac <vTaskSwitchContext+0xc4>)
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	4a08      	ldr	r2, [pc, #32]	; (80114a4 <vTaskSwitchContext+0xbc>)
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011486:	4b09      	ldr	r3, [pc, #36]	; (80114ac <vTaskSwitchContext+0xc4>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	3358      	adds	r3, #88	; 0x58
 801148c:	4a08      	ldr	r2, [pc, #32]	; (80114b0 <vTaskSwitchContext+0xc8>)
 801148e:	6013      	str	r3, [r2, #0]
}
 8011490:	bf00      	nop
 8011492:	3714      	adds	r7, #20
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr
 801149c:	20018ce4 	.word	0x20018ce4
 80114a0:	20018cd0 	.word	0x20018cd0
 80114a4:	20018cc4 	.word	0x20018cc4
 80114a8:	200187ec 	.word	0x200187ec
 80114ac:	200187e8 	.word	0x200187e8
 80114b0:	20000190 	.word	0x20000190

080114b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b084      	sub	sp, #16
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
 80114bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d10c      	bne.n	80114de <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80114c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114c8:	b672      	cpsid	i
 80114ca:	f383 8811 	msr	BASEPRI, r3
 80114ce:	f3bf 8f6f 	isb	sy
 80114d2:	f3bf 8f4f 	dsb	sy
 80114d6:	b662      	cpsie	i
 80114d8:	60fb      	str	r3, [r7, #12]
}
 80114da:	bf00      	nop
 80114dc:	e7fe      	b.n	80114dc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114de:	4b07      	ldr	r3, [pc, #28]	; (80114fc <vTaskPlaceOnEventList+0x48>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	3318      	adds	r3, #24
 80114e4:	4619      	mov	r1, r3
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7fd fe93 	bl	800f212 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114ec:	2101      	movs	r1, #1
 80114ee:	6838      	ldr	r0, [r7, #0]
 80114f0:	f000 fba0 	bl	8011c34 <prvAddCurrentTaskToDelayedList>
}
 80114f4:	bf00      	nop
 80114f6:	3710      	adds	r7, #16
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	200187e8 	.word	0x200187e8

08011500 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011500:	b580      	push	{r7, lr}
 8011502:	b086      	sub	sp, #24
 8011504:	af00      	add	r7, sp, #0
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d10c      	bne.n	801152c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8011512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011516:	b672      	cpsid	i
 8011518:	f383 8811 	msr	BASEPRI, r3
 801151c:	f3bf 8f6f 	isb	sy
 8011520:	f3bf 8f4f 	dsb	sy
 8011524:	b662      	cpsie	i
 8011526:	617b      	str	r3, [r7, #20]
}
 8011528:	bf00      	nop
 801152a:	e7fe      	b.n	801152a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801152c:	4b0a      	ldr	r3, [pc, #40]	; (8011558 <vTaskPlaceOnEventListRestricted+0x58>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	3318      	adds	r3, #24
 8011532:	4619      	mov	r1, r3
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f7fd fe48 	bl	800f1ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d002      	beq.n	8011546 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8011540:	f04f 33ff 	mov.w	r3, #4294967295
 8011544:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011546:	6879      	ldr	r1, [r7, #4]
 8011548:	68b8      	ldr	r0, [r7, #8]
 801154a:	f000 fb73 	bl	8011c34 <prvAddCurrentTaskToDelayedList>
	}
 801154e:	bf00      	nop
 8011550:	3718      	adds	r7, #24
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	200187e8 	.word	0x200187e8

0801155c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b086      	sub	sp, #24
 8011560:	af00      	add	r7, sp, #0
 8011562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	68db      	ldr	r3, [r3, #12]
 8011568:	68db      	ldr	r3, [r3, #12]
 801156a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d10c      	bne.n	801158c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8011572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011576:	b672      	cpsid	i
 8011578:	f383 8811 	msr	BASEPRI, r3
 801157c:	f3bf 8f6f 	isb	sy
 8011580:	f3bf 8f4f 	dsb	sy
 8011584:	b662      	cpsie	i
 8011586:	60fb      	str	r3, [r7, #12]
}
 8011588:	bf00      	nop
 801158a:	e7fe      	b.n	801158a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	3318      	adds	r3, #24
 8011590:	4618      	mov	r0, r3
 8011592:	f7fd fe77 	bl	800f284 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011596:	4b1e      	ldr	r3, [pc, #120]	; (8011610 <xTaskRemoveFromEventList+0xb4>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d11d      	bne.n	80115da <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	3304      	adds	r3, #4
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fd fe6e 	bl	800f284 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ac:	4b19      	ldr	r3, [pc, #100]	; (8011614 <xTaskRemoveFromEventList+0xb8>)
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d903      	bls.n	80115bc <xTaskRemoveFromEventList+0x60>
 80115b4:	693b      	ldr	r3, [r7, #16]
 80115b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b8:	4a16      	ldr	r2, [pc, #88]	; (8011614 <xTaskRemoveFromEventList+0xb8>)
 80115ba:	6013      	str	r3, [r2, #0]
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c0:	4613      	mov	r3, r2
 80115c2:	009b      	lsls	r3, r3, #2
 80115c4:	4413      	add	r3, r2
 80115c6:	009b      	lsls	r3, r3, #2
 80115c8:	4a13      	ldr	r2, [pc, #76]	; (8011618 <xTaskRemoveFromEventList+0xbc>)
 80115ca:	441a      	add	r2, r3
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	3304      	adds	r3, #4
 80115d0:	4619      	mov	r1, r3
 80115d2:	4610      	mov	r0, r2
 80115d4:	f7fd fdf9 	bl	800f1ca <vListInsertEnd>
 80115d8:	e005      	b.n	80115e6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	3318      	adds	r3, #24
 80115de:	4619      	mov	r1, r3
 80115e0:	480e      	ldr	r0, [pc, #56]	; (801161c <xTaskRemoveFromEventList+0xc0>)
 80115e2:	f7fd fdf2 	bl	800f1ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115ea:	4b0d      	ldr	r3, [pc, #52]	; (8011620 <xTaskRemoveFromEventList+0xc4>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d905      	bls.n	8011600 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80115f4:	2301      	movs	r3, #1
 80115f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80115f8:	4b0a      	ldr	r3, [pc, #40]	; (8011624 <xTaskRemoveFromEventList+0xc8>)
 80115fa:	2201      	movs	r2, #1
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	e001      	b.n	8011604 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8011600:	2300      	movs	r3, #0
 8011602:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011604:	697b      	ldr	r3, [r7, #20]
}
 8011606:	4618      	mov	r0, r3
 8011608:	3718      	adds	r7, #24
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	20018ce4 	.word	0x20018ce4
 8011614:	20018cc4 	.word	0x20018cc4
 8011618:	200187ec 	.word	0x200187ec
 801161c:	20018c7c 	.word	0x20018c7c
 8011620:	200187e8 	.word	0x200187e8
 8011624:	20018cd0 	.word	0x20018cd0

08011628 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
 801162e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011630:	4b06      	ldr	r3, [pc, #24]	; (801164c <vTaskInternalSetTimeOutState+0x24>)
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011638:	4b05      	ldr	r3, [pc, #20]	; (8011650 <vTaskInternalSetTimeOutState+0x28>)
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	605a      	str	r2, [r3, #4]
}
 8011640:	bf00      	nop
 8011642:	370c      	adds	r7, #12
 8011644:	46bd      	mov	sp, r7
 8011646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164a:	4770      	bx	lr
 801164c:	20018cd4 	.word	0x20018cd4
 8011650:	20018cc0 	.word	0x20018cc0

08011654 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b088      	sub	sp, #32
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d10c      	bne.n	801167e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8011664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011668:	b672      	cpsid	i
 801166a:	f383 8811 	msr	BASEPRI, r3
 801166e:	f3bf 8f6f 	isb	sy
 8011672:	f3bf 8f4f 	dsb	sy
 8011676:	b662      	cpsie	i
 8011678:	613b      	str	r3, [r7, #16]
}
 801167a:	bf00      	nop
 801167c:	e7fe      	b.n	801167c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	2b00      	cmp	r3, #0
 8011682:	d10c      	bne.n	801169e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8011684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011688:	b672      	cpsid	i
 801168a:	f383 8811 	msr	BASEPRI, r3
 801168e:	f3bf 8f6f 	isb	sy
 8011692:	f3bf 8f4f 	dsb	sy
 8011696:	b662      	cpsie	i
 8011698:	60fb      	str	r3, [r7, #12]
}
 801169a:	bf00      	nop
 801169c:	e7fe      	b.n	801169c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 801169e:	f7fd ff25 	bl	800f4ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80116a2:	4b1d      	ldr	r3, [pc, #116]	; (8011718 <xTaskCheckForTimeOut+0xc4>)
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	69ba      	ldr	r2, [r7, #24]
 80116ae:	1ad3      	subs	r3, r2, r3
 80116b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116ba:	d102      	bne.n	80116c2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80116bc:	2300      	movs	r3, #0
 80116be:	61fb      	str	r3, [r7, #28]
 80116c0:	e023      	b.n	801170a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	4b15      	ldr	r3, [pc, #84]	; (801171c <xTaskCheckForTimeOut+0xc8>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d007      	beq.n	80116de <xTaskCheckForTimeOut+0x8a>
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	685b      	ldr	r3, [r3, #4]
 80116d2:	69ba      	ldr	r2, [r7, #24]
 80116d4:	429a      	cmp	r2, r3
 80116d6:	d302      	bcc.n	80116de <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80116d8:	2301      	movs	r3, #1
 80116da:	61fb      	str	r3, [r7, #28]
 80116dc:	e015      	b.n	801170a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	697a      	ldr	r2, [r7, #20]
 80116e4:	429a      	cmp	r2, r3
 80116e6:	d20b      	bcs.n	8011700 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	681a      	ldr	r2, [r3, #0]
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	1ad2      	subs	r2, r2, r3
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7ff ff97 	bl	8011628 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80116fa:	2300      	movs	r3, #0
 80116fc:	61fb      	str	r3, [r7, #28]
 80116fe:	e004      	b.n	801170a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2200      	movs	r2, #0
 8011704:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011706:	2301      	movs	r3, #1
 8011708:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801170a:	f7fd ff23 	bl	800f554 <vPortExitCritical>

	return xReturn;
 801170e:	69fb      	ldr	r3, [r7, #28]
}
 8011710:	4618      	mov	r0, r3
 8011712:	3720      	adds	r7, #32
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	20018cc0 	.word	0x20018cc0
 801171c:	20018cd4 	.word	0x20018cd4

08011720 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011720:	b480      	push	{r7}
 8011722:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011724:	4b03      	ldr	r3, [pc, #12]	; (8011734 <vTaskMissedYield+0x14>)
 8011726:	2201      	movs	r2, #1
 8011728:	601a      	str	r2, [r3, #0]
}
 801172a:	bf00      	nop
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	20018cd0 	.word	0x20018cd0

08011738 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b082      	sub	sp, #8
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011740:	f000 f852 	bl	80117e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011744:	4b06      	ldr	r3, [pc, #24]	; (8011760 <prvIdleTask+0x28>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	2b01      	cmp	r3, #1
 801174a:	d9f9      	bls.n	8011740 <prvIdleTask+0x8>
			{
				taskYIELD();
 801174c:	4b05      	ldr	r3, [pc, #20]	; (8011764 <prvIdleTask+0x2c>)
 801174e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011752:	601a      	str	r2, [r3, #0]
 8011754:	f3bf 8f4f 	dsb	sy
 8011758:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801175c:	e7f0      	b.n	8011740 <prvIdleTask+0x8>
 801175e:	bf00      	nop
 8011760:	200187ec 	.word	0x200187ec
 8011764:	e000ed04 	.word	0xe000ed04

08011768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801176e:	2300      	movs	r3, #0
 8011770:	607b      	str	r3, [r7, #4]
 8011772:	e00c      	b.n	801178e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	4613      	mov	r3, r2
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	4413      	add	r3, r2
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	4a12      	ldr	r2, [pc, #72]	; (80117c8 <prvInitialiseTaskLists+0x60>)
 8011780:	4413      	add	r3, r2
 8011782:	4618      	mov	r0, r3
 8011784:	f7fd fcf4 	bl	800f170 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	3301      	adds	r3, #1
 801178c:	607b      	str	r3, [r7, #4]
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2b37      	cmp	r3, #55	; 0x37
 8011792:	d9ef      	bls.n	8011774 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011794:	480d      	ldr	r0, [pc, #52]	; (80117cc <prvInitialiseTaskLists+0x64>)
 8011796:	f7fd fceb 	bl	800f170 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801179a:	480d      	ldr	r0, [pc, #52]	; (80117d0 <prvInitialiseTaskLists+0x68>)
 801179c:	f7fd fce8 	bl	800f170 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80117a0:	480c      	ldr	r0, [pc, #48]	; (80117d4 <prvInitialiseTaskLists+0x6c>)
 80117a2:	f7fd fce5 	bl	800f170 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80117a6:	480c      	ldr	r0, [pc, #48]	; (80117d8 <prvInitialiseTaskLists+0x70>)
 80117a8:	f7fd fce2 	bl	800f170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80117ac:	480b      	ldr	r0, [pc, #44]	; (80117dc <prvInitialiseTaskLists+0x74>)
 80117ae:	f7fd fcdf 	bl	800f170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80117b2:	4b0b      	ldr	r3, [pc, #44]	; (80117e0 <prvInitialiseTaskLists+0x78>)
 80117b4:	4a05      	ldr	r2, [pc, #20]	; (80117cc <prvInitialiseTaskLists+0x64>)
 80117b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80117b8:	4b0a      	ldr	r3, [pc, #40]	; (80117e4 <prvInitialiseTaskLists+0x7c>)
 80117ba:	4a05      	ldr	r2, [pc, #20]	; (80117d0 <prvInitialiseTaskLists+0x68>)
 80117bc:	601a      	str	r2, [r3, #0]
}
 80117be:	bf00      	nop
 80117c0:	3708      	adds	r7, #8
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}
 80117c6:	bf00      	nop
 80117c8:	200187ec 	.word	0x200187ec
 80117cc:	20018c4c 	.word	0x20018c4c
 80117d0:	20018c60 	.word	0x20018c60
 80117d4:	20018c7c 	.word	0x20018c7c
 80117d8:	20018c90 	.word	0x20018c90
 80117dc:	20018ca8 	.word	0x20018ca8
 80117e0:	20018c74 	.word	0x20018c74
 80117e4:	20018c78 	.word	0x20018c78

080117e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b082      	sub	sp, #8
 80117ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117ee:	e019      	b.n	8011824 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80117f0:	f7fd fe7c 	bl	800f4ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117f4:	4b10      	ldr	r3, [pc, #64]	; (8011838 <prvCheckTasksWaitingTermination+0x50>)
 80117f6:	68db      	ldr	r3, [r3, #12]
 80117f8:	68db      	ldr	r3, [r3, #12]
 80117fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	3304      	adds	r3, #4
 8011800:	4618      	mov	r0, r3
 8011802:	f7fd fd3f 	bl	800f284 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011806:	4b0d      	ldr	r3, [pc, #52]	; (801183c <prvCheckTasksWaitingTermination+0x54>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	3b01      	subs	r3, #1
 801180c:	4a0b      	ldr	r2, [pc, #44]	; (801183c <prvCheckTasksWaitingTermination+0x54>)
 801180e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011810:	4b0b      	ldr	r3, [pc, #44]	; (8011840 <prvCheckTasksWaitingTermination+0x58>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	3b01      	subs	r3, #1
 8011816:	4a0a      	ldr	r2, [pc, #40]	; (8011840 <prvCheckTasksWaitingTermination+0x58>)
 8011818:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801181a:	f7fd fe9b 	bl	800f554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801181e:	6878      	ldr	r0, [r7, #4]
 8011820:	f000 f810 	bl	8011844 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011824:	4b06      	ldr	r3, [pc, #24]	; (8011840 <prvCheckTasksWaitingTermination+0x58>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d1e1      	bne.n	80117f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801182c:	bf00      	nop
 801182e:	bf00      	nop
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	20018c90 	.word	0x20018c90
 801183c:	20018cbc 	.word	0x20018cbc
 8011840:	20018ca4 	.word	0x20018ca4

08011844 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	3358      	adds	r3, #88	; 0x58
 8011850:	4618      	mov	r0, r3
 8011852:	f011 fb93 	bl	8022f7c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 801185c:	2b00      	cmp	r3, #0
 801185e:	d108      	bne.n	8011872 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011864:	4618      	mov	r0, r3
 8011866:	f7fd fb69 	bl	800ef3c <vPortFree>
				vPortFree( pxTCB );
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7fd fb66 	bl	800ef3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011870:	e01a      	b.n	80118a8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8011878:	2b01      	cmp	r3, #1
 801187a:	d103      	bne.n	8011884 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f7fd fb5d 	bl	800ef3c <vPortFree>
	}
 8011882:	e011      	b.n	80118a8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 801188a:	2b02      	cmp	r3, #2
 801188c:	d00c      	beq.n	80118a8 <prvDeleteTCB+0x64>
	__asm volatile
 801188e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011892:	b672      	cpsid	i
 8011894:	f383 8811 	msr	BASEPRI, r3
 8011898:	f3bf 8f6f 	isb	sy
 801189c:	f3bf 8f4f 	dsb	sy
 80118a0:	b662      	cpsie	i
 80118a2:	60fb      	str	r3, [r7, #12]
}
 80118a4:	bf00      	nop
 80118a6:	e7fe      	b.n	80118a6 <prvDeleteTCB+0x62>
	}
 80118a8:	bf00      	nop
 80118aa:	3710      	adds	r7, #16
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80118b6:	4b0c      	ldr	r3, [pc, #48]	; (80118e8 <prvResetNextTaskUnblockTime+0x38>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d104      	bne.n	80118ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80118c0:	4b0a      	ldr	r3, [pc, #40]	; (80118ec <prvResetNextTaskUnblockTime+0x3c>)
 80118c2:	f04f 32ff 	mov.w	r2, #4294967295
 80118c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80118c8:	e008      	b.n	80118dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118ca:	4b07      	ldr	r3, [pc, #28]	; (80118e8 <prvResetNextTaskUnblockTime+0x38>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	4a04      	ldr	r2, [pc, #16]	; (80118ec <prvResetNextTaskUnblockTime+0x3c>)
 80118da:	6013      	str	r3, [r2, #0]
}
 80118dc:	bf00      	nop
 80118de:	370c      	adds	r7, #12
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr
 80118e8:	20018c74 	.word	0x20018c74
 80118ec:	20018cdc 	.word	0x20018cdc

080118f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80118f0:	b480      	push	{r7}
 80118f2:	b083      	sub	sp, #12
 80118f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80118f6:	4b05      	ldr	r3, [pc, #20]	; (801190c <xTaskGetCurrentTaskHandle+0x1c>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80118fc:	687b      	ldr	r3, [r7, #4]
	}
 80118fe:	4618      	mov	r0, r3
 8011900:	370c      	adds	r7, #12
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr
 801190a:	bf00      	nop
 801190c:	200187e8 	.word	0x200187e8

08011910 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011910:	b480      	push	{r7}
 8011912:	b083      	sub	sp, #12
 8011914:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011916:	4b0b      	ldr	r3, [pc, #44]	; (8011944 <xTaskGetSchedulerState+0x34>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d102      	bne.n	8011924 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801191e:	2301      	movs	r3, #1
 8011920:	607b      	str	r3, [r7, #4]
 8011922:	e008      	b.n	8011936 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011924:	4b08      	ldr	r3, [pc, #32]	; (8011948 <xTaskGetSchedulerState+0x38>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d102      	bne.n	8011932 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801192c:	2302      	movs	r3, #2
 801192e:	607b      	str	r3, [r7, #4]
 8011930:	e001      	b.n	8011936 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011932:	2300      	movs	r3, #0
 8011934:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011936:	687b      	ldr	r3, [r7, #4]
	}
 8011938:	4618      	mov	r0, r3
 801193a:	370c      	adds	r7, #12
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr
 8011944:	20018cc8 	.word	0x20018cc8
 8011948:	20018ce4 	.word	0x20018ce4

0801194c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801194c:	b580      	push	{r7, lr}
 801194e:	b084      	sub	sp, #16
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011958:	2300      	movs	r3, #0
 801195a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d051      	beq.n	8011a06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011966:	4b2a      	ldr	r3, [pc, #168]	; (8011a10 <xTaskPriorityInherit+0xc4>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801196c:	429a      	cmp	r2, r3
 801196e:	d241      	bcs.n	80119f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	699b      	ldr	r3, [r3, #24]
 8011974:	2b00      	cmp	r3, #0
 8011976:	db06      	blt.n	8011986 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011978:	4b25      	ldr	r3, [pc, #148]	; (8011a10 <xTaskPriorityInherit+0xc4>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801197e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	6959      	ldr	r1, [r3, #20]
 801198a:	68bb      	ldr	r3, [r7, #8]
 801198c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801198e:	4613      	mov	r3, r2
 8011990:	009b      	lsls	r3, r3, #2
 8011992:	4413      	add	r3, r2
 8011994:	009b      	lsls	r3, r3, #2
 8011996:	4a1f      	ldr	r2, [pc, #124]	; (8011a14 <xTaskPriorityInherit+0xc8>)
 8011998:	4413      	add	r3, r2
 801199a:	4299      	cmp	r1, r3
 801199c:	d122      	bne.n	80119e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801199e:	68bb      	ldr	r3, [r7, #8]
 80119a0:	3304      	adds	r3, #4
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7fd fc6e 	bl	800f284 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119a8:	4b19      	ldr	r3, [pc, #100]	; (8011a10 <xTaskPriorityInherit+0xc4>)
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b6:	4b18      	ldr	r3, [pc, #96]	; (8011a18 <xTaskPriorityInherit+0xcc>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d903      	bls.n	80119c6 <xTaskPriorityInherit+0x7a>
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c2:	4a15      	ldr	r2, [pc, #84]	; (8011a18 <xTaskPriorityInherit+0xcc>)
 80119c4:	6013      	str	r3, [r2, #0]
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ca:	4613      	mov	r3, r2
 80119cc:	009b      	lsls	r3, r3, #2
 80119ce:	4413      	add	r3, r2
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	4a10      	ldr	r2, [pc, #64]	; (8011a14 <xTaskPriorityInherit+0xc8>)
 80119d4:	441a      	add	r2, r3
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	3304      	adds	r3, #4
 80119da:	4619      	mov	r1, r3
 80119dc:	4610      	mov	r0, r2
 80119de:	f7fd fbf4 	bl	800f1ca <vListInsertEnd>
 80119e2:	e004      	b.n	80119ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119e4:	4b0a      	ldr	r3, [pc, #40]	; (8011a10 <xTaskPriorityInherit+0xc4>)
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80119ee:	2301      	movs	r3, #1
 80119f0:	60fb      	str	r3, [r7, #12]
 80119f2:	e008      	b.n	8011a06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119f8:	4b05      	ldr	r3, [pc, #20]	; (8011a10 <xTaskPriorityInherit+0xc4>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d201      	bcs.n	8011a06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011a02:	2301      	movs	r3, #1
 8011a04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a06:	68fb      	ldr	r3, [r7, #12]
	}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3710      	adds	r7, #16
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	200187e8 	.word	0x200187e8
 8011a14:	200187ec 	.word	0x200187ec
 8011a18:	20018cc4 	.word	0x20018cc4

08011a1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b086      	sub	sp, #24
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011a28:	2300      	movs	r3, #0
 8011a2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d05a      	beq.n	8011ae8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a32:	4b30      	ldr	r3, [pc, #192]	; (8011af4 <xTaskPriorityDisinherit+0xd8>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	693a      	ldr	r2, [r7, #16]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d00c      	beq.n	8011a56 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a40:	b672      	cpsid	i
 8011a42:	f383 8811 	msr	BASEPRI, r3
 8011a46:	f3bf 8f6f 	isb	sy
 8011a4a:	f3bf 8f4f 	dsb	sy
 8011a4e:	b662      	cpsie	i
 8011a50:	60fb      	str	r3, [r7, #12]
}
 8011a52:	bf00      	nop
 8011a54:	e7fe      	b.n	8011a54 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d10c      	bne.n	8011a78 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8011a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a62:	b672      	cpsid	i
 8011a64:	f383 8811 	msr	BASEPRI, r3
 8011a68:	f3bf 8f6f 	isb	sy
 8011a6c:	f3bf 8f4f 	dsb	sy
 8011a70:	b662      	cpsie	i
 8011a72:	60bb      	str	r3, [r7, #8]
}
 8011a74:	bf00      	nop
 8011a76:	e7fe      	b.n	8011a76 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8011a78:	693b      	ldr	r3, [r7, #16]
 8011a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a7c:	1e5a      	subs	r2, r3, #1
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a82:	693b      	ldr	r3, [r7, #16]
 8011a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d02c      	beq.n	8011ae8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d128      	bne.n	8011ae8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a96:	693b      	ldr	r3, [r7, #16]
 8011a98:	3304      	adds	r3, #4
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	f7fd fbf2 	bl	800f284 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011ab4:	693b      	ldr	r3, [r7, #16]
 8011ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab8:	4b0f      	ldr	r3, [pc, #60]	; (8011af8 <xTaskPriorityDisinherit+0xdc>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d903      	bls.n	8011ac8 <xTaskPriorityDisinherit+0xac>
 8011ac0:	693b      	ldr	r3, [r7, #16]
 8011ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac4:	4a0c      	ldr	r2, [pc, #48]	; (8011af8 <xTaskPriorityDisinherit+0xdc>)
 8011ac6:	6013      	str	r3, [r2, #0]
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011acc:	4613      	mov	r3, r2
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4413      	add	r3, r2
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	4a09      	ldr	r2, [pc, #36]	; (8011afc <xTaskPriorityDisinherit+0xe0>)
 8011ad6:	441a      	add	r2, r3
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	3304      	adds	r3, #4
 8011adc:	4619      	mov	r1, r3
 8011ade:	4610      	mov	r0, r2
 8011ae0:	f7fd fb73 	bl	800f1ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ae8:	697b      	ldr	r3, [r7, #20]
	}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3718      	adds	r7, #24
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}
 8011af2:	bf00      	nop
 8011af4:	200187e8 	.word	0x200187e8
 8011af8:	20018cc4 	.word	0x20018cc4
 8011afc:	200187ec 	.word	0x200187ec

08011b00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b088      	sub	sp, #32
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011b0e:	2301      	movs	r3, #1
 8011b10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d06e      	beq.n	8011bf6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d10c      	bne.n	8011b3a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8011b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b24:	b672      	cpsid	i
 8011b26:	f383 8811 	msr	BASEPRI, r3
 8011b2a:	f3bf 8f6f 	isb	sy
 8011b2e:	f3bf 8f4f 	dsb	sy
 8011b32:	b662      	cpsie	i
 8011b34:	60fb      	str	r3, [r7, #12]
}
 8011b36:	bf00      	nop
 8011b38:	e7fe      	b.n	8011b38 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011b3a:	69bb      	ldr	r3, [r7, #24]
 8011b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b3e:	683a      	ldr	r2, [r7, #0]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	d902      	bls.n	8011b4a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	61fb      	str	r3, [r7, #28]
 8011b48:	e002      	b.n	8011b50 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b4e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b54:	69fa      	ldr	r2, [r7, #28]
 8011b56:	429a      	cmp	r2, r3
 8011b58:	d04d      	beq.n	8011bf6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b5e:	697a      	ldr	r2, [r7, #20]
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d148      	bne.n	8011bf6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b64:	4b26      	ldr	r3, [pc, #152]	; (8011c00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	69ba      	ldr	r2, [r7, #24]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d10c      	bne.n	8011b88 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8011b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b72:	b672      	cpsid	i
 8011b74:	f383 8811 	msr	BASEPRI, r3
 8011b78:	f3bf 8f6f 	isb	sy
 8011b7c:	f3bf 8f4f 	dsb	sy
 8011b80:	b662      	cpsie	i
 8011b82:	60bb      	str	r3, [r7, #8]
}
 8011b84:	bf00      	nop
 8011b86:	e7fe      	b.n	8011b86 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b8c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	69fa      	ldr	r2, [r7, #28]
 8011b92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b94:	69bb      	ldr	r3, [r7, #24]
 8011b96:	699b      	ldr	r3, [r3, #24]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	db04      	blt.n	8011ba6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b9c:	69fb      	ldr	r3, [r7, #28]
 8011b9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	6959      	ldr	r1, [r3, #20]
 8011baa:	693a      	ldr	r2, [r7, #16]
 8011bac:	4613      	mov	r3, r2
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	4413      	add	r3, r2
 8011bb2:	009b      	lsls	r3, r3, #2
 8011bb4:	4a13      	ldr	r2, [pc, #76]	; (8011c04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011bb6:	4413      	add	r3, r2
 8011bb8:	4299      	cmp	r1, r3
 8011bba:	d11c      	bne.n	8011bf6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	3304      	adds	r3, #4
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7fd fb5f 	bl	800f284 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bca:	4b0f      	ldr	r3, [pc, #60]	; (8011c08 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d903      	bls.n	8011bda <vTaskPriorityDisinheritAfterTimeout+0xda>
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd6:	4a0c      	ldr	r2, [pc, #48]	; (8011c08 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8011bd8:	6013      	str	r3, [r2, #0]
 8011bda:	69bb      	ldr	r3, [r7, #24]
 8011bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011bde:	4613      	mov	r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	4413      	add	r3, r2
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	4a07      	ldr	r2, [pc, #28]	; (8011c04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011be8:	441a      	add	r2, r3
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	3304      	adds	r3, #4
 8011bee:	4619      	mov	r1, r3
 8011bf0:	4610      	mov	r0, r2
 8011bf2:	f7fd faea 	bl	800f1ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011bf6:	bf00      	nop
 8011bf8:	3720      	adds	r7, #32
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}
 8011bfe:	bf00      	nop
 8011c00:	200187e8 	.word	0x200187e8
 8011c04:	200187ec 	.word	0x200187ec
 8011c08:	20018cc4 	.word	0x20018cc4

08011c0c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011c0c:	b480      	push	{r7}
 8011c0e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011c10:	4b07      	ldr	r3, [pc, #28]	; (8011c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d004      	beq.n	8011c22 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011c18:	4b05      	ldr	r3, [pc, #20]	; (8011c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c1e:	3201      	adds	r2, #1
 8011c20:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8011c22:	4b03      	ldr	r3, [pc, #12]	; (8011c30 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c24:	681b      	ldr	r3, [r3, #0]
	}
 8011c26:	4618      	mov	r0, r3
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr
 8011c30:	200187e8 	.word	0x200187e8

08011c34 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b084      	sub	sp, #16
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
 8011c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c3e:	4b21      	ldr	r3, [pc, #132]	; (8011cc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c44:	4b20      	ldr	r3, [pc, #128]	; (8011cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	3304      	adds	r3, #4
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	f7fd fb1a 	bl	800f284 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c56:	d10a      	bne.n	8011c6e <prvAddCurrentTaskToDelayedList+0x3a>
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d007      	beq.n	8011c6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c5e:	4b1a      	ldr	r3, [pc, #104]	; (8011cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	3304      	adds	r3, #4
 8011c64:	4619      	mov	r1, r3
 8011c66:	4819      	ldr	r0, [pc, #100]	; (8011ccc <prvAddCurrentTaskToDelayedList+0x98>)
 8011c68:	f7fd faaf 	bl	800f1ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c6c:	e026      	b.n	8011cbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c6e:	68fa      	ldr	r2, [r7, #12]
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	4413      	add	r3, r2
 8011c74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c76:	4b14      	ldr	r3, [pc, #80]	; (8011cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	68ba      	ldr	r2, [r7, #8]
 8011c7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c7e:	68ba      	ldr	r2, [r7, #8]
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d209      	bcs.n	8011c9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c86:	4b12      	ldr	r3, [pc, #72]	; (8011cd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011c88:	681a      	ldr	r2, [r3, #0]
 8011c8a:	4b0f      	ldr	r3, [pc, #60]	; (8011cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	3304      	adds	r3, #4
 8011c90:	4619      	mov	r1, r3
 8011c92:	4610      	mov	r0, r2
 8011c94:	f7fd fabd 	bl	800f212 <vListInsert>
}
 8011c98:	e010      	b.n	8011cbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c9a:	4b0e      	ldr	r3, [pc, #56]	; (8011cd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011c9c:	681a      	ldr	r2, [r3, #0]
 8011c9e:	4b0a      	ldr	r3, [pc, #40]	; (8011cc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	3304      	adds	r3, #4
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	4610      	mov	r0, r2
 8011ca8:	f7fd fab3 	bl	800f212 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011cac:	4b0a      	ldr	r3, [pc, #40]	; (8011cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	68ba      	ldr	r2, [r7, #8]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d202      	bcs.n	8011cbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011cb6:	4a08      	ldr	r2, [pc, #32]	; (8011cd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	6013      	str	r3, [r2, #0]
}
 8011cbc:	bf00      	nop
 8011cbe:	3710      	adds	r7, #16
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}
 8011cc4:	20018cc0 	.word	0x20018cc0
 8011cc8:	200187e8 	.word	0x200187e8
 8011ccc:	20018ca8 	.word	0x20018ca8
 8011cd0:	20018c78 	.word	0x20018c78
 8011cd4:	20018c74 	.word	0x20018c74
 8011cd8:	20018cdc 	.word	0x20018cdc

08011cdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b08a      	sub	sp, #40	; 0x28
 8011ce0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011ce2:	2300      	movs	r3, #0
 8011ce4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011ce6:	f000 fbb5 	bl	8012454 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011cea:	4b1d      	ldr	r3, [pc, #116]	; (8011d60 <xTimerCreateTimerTask+0x84>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d021      	beq.n	8011d36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011cfa:	1d3a      	adds	r2, r7, #4
 8011cfc:	f107 0108 	add.w	r1, r7, #8
 8011d00:	f107 030c 	add.w	r3, r7, #12
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7fd f835 	bl	800ed74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011d0a:	6879      	ldr	r1, [r7, #4]
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	68fa      	ldr	r2, [r7, #12]
 8011d10:	9202      	str	r2, [sp, #8]
 8011d12:	9301      	str	r3, [sp, #4]
 8011d14:	2302      	movs	r3, #2
 8011d16:	9300      	str	r3, [sp, #0]
 8011d18:	2300      	movs	r3, #0
 8011d1a:	460a      	mov	r2, r1
 8011d1c:	4911      	ldr	r1, [pc, #68]	; (8011d64 <xTimerCreateTimerTask+0x88>)
 8011d1e:	4812      	ldr	r0, [pc, #72]	; (8011d68 <xTimerCreateTimerTask+0x8c>)
 8011d20:	f7fe fe60 	bl	80109e4 <xTaskCreateStatic>
 8011d24:	4603      	mov	r3, r0
 8011d26:	4a11      	ldr	r2, [pc, #68]	; (8011d6c <xTimerCreateTimerTask+0x90>)
 8011d28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011d2a:	4b10      	ldr	r3, [pc, #64]	; (8011d6c <xTimerCreateTimerTask+0x90>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d001      	beq.n	8011d36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011d32:	2301      	movs	r3, #1
 8011d34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d10c      	bne.n	8011d56 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8011d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d40:	b672      	cpsid	i
 8011d42:	f383 8811 	msr	BASEPRI, r3
 8011d46:	f3bf 8f6f 	isb	sy
 8011d4a:	f3bf 8f4f 	dsb	sy
 8011d4e:	b662      	cpsie	i
 8011d50:	613b      	str	r3, [r7, #16]
}
 8011d52:	bf00      	nop
 8011d54:	e7fe      	b.n	8011d54 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8011d56:	697b      	ldr	r3, [r7, #20]
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	3718      	adds	r7, #24
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	bd80      	pop	{r7, pc}
 8011d60:	20018d18 	.word	0x20018d18
 8011d64:	08024634 	.word	0x08024634
 8011d68:	08011fed 	.word	0x08011fed
 8011d6c:	20018d1c 	.word	0x20018d1c

08011d70 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	b088      	sub	sp, #32
 8011d74:	af02      	add	r7, sp, #8
 8011d76:	60f8      	str	r0, [r7, #12]
 8011d78:	60b9      	str	r1, [r7, #8]
 8011d7a:	607a      	str	r2, [r7, #4]
 8011d7c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011d7e:	202c      	movs	r0, #44	; 0x2c
 8011d80:	f7fd f812 	bl	800eda8 <pvPortMalloc>
 8011d84:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00d      	beq.n	8011da8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011d8c:	697b      	ldr	r3, [r7, #20]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	9301      	str	r3, [sp, #4]
 8011d98:	6a3b      	ldr	r3, [r7, #32]
 8011d9a:	9300      	str	r3, [sp, #0]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	68b9      	ldr	r1, [r7, #8]
 8011da2:	68f8      	ldr	r0, [r7, #12]
 8011da4:	f000 f847 	bl	8011e36 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011da8:	697b      	ldr	r3, [r7, #20]
	}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3718      	adds	r7, #24
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}

08011db2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8011db2:	b580      	push	{r7, lr}
 8011db4:	b08a      	sub	sp, #40	; 0x28
 8011db6:	af02      	add	r7, sp, #8
 8011db8:	60f8      	str	r0, [r7, #12]
 8011dba:	60b9      	str	r1, [r7, #8]
 8011dbc:	607a      	str	r2, [r7, #4]
 8011dbe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8011dc0:	232c      	movs	r3, #44	; 0x2c
 8011dc2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8011dc4:	693b      	ldr	r3, [r7, #16]
 8011dc6:	2b2c      	cmp	r3, #44	; 0x2c
 8011dc8:	d00c      	beq.n	8011de4 <xTimerCreateStatic+0x32>
	__asm volatile
 8011dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dce:	b672      	cpsid	i
 8011dd0:	f383 8811 	msr	BASEPRI, r3
 8011dd4:	f3bf 8f6f 	isb	sy
 8011dd8:	f3bf 8f4f 	dsb	sy
 8011ddc:	b662      	cpsie	i
 8011dde:	61bb      	str	r3, [r7, #24]
}
 8011de0:	bf00      	nop
 8011de2:	e7fe      	b.n	8011de2 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011de4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8011de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d10c      	bne.n	8011e06 <xTimerCreateStatic+0x54>
	__asm volatile
 8011dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df0:	b672      	cpsid	i
 8011df2:	f383 8811 	msr	BASEPRI, r3
 8011df6:	f3bf 8f6f 	isb	sy
 8011dfa:	f3bf 8f4f 	dsb	sy
 8011dfe:	b662      	cpsie	i
 8011e00:	617b      	str	r3, [r7, #20]
}
 8011e02:	bf00      	nop
 8011e04:	e7fe      	b.n	8011e04 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8011e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e08:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d00d      	beq.n	8011e2c <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8011e10:	69fb      	ldr	r3, [r7, #28]
 8011e12:	2202      	movs	r2, #2
 8011e14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	9301      	str	r3, [sp, #4]
 8011e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	68b9      	ldr	r1, [r7, #8]
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f000 f805 	bl	8011e36 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8011e2c:	69fb      	ldr	r3, [r7, #28]
	}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3720      	adds	r7, #32
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b086      	sub	sp, #24
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	60f8      	str	r0, [r7, #12]
 8011e3e:	60b9      	str	r1, [r7, #8]
 8011e40:	607a      	str	r2, [r7, #4]
 8011e42:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10c      	bne.n	8011e64 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8011e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e4e:	b672      	cpsid	i
 8011e50:	f383 8811 	msr	BASEPRI, r3
 8011e54:	f3bf 8f6f 	isb	sy
 8011e58:	f3bf 8f4f 	dsb	sy
 8011e5c:	b662      	cpsie	i
 8011e5e:	617b      	str	r3, [r7, #20]
}
 8011e60:	bf00      	nop
 8011e62:	e7fe      	b.n	8011e62 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 8011e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d01e      	beq.n	8011ea8 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8011e6a:	f000 faf3 	bl	8012454 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8011e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e70:	68fa      	ldr	r2, [r7, #12]
 8011e72:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8011e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8011e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e7c:	683a      	ldr	r2, [r7, #0]
 8011e7e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	6a3a      	ldr	r2, [r7, #32]
 8011e84:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8011e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e88:	3304      	adds	r3, #4
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	f7fd f990 	bl	800f1b0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d008      	beq.n	8011ea8 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8011e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e9c:	f043 0304 	orr.w	r3, r3, #4
 8011ea0:	b2da      	uxtb	r2, r3
 8011ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8011ea8:	bf00      	nop
 8011eaa:	3718      	adds	r7, #24
 8011eac:	46bd      	mov	sp, r7
 8011eae:	bd80      	pop	{r7, pc}

08011eb0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b08a      	sub	sp, #40	; 0x28
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	60f8      	str	r0, [r7, #12]
 8011eb8:	60b9      	str	r1, [r7, #8]
 8011eba:	607a      	str	r2, [r7, #4]
 8011ebc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d10c      	bne.n	8011ee2 <xTimerGenericCommand+0x32>
	__asm volatile
 8011ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ecc:	b672      	cpsid	i
 8011ece:	f383 8811 	msr	BASEPRI, r3
 8011ed2:	f3bf 8f6f 	isb	sy
 8011ed6:	f3bf 8f4f 	dsb	sy
 8011eda:	b662      	cpsie	i
 8011edc:	623b      	str	r3, [r7, #32]
}
 8011ede:	bf00      	nop
 8011ee0:	e7fe      	b.n	8011ee0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011ee2:	4b1a      	ldr	r3, [pc, #104]	; (8011f4c <xTimerGenericCommand+0x9c>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d02a      	beq.n	8011f40 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	2b05      	cmp	r3, #5
 8011efa:	dc18      	bgt.n	8011f2e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011efc:	f7ff fd08 	bl	8011910 <xTaskGetSchedulerState>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b02      	cmp	r3, #2
 8011f04:	d109      	bne.n	8011f1a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011f06:	4b11      	ldr	r3, [pc, #68]	; (8011f4c <xTimerGenericCommand+0x9c>)
 8011f08:	6818      	ldr	r0, [r3, #0]
 8011f0a:	f107 0110 	add.w	r1, r7, #16
 8011f0e:	2300      	movs	r3, #0
 8011f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f12:	f7fd fe95 	bl	800fc40 <xQueueGenericSend>
 8011f16:	6278      	str	r0, [r7, #36]	; 0x24
 8011f18:	e012      	b.n	8011f40 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011f1a:	4b0c      	ldr	r3, [pc, #48]	; (8011f4c <xTimerGenericCommand+0x9c>)
 8011f1c:	6818      	ldr	r0, [r3, #0]
 8011f1e:	f107 0110 	add.w	r1, r7, #16
 8011f22:	2300      	movs	r3, #0
 8011f24:	2200      	movs	r2, #0
 8011f26:	f7fd fe8b 	bl	800fc40 <xQueueGenericSend>
 8011f2a:	6278      	str	r0, [r7, #36]	; 0x24
 8011f2c:	e008      	b.n	8011f40 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011f2e:	4b07      	ldr	r3, [pc, #28]	; (8011f4c <xTimerGenericCommand+0x9c>)
 8011f30:	6818      	ldr	r0, [r3, #0]
 8011f32:	f107 0110 	add.w	r1, r7, #16
 8011f36:	2300      	movs	r3, #0
 8011f38:	683a      	ldr	r2, [r7, #0]
 8011f3a:	f7fd ff87 	bl	800fe4c <xQueueGenericSendFromISR>
 8011f3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011f42:	4618      	mov	r0, r3
 8011f44:	3728      	adds	r7, #40	; 0x28
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bd80      	pop	{r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	20018d18 	.word	0x20018d18

08011f50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b088      	sub	sp, #32
 8011f54:	af02      	add	r7, sp, #8
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f5a:	4b23      	ldr	r3, [pc, #140]	; (8011fe8 <prvProcessExpiredTimer+0x98>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	68db      	ldr	r3, [r3, #12]
 8011f62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f64:	697b      	ldr	r3, [r7, #20]
 8011f66:	3304      	adds	r3, #4
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f7fd f98b 	bl	800f284 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011f74:	f003 0304 	and.w	r3, r3, #4
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d024      	beq.n	8011fc6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011f7c:	697b      	ldr	r3, [r7, #20]
 8011f7e:	699a      	ldr	r2, [r3, #24]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	18d1      	adds	r1, r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	683a      	ldr	r2, [r7, #0]
 8011f88:	6978      	ldr	r0, [r7, #20]
 8011f8a:	f000 f8d3 	bl	8012134 <prvInsertTimerInActiveList>
 8011f8e:	4603      	mov	r3, r0
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d021      	beq.n	8011fd8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011f94:	2300      	movs	r3, #0
 8011f96:	9300      	str	r3, [sp, #0]
 8011f98:	2300      	movs	r3, #0
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	2100      	movs	r1, #0
 8011f9e:	6978      	ldr	r0, [r7, #20]
 8011fa0:	f7ff ff86 	bl	8011eb0 <xTimerGenericCommand>
 8011fa4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d115      	bne.n	8011fd8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8011fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fb0:	b672      	cpsid	i
 8011fb2:	f383 8811 	msr	BASEPRI, r3
 8011fb6:	f3bf 8f6f 	isb	sy
 8011fba:	f3bf 8f4f 	dsb	sy
 8011fbe:	b662      	cpsie	i
 8011fc0:	60fb      	str	r3, [r7, #12]
}
 8011fc2:	bf00      	nop
 8011fc4:	e7fe      	b.n	8011fc4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fcc:	f023 0301 	bic.w	r3, r3, #1
 8011fd0:	b2da      	uxtb	r2, r3
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	6a1b      	ldr	r3, [r3, #32]
 8011fdc:	6978      	ldr	r0, [r7, #20]
 8011fde:	4798      	blx	r3
}
 8011fe0:	bf00      	nop
 8011fe2:	3718      	adds	r7, #24
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	20018d10 	.word	0x20018d10

08011fec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011ff4:	f107 0308 	add.w	r3, r7, #8
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f000 f857 	bl	80120ac <prvGetNextExpireTime>
 8011ffe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	4619      	mov	r1, r3
 8012004:	68f8      	ldr	r0, [r7, #12]
 8012006:	f000 f803 	bl	8012010 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801200a:	f000 f8d5 	bl	80121b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801200e:	e7f1      	b.n	8011ff4 <prvTimerTask+0x8>

08012010 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801201a:	f7ff f859 	bl	80110d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801201e:	f107 0308 	add.w	r3, r7, #8
 8012022:	4618      	mov	r0, r3
 8012024:	f000 f866 	bl	80120f4 <prvSampleTimeNow>
 8012028:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d130      	bne.n	8012092 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d10a      	bne.n	801204c <prvProcessTimerOrBlockTask+0x3c>
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	429a      	cmp	r2, r3
 801203c:	d806      	bhi.n	801204c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801203e:	f7ff f855 	bl	80110ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012042:	68f9      	ldr	r1, [r7, #12]
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7ff ff83 	bl	8011f50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801204a:	e024      	b.n	8012096 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d008      	beq.n	8012064 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012052:	4b13      	ldr	r3, [pc, #76]	; (80120a0 <prvProcessTimerOrBlockTask+0x90>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d101      	bne.n	8012060 <prvProcessTimerOrBlockTask+0x50>
 801205c:	2301      	movs	r3, #1
 801205e:	e000      	b.n	8012062 <prvProcessTimerOrBlockTask+0x52>
 8012060:	2300      	movs	r3, #0
 8012062:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012064:	4b0f      	ldr	r3, [pc, #60]	; (80120a4 <prvProcessTimerOrBlockTask+0x94>)
 8012066:	6818      	ldr	r0, [r3, #0]
 8012068:	687a      	ldr	r2, [r7, #4]
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	1ad3      	subs	r3, r2, r3
 801206e:	683a      	ldr	r2, [r7, #0]
 8012070:	4619      	mov	r1, r3
 8012072:	f7fe fc83 	bl	801097c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012076:	f7ff f839 	bl	80110ec <xTaskResumeAll>
 801207a:	4603      	mov	r3, r0
 801207c:	2b00      	cmp	r3, #0
 801207e:	d10a      	bne.n	8012096 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012080:	4b09      	ldr	r3, [pc, #36]	; (80120a8 <prvProcessTimerOrBlockTask+0x98>)
 8012082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012086:	601a      	str	r2, [r3, #0]
 8012088:	f3bf 8f4f 	dsb	sy
 801208c:	f3bf 8f6f 	isb	sy
}
 8012090:	e001      	b.n	8012096 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012092:	f7ff f82b 	bl	80110ec <xTaskResumeAll>
}
 8012096:	bf00      	nop
 8012098:	3710      	adds	r7, #16
 801209a:	46bd      	mov	sp, r7
 801209c:	bd80      	pop	{r7, pc}
 801209e:	bf00      	nop
 80120a0:	20018d14 	.word	0x20018d14
 80120a4:	20018d18 	.word	0x20018d18
 80120a8:	e000ed04 	.word	0xe000ed04

080120ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80120ac:	b480      	push	{r7}
 80120ae:	b085      	sub	sp, #20
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80120b4:	4b0e      	ldr	r3, [pc, #56]	; (80120f0 <prvGetNextExpireTime+0x44>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d101      	bne.n	80120c2 <prvGetNextExpireTime+0x16>
 80120be:	2201      	movs	r2, #1
 80120c0:	e000      	b.n	80120c4 <prvGetNextExpireTime+0x18>
 80120c2:	2200      	movs	r2, #0
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d105      	bne.n	80120dc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80120d0:	4b07      	ldr	r3, [pc, #28]	; (80120f0 <prvGetNextExpireTime+0x44>)
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	68db      	ldr	r3, [r3, #12]
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	60fb      	str	r3, [r7, #12]
 80120da:	e001      	b.n	80120e0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80120dc:	2300      	movs	r3, #0
 80120de:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80120e0:	68fb      	ldr	r3, [r7, #12]
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3714      	adds	r7, #20
 80120e6:	46bd      	mov	sp, r7
 80120e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ec:	4770      	bx	lr
 80120ee:	bf00      	nop
 80120f0:	20018d10 	.word	0x20018d10

080120f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b084      	sub	sp, #16
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80120fc:	f7ff f896 	bl	801122c <xTaskGetTickCount>
 8012100:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012102:	4b0b      	ldr	r3, [pc, #44]	; (8012130 <prvSampleTimeNow+0x3c>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	68fa      	ldr	r2, [r7, #12]
 8012108:	429a      	cmp	r2, r3
 801210a:	d205      	bcs.n	8012118 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801210c:	f000 f93c 	bl	8012388 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2201      	movs	r2, #1
 8012114:	601a      	str	r2, [r3, #0]
 8012116:	e002      	b.n	801211e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801211e:	4a04      	ldr	r2, [pc, #16]	; (8012130 <prvSampleTimeNow+0x3c>)
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012124:	68fb      	ldr	r3, [r7, #12]
}
 8012126:	4618      	mov	r0, r3
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}
 801212e:	bf00      	nop
 8012130:	20018d20 	.word	0x20018d20

08012134 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b086      	sub	sp, #24
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
 8012140:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012142:	2300      	movs	r3, #0
 8012144:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	68fa      	ldr	r2, [r7, #12]
 8012150:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012152:	68ba      	ldr	r2, [r7, #8]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	429a      	cmp	r2, r3
 8012158:	d812      	bhi.n	8012180 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801215a:	687a      	ldr	r2, [r7, #4]
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	1ad2      	subs	r2, r2, r3
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	699b      	ldr	r3, [r3, #24]
 8012164:	429a      	cmp	r2, r3
 8012166:	d302      	bcc.n	801216e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012168:	2301      	movs	r3, #1
 801216a:	617b      	str	r3, [r7, #20]
 801216c:	e01b      	b.n	80121a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801216e:	4b10      	ldr	r3, [pc, #64]	; (80121b0 <prvInsertTimerInActiveList+0x7c>)
 8012170:	681a      	ldr	r2, [r3, #0]
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	3304      	adds	r3, #4
 8012176:	4619      	mov	r1, r3
 8012178:	4610      	mov	r0, r2
 801217a:	f7fd f84a 	bl	800f212 <vListInsert>
 801217e:	e012      	b.n	80121a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	429a      	cmp	r2, r3
 8012186:	d206      	bcs.n	8012196 <prvInsertTimerInActiveList+0x62>
 8012188:	68ba      	ldr	r2, [r7, #8]
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	429a      	cmp	r2, r3
 801218e:	d302      	bcc.n	8012196 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012190:	2301      	movs	r3, #1
 8012192:	617b      	str	r3, [r7, #20]
 8012194:	e007      	b.n	80121a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012196:	4b07      	ldr	r3, [pc, #28]	; (80121b4 <prvInsertTimerInActiveList+0x80>)
 8012198:	681a      	ldr	r2, [r3, #0]
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	3304      	adds	r3, #4
 801219e:	4619      	mov	r1, r3
 80121a0:	4610      	mov	r0, r2
 80121a2:	f7fd f836 	bl	800f212 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80121a6:	697b      	ldr	r3, [r7, #20]
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3718      	adds	r7, #24
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	20018d14 	.word	0x20018d14
 80121b4:	20018d10 	.word	0x20018d10

080121b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80121b8:	b580      	push	{r7, lr}
 80121ba:	b08e      	sub	sp, #56	; 0x38
 80121bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121be:	e0d0      	b.n	8012362 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	da1a      	bge.n	80121fc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80121c6:	1d3b      	adds	r3, r7, #4
 80121c8:	3304      	adds	r3, #4
 80121ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80121cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d10c      	bne.n	80121ec <prvProcessReceivedCommands+0x34>
	__asm volatile
 80121d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d6:	b672      	cpsid	i
 80121d8:	f383 8811 	msr	BASEPRI, r3
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	b662      	cpsie	i
 80121e6:	61fb      	str	r3, [r7, #28]
}
 80121e8:	bf00      	nop
 80121ea:	e7fe      	b.n	80121ea <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80121ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121f2:	6850      	ldr	r0, [r2, #4]
 80121f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80121f6:	6892      	ldr	r2, [r2, #8]
 80121f8:	4611      	mov	r1, r2
 80121fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	f2c0 80af 	blt.w	8012362 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220a:	695b      	ldr	r3, [r3, #20]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d004      	beq.n	801221a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012212:	3304      	adds	r3, #4
 8012214:	4618      	mov	r0, r3
 8012216:	f7fd f835 	bl	800f284 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801221a:	463b      	mov	r3, r7
 801221c:	4618      	mov	r0, r3
 801221e:	f7ff ff69 	bl	80120f4 <prvSampleTimeNow>
 8012222:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b09      	cmp	r3, #9
 8012228:	f200 809a 	bhi.w	8012360 <prvProcessReceivedCommands+0x1a8>
 801222c:	a201      	add	r2, pc, #4	; (adr r2, 8012234 <prvProcessReceivedCommands+0x7c>)
 801222e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012232:	bf00      	nop
 8012234:	0801225d 	.word	0x0801225d
 8012238:	0801225d 	.word	0x0801225d
 801223c:	0801225d 	.word	0x0801225d
 8012240:	080122d5 	.word	0x080122d5
 8012244:	080122e9 	.word	0x080122e9
 8012248:	08012337 	.word	0x08012337
 801224c:	0801225d 	.word	0x0801225d
 8012250:	0801225d 	.word	0x0801225d
 8012254:	080122d5 	.word	0x080122d5
 8012258:	080122e9 	.word	0x080122e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801225c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801225e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012262:	f043 0301 	orr.w	r3, r3, #1
 8012266:	b2da      	uxtb	r2, r3
 8012268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801226a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801226e:	68ba      	ldr	r2, [r7, #8]
 8012270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012272:	699b      	ldr	r3, [r3, #24]
 8012274:	18d1      	adds	r1, r2, r3
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801227a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801227c:	f7ff ff5a 	bl	8012134 <prvInsertTimerInActiveList>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d06d      	beq.n	8012362 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012288:	6a1b      	ldr	r3, [r3, #32]
 801228a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801228c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801228e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012294:	f003 0304 	and.w	r3, r3, #4
 8012298:	2b00      	cmp	r3, #0
 801229a:	d062      	beq.n	8012362 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801229c:	68ba      	ldr	r2, [r7, #8]
 801229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a0:	699b      	ldr	r3, [r3, #24]
 80122a2:	441a      	add	r2, r3
 80122a4:	2300      	movs	r3, #0
 80122a6:	9300      	str	r3, [sp, #0]
 80122a8:	2300      	movs	r3, #0
 80122aa:	2100      	movs	r1, #0
 80122ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122ae:	f7ff fdff 	bl	8011eb0 <xTimerGenericCommand>
 80122b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80122b4:	6a3b      	ldr	r3, [r7, #32]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d153      	bne.n	8012362 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80122ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122be:	b672      	cpsid	i
 80122c0:	f383 8811 	msr	BASEPRI, r3
 80122c4:	f3bf 8f6f 	isb	sy
 80122c8:	f3bf 8f4f 	dsb	sy
 80122cc:	b662      	cpsie	i
 80122ce:	61bb      	str	r3, [r7, #24]
}
 80122d0:	bf00      	nop
 80122d2:	e7fe      	b.n	80122d2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80122d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122da:	f023 0301 	bic.w	r3, r3, #1
 80122de:	b2da      	uxtb	r2, r3
 80122e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80122e6:	e03c      	b.n	8012362 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80122e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122ee:	f043 0301 	orr.w	r3, r3, #1
 80122f2:	b2da      	uxtb	r2, r3
 80122f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80122fa:	68ba      	ldr	r2, [r7, #8]
 80122fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012302:	699b      	ldr	r3, [r3, #24]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d10c      	bne.n	8012322 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8012308:	f04f 0350 	mov.w	r3, #80	; 0x50
 801230c:	b672      	cpsid	i
 801230e:	f383 8811 	msr	BASEPRI, r3
 8012312:	f3bf 8f6f 	isb	sy
 8012316:	f3bf 8f4f 	dsb	sy
 801231a:	b662      	cpsie	i
 801231c:	617b      	str	r3, [r7, #20]
}
 801231e:	bf00      	nop
 8012320:	e7fe      	b.n	8012320 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012324:	699a      	ldr	r2, [r3, #24]
 8012326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012328:	18d1      	adds	r1, r2, r3
 801232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801232c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801232e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012330:	f7ff ff00 	bl	8012134 <prvInsertTimerInActiveList>
					break;
 8012334:	e015      	b.n	8012362 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012338:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801233c:	f003 0302 	and.w	r3, r3, #2
 8012340:	2b00      	cmp	r3, #0
 8012342:	d103      	bne.n	801234c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8012344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012346:	f7fc fdf9 	bl	800ef3c <vPortFree>
 801234a:	e00a      	b.n	8012362 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801234c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012352:	f023 0301 	bic.w	r3, r3, #1
 8012356:	b2da      	uxtb	r2, r3
 8012358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801235a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801235e:	e000      	b.n	8012362 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 8012360:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012362:	4b08      	ldr	r3, [pc, #32]	; (8012384 <prvProcessReceivedCommands+0x1cc>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	1d39      	adds	r1, r7, #4
 8012368:	2200      	movs	r2, #0
 801236a:	4618      	mov	r0, r3
 801236c:	f7fd fea4 	bl	80100b8 <xQueueReceive>
 8012370:	4603      	mov	r3, r0
 8012372:	2b00      	cmp	r3, #0
 8012374:	f47f af24 	bne.w	80121c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012378:	bf00      	nop
 801237a:	bf00      	nop
 801237c:	3730      	adds	r7, #48	; 0x30
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	20018d18 	.word	0x20018d18

08012388 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b088      	sub	sp, #32
 801238c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801238e:	e04a      	b.n	8012426 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012390:	4b2e      	ldr	r3, [pc, #184]	; (801244c <prvSwitchTimerLists+0xc4>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	68db      	ldr	r3, [r3, #12]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801239a:	4b2c      	ldr	r3, [pc, #176]	; (801244c <prvSwitchTimerLists+0xc4>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	68db      	ldr	r3, [r3, #12]
 80123a0:	68db      	ldr	r3, [r3, #12]
 80123a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	3304      	adds	r3, #4
 80123a8:	4618      	mov	r0, r3
 80123aa:	f7fc ff6b 	bl	800f284 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6a1b      	ldr	r3, [r3, #32]
 80123b2:	68f8      	ldr	r0, [r7, #12]
 80123b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123bc:	f003 0304 	and.w	r3, r3, #4
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d030      	beq.n	8012426 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	699b      	ldr	r3, [r3, #24]
 80123c8:	693a      	ldr	r2, [r7, #16]
 80123ca:	4413      	add	r3, r2
 80123cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80123ce:	68ba      	ldr	r2, [r7, #8]
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d90e      	bls.n	80123f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	68ba      	ldr	r2, [r7, #8]
 80123da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	68fa      	ldr	r2, [r7, #12]
 80123e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80123e2:	4b1a      	ldr	r3, [pc, #104]	; (801244c <prvSwitchTimerLists+0xc4>)
 80123e4:	681a      	ldr	r2, [r3, #0]
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	3304      	adds	r3, #4
 80123ea:	4619      	mov	r1, r3
 80123ec:	4610      	mov	r0, r2
 80123ee:	f7fc ff10 	bl	800f212 <vListInsert>
 80123f2:	e018      	b.n	8012426 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80123f4:	2300      	movs	r3, #0
 80123f6:	9300      	str	r3, [sp, #0]
 80123f8:	2300      	movs	r3, #0
 80123fa:	693a      	ldr	r2, [r7, #16]
 80123fc:	2100      	movs	r1, #0
 80123fe:	68f8      	ldr	r0, [r7, #12]
 8012400:	f7ff fd56 	bl	8011eb0 <xTimerGenericCommand>
 8012404:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d10c      	bne.n	8012426 <prvSwitchTimerLists+0x9e>
	__asm volatile
 801240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012410:	b672      	cpsid	i
 8012412:	f383 8811 	msr	BASEPRI, r3
 8012416:	f3bf 8f6f 	isb	sy
 801241a:	f3bf 8f4f 	dsb	sy
 801241e:	b662      	cpsie	i
 8012420:	603b      	str	r3, [r7, #0]
}
 8012422:	bf00      	nop
 8012424:	e7fe      	b.n	8012424 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012426:	4b09      	ldr	r3, [pc, #36]	; (801244c <prvSwitchTimerLists+0xc4>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d1af      	bne.n	8012390 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012430:	4b06      	ldr	r3, [pc, #24]	; (801244c <prvSwitchTimerLists+0xc4>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012436:	4b06      	ldr	r3, [pc, #24]	; (8012450 <prvSwitchTimerLists+0xc8>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	4a04      	ldr	r2, [pc, #16]	; (801244c <prvSwitchTimerLists+0xc4>)
 801243c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801243e:	4a04      	ldr	r2, [pc, #16]	; (8012450 <prvSwitchTimerLists+0xc8>)
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	6013      	str	r3, [r2, #0]
}
 8012444:	bf00      	nop
 8012446:	3718      	adds	r7, #24
 8012448:	46bd      	mov	sp, r7
 801244a:	bd80      	pop	{r7, pc}
 801244c:	20018d10 	.word	0x20018d10
 8012450:	20018d14 	.word	0x20018d14

08012454 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801245a:	f7fd f847 	bl	800f4ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801245e:	4b15      	ldr	r3, [pc, #84]	; (80124b4 <prvCheckForValidListAndQueue+0x60>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d120      	bne.n	80124a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012466:	4814      	ldr	r0, [pc, #80]	; (80124b8 <prvCheckForValidListAndQueue+0x64>)
 8012468:	f7fc fe82 	bl	800f170 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801246c:	4813      	ldr	r0, [pc, #76]	; (80124bc <prvCheckForValidListAndQueue+0x68>)
 801246e:	f7fc fe7f 	bl	800f170 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012472:	4b13      	ldr	r3, [pc, #76]	; (80124c0 <prvCheckForValidListAndQueue+0x6c>)
 8012474:	4a10      	ldr	r2, [pc, #64]	; (80124b8 <prvCheckForValidListAndQueue+0x64>)
 8012476:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012478:	4b12      	ldr	r3, [pc, #72]	; (80124c4 <prvCheckForValidListAndQueue+0x70>)
 801247a:	4a10      	ldr	r2, [pc, #64]	; (80124bc <prvCheckForValidListAndQueue+0x68>)
 801247c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801247e:	2300      	movs	r3, #0
 8012480:	9300      	str	r3, [sp, #0]
 8012482:	4b11      	ldr	r3, [pc, #68]	; (80124c8 <prvCheckForValidListAndQueue+0x74>)
 8012484:	4a11      	ldr	r2, [pc, #68]	; (80124cc <prvCheckForValidListAndQueue+0x78>)
 8012486:	2110      	movs	r1, #16
 8012488:	200a      	movs	r0, #10
 801248a:	f7fd f9c5 	bl	800f818 <xQueueGenericCreateStatic>
 801248e:	4603      	mov	r3, r0
 8012490:	4a08      	ldr	r2, [pc, #32]	; (80124b4 <prvCheckForValidListAndQueue+0x60>)
 8012492:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012494:	4b07      	ldr	r3, [pc, #28]	; (80124b4 <prvCheckForValidListAndQueue+0x60>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	2b00      	cmp	r3, #0
 801249a:	d005      	beq.n	80124a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801249c:	4b05      	ldr	r3, [pc, #20]	; (80124b4 <prvCheckForValidListAndQueue+0x60>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	490b      	ldr	r1, [pc, #44]	; (80124d0 <prvCheckForValidListAndQueue+0x7c>)
 80124a2:	4618      	mov	r0, r3
 80124a4:	f7fe fa16 	bl	80108d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80124a8:	f7fd f854 	bl	800f554 <vPortExitCritical>
}
 80124ac:	bf00      	nop
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	20018d18 	.word	0x20018d18
 80124b8:	20018ce8 	.word	0x20018ce8
 80124bc:	20018cfc 	.word	0x20018cfc
 80124c0:	20018d10 	.word	0x20018d10
 80124c4:	20018d14 	.word	0x20018d14
 80124c8:	20018dc4 	.word	0x20018dc4
 80124cc:	20018d24 	.word	0x20018d24
 80124d0:	0802463c 	.word	0x0802463c

080124d4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b086      	sub	sp, #24
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10c      	bne.n	8012500 <pvTimerGetTimerID+0x2c>
	__asm volatile
 80124e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ea:	b672      	cpsid	i
 80124ec:	f383 8811 	msr	BASEPRI, r3
 80124f0:	f3bf 8f6f 	isb	sy
 80124f4:	f3bf 8f4f 	dsb	sy
 80124f8:	b662      	cpsie	i
 80124fa:	60fb      	str	r3, [r7, #12]
}
 80124fc:	bf00      	nop
 80124fe:	e7fe      	b.n	80124fe <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 8012500:	f7fc fff4 	bl	800f4ec <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8012504:	697b      	ldr	r3, [r7, #20]
 8012506:	69db      	ldr	r3, [r3, #28]
 8012508:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801250a:	f7fd f823 	bl	800f554 <vPortExitCritical>

	return pvReturn;
 801250e:	693b      	ldr	r3, [r7, #16]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3718      	adds	r7, #24
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	330c      	adds	r3, #12
 8012528:	461a      	mov	r2, r3
 801252a:	6839      	ldr	r1, [r7, #0]
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f00c fed9 	bl	801f2e4 <tcpip_send_msg_wait_sem>
 8012532:	4603      	mov	r3, r0
 8012534:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012536:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d103      	bne.n	8012546 <netconn_apimsg+0x2e>
    return apimsg->err;
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8012544:	e001      	b.n	801254a <netconn_apimsg+0x32>
  }
  return err;
 8012546:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801254a:	4618      	mov	r0, r3
 801254c:	3710      	adds	r7, #16
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
	...

08012554 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b08c      	sub	sp, #48	; 0x30
 8012558:	af00      	add	r7, sp, #0
 801255a:	4603      	mov	r3, r0
 801255c:	603a      	str	r2, [r7, #0]
 801255e:	71fb      	strb	r3, [r7, #7]
 8012560:	460b      	mov	r3, r1
 8012562:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8012564:	79fb      	ldrb	r3, [r7, #7]
 8012566:	6839      	ldr	r1, [r7, #0]
 8012568:	4618      	mov	r0, r3
 801256a:	f001 f81d 	bl	80135a8 <netconn_alloc>
 801256e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8012570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012572:	2b00      	cmp	r3, #0
 8012574:	d054      	beq.n	8012620 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8012576:	79bb      	ldrb	r3, [r7, #6]
 8012578:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801257c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801257e:	f107 0308 	add.w	r3, r7, #8
 8012582:	4619      	mov	r1, r3
 8012584:	4829      	ldr	r0, [pc, #164]	; (801262c <netconn_new_with_proto_and_callback+0xd8>)
 8012586:	f7ff ffc7 	bl	8012518 <netconn_apimsg>
 801258a:	4603      	mov	r3, r0
 801258c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8012590:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012594:	2b00      	cmp	r3, #0
 8012596:	d043      	beq.n	8012620 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8012598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d005      	beq.n	80125ac <netconn_new_with_proto_and_callback+0x58>
 80125a0:	4b23      	ldr	r3, [pc, #140]	; (8012630 <netconn_new_with_proto_and_callback+0xdc>)
 80125a2:	22a3      	movs	r2, #163	; 0xa3
 80125a4:	4923      	ldr	r1, [pc, #140]	; (8012634 <netconn_new_with_proto_and_callback+0xe0>)
 80125a6:	4824      	ldr	r0, [pc, #144]	; (8012638 <netconn_new_with_proto_and_callback+0xe4>)
 80125a8:	f010 fbc2 	bl	8022d30 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80125ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ae:	3310      	adds	r3, #16
 80125b0:	4618      	mov	r0, r3
 80125b2:	f006 fa67 	bl	8018a84 <sys_mbox_valid>
 80125b6:	4603      	mov	r3, r0
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d105      	bne.n	80125c8 <netconn_new_with_proto_and_callback+0x74>
 80125bc:	4b1c      	ldr	r3, [pc, #112]	; (8012630 <netconn_new_with_proto_and_callback+0xdc>)
 80125be:	22a4      	movs	r2, #164	; 0xa4
 80125c0:	491e      	ldr	r1, [pc, #120]	; (801263c <netconn_new_with_proto_and_callback+0xe8>)
 80125c2:	481d      	ldr	r0, [pc, #116]	; (8012638 <netconn_new_with_proto_and_callback+0xe4>)
 80125c4:	f010 fbb4 	bl	8022d30 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80125c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ca:	3314      	adds	r3, #20
 80125cc:	4618      	mov	r0, r3
 80125ce:	f006 fa59 	bl	8018a84 <sys_mbox_valid>
 80125d2:	4603      	mov	r3, r0
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d005      	beq.n	80125e4 <netconn_new_with_proto_and_callback+0x90>
 80125d8:	4b15      	ldr	r3, [pc, #84]	; (8012630 <netconn_new_with_proto_and_callback+0xdc>)
 80125da:	22a6      	movs	r2, #166	; 0xa6
 80125dc:	4918      	ldr	r1, [pc, #96]	; (8012640 <netconn_new_with_proto_and_callback+0xec>)
 80125de:	4816      	ldr	r0, [pc, #88]	; (8012638 <netconn_new_with_proto_and_callback+0xe4>)
 80125e0:	f010 fba6 	bl	8022d30 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80125e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e6:	330c      	adds	r3, #12
 80125e8:	4618      	mov	r0, r3
 80125ea:	f006 fad9 	bl	8018ba0 <sys_sem_valid>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d105      	bne.n	8012600 <netconn_new_with_proto_and_callback+0xac>
 80125f4:	4b0e      	ldr	r3, [pc, #56]	; (8012630 <netconn_new_with_proto_and_callback+0xdc>)
 80125f6:	22a9      	movs	r2, #169	; 0xa9
 80125f8:	4912      	ldr	r1, [pc, #72]	; (8012644 <netconn_new_with_proto_and_callback+0xf0>)
 80125fa:	480f      	ldr	r0, [pc, #60]	; (8012638 <netconn_new_with_proto_and_callback+0xe4>)
 80125fc:	f010 fb98 	bl	8022d30 <iprintf>
      sys_sem_free(&conn->op_completed);
 8012600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012602:	330c      	adds	r3, #12
 8012604:	4618      	mov	r0, r3
 8012606:	f006 fabe 	bl	8018b86 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801260c:	3310      	adds	r3, #16
 801260e:	4618      	mov	r0, r3
 8012610:	f006 f9c4 	bl	801899c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8012614:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012616:	2007      	movs	r0, #7
 8012618:	f005 f818 	bl	801764c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 801261c:	2300      	movs	r3, #0
 801261e:	e000      	b.n	8012622 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8012620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012622:	4618      	mov	r0, r3
 8012624:	3730      	adds	r7, #48	; 0x30
 8012626:	46bd      	mov	sp, r7
 8012628:	bd80      	pop	{r7, pc}
 801262a:	bf00      	nop
 801262c:	0801357d 	.word	0x0801357d
 8012630:	08024644 	.word	0x08024644
 8012634:	080246b0 	.word	0x080246b0
 8012638:	080246d4 	.word	0x080246d4
 801263c:	080246fc 	.word	0x080246fc
 8012640:	08024714 	.word	0x08024714
 8012644:	08024738 	.word	0x08024738

08012648 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b08c      	sub	sp, #48	; 0x30
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d101      	bne.n	801265a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8012656:	2300      	movs	r3, #0
 8012658:	e014      	b.n	8012684 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801265e:	2329      	movs	r3, #41	; 0x29
 8012660:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8012662:	f107 030c 	add.w	r3, r7, #12
 8012666:	4619      	mov	r1, r3
 8012668:	4808      	ldr	r0, [pc, #32]	; (801268c <netconn_prepare_delete+0x44>)
 801266a:	f7ff ff55 	bl	8012518 <netconn_apimsg>
 801266e:	4603      	mov	r3, r0
 8012670:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8012674:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012678:	2b00      	cmp	r3, #0
 801267a:	d002      	beq.n	8012682 <netconn_prepare_delete+0x3a>
    return err;
 801267c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8012680:	e000      	b.n	8012684 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8012682:	2300      	movs	r3, #0
}
 8012684:	4618      	mov	r0, r3
 8012686:	3730      	adds	r7, #48	; 0x30
 8012688:	46bd      	mov	sp, r7
 801268a:	bd80      	pop	{r7, pc}
 801268c:	08013af9 	.word	0x08013af9

08012690 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d101      	bne.n	80126a2 <netconn_delete+0x12>
    return ERR_OK;
 801269e:	2300      	movs	r3, #0
 80126a0:	e00d      	b.n	80126be <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7ff ffd0 	bl	8012648 <netconn_prepare_delete>
 80126a8:	4603      	mov	r3, r0
 80126aa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80126ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d102      	bne.n	80126ba <netconn_delete+0x2a>
    netconn_free(conn);
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f000 ffed 	bl	8013694 <netconn_free>
  }
  return err;
 80126ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
	...

080126c8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b08e      	sub	sp, #56	; 0x38
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	60f8      	str	r0, [r7, #12]
 80126d0:	60b9      	str	r1, [r7, #8]
 80126d2:	4613      	mov	r3, r2
 80126d4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d109      	bne.n	80126f0 <netconn_bind+0x28>
 80126dc:	4b11      	ldr	r3, [pc, #68]	; (8012724 <netconn_bind+0x5c>)
 80126de:	f44f 729c 	mov.w	r2, #312	; 0x138
 80126e2:	4911      	ldr	r1, [pc, #68]	; (8012728 <netconn_bind+0x60>)
 80126e4:	4811      	ldr	r0, [pc, #68]	; (801272c <netconn_bind+0x64>)
 80126e6:	f010 fb23 	bl	8022d30 <iprintf>
 80126ea:	f06f 030f 	mvn.w	r3, #15
 80126ee:	e015      	b.n	801271c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80126f0:	68bb      	ldr	r3, [r7, #8]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d101      	bne.n	80126fa <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80126f6:	4b0e      	ldr	r3, [pc, #56]	; (8012730 <netconn_bind+0x68>)
 80126f8:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8012702:	88fb      	ldrh	r3, [r7, #6]
 8012704:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8012706:	f107 0314 	add.w	r3, r7, #20
 801270a:	4619      	mov	r1, r3
 801270c:	4809      	ldr	r0, [pc, #36]	; (8012734 <netconn_bind+0x6c>)
 801270e:	f7ff ff03 	bl	8012518 <netconn_apimsg>
 8012712:	4603      	mov	r3, r0
 8012714:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8012718:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801271c:	4618      	mov	r0, r3
 801271e:	3738      	adds	r7, #56	; 0x38
 8012720:	46bd      	mov	sp, r7
 8012722:	bd80      	pop	{r7, pc}
 8012724:	08024644 	.word	0x08024644
 8012728:	080247b4 	.word	0x080247b4
 801272c:	080246d4 	.word	0x080246d4
 8012730:	080284c8 	.word	0x080284c8
 8012734:	08013cc5 	.word	0x08013cc5

08012738 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b08e      	sub	sp, #56	; 0x38
 801273c:	af00      	add	r7, sp, #0
 801273e:	60f8      	str	r0, [r7, #12]
 8012740:	60b9      	str	r1, [r7, #8]
 8012742:	4613      	mov	r3, r2
 8012744:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d109      	bne.n	8012760 <netconn_connect+0x28>
 801274c:	4b11      	ldr	r3, [pc, #68]	; (8012794 <netconn_connect+0x5c>)
 801274e:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8012752:	4911      	ldr	r1, [pc, #68]	; (8012798 <netconn_connect+0x60>)
 8012754:	4811      	ldr	r0, [pc, #68]	; (801279c <netconn_connect+0x64>)
 8012756:	f010 faeb 	bl	8022d30 <iprintf>
 801275a:	f06f 030f 	mvn.w	r3, #15
 801275e:	e015      	b.n	801278c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8012760:	68bb      	ldr	r3, [r7, #8]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d101      	bne.n	801276a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8012766:	4b0e      	ldr	r3, [pc, #56]	; (80127a0 <netconn_connect+0x68>)
 8012768:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8012772:	88fb      	ldrh	r3, [r7, #6]
 8012774:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8012776:	f107 0314 	add.w	r3, r7, #20
 801277a:	4619      	mov	r1, r3
 801277c:	4809      	ldr	r0, [pc, #36]	; (80127a4 <netconn_connect+0x6c>)
 801277e:	f7ff fecb 	bl	8012518 <netconn_apimsg>
 8012782:	4603      	mov	r3, r0
 8012784:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8012788:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801278c:	4618      	mov	r0, r3
 801278e:	3738      	adds	r7, #56	; 0x38
 8012790:	46bd      	mov	sp, r7
 8012792:	bd80      	pop	{r7, pc}
 8012794:	08024644 	.word	0x08024644
 8012798:	080247f0 	.word	0x080247f0
 801279c:	080246d4 	.word	0x080246d4
 80127a0:	080284c8 	.word	0x080284c8
 80127a4:	08013e61 	.word	0x08013e61

080127a8 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b088      	sub	sp, #32
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	4613      	mov	r3, r2
 80127b4:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80127b6:	2300      	movs	r3, #0
 80127b8:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d109      	bne.n	80127d4 <netconn_recv_data+0x2c>
 80127c0:	4b5e      	ldr	r3, [pc, #376]	; (801293c <netconn_recv_data+0x194>)
 80127c2:	f44f 7212 	mov.w	r2, #584	; 0x248
 80127c6:	495e      	ldr	r1, [pc, #376]	; (8012940 <netconn_recv_data+0x198>)
 80127c8:	485e      	ldr	r0, [pc, #376]	; (8012944 <netconn_recv_data+0x19c>)
 80127ca:	f010 fab1 	bl	8022d30 <iprintf>
 80127ce:	f06f 030f 	mvn.w	r3, #15
 80127d2:	e0ae      	b.n	8012932 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	2200      	movs	r2, #0
 80127d8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d109      	bne.n	80127f4 <netconn_recv_data+0x4c>
 80127e0:	4b56      	ldr	r3, [pc, #344]	; (801293c <netconn_recv_data+0x194>)
 80127e2:	f240 224a 	movw	r2, #586	; 0x24a
 80127e6:	4958      	ldr	r1, [pc, #352]	; (8012948 <netconn_recv_data+0x1a0>)
 80127e8:	4856      	ldr	r0, [pc, #344]	; (8012944 <netconn_recv_data+0x19c>)
 80127ea:	f010 faa1 	bl	8022d30 <iprintf>
 80127ee:	f06f 030f 	mvn.w	r3, #15
 80127f2:	e09e      	b.n	8012932 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	3310      	adds	r3, #16
 80127f8:	4618      	mov	r0, r3
 80127fa:	f006 f943 	bl	8018a84 <sys_mbox_valid>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d10e      	bne.n	8012822 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8012804:	68f8      	ldr	r0, [r7, #12]
 8012806:	f000 fae6 	bl	8012dd6 <netconn_err>
 801280a:	4603      	mov	r3, r0
 801280c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801280e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d002      	beq.n	801281c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8012816:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801281a:	e08a      	b.n	8012932 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 801281c:	f06f 030a 	mvn.w	r3, #10
 8012820:	e087      	b.n	8012932 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012828:	f003 0302 	and.w	r3, r3, #2
 801282c:	2b00      	cmp	r3, #0
 801282e:	d110      	bne.n	8012852 <netconn_recv_data+0xaa>
 8012830:	79fb      	ldrb	r3, [r7, #7]
 8012832:	f003 0304 	and.w	r3, r3, #4
 8012836:	2b00      	cmp	r3, #0
 8012838:	d10b      	bne.n	8012852 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012840:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8012844:	2b00      	cmp	r3, #0
 8012846:	d104      	bne.n	8012852 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d024      	beq.n	801289c <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	3310      	adds	r3, #16
 8012856:	f107 0218 	add.w	r2, r7, #24
 801285a:	4611      	mov	r1, r2
 801285c:	4618      	mov	r0, r3
 801285e:	f006 f8fa 	bl	8018a56 <sys_arch_mbox_tryfetch>
 8012862:	4603      	mov	r3, r0
 8012864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012868:	d129      	bne.n	80128be <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801286a:	68f8      	ldr	r0, [r7, #12]
 801286c:	f000 fab3 	bl	8012dd6 <netconn_err>
 8012870:	4603      	mov	r3, r0
 8012872:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8012874:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d002      	beq.n	8012882 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 801287c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012880:	e057      	b.n	8012932 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012888:	f003 0301 	and.w	r3, r3, #1
 801288c:	2b00      	cmp	r3, #0
 801288e:	d002      	beq.n	8012896 <netconn_recv_data+0xee>
        return ERR_CONN;
 8012890:	f06f 030a 	mvn.w	r3, #10
 8012894:	e04d      	b.n	8012932 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 8012896:	f06f 0306 	mvn.w	r3, #6
 801289a:	e04a      	b.n	8012932 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	f103 0010 	add.w	r0, r3, #16
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	69da      	ldr	r2, [r3, #28]
 80128a6:	f107 0318 	add.w	r3, r7, #24
 80128aa:	4619      	mov	r1, r3
 80128ac:	f006 f8a2 	bl	80189f4 <sys_arch_mbox_fetch>
 80128b0:	4603      	mov	r3, r0
 80128b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128b6:	d102      	bne.n	80128be <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 80128b8:	f06f 0302 	mvn.w	r3, #2
 80128bc:	e039      	b.n	8012932 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	781b      	ldrb	r3, [r3, #0]
 80128c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128c6:	2b10      	cmp	r3, #16
 80128c8:	d117      	bne.n	80128fa <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	f107 0217 	add.w	r2, r7, #23
 80128d0:	4611      	mov	r1, r2
 80128d2:	4618      	mov	r0, r3
 80128d4:	f000 fad0 	bl	8012e78 <lwip_netconn_is_err_msg>
 80128d8:	4603      	mov	r3, r0
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d009      	beq.n	80128f2 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80128de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80128e2:	f113 0f0f 	cmn.w	r3, #15
 80128e6:	d101      	bne.n	80128ec <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80128e8:	2300      	movs	r3, #0
 80128ea:	e022      	b.n	8012932 <netconn_recv_data+0x18a>
      }
      return err;
 80128ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80128f0:	e01f      	b.n	8012932 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80128f2:	69bb      	ldr	r3, [r7, #24]
 80128f4:	891b      	ldrh	r3, [r3, #8]
 80128f6:	83fb      	strh	r3, [r7, #30]
 80128f8:	e00d      	b.n	8012916 <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d106      	bne.n	801290e <netconn_recv_data+0x166>
 8012900:	4b0e      	ldr	r3, [pc, #56]	; (801293c <netconn_recv_data+0x194>)
 8012902:	f240 2291 	movw	r2, #657	; 0x291
 8012906:	4911      	ldr	r1, [pc, #68]	; (801294c <netconn_recv_data+0x1a4>)
 8012908:	480e      	ldr	r0, [pc, #56]	; (8012944 <netconn_recv_data+0x19c>)
 801290a:	f010 fa11 	bl	8022d30 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	891b      	ldrh	r3, [r3, #8]
 8012914:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8012916:	68fb      	ldr	r3, [r7, #12]
 8012918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801291a:	2b00      	cmp	r3, #0
 801291c:	d005      	beq.n	801292a <netconn_recv_data+0x182>
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012922:	8bfa      	ldrh	r2, [r7, #30]
 8012924:	2101      	movs	r1, #1
 8012926:	68f8      	ldr	r0, [r7, #12]
 8012928:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801292a:	69ba      	ldr	r2, [r7, #24]
 801292c:	68bb      	ldr	r3, [r7, #8]
 801292e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8012930:	2300      	movs	r3, #0
}
 8012932:	4618      	mov	r0, r3
 8012934:	3720      	adds	r7, #32
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	08024644 	.word	0x08024644
 8012940:	08024894 	.word	0x08024894
 8012944:	080246d4 	.word	0x080246d4
 8012948:	080248b4 	.word	0x080248b4
 801294c:	080248d0 	.word	0x080248d0

08012950 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b084      	sub	sp, #16
 8012954:	af00      	add	r7, sp, #0
 8012956:	60f8      	str	r0, [r7, #12]
 8012958:	60b9      	str	r1, [r7, #8]
 801295a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d005      	beq.n	801296e <netconn_tcp_recvd_msg+0x1e>
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	781b      	ldrb	r3, [r3, #0]
 8012966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801296a:	2b10      	cmp	r3, #16
 801296c:	d009      	beq.n	8012982 <netconn_tcp_recvd_msg+0x32>
 801296e:	4b0c      	ldr	r3, [pc, #48]	; (80129a0 <netconn_tcp_recvd_msg+0x50>)
 8012970:	f240 22a7 	movw	r2, #679	; 0x2a7
 8012974:	490b      	ldr	r1, [pc, #44]	; (80129a4 <netconn_tcp_recvd_msg+0x54>)
 8012976:	480c      	ldr	r0, [pc, #48]	; (80129a8 <netconn_tcp_recvd_msg+0x58>)
 8012978:	f010 f9da 	bl	8022d30 <iprintf>
 801297c:	f06f 030f 	mvn.w	r3, #15
 8012980:	e00a      	b.n	8012998 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	68fa      	ldr	r2, [r7, #12]
 8012986:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	68ba      	ldr	r2, [r7, #8]
 801298c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801298e:	6879      	ldr	r1, [r7, #4]
 8012990:	4806      	ldr	r0, [pc, #24]	; (80129ac <netconn_tcp_recvd_msg+0x5c>)
 8012992:	f7ff fdc1 	bl	8012518 <netconn_apimsg>
 8012996:	4603      	mov	r3, r0
}
 8012998:	4618      	mov	r0, r3
 801299a:	3710      	adds	r7, #16
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}
 80129a0:	08024644 	.word	0x08024644
 80129a4:	080248dc 	.word	0x080248dc
 80129a8:	080246d4 	.word	0x080246d4
 80129ac:	08013fe9 	.word	0x08013fe9

080129b0 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80129b0:	b580      	push	{r7, lr}
 80129b2:	b090      	sub	sp, #64	; 0x40
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	60f8      	str	r0, [r7, #12]
 80129b8:	60b9      	str	r1, [r7, #8]
 80129ba:	4613      	mov	r3, r2
 80129bc:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	3310      	adds	r3, #16
 80129c2:	4618      	mov	r0, r3
 80129c4:	f006 f85e 	bl	8018a84 <sys_mbox_valid>
 80129c8:	4603      	mov	r3, r0
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d102      	bne.n	80129d4 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80129ce:	f06f 030a 	mvn.w	r3, #10
 80129d2:	e072      	b.n	8012aba <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129da:	b25b      	sxtb	r3, r3
 80129dc:	2b00      	cmp	r3, #0
 80129de:	da09      	bge.n	80129f4 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80129e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129ea:	b2da      	uxtb	r2, r3
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 80129f2:	e03b      	b.n	8012a6c <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80129f4:	79fb      	ldrb	r3, [r7, #7]
 80129f6:	461a      	mov	r2, r3
 80129f8:	68b9      	ldr	r1, [r7, #8]
 80129fa:	68f8      	ldr	r0, [r7, #12]
 80129fc:	f7ff fed4 	bl	80127a8 <netconn_recv_data>
 8012a00:	4603      	mov	r3, r0
 8012a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8012a06:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d002      	beq.n	8012a14 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8012a0e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012a12:	e052      	b.n	8012aba <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8012a1a:	79fb      	ldrb	r3, [r7, #7]
 8012a1c:	f003 0308 	and.w	r3, r3, #8
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d10e      	bne.n	8012a42 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8012a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d002      	beq.n	8012a30 <netconn_recv_data_tcp+0x80>
 8012a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a2c:	891b      	ldrh	r3, [r3, #8]
 8012a2e:	e000      	b.n	8012a32 <netconn_recv_data_tcp+0x82>
 8012a30:	2301      	movs	r3, #1
 8012a32:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8012a34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012a36:	f107 0214 	add.w	r2, r7, #20
 8012a3a:	4619      	mov	r1, r3
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	f7ff ff87 	bl	8012950 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8012a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d136      	bne.n	8012ab6 <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 8012a48:	79fb      	ldrb	r3, [r7, #7]
 8012a4a:	f003 0310 	and.w	r3, r3, #16
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d00b      	beq.n	8012a6a <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012a58:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012a5c:	b2da      	uxtb	r2, r3
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8012a64:	f06f 0306 	mvn.w	r3, #6
 8012a68:	e027      	b.n	8012aba <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8012a6a:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d005      	beq.n	8012a80 <netconn_recv_data_tcp+0xd0>
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a78:	2200      	movs	r2, #0
 8012a7a:	2101      	movs	r1, #1
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	685b      	ldr	r3, [r3, #4]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d10f      	bne.n	8012aa8 <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8012a88:	68f8      	ldr	r0, [r7, #12]
 8012a8a:	f000 f9a4 	bl	8012dd6 <netconn_err>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8012a94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d002      	beq.n	8012aa2 <netconn_recv_data_tcp+0xf2>
          return err;
 8012a9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8012aa0:	e00b      	b.n	8012aba <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8012aa2:	f06f 030d 	mvn.w	r3, #13
 8012aa6:	e008      	b.n	8012aba <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8012aa8:	2101      	movs	r1, #1
 8012aaa:	68f8      	ldr	r0, [r7, #12]
 8012aac:	f000 f956 	bl	8012d5c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8012ab0:	f06f 030e 	mvn.w	r3, #14
 8012ab4:	e001      	b.n	8012aba <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8012ab6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3740      	adds	r7, #64	; 0x40
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
	...

08012ac4 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8012ac4:	b580      	push	{r7, lr}
 8012ac6:	b086      	sub	sp, #24
 8012ac8:	af00      	add	r7, sp, #0
 8012aca:	6078      	str	r0, [r7, #4]
 8012acc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8012ad2:	683b      	ldr	r3, [r7, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d109      	bne.n	8012aec <netconn_recv+0x28>
 8012ad8:	4b32      	ldr	r3, [pc, #200]	; (8012ba4 <netconn_recv+0xe0>)
 8012ada:	f240 3263 	movw	r2, #867	; 0x363
 8012ade:	4932      	ldr	r1, [pc, #200]	; (8012ba8 <netconn_recv+0xe4>)
 8012ae0:	4832      	ldr	r0, [pc, #200]	; (8012bac <netconn_recv+0xe8>)
 8012ae2:	f010 f925 	bl	8022d30 <iprintf>
 8012ae6:	f06f 030f 	mvn.w	r3, #15
 8012aea:	e056      	b.n	8012b9a <netconn_recv+0xd6>
  *new_buf = NULL;
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	2200      	movs	r2, #0
 8012af0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d109      	bne.n	8012b0c <netconn_recv+0x48>
 8012af8:	4b2a      	ldr	r3, [pc, #168]	; (8012ba4 <netconn_recv+0xe0>)
 8012afa:	f240 3265 	movw	r2, #869	; 0x365
 8012afe:	492c      	ldr	r1, [pc, #176]	; (8012bb0 <netconn_recv+0xec>)
 8012b00:	482a      	ldr	r0, [pc, #168]	; (8012bac <netconn_recv+0xe8>)
 8012b02:	f010 f915 	bl	8022d30 <iprintf>
 8012b06:	f06f 030f 	mvn.w	r3, #15
 8012b0a:	e046      	b.n	8012b9a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	781b      	ldrb	r3, [r3, #0]
 8012b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012b14:	2b10      	cmp	r3, #16
 8012b16:	d13a      	bne.n	8012b8e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012b1c:	2006      	movs	r0, #6
 8012b1e:	f004 fd1f 	bl	8017560 <memp_malloc>
 8012b22:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d102      	bne.n	8012b30 <netconn_recv+0x6c>
      return ERR_MEM;
 8012b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8012b2e:	e034      	b.n	8012b9a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8012b30:	f107 030c 	add.w	r3, r7, #12
 8012b34:	2200      	movs	r2, #0
 8012b36:	4619      	mov	r1, r3
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f7ff ff39 	bl	80129b0 <netconn_recv_data_tcp>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012b42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d006      	beq.n	8012b58 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8012b4a:	6979      	ldr	r1, [r7, #20]
 8012b4c:	2006      	movs	r0, #6
 8012b4e:	f004 fd7d 	bl	801764c <memp_free>
      return err;
 8012b52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012b56:	e020      	b.n	8012b9a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d106      	bne.n	8012b6c <netconn_recv+0xa8>
 8012b5e:	4b11      	ldr	r3, [pc, #68]	; (8012ba4 <netconn_recv+0xe0>)
 8012b60:	f240 3279 	movw	r2, #889	; 0x379
 8012b64:	4913      	ldr	r1, [pc, #76]	; (8012bb4 <netconn_recv+0xf0>)
 8012b66:	4811      	ldr	r0, [pc, #68]	; (8012bac <netconn_recv+0xe8>)
 8012b68:	f010 f8e2 	bl	8022d30 <iprintf>

    buf->p = p;
 8012b6c:	68fa      	ldr	r2, [r7, #12]
 8012b6e:	697b      	ldr	r3, [r7, #20]
 8012b70:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8012b72:	68fa      	ldr	r2, [r7, #12]
 8012b74:	697b      	ldr	r3, [r7, #20]
 8012b76:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	2200      	movs	r2, #0
 8012b82:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	697a      	ldr	r2, [r7, #20]
 8012b88:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	e005      	b.n	8012b9a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8012b8e:	2200      	movs	r2, #0
 8012b90:	6839      	ldr	r1, [r7, #0]
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f7ff fe08 	bl	80127a8 <netconn_recv_data>
 8012b98:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	3718      	adds	r7, #24
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bd80      	pop	{r7, pc}
 8012ba2:	bf00      	nop
 8012ba4:	08024644 	.word	0x08024644
 8012ba8:	08024894 	.word	0x08024894
 8012bac:	080246d4 	.word	0x080246d4
 8012bb0:	080248b4 	.word	0x080248b4
 8012bb4:	0802492c 	.word	0x0802492c

08012bb8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b088      	sub	sp, #32
 8012bbc:	af02      	add	r7, sp, #8
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
 8012bc4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8012bce:	78fa      	ldrb	r2, [r7, #3]
 8012bd0:	f107 0110 	add.w	r1, r7, #16
 8012bd4:	6a3b      	ldr	r3, [r7, #32]
 8012bd6:	9300      	str	r3, [sp, #0]
 8012bd8:	4613      	mov	r3, r2
 8012bda:	2201      	movs	r2, #1
 8012bdc:	68f8      	ldr	r0, [r7, #12]
 8012bde:	f000 f805 	bl	8012bec <netconn_write_vectors_partly>
 8012be2:	4603      	mov	r3, r0
}
 8012be4:	4618      	mov	r0, r3
 8012be6:	3718      	adds	r7, #24
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b092      	sub	sp, #72	; 0x48
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	60f8      	str	r0, [r7, #12]
 8012bf4:	60b9      	str	r1, [r7, #8]
 8012bf6:	4611      	mov	r1, r2
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	460b      	mov	r3, r1
 8012bfc:	80fb      	strh	r3, [r7, #6]
 8012bfe:	4613      	mov	r3, r2
 8012c00:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d109      	bne.n	8012c1c <netconn_write_vectors_partly+0x30>
 8012c08:	4b4e      	ldr	r3, [pc, #312]	; (8012d44 <netconn_write_vectors_partly+0x158>)
 8012c0a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012c0e:	494e      	ldr	r1, [pc, #312]	; (8012d48 <netconn_write_vectors_partly+0x15c>)
 8012c10:	484e      	ldr	r0, [pc, #312]	; (8012d4c <netconn_write_vectors_partly+0x160>)
 8012c12:	f010 f88d 	bl	8022d30 <iprintf>
 8012c16:	f06f 030f 	mvn.w	r3, #15
 8012c1a:	e08f      	b.n	8012d3c <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012c24:	2b10      	cmp	r3, #16
 8012c26:	d009      	beq.n	8012c3c <netconn_write_vectors_partly+0x50>
 8012c28:	4b46      	ldr	r3, [pc, #280]	; (8012d44 <netconn_write_vectors_partly+0x158>)
 8012c2a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8012c2e:	4948      	ldr	r1, [pc, #288]	; (8012d50 <netconn_write_vectors_partly+0x164>)
 8012c30:	4846      	ldr	r0, [pc, #280]	; (8012d4c <netconn_write_vectors_partly+0x160>)
 8012c32:	f010 f87d 	bl	8022d30 <iprintf>
 8012c36:	f06f 0305 	mvn.w	r3, #5
 8012c3a:	e07f      	b.n	8012d3c <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c42:	f003 0302 	and.w	r3, r3, #2
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d104      	bne.n	8012c54 <netconn_write_vectors_partly+0x68>
 8012c4a:	797b      	ldrb	r3, [r7, #5]
 8012c4c:	f003 0304 	and.w	r3, r3, #4
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d001      	beq.n	8012c58 <netconn_write_vectors_partly+0x6c>
 8012c54:	2301      	movs	r3, #1
 8012c56:	e000      	b.n	8012c5a <netconn_write_vectors_partly+0x6e>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8012c5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d005      	beq.n	8012c72 <netconn_write_vectors_partly+0x86>
 8012c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d102      	bne.n	8012c72 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8012c6c:	f06f 0305 	mvn.w	r3, #5
 8012c70:	e064      	b.n	8012d3c <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8012c72:	2300      	movs	r3, #0
 8012c74:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8012c76:	2300      	movs	r3, #0
 8012c78:	643b      	str	r3, [r7, #64]	; 0x40
 8012c7a:	e015      	b.n	8012ca8 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8012c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c7e:	00db      	lsls	r3, r3, #3
 8012c80:	68ba      	ldr	r2, [r7, #8]
 8012c82:	4413      	add	r3, r2
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c88:	4413      	add	r3, r2
 8012c8a:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8012c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012c8e:	00db      	lsls	r3, r3, #3
 8012c90:	68ba      	ldr	r2, [r7, #8]
 8012c92:	4413      	add	r3, r2
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d202      	bcs.n	8012ca2 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8012c9c:	f06f 0305 	mvn.w	r3, #5
 8012ca0:	e04c      	b.n	8012d3c <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8012ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ca4:	3301      	adds	r3, #1
 8012ca6:	643b      	str	r3, [r7, #64]	; 0x40
 8012ca8:	88fb      	ldrh	r3, [r7, #6]
 8012caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012cac:	429a      	cmp	r2, r3
 8012cae:	dbe5      	blt.n	8012c7c <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8012cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d101      	bne.n	8012cba <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	e040      	b.n	8012d3c <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8012cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	da0a      	bge.n	8012cd6 <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8012cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d102      	bne.n	8012ccc <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8012cc6:	f06f 0305 	mvn.w	r3, #5
 8012cca:	e037      	b.n	8012d3c <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8012ccc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012cd0:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8012cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8012cda:	68bb      	ldr	r3, [r7, #8]
 8012cdc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8012cde:	88fb      	ldrh	r3, [r7, #6]
 8012ce0:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8012ce2:	2300      	movs	r3, #0
 8012ce4:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8012ce6:	797b      	ldrb	r3, [r7, #5]
 8012ce8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8012cec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cee:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8012cf4:	f107 0314 	add.w	r3, r7, #20
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	4816      	ldr	r0, [pc, #88]	; (8012d54 <netconn_write_vectors_partly+0x168>)
 8012cfc:	f7ff fc0c 	bl	8012518 <netconn_apimsg>
 8012d00:	4603      	mov	r3, r0
 8012d02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8012d06:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d114      	bne.n	8012d38 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8012d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d002      	beq.n	8012d1a <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8012d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d18:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8012d1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d10a      	bne.n	8012d38 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8012d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d006      	beq.n	8012d38 <netconn_write_vectors_partly+0x14c>
 8012d2a:	4b06      	ldr	r3, [pc, #24]	; (8012d44 <netconn_write_vectors_partly+0x158>)
 8012d2c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012d30:	4909      	ldr	r1, [pc, #36]	; (8012d58 <netconn_write_vectors_partly+0x16c>)
 8012d32:	4806      	ldr	r0, [pc, #24]	; (8012d4c <netconn_write_vectors_partly+0x160>)
 8012d34:	f00f fffc 	bl	8022d30 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8012d38:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3748      	adds	r7, #72	; 0x48
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	08024644 	.word	0x08024644
 8012d48:	08024954 	.word	0x08024954
 8012d4c:	080246d4 	.word	0x080246d4
 8012d50:	08024970 	.word	0x08024970
 8012d54:	080143f5 	.word	0x080143f5
 8012d58:	08024994 	.word	0x08024994

08012d5c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b08c      	sub	sp, #48	; 0x30
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
 8012d64:	460b      	mov	r3, r1
 8012d66:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d109      	bne.n	8012d82 <netconn_close_shutdown+0x26>
 8012d6e:	4b0f      	ldr	r3, [pc, #60]	; (8012dac <netconn_close_shutdown+0x50>)
 8012d70:	f240 4247 	movw	r2, #1095	; 0x447
 8012d74:	490e      	ldr	r1, [pc, #56]	; (8012db0 <netconn_close_shutdown+0x54>)
 8012d76:	480f      	ldr	r0, [pc, #60]	; (8012db4 <netconn_close_shutdown+0x58>)
 8012d78:	f00f ffda 	bl	8022d30 <iprintf>
 8012d7c:	f06f 030f 	mvn.w	r3, #15
 8012d80:	e010      	b.n	8012da4 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8012d86:	78fb      	ldrb	r3, [r7, #3]
 8012d88:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8012d8a:	2329      	movs	r3, #41	; 0x29
 8012d8c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8012d8e:	f107 030c 	add.w	r3, r7, #12
 8012d92:	4619      	mov	r1, r3
 8012d94:	4808      	ldr	r0, [pc, #32]	; (8012db8 <netconn_close_shutdown+0x5c>)
 8012d96:	f7ff fbbf 	bl	8012518 <netconn_apimsg>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8012da0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8012da4:	4618      	mov	r0, r3
 8012da6:	3730      	adds	r7, #48	; 0x30
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}
 8012dac:	08024644 	.word	0x08024644
 8012db0:	080249b8 	.word	0x080249b8
 8012db4:	080246d4 	.word	0x080246d4
 8012db8:	0801450d 	.word	0x0801450d

08012dbc <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8012dc4:	2103      	movs	r1, #3
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f7ff ffc8 	bl	8012d5c <netconn_close_shutdown>
 8012dcc:	4603      	mov	r3, r0
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	3708      	adds	r7, #8
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}

08012dd6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8012dd6:	b580      	push	{r7, lr}
 8012dd8:	b084      	sub	sp, #16
 8012dda:	af00      	add	r7, sp, #0
 8012ddc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d101      	bne.n	8012de8 <netconn_err+0x12>
    return ERR_OK;
 8012de4:	2300      	movs	r3, #0
 8012de6:	e00d      	b.n	8012e04 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8012de8:	f005 ff56 	bl	8018c98 <sys_arch_protect>
 8012dec:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	7a1b      	ldrb	r3, [r3, #8]
 8012df2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	2200      	movs	r2, #0
 8012df8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8012dfa:	68f8      	ldr	r0, [r7, #12]
 8012dfc:	f005 ff5a 	bl	8018cb4 <sys_arch_unprotect>
  return err;
 8012e00:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012e04:	4618      	mov	r0, r3
 8012e06:	3710      	adds	r7, #16
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	4603      	mov	r3, r0
 8012e14:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8012e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e1a:	f113 0f0d 	cmn.w	r3, #13
 8012e1e:	d009      	beq.n	8012e34 <lwip_netconn_err_to_msg+0x28>
 8012e20:	f113 0f0d 	cmn.w	r3, #13
 8012e24:	dc0c      	bgt.n	8012e40 <lwip_netconn_err_to_msg+0x34>
 8012e26:	f113 0f0f 	cmn.w	r3, #15
 8012e2a:	d007      	beq.n	8012e3c <lwip_netconn_err_to_msg+0x30>
 8012e2c:	f113 0f0e 	cmn.w	r3, #14
 8012e30:	d002      	beq.n	8012e38 <lwip_netconn_err_to_msg+0x2c>
 8012e32:	e005      	b.n	8012e40 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8012e34:	4b0a      	ldr	r3, [pc, #40]	; (8012e60 <lwip_netconn_err_to_msg+0x54>)
 8012e36:	e00e      	b.n	8012e56 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8012e38:	4b0a      	ldr	r3, [pc, #40]	; (8012e64 <lwip_netconn_err_to_msg+0x58>)
 8012e3a:	e00c      	b.n	8012e56 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8012e3c:	4b0a      	ldr	r3, [pc, #40]	; (8012e68 <lwip_netconn_err_to_msg+0x5c>)
 8012e3e:	e00a      	b.n	8012e56 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8012e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d005      	beq.n	8012e54 <lwip_netconn_err_to_msg+0x48>
 8012e48:	4b08      	ldr	r3, [pc, #32]	; (8012e6c <lwip_netconn_err_to_msg+0x60>)
 8012e4a:	227d      	movs	r2, #125	; 0x7d
 8012e4c:	4908      	ldr	r1, [pc, #32]	; (8012e70 <lwip_netconn_err_to_msg+0x64>)
 8012e4e:	4809      	ldr	r0, [pc, #36]	; (8012e74 <lwip_netconn_err_to_msg+0x68>)
 8012e50:	f00f ff6e 	bl	8022d30 <iprintf>
      return NULL;
 8012e54:	2300      	movs	r3, #0
  }
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3708      	adds	r7, #8
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	080284b4 	.word	0x080284b4
 8012e64:	080284b5 	.word	0x080284b5
 8012e68:	080284b6 	.word	0x080284b6
 8012e6c:	080249d4 	.word	0x080249d4
 8012e70:	08024a40 	.word	0x08024a40
 8012e74:	08024a50 	.word	0x08024a50

08012e78 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	6078      	str	r0, [r7, #4]
 8012e80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d105      	bne.n	8012e94 <lwip_netconn_is_err_msg+0x1c>
 8012e88:	4b12      	ldr	r3, [pc, #72]	; (8012ed4 <lwip_netconn_is_err_msg+0x5c>)
 8012e8a:	2285      	movs	r2, #133	; 0x85
 8012e8c:	4912      	ldr	r1, [pc, #72]	; (8012ed8 <lwip_netconn_is_err_msg+0x60>)
 8012e8e:	4813      	ldr	r0, [pc, #76]	; (8012edc <lwip_netconn_is_err_msg+0x64>)
 8012e90:	f00f ff4e 	bl	8022d30 <iprintf>

  if (msg == &netconn_aborted) {
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	4a12      	ldr	r2, [pc, #72]	; (8012ee0 <lwip_netconn_is_err_msg+0x68>)
 8012e98:	4293      	cmp	r3, r2
 8012e9a:	d104      	bne.n	8012ea6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8012e9c:	683b      	ldr	r3, [r7, #0]
 8012e9e:	22f3      	movs	r2, #243	; 0xf3
 8012ea0:	701a      	strb	r2, [r3, #0]
    return 1;
 8012ea2:	2301      	movs	r3, #1
 8012ea4:	e012      	b.n	8012ecc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	4a0e      	ldr	r2, [pc, #56]	; (8012ee4 <lwip_netconn_is_err_msg+0x6c>)
 8012eaa:	4293      	cmp	r3, r2
 8012eac:	d104      	bne.n	8012eb8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8012eae:	683b      	ldr	r3, [r7, #0]
 8012eb0:	22f2      	movs	r2, #242	; 0xf2
 8012eb2:	701a      	strb	r2, [r3, #0]
    return 1;
 8012eb4:	2301      	movs	r3, #1
 8012eb6:	e009      	b.n	8012ecc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	4a0b      	ldr	r2, [pc, #44]	; (8012ee8 <lwip_netconn_is_err_msg+0x70>)
 8012ebc:	4293      	cmp	r3, r2
 8012ebe:	d104      	bne.n	8012eca <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	22f1      	movs	r2, #241	; 0xf1
 8012ec4:	701a      	strb	r2, [r3, #0]
    return 1;
 8012ec6:	2301      	movs	r3, #1
 8012ec8:	e000      	b.n	8012ecc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8012eca:	2300      	movs	r3, #0
}
 8012ecc:	4618      	mov	r0, r3
 8012ece:	3708      	adds	r7, #8
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	bd80      	pop	{r7, pc}
 8012ed4:	080249d4 	.word	0x080249d4
 8012ed8:	08024a78 	.word	0x08024a78
 8012edc:	08024a50 	.word	0x08024a50
 8012ee0:	080284b4 	.word	0x080284b4
 8012ee4:	080284b5 	.word	0x080284b5
 8012ee8:	080284b6 	.word	0x080284b6

08012eec <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b088      	sub	sp, #32
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	60b9      	str	r1, [r7, #8]
 8012ef6:	607a      	str	r2, [r7, #4]
 8012ef8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8012efa:	68bb      	ldr	r3, [r7, #8]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d105      	bne.n	8012f0c <recv_udp+0x20>
 8012f00:	4b40      	ldr	r3, [pc, #256]	; (8013004 <recv_udp+0x118>)
 8012f02:	22e5      	movs	r2, #229	; 0xe5
 8012f04:	4940      	ldr	r1, [pc, #256]	; (8013008 <recv_udp+0x11c>)
 8012f06:	4841      	ldr	r0, [pc, #260]	; (801300c <recv_udp+0x120>)
 8012f08:	f00f ff12 	bl	8022d30 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d105      	bne.n	8012f1e <recv_udp+0x32>
 8012f12:	4b3c      	ldr	r3, [pc, #240]	; (8013004 <recv_udp+0x118>)
 8012f14:	22e6      	movs	r2, #230	; 0xe6
 8012f16:	493e      	ldr	r1, [pc, #248]	; (8013010 <recv_udp+0x124>)
 8012f18:	483c      	ldr	r0, [pc, #240]	; (801300c <recv_udp+0x120>)
 8012f1a:	f00f ff09 	bl	8022d30 <iprintf>
  conn = (struct netconn *)arg;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8012f22:	69fb      	ldr	r3, [r7, #28]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d103      	bne.n	8012f30 <recv_udp+0x44>
    pbuf_free(p);
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f005 fa83 	bl	8018434 <pbuf_free>
    return;
 8012f2e:	e066      	b.n	8012ffe <recv_udp+0x112>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	685b      	ldr	r3, [r3, #4]
 8012f34:	68ba      	ldr	r2, [r7, #8]
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d005      	beq.n	8012f46 <recv_udp+0x5a>
 8012f3a:	4b32      	ldr	r3, [pc, #200]	; (8013004 <recv_udp+0x118>)
 8012f3c:	22ee      	movs	r2, #238	; 0xee
 8012f3e:	4935      	ldr	r1, [pc, #212]	; (8013014 <recv_udp+0x128>)
 8012f40:	4832      	ldr	r0, [pc, #200]	; (801300c <recv_udp+0x120>)
 8012f42:	f00f fef5 	bl	8022d30 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	3310      	adds	r3, #16
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f005 fd9a 	bl	8018a84 <sys_mbox_valid>
 8012f50:	4603      	mov	r3, r0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d103      	bne.n	8012f5e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8012f56:	6878      	ldr	r0, [r7, #4]
 8012f58:	f005 fa6c 	bl	8018434 <pbuf_free>
    return;
 8012f5c:	e04f      	b.n	8012ffe <recv_udp+0x112>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012f5e:	2006      	movs	r0, #6
 8012f60:	f004 fafe 	bl	8017560 <memp_malloc>
 8012f64:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d103      	bne.n	8012f74 <recv_udp+0x88>
    pbuf_free(p);
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f005 fa61 	bl	8018434 <pbuf_free>
    return;
 8012f72:	e044      	b.n	8012ffe <recv_udp+0x112>
  } else {
    buf->p = p;
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	687a      	ldr	r2, [r7, #4]
 8012f78:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8012f7a:	69bb      	ldr	r3, [r7, #24]
 8012f7c:	687a      	ldr	r2, [r7, #4]
 8012f7e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d002      	beq.n	8012f8c <recv_udp+0xa0>
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	e000      	b.n	8012f8e <recv_udp+0xa2>
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	69ba      	ldr	r2, [r7, #24]
 8012f90:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8012f92:	69bb      	ldr	r3, [r7, #24]
 8012f94:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012f96:	819a      	strh	r2, [r3, #12]
#if LWIP_NETBUF_RECVINFO
    if (conn->flags & NETCONN_FLAG_PKTINFO) {
 8012f98:	69fb      	ldr	r3, [r7, #28]
 8012f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d011      	beq.n	8012fca <recv_udp+0xde>
      /* get the UDP header - always in the first pbuf, ensured by udp_input */
      const struct udp_hdr *udphdr = (const struct udp_hdr *)ip_next_header_ptr();
 8012fa6:	4b1c      	ldr	r3, [pc, #112]	; (8013018 <recv_udp+0x12c>)
 8012fa8:	689b      	ldr	r3, [r3, #8]
 8012faa:	4a1b      	ldr	r2, [pc, #108]	; (8013018 <recv_udp+0x12c>)
 8012fac:	8992      	ldrh	r2, [r2, #12]
 8012fae:	4413      	add	r3, r2
 8012fb0:	617b      	str	r3, [r7, #20]
      buf->flags = NETBUF_FLAG_DESTADDR;
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	2201      	movs	r2, #1
 8012fb6:	739a      	strb	r2, [r3, #14]
      ip_addr_set(&buf->toaddr, ip_current_dest_addr());
 8012fb8:	4b17      	ldr	r3, [pc, #92]	; (8013018 <recv_udp+0x12c>)
 8012fba:	695a      	ldr	r2, [r3, #20]
 8012fbc:	69bb      	ldr	r3, [r7, #24]
 8012fbe:	615a      	str	r2, [r3, #20]
      buf->toport_chksum = udphdr->dest;
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	885b      	ldrh	r3, [r3, #2]
 8012fc4:	b29a      	uxth	r2, r3
 8012fc6:	69bb      	ldr	r3, [r7, #24]
 8012fc8:	821a      	strh	r2, [r3, #16]
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	891b      	ldrh	r3, [r3, #8]
 8012fce:	827b      	strh	r3, [r7, #18]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8012fd0:	69fb      	ldr	r3, [r7, #28]
 8012fd2:	3310      	adds	r3, #16
 8012fd4:	69b9      	ldr	r1, [r7, #24]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f005 fcf2 	bl	80189c0 <sys_mbox_trypost>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d003      	beq.n	8012fea <recv_udp+0xfe>
    netbuf_delete(buf);
 8012fe2:	69b8      	ldr	r0, [r7, #24]
 8012fe4:	f004 fb5c 	bl	80176a0 <netbuf_delete>
    return;
 8012fe8:	e009      	b.n	8012ffe <recv_udp+0x112>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8012fea:	69fb      	ldr	r3, [r7, #28]
 8012fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d005      	beq.n	8012ffe <recv_udp+0x112>
 8012ff2:	69fb      	ldr	r3, [r7, #28]
 8012ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ff6:	8a7a      	ldrh	r2, [r7, #18]
 8012ff8:	2100      	movs	r1, #0
 8012ffa:	69f8      	ldr	r0, [r7, #28]
 8012ffc:	4798      	blx	r3
  }
}
 8012ffe:	3720      	adds	r7, #32
 8013000:	46bd      	mov	sp, r7
 8013002:	bd80      	pop	{r7, pc}
 8013004:	080249d4 	.word	0x080249d4
 8013008:	08024a84 	.word	0x08024a84
 801300c:	08024a50 	.word	0x08024a50
 8013010:	08024aa8 	.word	0x08024aa8
 8013014:	08024ac8 	.word	0x08024ac8
 8013018:	20018f08 	.word	0x20018f08

0801301c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b088      	sub	sp, #32
 8013020:	af00      	add	r7, sp, #0
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	60b9      	str	r1, [r7, #8]
 8013026:	607a      	str	r2, [r7, #4]
 8013028:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d106      	bne.n	801303e <recv_tcp+0x22>
 8013030:	4b36      	ldr	r3, [pc, #216]	; (801310c <recv_tcp+0xf0>)
 8013032:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013036:	4936      	ldr	r1, [pc, #216]	; (8013110 <recv_tcp+0xf4>)
 8013038:	4836      	ldr	r0, [pc, #216]	; (8013114 <recv_tcp+0xf8>)
 801303a:	f00f fe79 	bl	8022d30 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d106      	bne.n	8013052 <recv_tcp+0x36>
 8013044:	4b31      	ldr	r3, [pc, #196]	; (801310c <recv_tcp+0xf0>)
 8013046:	f240 122d 	movw	r2, #301	; 0x12d
 801304a:	4933      	ldr	r1, [pc, #204]	; (8013118 <recv_tcp+0xfc>)
 801304c:	4831      	ldr	r0, [pc, #196]	; (8013114 <recv_tcp+0xf8>)
 801304e:	f00f fe6f 	bl	8022d30 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8013052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d006      	beq.n	8013068 <recv_tcp+0x4c>
 801305a:	4b2c      	ldr	r3, [pc, #176]	; (801310c <recv_tcp+0xf0>)
 801305c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8013060:	492e      	ldr	r1, [pc, #184]	; (801311c <recv_tcp+0x100>)
 8013062:	482c      	ldr	r0, [pc, #176]	; (8013114 <recv_tcp+0xf8>)
 8013064:	f00f fe64 	bl	8022d30 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	2b00      	cmp	r3, #0
 8013070:	d102      	bne.n	8013078 <recv_tcp+0x5c>
    return ERR_VAL;
 8013072:	f06f 0305 	mvn.w	r3, #5
 8013076:	e045      	b.n	8013104 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	68ba      	ldr	r2, [r7, #8]
 801307e:	429a      	cmp	r2, r3
 8013080:	d006      	beq.n	8013090 <recv_tcp+0x74>
 8013082:	4b22      	ldr	r3, [pc, #136]	; (801310c <recv_tcp+0xf0>)
 8013084:	f240 1235 	movw	r2, #309	; 0x135
 8013088:	4925      	ldr	r1, [pc, #148]	; (8013120 <recv_tcp+0x104>)
 801308a:	4822      	ldr	r0, [pc, #136]	; (8013114 <recv_tcp+0xf8>)
 801308c:	f00f fe50 	bl	8022d30 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	3310      	adds	r3, #16
 8013094:	4618      	mov	r0, r3
 8013096:	f005 fcf5 	bl	8018a84 <sys_mbox_valid>
 801309a:	4603      	mov	r3, r0
 801309c:	2b00      	cmp	r3, #0
 801309e:	d10d      	bne.n	80130bc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d008      	beq.n	80130b8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	891b      	ldrh	r3, [r3, #8]
 80130aa:	4619      	mov	r1, r3
 80130ac:	68b8      	ldr	r0, [r7, #8]
 80130ae:	f006 fa75 	bl	801959c <tcp_recved>
      pbuf_free(p);
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f005 f9be 	bl	8018434 <pbuf_free>
    }
    return ERR_OK;
 80130b8:	2300      	movs	r3, #0
 80130ba:	e023      	b.n	8013104 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d005      	beq.n	80130ce <recv_tcp+0xb2>
    msg = p;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	891b      	ldrh	r3, [r3, #8]
 80130ca:	83fb      	strh	r3, [r7, #30]
 80130cc:	e003      	b.n	80130d6 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80130ce:	4b15      	ldr	r3, [pc, #84]	; (8013124 <recv_tcp+0x108>)
 80130d0:	61bb      	str	r3, [r7, #24]
    len = 0;
 80130d2:	2300      	movs	r3, #0
 80130d4:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	3310      	adds	r3, #16
 80130da:	69b9      	ldr	r1, [r7, #24]
 80130dc:	4618      	mov	r0, r3
 80130de:	f005 fc6f 	bl	80189c0 <sys_mbox_trypost>
 80130e2:	4603      	mov	r3, r0
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d002      	beq.n	80130ee <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80130e8:	f04f 33ff 	mov.w	r3, #4294967295
 80130ec:	e00a      	b.n	8013104 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80130ee:	697b      	ldr	r3, [r7, #20]
 80130f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d005      	beq.n	8013102 <recv_tcp+0xe6>
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130fa:	8bfa      	ldrh	r2, [r7, #30]
 80130fc:	2100      	movs	r1, #0
 80130fe:	6978      	ldr	r0, [r7, #20]
 8013100:	4798      	blx	r3
  }

  return ERR_OK;
 8013102:	2300      	movs	r3, #0
}
 8013104:	4618      	mov	r0, r3
 8013106:	3720      	adds	r7, #32
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	080249d4 	.word	0x080249d4
 8013110:	08024ae8 	.word	0x08024ae8
 8013114:	08024a50 	.word	0x08024a50
 8013118:	08024b0c 	.word	0x08024b0c
 801311c:	08024b2c 	.word	0x08024b2c
 8013120:	08024b44 	.word	0x08024b44
 8013124:	080284b6 	.word	0x080284b6

08013128 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d106      	bne.n	801314a <poll_tcp+0x22>
 801313c:	4b2b      	ldr	r3, [pc, #172]	; (80131ec <poll_tcp+0xc4>)
 801313e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8013142:	492b      	ldr	r1, [pc, #172]	; (80131f0 <poll_tcp+0xc8>)
 8013144:	482b      	ldr	r0, [pc, #172]	; (80131f4 <poll_tcp+0xcc>)
 8013146:	f00f fdf3 	bl	8022d30 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	785b      	ldrb	r3, [r3, #1]
 801314e:	2b01      	cmp	r3, #1
 8013150:	d104      	bne.n	801315c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8013152:	2101      	movs	r1, #1
 8013154:	68f8      	ldr	r0, [r7, #12]
 8013156:	f000 ff7d 	bl	8014054 <lwip_netconn_do_writemore>
 801315a:	e016      	b.n	801318a <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	785b      	ldrb	r3, [r3, #1]
 8013160:	2b04      	cmp	r3, #4
 8013162:	d112      	bne.n	801318a <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013168:	2b00      	cmp	r3, #0
 801316a:	d00a      	beq.n	8013182 <poll_tcp+0x5a>
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013170:	7a5b      	ldrb	r3, [r3, #9]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d005      	beq.n	8013182 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801317a:	7a5a      	ldrb	r2, [r3, #9]
 801317c:	3a01      	subs	r2, #1
 801317e:	b2d2      	uxtb	r2, r2
 8013180:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8013182:	2101      	movs	r1, #1
 8013184:	68f8      	ldr	r0, [r7, #12]
 8013186:	f000 fb4d 	bl	8013824 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013190:	f003 0310 	and.w	r3, r3, #16
 8013194:	2b00      	cmp	r3, #0
 8013196:	d023      	beq.n	80131e0 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d01f      	beq.n	80131e0 <poll_tcp+0xb8>
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	685b      	ldr	r3, [r3, #4]
 80131a4:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80131a8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80131ac:	d318      	bcc.n	80131e0 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80131b6:	2b04      	cmp	r3, #4
 80131b8:	d812      	bhi.n	80131e0 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80131c0:	f023 0310 	bic.w	r3, r3, #16
 80131c4:	b2da      	uxtb	r2, r3
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d005      	beq.n	80131e0 <poll_tcp+0xb8>
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131d8:	2200      	movs	r2, #0
 80131da:	2102      	movs	r1, #2
 80131dc:	68f8      	ldr	r0, [r7, #12]
 80131de:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80131e0:	2300      	movs	r3, #0
}
 80131e2:	4618      	mov	r0, r3
 80131e4:	3710      	adds	r7, #16
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}
 80131ea:	bf00      	nop
 80131ec:	080249d4 	.word	0x080249d4
 80131f0:	08024b64 	.word	0x08024b64
 80131f4:	08024a50 	.word	0x08024a50

080131f8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b086      	sub	sp, #24
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	4613      	mov	r3, r2
 8013204:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801320a:	697b      	ldr	r3, [r7, #20]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d106      	bne.n	801321e <sent_tcp+0x26>
 8013210:	4b21      	ldr	r3, [pc, #132]	; (8013298 <sent_tcp+0xa0>)
 8013212:	f240 1293 	movw	r2, #403	; 0x193
 8013216:	4921      	ldr	r1, [pc, #132]	; (801329c <sent_tcp+0xa4>)
 8013218:	4821      	ldr	r0, [pc, #132]	; (80132a0 <sent_tcp+0xa8>)
 801321a:	f00f fd89 	bl	8022d30 <iprintf>

  if (conn) {
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d034      	beq.n	801328e <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	785b      	ldrb	r3, [r3, #1]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d104      	bne.n	8013236 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801322c:	2101      	movs	r1, #1
 801322e:	6978      	ldr	r0, [r7, #20]
 8013230:	f000 ff10 	bl	8014054 <lwip_netconn_do_writemore>
 8013234:	e007      	b.n	8013246 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	785b      	ldrb	r3, [r3, #1]
 801323a:	2b04      	cmp	r3, #4
 801323c:	d103      	bne.n	8013246 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801323e:	2101      	movs	r1, #1
 8013240:	6978      	ldr	r0, [r7, #20]
 8013242:	f000 faef 	bl	8013824 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	685b      	ldr	r3, [r3, #4]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d01f      	beq.n	801328e <sent_tcp+0x96>
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8013256:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801325a:	d318      	bcc.n	801328e <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	685b      	ldr	r3, [r3, #4]
 8013260:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8013264:	2b04      	cmp	r3, #4
 8013266:	d812      	bhi.n	801328e <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801326e:	f023 0310 	bic.w	r3, r3, #16
 8013272:	b2da      	uxtb	r2, r3
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801327e:	2b00      	cmp	r3, #0
 8013280:	d005      	beq.n	801328e <sent_tcp+0x96>
 8013282:	697b      	ldr	r3, [r7, #20]
 8013284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013286:	88fa      	ldrh	r2, [r7, #6]
 8013288:	2102      	movs	r1, #2
 801328a:	6978      	ldr	r0, [r7, #20]
 801328c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801328e:	2300      	movs	r3, #0
}
 8013290:	4618      	mov	r0, r3
 8013292:	3718      	adds	r7, #24
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	080249d4 	.word	0x080249d4
 801329c:	08024b64 	.word	0x08024b64
 80132a0:	08024a50 	.word	0x08024a50

080132a4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b088      	sub	sp, #32
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	460b      	mov	r3, r1
 80132ae:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80132b4:	69fb      	ldr	r3, [r7, #28]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d106      	bne.n	80132c8 <err_tcp+0x24>
 80132ba:	4b61      	ldr	r3, [pc, #388]	; (8013440 <err_tcp+0x19c>)
 80132bc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80132c0:	4960      	ldr	r1, [pc, #384]	; (8013444 <err_tcp+0x1a0>)
 80132c2:	4861      	ldr	r0, [pc, #388]	; (8013448 <err_tcp+0x1a4>)
 80132c4:	f00f fd34 	bl	8022d30 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80132c8:	f005 fce6 	bl	8018c98 <sys_arch_protect>
 80132cc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	2200      	movs	r2, #0
 80132d2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	78fa      	ldrb	r2, [r7, #3]
 80132d8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80132da:	69fb      	ldr	r3, [r7, #28]
 80132dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80132e0:	f043 0301 	orr.w	r3, r3, #1
 80132e4:	b2da      	uxtb	r2, r3
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	785b      	ldrb	r3, [r3, #1]
 80132f0:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	2200      	movs	r2, #0
 80132f6:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80132f8:	69b8      	ldr	r0, [r7, #24]
 80132fa:	f005 fcdb 	bl	8018cb4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80132fe:	69fb      	ldr	r3, [r7, #28]
 8013300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013302:	2b00      	cmp	r3, #0
 8013304:	d005      	beq.n	8013312 <err_tcp+0x6e>
 8013306:	69fb      	ldr	r3, [r7, #28]
 8013308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801330a:	2200      	movs	r2, #0
 801330c:	2104      	movs	r1, #4
 801330e:	69f8      	ldr	r0, [r7, #28]
 8013310:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8013312:	69fb      	ldr	r3, [r7, #28]
 8013314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013316:	2b00      	cmp	r3, #0
 8013318:	d005      	beq.n	8013326 <err_tcp+0x82>
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801331e:	2200      	movs	r2, #0
 8013320:	2100      	movs	r1, #0
 8013322:	69f8      	ldr	r0, [r7, #28]
 8013324:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8013326:	69fb      	ldr	r3, [r7, #28]
 8013328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801332a:	2b00      	cmp	r3, #0
 801332c:	d005      	beq.n	801333a <err_tcp+0x96>
 801332e:	69fb      	ldr	r3, [r7, #28]
 8013330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013332:	2200      	movs	r2, #0
 8013334:	2102      	movs	r1, #2
 8013336:	69f8      	ldr	r0, [r7, #28]
 8013338:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 801333a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801333e:	4618      	mov	r0, r3
 8013340:	f7ff fd64 	bl	8012e0c <lwip_netconn_err_to_msg>
 8013344:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8013346:	69fb      	ldr	r3, [r7, #28]
 8013348:	3310      	adds	r3, #16
 801334a:	4618      	mov	r0, r3
 801334c:	f005 fb9a 	bl	8018a84 <sys_mbox_valid>
 8013350:	4603      	mov	r3, r0
 8013352:	2b00      	cmp	r3, #0
 8013354:	d005      	beq.n	8013362 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	3310      	adds	r3, #16
 801335a:	6939      	ldr	r1, [r7, #16]
 801335c:	4618      	mov	r0, r3
 801335e:	f005 fb2f 	bl	80189c0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8013362:	69fb      	ldr	r3, [r7, #28]
 8013364:	3314      	adds	r3, #20
 8013366:	4618      	mov	r0, r3
 8013368:	f005 fb8c 	bl	8018a84 <sys_mbox_valid>
 801336c:	4603      	mov	r3, r0
 801336e:	2b00      	cmp	r3, #0
 8013370:	d005      	beq.n	801337e <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8013372:	69fb      	ldr	r3, [r7, #28]
 8013374:	3314      	adds	r3, #20
 8013376:	6939      	ldr	r1, [r7, #16]
 8013378:	4618      	mov	r0, r3
 801337a:	f005 fb21 	bl	80189c0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 801337e:	7dfb      	ldrb	r3, [r7, #23]
 8013380:	2b01      	cmp	r3, #1
 8013382:	d005      	beq.n	8013390 <err_tcp+0xec>
 8013384:	7dfb      	ldrb	r3, [r7, #23]
 8013386:	2b04      	cmp	r3, #4
 8013388:	d002      	beq.n	8013390 <err_tcp+0xec>
 801338a:	7dfb      	ldrb	r3, [r7, #23]
 801338c:	2b03      	cmp	r3, #3
 801338e:	d146      	bne.n	801341e <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8013390:	69fb      	ldr	r3, [r7, #28]
 8013392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013396:	f003 0304 	and.w	r3, r3, #4
 801339a:	2b00      	cmp	r3, #0
 801339c:	bf14      	ite	ne
 801339e:	2301      	movne	r3, #1
 80133a0:	2300      	moveq	r3, #0
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133ac:	f023 0304 	bic.w	r3, r3, #4
 80133b0:	b2da      	uxtb	r2, r3
 80133b2:	69fb      	ldr	r3, [r7, #28]
 80133b4:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d13b      	bne.n	8013436 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80133be:	69fb      	ldr	r3, [r7, #28]
 80133c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d106      	bne.n	80133d4 <err_tcp+0x130>
 80133c6:	4b1e      	ldr	r3, [pc, #120]	; (8013440 <err_tcp+0x19c>)
 80133c8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80133cc:	491f      	ldr	r1, [pc, #124]	; (801344c <err_tcp+0x1a8>)
 80133ce:	481e      	ldr	r0, [pc, #120]	; (8013448 <err_tcp+0x1a4>)
 80133d0:	f00f fcae 	bl	8022d30 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80133d4:	7dfb      	ldrb	r3, [r7, #23]
 80133d6:	2b04      	cmp	r3, #4
 80133d8:	d104      	bne.n	80133e4 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80133da:	69fb      	ldr	r3, [r7, #28]
 80133dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133de:	2200      	movs	r2, #0
 80133e0:	711a      	strb	r2, [r3, #4]
 80133e2:	e003      	b.n	80133ec <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133e8:	78fa      	ldrb	r2, [r7, #3]
 80133ea:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80133ec:	69fb      	ldr	r3, [r7, #28]
 80133ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	330c      	adds	r3, #12
 80133f4:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80133f6:	68b8      	ldr	r0, [r7, #8]
 80133f8:	f005 fbd2 	bl	8018ba0 <sys_sem_valid>
 80133fc:	4603      	mov	r3, r0
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d106      	bne.n	8013410 <err_tcp+0x16c>
 8013402:	4b0f      	ldr	r3, [pc, #60]	; (8013440 <err_tcp+0x19c>)
 8013404:	f240 12ef 	movw	r2, #495	; 0x1ef
 8013408:	4911      	ldr	r1, [pc, #68]	; (8013450 <err_tcp+0x1ac>)
 801340a:	480f      	ldr	r0, [pc, #60]	; (8013448 <err_tcp+0x1a4>)
 801340c:	f00f fc90 	bl	8022d30 <iprintf>
      conn->current_msg = NULL;
 8013410:	69fb      	ldr	r3, [r7, #28]
 8013412:	2200      	movs	r2, #0
 8013414:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8013416:	68b8      	ldr	r0, [r7, #8]
 8013418:	f005 fba8 	bl	8018b6c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801341c:	e00b      	b.n	8013436 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 801341e:	69fb      	ldr	r3, [r7, #28]
 8013420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013422:	2b00      	cmp	r3, #0
 8013424:	d008      	beq.n	8013438 <err_tcp+0x194>
 8013426:	4b06      	ldr	r3, [pc, #24]	; (8013440 <err_tcp+0x19c>)
 8013428:	f240 12f7 	movw	r2, #503	; 0x1f7
 801342c:	4909      	ldr	r1, [pc, #36]	; (8013454 <err_tcp+0x1b0>)
 801342e:	4806      	ldr	r0, [pc, #24]	; (8013448 <err_tcp+0x1a4>)
 8013430:	f00f fc7e 	bl	8022d30 <iprintf>
  }
}
 8013434:	e000      	b.n	8013438 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8013436:	bf00      	nop
}
 8013438:	bf00      	nop
 801343a:	3720      	adds	r7, #32
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}
 8013440:	080249d4 	.word	0x080249d4
 8013444:	08024b64 	.word	0x08024b64
 8013448:	08024a50 	.word	0x08024a50
 801344c:	08024b74 	.word	0x08024b74
 8013450:	08024b90 	.word	0x08024b90
 8013454:	08024bac 	.word	0x08024bac

08013458 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b084      	sub	sp, #16
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8013466:	6879      	ldr	r1, [r7, #4]
 8013468:	68f8      	ldr	r0, [r7, #12]
 801346a:	f007 f891 	bl	801a590 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 801346e:	490a      	ldr	r1, [pc, #40]	; (8013498 <setup_tcp+0x40>)
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f007 f89f 	bl	801a5b4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8013476:	4909      	ldr	r1, [pc, #36]	; (801349c <setup_tcp+0x44>)
 8013478:	68f8      	ldr	r0, [r7, #12]
 801347a:	f007 f8bd 	bl	801a5f8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 801347e:	2202      	movs	r2, #2
 8013480:	4907      	ldr	r1, [pc, #28]	; (80134a0 <setup_tcp+0x48>)
 8013482:	68f8      	ldr	r0, [r7, #12]
 8013484:	f007 f914 	bl	801a6b0 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8013488:	4906      	ldr	r1, [pc, #24]	; (80134a4 <setup_tcp+0x4c>)
 801348a:	68f8      	ldr	r0, [r7, #12]
 801348c:	f007 f8d6 	bl	801a63c <tcp_err>
}
 8013490:	bf00      	nop
 8013492:	3710      	adds	r7, #16
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	0801301d 	.word	0x0801301d
 801349c:	080131f9 	.word	0x080131f9
 80134a0:	08013129 	.word	0x08013129
 80134a4:	080132a5 	.word	0x080132a5

080134a8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80134a8:	b590      	push	{r4, r7, lr}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80134b0:	2300      	movs	r3, #0
 80134b2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d006      	beq.n	80134cc <pcb_new+0x24>
 80134be:	4b2b      	ldr	r3, [pc, #172]	; (801356c <pcb_new+0xc4>)
 80134c0:	f240 2265 	movw	r2, #613	; 0x265
 80134c4:	492a      	ldr	r1, [pc, #168]	; (8013570 <pcb_new+0xc8>)
 80134c6:	482b      	ldr	r0, [pc, #172]	; (8013574 <pcb_new+0xcc>)
 80134c8:	f00f fc32 	bl	8022d30 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80134d6:	2b10      	cmp	r3, #16
 80134d8:	d022      	beq.n	8013520 <pcb_new+0x78>
 80134da:	2b20      	cmp	r3, #32
 80134dc:	d133      	bne.n	8013546 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	681c      	ldr	r4, [r3, #0]
 80134e2:	7bfb      	ldrb	r3, [r7, #15]
 80134e4:	4618      	mov	r0, r3
 80134e6:	f00c fc66 	bl	801fdb6 <udp_new_ip_type>
 80134ea:	4603      	mov	r3, r0
 80134ec:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	685b      	ldr	r3, [r3, #4]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d02a      	beq.n	801354e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	781b      	ldrb	r3, [r3, #0]
 80134fe:	2b22      	cmp	r3, #34	; 0x22
 8013500:	d104      	bne.n	801350c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	2201      	movs	r2, #1
 801350a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	6858      	ldr	r0, [r3, #4]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	461a      	mov	r2, r3
 8013518:	4917      	ldr	r1, [pc, #92]	; (8013578 <pcb_new+0xd0>)
 801351a:	f00c fbd3 	bl	801fcc4 <udp_recv>
      }
      break;
 801351e:	e016      	b.n	801354e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681c      	ldr	r4, [r3, #0]
 8013524:	7bfb      	ldrb	r3, [r7, #15]
 8013526:	4618      	mov	r0, r3
 8013528:	f007 f824 	bl	801a574 <tcp_new_ip_type>
 801352c:	4603      	mov	r3, r0
 801352e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	685b      	ldr	r3, [r3, #4]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d00b      	beq.n	8013552 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	4618      	mov	r0, r3
 8013540:	f7ff ff8a 	bl	8013458 <setup_tcp>
      }
      break;
 8013544:	e005      	b.n	8013552 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	22fa      	movs	r2, #250	; 0xfa
 801354a:	711a      	strb	r2, [r3, #4]
      return;
 801354c:	e00a      	b.n	8013564 <pcb_new+0xbc>
      break;
 801354e:	bf00      	nop
 8013550:	e000      	b.n	8013554 <pcb_new+0xac>
      break;
 8013552:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	685b      	ldr	r3, [r3, #4]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d102      	bne.n	8013564 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	22ff      	movs	r2, #255	; 0xff
 8013562:	711a      	strb	r2, [r3, #4]
  }
}
 8013564:	3714      	adds	r7, #20
 8013566:	46bd      	mov	sp, r7
 8013568:	bd90      	pop	{r4, r7, pc}
 801356a:	bf00      	nop
 801356c:	080249d4 	.word	0x080249d4
 8013570:	08024bf0 	.word	0x08024bf0
 8013574:	08024a50 	.word	0x08024a50
 8013578:	08012eed 	.word	0x08012eed

0801357c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b084      	sub	sp, #16
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2200      	movs	r2, #0
 801358c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d102      	bne.n	801359e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8013598:	68f8      	ldr	r0, [r7, #12]
 801359a:	f7ff ff85 	bl	80134a8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 801359e:	bf00      	nop
 80135a0:	3710      	adds	r7, #16
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
	...

080135a8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b086      	sub	sp, #24
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	4603      	mov	r3, r0
 80135b0:	6039      	str	r1, [r7, #0]
 80135b2:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80135b4:	2300      	movs	r3, #0
 80135b6:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80135b8:	2007      	movs	r0, #7
 80135ba:	f003 ffd1 	bl	8017560 <memp_malloc>
 80135be:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d101      	bne.n	80135ca <netconn_alloc+0x22>
    return NULL;
 80135c6:	2300      	movs	r3, #0
 80135c8:	e05a      	b.n	8013680 <netconn_alloc+0xd8>
  }

  conn->pending_err = ERR_OK;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	2200      	movs	r2, #0
 80135ce:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	79fa      	ldrb	r2, [r7, #7]
 80135d4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	2200      	movs	r2, #0
 80135da:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80135dc:	79fb      	ldrb	r3, [r7, #7]
 80135de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80135e2:	2b10      	cmp	r3, #16
 80135e4:	d008      	beq.n	80135f8 <netconn_alloc+0x50>
 80135e6:	2b20      	cmp	r3, #32
 80135e8:	d109      	bne.n	80135fe <netconn_alloc+0x56>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80135ea:	2306      	movs	r3, #6
 80135ec:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
 80135ee:	7cfb      	ldrb	r3, [r7, #19]
 80135f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135f4:	74fb      	strb	r3, [r7, #19]
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80135f6:	e00a      	b.n	801360e <netconn_alloc+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80135f8:	2306      	movs	r3, #6
 80135fa:	617b      	str	r3, [r7, #20]
      break;
 80135fc:	e007      	b.n	801360e <netconn_alloc+0x66>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80135fe:	4b22      	ldr	r3, [pc, #136]	; (8013688 <netconn_alloc+0xe0>)
 8013600:	f240 22e5 	movw	r2, #741	; 0x2e5
 8013604:	4921      	ldr	r1, [pc, #132]	; (801368c <netconn_alloc+0xe4>)
 8013606:	4822      	ldr	r0, [pc, #136]	; (8013690 <netconn_alloc+0xe8>)
 8013608:	f00f fb92 	bl	8022d30 <iprintf>
      goto free_and_return;
 801360c:	e033      	b.n	8013676 <netconn_alloc+0xce>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	3310      	adds	r3, #16
 8013612:	6979      	ldr	r1, [r7, #20]
 8013614:	4618      	mov	r0, r3
 8013616:	f005 f9a7 	bl	8018968 <sys_mbox_new>
 801361a:	4603      	mov	r3, r0
 801361c:	2b00      	cmp	r3, #0
 801361e:	d129      	bne.n	8013674 <netconn_alloc+0xcc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	330c      	adds	r3, #12
 8013624:	2100      	movs	r1, #0
 8013626:	4618      	mov	r0, r3
 8013628:	f005 fa4a 	bl	8018ac0 <sys_sem_new>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d005      	beq.n	801363e <netconn_alloc+0x96>
    sys_mbox_free(&conn->recvmbox);
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	3310      	adds	r3, #16
 8013636:	4618      	mov	r0, r3
 8013638:	f005 f9b0 	bl	801899c <sys_mbox_free>
    goto free_and_return;
 801363c:	e01b      	b.n	8013676 <netconn_alloc+0xce>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	3314      	adds	r3, #20
 8013642:	4618      	mov	r0, r3
 8013644:	f005 fa2f 	bl	8018aa6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	2200      	movs	r2, #0
 801364c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	f04f 32ff 	mov.w	r2, #4294967295
 8013654:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	683a      	ldr	r2, [r7, #0]
 801365a:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2200      	movs	r2, #0
 8013660:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	2200      	movs	r2, #0
 8013666:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	7cfa      	ldrb	r2, [r7, #19]
 801366c:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	e005      	b.n	8013680 <netconn_alloc+0xd8>
    goto free_and_return;
 8013674:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8013676:	68f9      	ldr	r1, [r7, #12]
 8013678:	2007      	movs	r0, #7
 801367a:	f003 ffe7 	bl	801764c <memp_free>
  return NULL;
 801367e:	2300      	movs	r3, #0
}
 8013680:	4618      	mov	r0, r3
 8013682:	3718      	adds	r7, #24
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}
 8013688:	080249d4 	.word	0x080249d4
 801368c:	08024c10 	.word	0x08024c10
 8013690:	08024a50 	.word	0x08024a50

08013694 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b082      	sub	sp, #8
 8013698:	af00      	add	r7, sp, #0
 801369a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d006      	beq.n	80136b2 <netconn_free+0x1e>
 80136a4:	4b1b      	ldr	r3, [pc, #108]	; (8013714 <netconn_free+0x80>)
 80136a6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80136aa:	491b      	ldr	r1, [pc, #108]	; (8013718 <netconn_free+0x84>)
 80136ac:	481b      	ldr	r0, [pc, #108]	; (801371c <netconn_free+0x88>)
 80136ae:	f00f fb3f 	bl	8022d30 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	3310      	adds	r3, #16
 80136b6:	4618      	mov	r0, r3
 80136b8:	f005 f9e4 	bl	8018a84 <sys_mbox_valid>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d006      	beq.n	80136d0 <netconn_free+0x3c>
 80136c2:	4b14      	ldr	r3, [pc, #80]	; (8013714 <netconn_free+0x80>)
 80136c4:	f240 3223 	movw	r2, #803	; 0x323
 80136c8:	4915      	ldr	r1, [pc, #84]	; (8013720 <netconn_free+0x8c>)
 80136ca:	4814      	ldr	r0, [pc, #80]	; (801371c <netconn_free+0x88>)
 80136cc:	f00f fb30 	bl	8022d30 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	3314      	adds	r3, #20
 80136d4:	4618      	mov	r0, r3
 80136d6:	f005 f9d5 	bl	8018a84 <sys_mbox_valid>
 80136da:	4603      	mov	r3, r0
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d006      	beq.n	80136ee <netconn_free+0x5a>
 80136e0:	4b0c      	ldr	r3, [pc, #48]	; (8013714 <netconn_free+0x80>)
 80136e2:	f240 3226 	movw	r2, #806	; 0x326
 80136e6:	490f      	ldr	r1, [pc, #60]	; (8013724 <netconn_free+0x90>)
 80136e8:	480c      	ldr	r0, [pc, #48]	; (801371c <netconn_free+0x88>)
 80136ea:	f00f fb21 	bl	8022d30 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	330c      	adds	r3, #12
 80136f2:	4618      	mov	r0, r3
 80136f4:	f005 fa47 	bl	8018b86 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	330c      	adds	r3, #12
 80136fc:	4618      	mov	r0, r3
 80136fe:	f005 fa60 	bl	8018bc2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8013702:	6879      	ldr	r1, [r7, #4]
 8013704:	2007      	movs	r0, #7
 8013706:	f003 ffa1 	bl	801764c <memp_free>
}
 801370a:	bf00      	nop
 801370c:	3708      	adds	r7, #8
 801370e:	46bd      	mov	sp, r7
 8013710:	bd80      	pop	{r7, pc}
 8013712:	bf00      	nop
 8013714:	080249d4 	.word	0x080249d4
 8013718:	08024c38 	.word	0x08024c38
 801371c:	08024a50 	.word	0x08024a50
 8013720:	08024c68 	.word	0x08024c68
 8013724:	08024ca4 	.word	0x08024ca4

08013728 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b086      	sub	sp, #24
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	3310      	adds	r3, #16
 8013734:	4618      	mov	r0, r3
 8013736:	f005 f9a5 	bl	8018a84 <sys_mbox_valid>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d02f      	beq.n	80137a0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8013740:	e018      	b.n	8013774 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	781b      	ldrb	r3, [r3, #0]
 8013746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801374a:	2b10      	cmp	r3, #16
 801374c:	d10e      	bne.n	801376c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	f107 020f 	add.w	r2, r7, #15
 8013754:	4611      	mov	r1, r2
 8013756:	4618      	mov	r0, r3
 8013758:	f7ff fb8e 	bl	8012e78 <lwip_netconn_is_err_msg>
 801375c:	4603      	mov	r3, r0
 801375e:	2b00      	cmp	r3, #0
 8013760:	d108      	bne.n	8013774 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	4618      	mov	r0, r3
 8013766:	f004 fe65 	bl	8018434 <pbuf_free>
 801376a:	e003      	b.n	8013774 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	4618      	mov	r0, r3
 8013770:	f003 ff96 	bl	80176a0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	3310      	adds	r3, #16
 8013778:	f107 0210 	add.w	r2, r7, #16
 801377c:	4611      	mov	r1, r2
 801377e:	4618      	mov	r0, r3
 8013780:	f005 f969 	bl	8018a56 <sys_arch_mbox_tryfetch>
 8013784:	4603      	mov	r3, r0
 8013786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801378a:	d1da      	bne.n	8013742 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	3310      	adds	r3, #16
 8013790:	4618      	mov	r0, r3
 8013792:	f005 f903 	bl	801899c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	3310      	adds	r3, #16
 801379a:	4618      	mov	r0, r3
 801379c:	f005 f983 	bl	8018aa6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	3314      	adds	r3, #20
 80137a4:	4618      	mov	r0, r3
 80137a6:	f005 f96d 	bl	8018a84 <sys_mbox_valid>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d034      	beq.n	801381a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80137b0:	e01d      	b.n	80137ee <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80137b2:	693b      	ldr	r3, [r7, #16]
 80137b4:	f107 020e 	add.w	r2, r7, #14
 80137b8:	4611      	mov	r1, r2
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7ff fb5c 	bl	8012e78 <lwip_netconn_is_err_msg>
 80137c0:	4603      	mov	r3, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d113      	bne.n	80137ee <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80137c6:	693b      	ldr	r3, [r7, #16]
 80137c8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80137ca:	6978      	ldr	r0, [r7, #20]
 80137cc:	f7ff ffac 	bl	8013728 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80137d0:	697b      	ldr	r3, [r7, #20]
 80137d2:	685b      	ldr	r3, [r3, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d007      	beq.n	80137e8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	685b      	ldr	r3, [r3, #4]
 80137dc:	4618      	mov	r0, r3
 80137de:	f005 fddf 	bl	80193a0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	2200      	movs	r2, #0
 80137e6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80137e8:	6978      	ldr	r0, [r7, #20]
 80137ea:	f7ff ff53 	bl	8013694 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	3314      	adds	r3, #20
 80137f2:	f107 0210 	add.w	r2, r7, #16
 80137f6:	4611      	mov	r1, r2
 80137f8:	4618      	mov	r0, r3
 80137fa:	f005 f92c 	bl	8018a56 <sys_arch_mbox_tryfetch>
 80137fe:	4603      	mov	r3, r0
 8013800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013804:	d1d5      	bne.n	80137b2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	3314      	adds	r3, #20
 801380a:	4618      	mov	r0, r3
 801380c:	f005 f8c6 	bl	801899c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	3314      	adds	r3, #20
 8013814:	4618      	mov	r0, r3
 8013816:	f005 f946 	bl	8018aa6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801381a:	bf00      	nop
 801381c:	3718      	adds	r7, #24
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
	...

08013824 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b086      	sub	sp, #24
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	460b      	mov	r3, r1
 801382e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8013830:	2300      	movs	r3, #0
 8013832:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d106      	bne.n	8013848 <lwip_netconn_do_close_internal+0x24>
 801383a:	4b87      	ldr	r3, [pc, #540]	; (8013a58 <lwip_netconn_do_close_internal+0x234>)
 801383c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8013840:	4986      	ldr	r1, [pc, #536]	; (8013a5c <lwip_netconn_do_close_internal+0x238>)
 8013842:	4887      	ldr	r0, [pc, #540]	; (8013a60 <lwip_netconn_do_close_internal+0x23c>)
 8013844:	f00f fa74 	bl	8022d30 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013850:	2b10      	cmp	r3, #16
 8013852:	d006      	beq.n	8013862 <lwip_netconn_do_close_internal+0x3e>
 8013854:	4b80      	ldr	r3, [pc, #512]	; (8013a58 <lwip_netconn_do_close_internal+0x234>)
 8013856:	f240 32a3 	movw	r2, #931	; 0x3a3
 801385a:	4982      	ldr	r1, [pc, #520]	; (8013a64 <lwip_netconn_do_close_internal+0x240>)
 801385c:	4880      	ldr	r0, [pc, #512]	; (8013a60 <lwip_netconn_do_close_internal+0x23c>)
 801385e:	f00f fa67 	bl	8022d30 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	785b      	ldrb	r3, [r3, #1]
 8013866:	2b04      	cmp	r3, #4
 8013868:	d006      	beq.n	8013878 <lwip_netconn_do_close_internal+0x54>
 801386a:	4b7b      	ldr	r3, [pc, #492]	; (8013a58 <lwip_netconn_do_close_internal+0x234>)
 801386c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8013870:	497d      	ldr	r1, [pc, #500]	; (8013a68 <lwip_netconn_do_close_internal+0x244>)
 8013872:	487b      	ldr	r0, [pc, #492]	; (8013a60 <lwip_netconn_do_close_internal+0x23c>)
 8013874:	f00f fa5c 	bl	8022d30 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	685b      	ldr	r3, [r3, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d106      	bne.n	801388e <lwip_netconn_do_close_internal+0x6a>
 8013880:	4b75      	ldr	r3, [pc, #468]	; (8013a58 <lwip_netconn_do_close_internal+0x234>)
 8013882:	f240 32a5 	movw	r2, #933	; 0x3a5
 8013886:	4979      	ldr	r1, [pc, #484]	; (8013a6c <lwip_netconn_do_close_internal+0x248>)
 8013888:	4875      	ldr	r0, [pc, #468]	; (8013a60 <lwip_netconn_do_close_internal+0x23c>)
 801388a:	f00f fa51 	bl	8022d30 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013892:	2b00      	cmp	r3, #0
 8013894:	d106      	bne.n	80138a4 <lwip_netconn_do_close_internal+0x80>
 8013896:	4b70      	ldr	r3, [pc, #448]	; (8013a58 <lwip_netconn_do_close_internal+0x234>)
 8013898:	f240 32a6 	movw	r2, #934	; 0x3a6
 801389c:	4974      	ldr	r1, [pc, #464]	; (8013a70 <lwip_netconn_do_close_internal+0x24c>)
 801389e:	4870      	ldr	r0, [pc, #448]	; (8013a60 <lwip_netconn_do_close_internal+0x23c>)
 80138a0:	f00f fa46 	bl	8022d30 <iprintf>

  tpcb = conn->pcb.tcp;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	685b      	ldr	r3, [r3, #4]
 80138a8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ae:	7a1b      	ldrb	r3, [r3, #8]
 80138b0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80138b2:	7bfb      	ldrb	r3, [r7, #15]
 80138b4:	f003 0301 	and.w	r3, r3, #1
 80138b8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80138ba:	7bfb      	ldrb	r3, [r7, #15]
 80138bc:	f003 0302 	and.w	r3, r3, #2
 80138c0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80138c2:	7bfb      	ldrb	r3, [r7, #15]
 80138c4:	2b03      	cmp	r3, #3
 80138c6:	d102      	bne.n	80138ce <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80138c8:	2301      	movs	r3, #1
 80138ca:	75bb      	strb	r3, [r7, #22]
 80138cc:	e01f      	b.n	801390e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80138ce:	7bbb      	ldrb	r3, [r7, #14]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d00e      	beq.n	80138f2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80138d4:	693b      	ldr	r3, [r7, #16]
 80138d6:	7f1b      	ldrb	r3, [r3, #28]
  } else if (shut_rx &&
 80138d8:	2b05      	cmp	r3, #5
 80138da:	d007      	beq.n	80138ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	7f1b      	ldrb	r3, [r3, #28]
             ((tpcb->state == FIN_WAIT_1) ||
 80138e0:	2b06      	cmp	r3, #6
 80138e2:	d003      	beq.n	80138ec <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80138e4:	693b      	ldr	r3, [r7, #16]
 80138e6:	7f1b      	ldrb	r3, [r3, #28]
              (tpcb->state == FIN_WAIT_2) ||
 80138e8:	2b08      	cmp	r3, #8
 80138ea:	d102      	bne.n	80138f2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80138ec:	2301      	movs	r3, #1
 80138ee:	75bb      	strb	r3, [r7, #22]
 80138f0:	e00d      	b.n	801390e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80138f2:	7b7b      	ldrb	r3, [r7, #13]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d008      	beq.n	801390a <lwip_netconn_do_close_internal+0xe6>
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80138fc:	f003 0310 	and.w	r3, r3, #16
 8013900:	2b00      	cmp	r3, #0
 8013902:	d002      	beq.n	801390a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8013904:	2301      	movs	r3, #1
 8013906:	75bb      	strb	r3, [r7, #22]
 8013908:	e001      	b.n	801390e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801390a:	2300      	movs	r3, #0
 801390c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801390e:	7dbb      	ldrb	r3, [r7, #22]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d003      	beq.n	801391c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8013914:	2100      	movs	r1, #0
 8013916:	6938      	ldr	r0, [r7, #16]
 8013918:	f006 fe3a 	bl	801a590 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	7f1b      	ldrb	r3, [r3, #28]
 8013920:	2b01      	cmp	r3, #1
 8013922:	d104      	bne.n	801392e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8013924:	2100      	movs	r1, #0
 8013926:	6938      	ldr	r0, [r7, #16]
 8013928:	f006 feaa 	bl	801a680 <tcp_accept>
 801392c:	e01d      	b.n	801396a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801392e:	7bbb      	ldrb	r3, [r7, #14]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d007      	beq.n	8013944 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8013934:	2100      	movs	r1, #0
 8013936:	6938      	ldr	r0, [r7, #16]
 8013938:	f006 fe3c 	bl	801a5b4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 801393c:	2100      	movs	r1, #0
 801393e:	6938      	ldr	r0, [r7, #16]
 8013940:	f006 fe9e 	bl	801a680 <tcp_accept>
    }
    if (shut_tx) {
 8013944:	7b7b      	ldrb	r3, [r7, #13]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d003      	beq.n	8013952 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801394a:	2100      	movs	r1, #0
 801394c:	6938      	ldr	r0, [r7, #16]
 801394e:	f006 fe53 	bl	801a5f8 <tcp_sent>
    }
    if (shut_close) {
 8013952:	7dbb      	ldrb	r3, [r7, #22]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d008      	beq.n	801396a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8013958:	2200      	movs	r2, #0
 801395a:	2100      	movs	r1, #0
 801395c:	6938      	ldr	r0, [r7, #16]
 801395e:	f006 fea7 	bl	801a6b0 <tcp_poll>
      tcp_err(tpcb, NULL);
 8013962:	2100      	movs	r1, #0
 8013964:	6938      	ldr	r0, [r7, #16]
 8013966:	f006 fe69 	bl	801a63c <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801396a:	7dbb      	ldrb	r3, [r7, #22]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d005      	beq.n	801397c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8013970:	6938      	ldr	r0, [r7, #16]
 8013972:	f005 fbcd 	bl	8019110 <tcp_close>
 8013976:	4603      	mov	r3, r0
 8013978:	75fb      	strb	r3, [r7, #23]
 801397a:	e007      	b.n	801398c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 801397c:	7bbb      	ldrb	r3, [r7, #14]
 801397e:	7b7a      	ldrb	r2, [r7, #13]
 8013980:	4619      	mov	r1, r3
 8013982:	6938      	ldr	r0, [r7, #16]
 8013984:	f005 fbf0 	bl	8019168 <tcp_shutdown>
 8013988:	4603      	mov	r3, r0
 801398a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 801398c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d102      	bne.n	801399a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8013994:	2301      	movs	r3, #1
 8013996:	757b      	strb	r3, [r7, #21]
 8013998:	e016      	b.n	80139c8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801399a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139a2:	d10f      	bne.n	80139c4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139a8:	7a5b      	ldrb	r3, [r3, #9]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d10c      	bne.n	80139c8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80139ae:	2301      	movs	r3, #1
 80139b0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80139b2:	7dbb      	ldrb	r3, [r7, #22]
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d007      	beq.n	80139c8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80139b8:	6938      	ldr	r0, [r7, #16]
 80139ba:	f005 fcf1 	bl	80193a0 <tcp_abort>
          err = ERR_OK;
 80139be:	2300      	movs	r3, #0
 80139c0:	75fb      	strb	r3, [r7, #23]
 80139c2:	e001      	b.n	80139c8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80139c4:	2301      	movs	r3, #1
 80139c6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80139c8:	7d7b      	ldrb	r3, [r7, #21]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d052      	beq.n	8013a74 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	330c      	adds	r3, #12
 80139d6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139dc:	7dfa      	ldrb	r2, [r7, #23]
 80139de:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2200      	movs	r2, #0
 80139e4:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2200      	movs	r2, #0
 80139ea:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80139ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d129      	bne.n	8013a48 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80139f4:	7dbb      	ldrb	r3, [r7, #22]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d00c      	beq.n	8013a14 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2200      	movs	r2, #0
 80139fe:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d005      	beq.n	8013a14 <lwip_netconn_do_close_internal+0x1f0>
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	2104      	movs	r1, #4
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	4798      	blx	r3
      }
      if (shut_rx) {
 8013a14:	7bbb      	ldrb	r3, [r7, #14]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d009      	beq.n	8013a2e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d005      	beq.n	8013a2e <lwip_netconn_do_close_internal+0x20a>
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a26:	2200      	movs	r2, #0
 8013a28:	2100      	movs	r1, #0
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	4798      	blx	r3
      }
      if (shut_tx) {
 8013a2e:	7b7b      	ldrb	r3, [r7, #13]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d009      	beq.n	8013a48 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d005      	beq.n	8013a48 <lwip_netconn_do_close_internal+0x224>
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a40:	2200      	movs	r2, #0
 8013a42:	2102      	movs	r1, #2
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8013a48:	78fb      	ldrb	r3, [r7, #3]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d002      	beq.n	8013a54 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8013a4e:	68b8      	ldr	r0, [r7, #8]
 8013a50:	f005 f88c 	bl	8018b6c <sys_sem_signal>
    }
    return ERR_OK;
 8013a54:	2300      	movs	r3, #0
 8013a56:	e03c      	b.n	8013ad2 <lwip_netconn_do_close_internal+0x2ae>
 8013a58:	080249d4 	.word	0x080249d4
 8013a5c:	08024ce0 	.word	0x08024ce0
 8013a60:	08024a50 	.word	0x08024a50
 8013a64:	08024cf0 	.word	0x08024cf0
 8013a68:	08024d10 	.word	0x08024d10
 8013a6c:	08024d34 	.word	0x08024d34
 8013a70:	08024b74 	.word	0x08024b74
  }
  if (!close_finished) {
 8013a74:	7d7b      	ldrb	r3, [r7, #21]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d11e      	bne.n	8013ab8 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	7f1b      	ldrb	r3, [r3, #28]
 8013a7e:	2b01      	cmp	r3, #1
 8013a80:	d106      	bne.n	8013a90 <lwip_netconn_do_close_internal+0x26c>
 8013a82:	4b16      	ldr	r3, [pc, #88]	; (8013adc <lwip_netconn_do_close_internal+0x2b8>)
 8013a84:	f240 4241 	movw	r2, #1089	; 0x441
 8013a88:	4915      	ldr	r1, [pc, #84]	; (8013ae0 <lwip_netconn_do_close_internal+0x2bc>)
 8013a8a:	4816      	ldr	r0, [pc, #88]	; (8013ae4 <lwip_netconn_do_close_internal+0x2c0>)
 8013a8c:	f00f f950 	bl	8022d30 <iprintf>
    if (shut_tx) {
 8013a90:	7b7b      	ldrb	r3, [r7, #13]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d003      	beq.n	8013a9e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8013a96:	4914      	ldr	r1, [pc, #80]	; (8013ae8 <lwip_netconn_do_close_internal+0x2c4>)
 8013a98:	6938      	ldr	r0, [r7, #16]
 8013a9a:	f006 fdad 	bl	801a5f8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8013a9e:	2201      	movs	r2, #1
 8013aa0:	4912      	ldr	r1, [pc, #72]	; (8013aec <lwip_netconn_do_close_internal+0x2c8>)
 8013aa2:	6938      	ldr	r0, [r7, #16]
 8013aa4:	f006 fe04 	bl	801a6b0 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8013aa8:	4911      	ldr	r1, [pc, #68]	; (8013af0 <lwip_netconn_do_close_internal+0x2cc>)
 8013aaa:	6938      	ldr	r0, [r7, #16]
 8013aac:	f006 fdc6 	bl	801a63c <tcp_err>
    tcp_arg(tpcb, conn);
 8013ab0:	6879      	ldr	r1, [r7, #4]
 8013ab2:	6938      	ldr	r0, [r7, #16]
 8013ab4:	f006 fd6c 	bl	801a590 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8013ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d106      	bne.n	8013ace <lwip_netconn_do_close_internal+0x2aa>
 8013ac0:	4b06      	ldr	r3, [pc, #24]	; (8013adc <lwip_netconn_do_close_internal+0x2b8>)
 8013ac2:	f240 424d 	movw	r2, #1101	; 0x44d
 8013ac6:	490b      	ldr	r1, [pc, #44]	; (8013af4 <lwip_netconn_do_close_internal+0x2d0>)
 8013ac8:	4806      	ldr	r0, [pc, #24]	; (8013ae4 <lwip_netconn_do_close_internal+0x2c0>)
 8013aca:	f00f f931 	bl	8022d30 <iprintf>
  return err;
 8013ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	3718      	adds	r7, #24
 8013ad6:	46bd      	mov	sp, r7
 8013ad8:	bd80      	pop	{r7, pc}
 8013ada:	bf00      	nop
 8013adc:	080249d4 	.word	0x080249d4
 8013ae0:	08024d48 	.word	0x08024d48
 8013ae4:	08024a50 	.word	0x08024a50
 8013ae8:	080131f9 	.word	0x080131f9
 8013aec:	08013129 	.word	0x08013129
 8013af0:	080132a5 	.word	0x080132a5
 8013af4:	08024d6c 	.word	0x08024d6c

08013af8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	b084      	sub	sp, #16
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	785b      	ldrb	r3, [r3, #1]
 8013b0a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8013b0c:	7afb      	ldrb	r3, [r7, #11]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00d      	beq.n	8013b2e <lwip_netconn_do_delconn+0x36>
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b1c:	2b10      	cmp	r3, #16
 8013b1e:	d006      	beq.n	8013b2e <lwip_netconn_do_delconn+0x36>
 8013b20:	4b61      	ldr	r3, [pc, #388]	; (8013ca8 <lwip_netconn_do_delconn+0x1b0>)
 8013b22:	f240 425e 	movw	r2, #1118	; 0x45e
 8013b26:	4961      	ldr	r1, [pc, #388]	; (8013cac <lwip_netconn_do_delconn+0x1b4>)
 8013b28:	4861      	ldr	r0, [pc, #388]	; (8013cb0 <lwip_netconn_do_delconn+0x1b8>)
 8013b2a:	f00f f901 	bl	8022d30 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8013b2e:	7afb      	ldrb	r3, [r7, #11]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d005      	beq.n	8013b40 <lwip_netconn_do_delconn+0x48>
 8013b34:	7afb      	ldrb	r3, [r7, #11]
 8013b36:	2b02      	cmp	r3, #2
 8013b38:	d002      	beq.n	8013b40 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8013b3a:	7afb      	ldrb	r3, [r7, #11]
 8013b3c:	2b03      	cmp	r3, #3
 8013b3e:	d10a      	bne.n	8013b56 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8013b40:	7afb      	ldrb	r3, [r7, #11]
 8013b42:	2b03      	cmp	r3, #3
 8013b44:	d10b      	bne.n	8013b5e <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b4e:	f003 0304 	and.w	r3, r3, #4
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d103      	bne.n	8013b5e <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	22fb      	movs	r2, #251	; 0xfb
 8013b5a:	711a      	strb	r2, [r3, #4]
 8013b5c:	e098      	b.n	8013c90 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8013b5e:	7afb      	ldrb	r3, [r7, #11]
 8013b60:	2b03      	cmp	r3, #3
 8013b62:	d10e      	bne.n	8013b82 <lwip_netconn_do_delconn+0x8a>
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013b6c:	f003 0304 	and.w	r3, r3, #4
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d106      	bne.n	8013b82 <lwip_netconn_do_delconn+0x8a>
 8013b74:	4b4c      	ldr	r3, [pc, #304]	; (8013ca8 <lwip_netconn_do_delconn+0x1b0>)
 8013b76:	f240 427a 	movw	r2, #1146	; 0x47a
 8013b7a:	494e      	ldr	r1, [pc, #312]	; (8013cb4 <lwip_netconn_do_delconn+0x1bc>)
 8013b7c:	484c      	ldr	r0, [pc, #304]	; (8013cb0 <lwip_netconn_do_delconn+0x1b8>)
 8013b7e:	f00f f8d7 	bl	8022d30 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	2200      	movs	r2, #0
 8013b86:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f7ff fdcb 	bl	8013728 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	685b      	ldr	r3, [r3, #4]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d05f      	beq.n	8013c5c <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ba6:	2b10      	cmp	r3, #16
 8013ba8:	d00d      	beq.n	8013bc6 <lwip_netconn_do_delconn+0xce>
 8013baa:	2b20      	cmp	r3, #32
 8013bac:	d151      	bne.n	8013c52 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	685b      	ldr	r3, [r3, #4]
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	685b      	ldr	r3, [r3, #4]
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f00c f8a0 	bl	801fd04 <udp_remove>
          break;
 8013bc4:	e046      	b.n	8013c54 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d006      	beq.n	8013bde <lwip_netconn_do_delconn+0xe6>
 8013bd0:	4b35      	ldr	r3, [pc, #212]	; (8013ca8 <lwip_netconn_do_delconn+0x1b0>)
 8013bd2:	f240 4294 	movw	r2, #1172	; 0x494
 8013bd6:	4938      	ldr	r1, [pc, #224]	; (8013cb8 <lwip_netconn_do_delconn+0x1c0>)
 8013bd8:	4835      	ldr	r0, [pc, #212]	; (8013cb0 <lwip_netconn_do_delconn+0x1b8>)
 8013bda:	f00f f8a9 	bl	8022d30 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2204      	movs	r2, #4
 8013be4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2203      	movs	r2, #3
 8013bea:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	68fa      	ldr	r2, [r7, #12]
 8013bf2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	2100      	movs	r1, #0
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7ff fe12 	bl	8013824 <lwip_netconn_do_close_internal>
 8013c00:	4603      	mov	r3, r0
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d04b      	beq.n	8013c9e <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	785b      	ldrb	r3, [r3, #1]
 8013c0c:	2b04      	cmp	r3, #4
 8013c0e:	d006      	beq.n	8013c1e <lwip_netconn_do_delconn+0x126>
 8013c10:	4b25      	ldr	r3, [pc, #148]	; (8013ca8 <lwip_netconn_do_delconn+0x1b0>)
 8013c12:	f240 429a 	movw	r2, #1178	; 0x49a
 8013c16:	4929      	ldr	r1, [pc, #164]	; (8013cbc <lwip_netconn_do_delconn+0x1c4>)
 8013c18:	4825      	ldr	r0, [pc, #148]	; (8013cb0 <lwip_netconn_do_delconn+0x1b8>)
 8013c1a:	f00f f889 	bl	8022d30 <iprintf>
            UNLOCK_TCPIP_CORE();
 8013c1e:	4828      	ldr	r0, [pc, #160]	; (8013cc0 <lwip_netconn_do_delconn+0x1c8>)
 8013c20:	f005 f80d 	bl	8018c3e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	330c      	adds	r3, #12
 8013c2a:	2100      	movs	r1, #0
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f004 ff6c 	bl	8018b0a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8013c32:	4823      	ldr	r0, [pc, #140]	; (8013cc0 <lwip_netconn_do_delconn+0x1c8>)
 8013c34:	f004 fff4 	bl	8018c20 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	785b      	ldrb	r3, [r3, #1]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d02d      	beq.n	8013c9e <lwip_netconn_do_delconn+0x1a6>
 8013c42:	4b19      	ldr	r3, [pc, #100]	; (8013ca8 <lwip_netconn_do_delconn+0x1b0>)
 8013c44:	f240 429e 	movw	r2, #1182	; 0x49e
 8013c48:	491c      	ldr	r1, [pc, #112]	; (8013cbc <lwip_netconn_do_delconn+0x1c4>)
 8013c4a:	4819      	ldr	r0, [pc, #100]	; (8013cb0 <lwip_netconn_do_delconn+0x1b8>)
 8013c4c:	f00f f870 	bl	8022d30 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8013c50:	e025      	b.n	8013c9e <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 8013c52:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2200      	movs	r2, #0
 8013c5a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d007      	beq.n	8013c76 <lwip_netconn_do_delconn+0x17e>
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c6c:	68fa      	ldr	r2, [r7, #12]
 8013c6e:	6810      	ldr	r0, [r2, #0]
 8013c70:	2200      	movs	r2, #0
 8013c72:	2100      	movs	r1, #0
 8013c74:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d007      	beq.n	8013c90 <lwip_netconn_do_delconn+0x198>
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c86:	68fa      	ldr	r2, [r7, #12]
 8013c88:	6810      	ldr	r0, [r2, #0]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	2102      	movs	r1, #2
 8013c8e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	330c      	adds	r3, #12
 8013c96:	4618      	mov	r0, r3
 8013c98:	f004 ff82 	bl	8018ba0 <sys_sem_valid>
 8013c9c:	e000      	b.n	8013ca0 <lwip_netconn_do_delconn+0x1a8>
          return;
 8013c9e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8013ca0:	3710      	adds	r7, #16
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}
 8013ca6:	bf00      	nop
 8013ca8:	080249d4 	.word	0x080249d4
 8013cac:	08024d7c 	.word	0x08024d7c
 8013cb0:	08024a50 	.word	0x08024a50
 8013cb4:	08024d90 	.word	0x08024d90
 8013cb8:	08024db0 	.word	0x08024db0
 8013cbc:	08024dcc 	.word	0x08024dcc
 8013cc0:	20023938 	.word	0x20023938

08013cc4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b084      	sub	sp, #16
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d025      	beq.n	8013d26 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ce4:	2b10      	cmp	r3, #16
 8013ce6:	d00e      	beq.n	8013d06 <lwip_netconn_do_bind+0x42>
 8013ce8:	2b20      	cmp	r3, #32
 8013cea:	d119      	bne.n	8013d20 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013cec:	68bb      	ldr	r3, [r7, #8]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	6858      	ldr	r0, [r3, #4]
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	6899      	ldr	r1, [r3, #8]
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	899b      	ldrh	r3, [r3, #12]
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	f00b feec 	bl	801fad8 <udp_bind>
 8013d00:	4603      	mov	r3, r0
 8013d02:	73fb      	strb	r3, [r7, #15]
        break;
 8013d04:	e011      	b.n	8013d2a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	6858      	ldr	r0, [r3, #4]
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	6899      	ldr	r1, [r3, #8]
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	899b      	ldrh	r3, [r3, #12]
 8013d14:	461a      	mov	r2, r3
 8013d16:	f005 fb4f 	bl	80193b8 <tcp_bind>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	73fb      	strb	r3, [r7, #15]
        break;
 8013d1e:	e004      	b.n	8013d2a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8013d20:	23fa      	movs	r3, #250	; 0xfa
 8013d22:	73fb      	strb	r3, [r7, #15]
        break;
 8013d24:	e001      	b.n	8013d2a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8013d26:	23fa      	movs	r3, #250	; 0xfa
 8013d28:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8013d2a:	68bb      	ldr	r3, [r7, #8]
 8013d2c:	7bfa      	ldrb	r2, [r7, #15]
 8013d2e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8013d30:	bf00      	nop
 8013d32:	3710      	adds	r7, #16
 8013d34:	46bd      	mov	sp, r7
 8013d36:	bd80      	pop	{r7, pc}

08013d38 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b088      	sub	sp, #32
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	60f8      	str	r0, [r7, #12]
 8013d40:	60b9      	str	r1, [r7, #8]
 8013d42:	4613      	mov	r3, r2
 8013d44:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8013d46:	2300      	movs	r3, #0
 8013d48:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8013d4e:	69bb      	ldr	r3, [r7, #24]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d102      	bne.n	8013d5a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8013d54:	f06f 0305 	mvn.w	r3, #5
 8013d58:	e074      	b.n	8013e44 <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8013d5a:	69bb      	ldr	r3, [r7, #24]
 8013d5c:	785b      	ldrb	r3, [r3, #1]
 8013d5e:	2b03      	cmp	r3, #3
 8013d60:	d006      	beq.n	8013d70 <lwip_netconn_do_connected+0x38>
 8013d62:	4b3a      	ldr	r3, [pc, #232]	; (8013e4c <lwip_netconn_do_connected+0x114>)
 8013d64:	f240 5223 	movw	r2, #1315	; 0x523
 8013d68:	4939      	ldr	r1, [pc, #228]	; (8013e50 <lwip_netconn_do_connected+0x118>)
 8013d6a:	483a      	ldr	r0, [pc, #232]	; (8013e54 <lwip_netconn_do_connected+0x11c>)
 8013d6c:	f00e ffe0 	bl	8022d30 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8013d70:	69bb      	ldr	r3, [r7, #24]
 8013d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d10d      	bne.n	8013d94 <lwip_netconn_do_connected+0x5c>
 8013d78:	69bb      	ldr	r3, [r7, #24]
 8013d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d7e:	f003 0304 	and.w	r3, r3, #4
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d106      	bne.n	8013d94 <lwip_netconn_do_connected+0x5c>
 8013d86:	4b31      	ldr	r3, [pc, #196]	; (8013e4c <lwip_netconn_do_connected+0x114>)
 8013d88:	f240 5224 	movw	r2, #1316	; 0x524
 8013d8c:	4932      	ldr	r1, [pc, #200]	; (8013e58 <lwip_netconn_do_connected+0x120>)
 8013d8e:	4831      	ldr	r0, [pc, #196]	; (8013e54 <lwip_netconn_do_connected+0x11c>)
 8013d90:	f00e ffce 	bl	8022d30 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8013d94:	69bb      	ldr	r3, [r7, #24]
 8013d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d008      	beq.n	8013dae <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 8013d9c:	69bb      	ldr	r3, [r7, #24]
 8013d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013da0:	79fa      	ldrb	r2, [r7, #7]
 8013da2:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8013da4:	69bb      	ldr	r3, [r7, #24]
 8013da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	330c      	adds	r3, #12
 8013dac:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 8013dae:	69bb      	ldr	r3, [r7, #24]
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013db6:	2b10      	cmp	r3, #16
 8013db8:	d106      	bne.n	8013dc8 <lwip_netconn_do_connected+0x90>
 8013dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d102      	bne.n	8013dc8 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 8013dc2:	69b8      	ldr	r0, [r7, #24]
 8013dc4:	f7ff fb48 	bl	8013458 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013dce:	f003 0304 	and.w	r3, r3, #4
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	bf0c      	ite	eq
 8013dd6:	2301      	moveq	r3, #1
 8013dd8:	2300      	movne	r3, #0
 8013dda:	b2db      	uxtb	r3, r3
 8013ddc:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8013dde:	69bb      	ldr	r3, [r7, #24]
 8013de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013de4:	f023 0304 	bic.w	r3, r3, #4
 8013de8:	b2da      	uxtb	r2, r3
 8013dea:	69bb      	ldr	r3, [r7, #24]
 8013dec:	f883 2020 	strb.w	r2, [r3, #32]
  LWIP_ASSERT("blocking connect state error",
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d002      	beq.n	8013dfc <lwip_netconn_do_connected+0xc4>
 8013df6:	69fb      	ldr	r3, [r7, #28]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d10c      	bne.n	8013e16 <lwip_netconn_do_connected+0xde>
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d102      	bne.n	8013e08 <lwip_netconn_do_connected+0xd0>
 8013e02:	69fb      	ldr	r3, [r7, #28]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d006      	beq.n	8013e16 <lwip_netconn_do_connected+0xde>
 8013e08:	4b10      	ldr	r3, [pc, #64]	; (8013e4c <lwip_netconn_do_connected+0x114>)
 8013e0a:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 8013e0e:	4913      	ldr	r1, [pc, #76]	; (8013e5c <lwip_netconn_do_connected+0x124>)
 8013e10:	4810      	ldr	r0, [pc, #64]	; (8013e54 <lwip_netconn_do_connected+0x11c>)
 8013e12:	f00e ff8d 	bl	8022d30 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8013e16:	69bb      	ldr	r3, [r7, #24]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8013e1c:	69bb      	ldr	r3, [r7, #24]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8013e22:	69bb      	ldr	r3, [r7, #24]
 8013e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d005      	beq.n	8013e36 <lwip_netconn_do_connected+0xfe>
 8013e2a:	69bb      	ldr	r3, [r7, #24]
 8013e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e2e:	2200      	movs	r2, #0
 8013e30:	2102      	movs	r1, #2
 8013e32:	69b8      	ldr	r0, [r7, #24]
 8013e34:	4798      	blx	r3

  if (was_blocking) {
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d002      	beq.n	8013e42 <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 8013e3c:	69f8      	ldr	r0, [r7, #28]
 8013e3e:	f004 fe95 	bl	8018b6c <sys_sem_signal>
  }
  return ERR_OK;
 8013e42:	2300      	movs	r3, #0
}
 8013e44:	4618      	mov	r0, r3
 8013e46:	3720      	adds	r7, #32
 8013e48:	46bd      	mov	sp, r7
 8013e4a:	bd80      	pop	{r7, pc}
 8013e4c:	080249d4 	.word	0x080249d4
 8013e50:	08024dd4 	.word	0x08024dd4
 8013e54:	08024a50 	.word	0x08024a50
 8013e58:	08024df4 	.word	0x08024df4
 8013e5c:	08024e34 	.word	0x08024e34

08013e60 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b086      	sub	sp, #24
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d102      	bne.n	8013e7c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8013e76:	23f1      	movs	r3, #241	; 0xf1
 8013e78:	75fb      	strb	r3, [r7, #23]
 8013e7a:	e0a0      	b.n	8013fbe <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	781b      	ldrb	r3, [r3, #0]
 8013e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013e86:	2b10      	cmp	r3, #16
 8013e88:	d00f      	beq.n	8013eaa <lwip_netconn_do_connect+0x4a>
 8013e8a:	2b20      	cmp	r3, #32
 8013e8c:	f040 808c 	bne.w	8013fa8 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8013e90:	693b      	ldr	r3, [r7, #16]
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	6858      	ldr	r0, [r3, #4]
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	6899      	ldr	r1, [r3, #8]
 8013e9a:	693b      	ldr	r3, [r7, #16]
 8013e9c:	899b      	ldrh	r3, [r3, #12]
 8013e9e:	461a      	mov	r2, r3
 8013ea0:	f00b fea2 	bl	801fbe8 <udp_connect>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	75fb      	strb	r3, [r7, #23]
        break;
 8013ea8:	e089      	b.n	8013fbe <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	785b      	ldrb	r3, [r3, #1]
 8013eb0:	2b03      	cmp	r3, #3
 8013eb2:	d102      	bne.n	8013eba <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 8013eb4:	23f7      	movs	r3, #247	; 0xf7
 8013eb6:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8013eb8:	e080      	b.n	8013fbc <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 8013eba:	693b      	ldr	r3, [r7, #16]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	785b      	ldrb	r3, [r3, #1]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d002      	beq.n	8013eca <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 8013ec4:	23f6      	movs	r3, #246	; 0xf6
 8013ec6:	75fb      	strb	r3, [r7, #23]
        break;
 8013ec8:	e078      	b.n	8013fbc <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7ff fac2 	bl	8013458 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8013ed4:	693b      	ldr	r3, [r7, #16]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	6858      	ldr	r0, [r3, #4]
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	6899      	ldr	r1, [r3, #8]
 8013ede:	693b      	ldr	r3, [r7, #16]
 8013ee0:	899a      	ldrh	r2, [r3, #12]
 8013ee2:	4b3b      	ldr	r3, [pc, #236]	; (8013fd0 <lwip_netconn_do_connect+0x170>)
 8013ee4:	f005 fbf0 	bl	80196c8 <tcp_connect>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8013eec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d163      	bne.n	8013fbc <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8013ef4:	693b      	ldr	r3, [r7, #16]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013efc:	f003 0302 	and.w	r3, r3, #2
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	bf14      	ite	ne
 8013f04:	2301      	movne	r3, #1
 8013f06:	2300      	moveq	r3, #0
 8013f08:	b2db      	uxtb	r3, r3
 8013f0a:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	681b      	ldr	r3, [r3, #0]
 8013f10:	2203      	movs	r2, #3
 8013f12:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8013f14:	7bfb      	ldrb	r3, [r7, #15]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d00b      	beq.n	8013f32 <lwip_netconn_do_connect+0xd2>
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013f22:	693b      	ldr	r3, [r7, #16]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	f042 0204 	orr.w	r2, r2, #4
 8013f2a:	b2d2      	uxtb	r2, r2
 8013f2c:	f883 2020 	strb.w	r2, [r3, #32]
 8013f30:	e00a      	b.n	8013f48 <lwip_netconn_do_connect+0xe8>
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	f893 2020 	ldrb.w	r2, [r3, #32]
 8013f3a:	693b      	ldr	r3, [r7, #16]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	f022 0204 	bic.w	r2, r2, #4
 8013f42:	b2d2      	uxtb	r2, r2
 8013f44:	f883 2020 	strb.w	r2, [r3, #32]
            if (non_blocking) {
 8013f48:	7bfb      	ldrb	r3, [r7, #15]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d002      	beq.n	8013f54 <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 8013f4e:	23fb      	movs	r3, #251	; 0xfb
 8013f50:	75fb      	strb	r3, [r7, #23]
        break;
 8013f52:	e033      	b.n	8013fbc <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 8013f54:	693b      	ldr	r3, [r7, #16]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	693a      	ldr	r2, [r7, #16]
 8013f5a:	625a      	str	r2, [r3, #36]	; 0x24
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8013f5c:	693b      	ldr	r3, [r7, #16]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	785b      	ldrb	r3, [r3, #1]
 8013f62:	2b03      	cmp	r3, #3
 8013f64:	d006      	beq.n	8013f74 <lwip_netconn_do_connect+0x114>
 8013f66:	4b1b      	ldr	r3, [pc, #108]	; (8013fd4 <lwip_netconn_do_connect+0x174>)
 8013f68:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8013f6c:	491a      	ldr	r1, [pc, #104]	; (8013fd8 <lwip_netconn_do_connect+0x178>)
 8013f6e:	481b      	ldr	r0, [pc, #108]	; (8013fdc <lwip_netconn_do_connect+0x17c>)
 8013f70:	f00e fede 	bl	8022d30 <iprintf>
              UNLOCK_TCPIP_CORE();
 8013f74:	481a      	ldr	r0, [pc, #104]	; (8013fe0 <lwip_netconn_do_connect+0x180>)
 8013f76:	f004 fe62 	bl	8018c3e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	330c      	adds	r3, #12
 8013f80:	2100      	movs	r1, #0
 8013f82:	4618      	mov	r0, r3
 8013f84:	f004 fdc1 	bl	8018b0a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8013f88:	4815      	ldr	r0, [pc, #84]	; (8013fe0 <lwip_netconn_do_connect+0x180>)
 8013f8a:	f004 fe49 	bl	8018c20 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	785b      	ldrb	r3, [r3, #1]
 8013f94:	2b03      	cmp	r3, #3
 8013f96:	d116      	bne.n	8013fc6 <lwip_netconn_do_connect+0x166>
 8013f98:	4b0e      	ldr	r3, [pc, #56]	; (8013fd4 <lwip_netconn_do_connect+0x174>)
 8013f9a:	f240 5274 	movw	r2, #1396	; 0x574
 8013f9e:	490e      	ldr	r1, [pc, #56]	; (8013fd8 <lwip_netconn_do_connect+0x178>)
 8013fa0:	480e      	ldr	r0, [pc, #56]	; (8013fdc <lwip_netconn_do_connect+0x17c>)
 8013fa2:	f00e fec5 	bl	8022d30 <iprintf>
              return;
 8013fa6:	e00e      	b.n	8013fc6 <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8013fa8:	4b0a      	ldr	r3, [pc, #40]	; (8013fd4 <lwip_netconn_do_connect+0x174>)
 8013faa:	f240 527d 	movw	r2, #1405	; 0x57d
 8013fae:	490d      	ldr	r1, [pc, #52]	; (8013fe4 <lwip_netconn_do_connect+0x184>)
 8013fb0:	480a      	ldr	r0, [pc, #40]	; (8013fdc <lwip_netconn_do_connect+0x17c>)
 8013fb2:	f00e febd 	bl	8022d30 <iprintf>
 8013fb6:	23fa      	movs	r3, #250	; 0xfa
 8013fb8:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8013fba:	e000      	b.n	8013fbe <lwip_netconn_do_connect+0x15e>
        break;
 8013fbc:	bf00      	nop
    }
  }
  msg->err = err;
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	7dfa      	ldrb	r2, [r7, #23]
 8013fc2:	711a      	strb	r2, [r3, #4]
 8013fc4:	e000      	b.n	8013fc8 <lwip_netconn_do_connect+0x168>
              return;
 8013fc6:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8013fc8:	3718      	adds	r7, #24
 8013fca:	46bd      	mov	sp, r7
 8013fcc:	bd80      	pop	{r7, pc}
 8013fce:	bf00      	nop
 8013fd0:	08013d39 	.word	0x08013d39
 8013fd4:	080249d4 	.word	0x080249d4
 8013fd8:	08024dcc 	.word	0x08024dcc
 8013fdc:	08024a50 	.word	0x08024a50
 8013fe0:	20023938 	.word	0x20023938
 8013fe4:	08024e54 	.word	0x08024e54

08013fe8 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b086      	sub	sp, #24
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8013ffa:	693b      	ldr	r3, [r7, #16]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	2b00      	cmp	r3, #0
 8014002:	d022      	beq.n	801404a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801400e:	2b10      	cmp	r3, #16
 8014010:	d11b      	bne.n	801404a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	689b      	ldr	r3, [r3, #8]
 8014016:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801401e:	d202      	bcs.n	8014026 <lwip_netconn_do_recv+0x3e>
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	b29b      	uxth	r3, r3
 8014024:	e001      	b.n	801402a <lwip_netconn_do_recv+0x42>
 8014026:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801402a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801402c:	693b      	ldr	r3, [r7, #16]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	685b      	ldr	r3, [r3, #4]
 8014032:	89fa      	ldrh	r2, [r7, #14]
 8014034:	4611      	mov	r1, r2
 8014036:	4618      	mov	r0, r3
 8014038:	f005 fab0 	bl	801959c <tcp_recved>
        remaining -= recved;
 801403c:	89fb      	ldrh	r3, [r7, #14]
 801403e:	697a      	ldr	r2, [r7, #20]
 8014040:	1ad3      	subs	r3, r2, r3
 8014042:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d1e6      	bne.n	8014018 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 801404a:	bf00      	nop
 801404c:	3718      	adds	r7, #24
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
	...

08014054 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8014054:	b580      	push	{r7, lr}
 8014056:	b088      	sub	sp, #32
 8014058:	af00      	add	r7, sp, #0
 801405a:	6078      	str	r0, [r7, #4]
 801405c:	460b      	mov	r3, r1
 801405e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8014060:	2300      	movs	r3, #0
 8014062:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d106      	bne.n	8014078 <lwip_netconn_do_writemore+0x24>
 801406a:	4b61      	ldr	r3, [pc, #388]	; (80141f0 <lwip_netconn_do_writemore+0x19c>)
 801406c:	f240 6273 	movw	r2, #1651	; 0x673
 8014070:	4960      	ldr	r1, [pc, #384]	; (80141f4 <lwip_netconn_do_writemore+0x1a0>)
 8014072:	4861      	ldr	r0, [pc, #388]	; (80141f8 <lwip_netconn_do_writemore+0x1a4>)
 8014074:	f00e fe5c 	bl	8022d30 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	785b      	ldrb	r3, [r3, #1]
 801407c:	2b01      	cmp	r3, #1
 801407e:	d006      	beq.n	801408e <lwip_netconn_do_writemore+0x3a>
 8014080:	4b5b      	ldr	r3, [pc, #364]	; (80141f0 <lwip_netconn_do_writemore+0x19c>)
 8014082:	f240 6274 	movw	r2, #1652	; 0x674
 8014086:	495d      	ldr	r1, [pc, #372]	; (80141fc <lwip_netconn_do_writemore+0x1a8>)
 8014088:	485b      	ldr	r0, [pc, #364]	; (80141f8 <lwip_netconn_do_writemore+0x1a4>)
 801408a:	f00e fe51 	bl	8022d30 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014092:	2b00      	cmp	r3, #0
 8014094:	d106      	bne.n	80140a4 <lwip_netconn_do_writemore+0x50>
 8014096:	4b56      	ldr	r3, [pc, #344]	; (80141f0 <lwip_netconn_do_writemore+0x19c>)
 8014098:	f240 6275 	movw	r2, #1653	; 0x675
 801409c:	4958      	ldr	r1, [pc, #352]	; (8014200 <lwip_netconn_do_writemore+0x1ac>)
 801409e:	4856      	ldr	r0, [pc, #344]	; (80141f8 <lwip_netconn_do_writemore+0x1a4>)
 80140a0:	f00e fe46 	bl	8022d30 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	685b      	ldr	r3, [r3, #4]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d106      	bne.n	80140ba <lwip_netconn_do_writemore+0x66>
 80140ac:	4b50      	ldr	r3, [pc, #320]	; (80141f0 <lwip_netconn_do_writemore+0x19c>)
 80140ae:	f240 6276 	movw	r2, #1654	; 0x676
 80140b2:	4954      	ldr	r1, [pc, #336]	; (8014204 <lwip_netconn_do_writemore+0x1b0>)
 80140b4:	4850      	ldr	r0, [pc, #320]	; (80141f8 <lwip_netconn_do_writemore+0x1a4>)
 80140b6:	f00e fe3b 	bl	8022d30 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140be:	699a      	ldr	r2, [r3, #24]
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140c4:	695b      	ldr	r3, [r3, #20]
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d306      	bcc.n	80140d8 <lwip_netconn_do_writemore+0x84>
 80140ca:	4b49      	ldr	r3, [pc, #292]	; (80141f0 <lwip_netconn_do_writemore+0x19c>)
 80140cc:	f240 6277 	movw	r2, #1655	; 0x677
 80140d0:	494d      	ldr	r1, [pc, #308]	; (8014208 <lwip_netconn_do_writemore+0x1b4>)
 80140d2:	4849      	ldr	r0, [pc, #292]	; (80141f8 <lwip_netconn_do_writemore+0x1a4>)
 80140d4:	f00e fe2c 	bl	8022d30 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140dc:	899b      	ldrh	r3, [r3, #12]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d106      	bne.n	80140f0 <lwip_netconn_do_writemore+0x9c>
 80140e2:	4b43      	ldr	r3, [pc, #268]	; (80141f0 <lwip_netconn_do_writemore+0x19c>)
 80140e4:	f240 6279 	movw	r2, #1657	; 0x679
 80140e8:	4948      	ldr	r1, [pc, #288]	; (801420c <lwip_netconn_do_writemore+0x1b8>)
 80140ea:	4843      	ldr	r0, [pc, #268]	; (80141f8 <lwip_netconn_do_writemore+0x1a4>)
 80140ec:	f00e fe20 	bl	8022d30 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140f4:	7f1b      	ldrb	r3, [r3, #28]
 80140f6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80140fe:	f003 0302 	and.w	r3, r3, #2
 8014102:	2b00      	cmp	r3, #0
 8014104:	d104      	bne.n	8014110 <lwip_netconn_do_writemore+0xbc>
 8014106:	7ebb      	ldrb	r3, [r7, #26]
 8014108:	f003 0304 	and.w	r3, r3, #4
 801410c:	2b00      	cmp	r3, #0
 801410e:	d001      	beq.n	8014114 <lwip_netconn_do_writemore+0xc0>
 8014110:	2301      	movs	r3, #1
 8014112:	e000      	b.n	8014116 <lwip_netconn_do_writemore+0xc2>
 8014114:	2300      	movs	r3, #0
 8014116:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801411c:	689b      	ldr	r3, [r3, #8]
 801411e:	681a      	ldr	r2, [r3, #0]
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014124:	691b      	ldr	r3, [r3, #16]
 8014126:	4413      	add	r3, r2
 8014128:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801412e:	689b      	ldr	r3, [r3, #8]
 8014130:	685a      	ldr	r2, [r3, #4]
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014136:	691b      	ldr	r3, [r3, #16]
 8014138:	1ad3      	subs	r3, r2, r3
 801413a:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014142:	d307      	bcc.n	8014154 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8014144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014148:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801414a:	7ebb      	ldrb	r3, [r7, #26]
 801414c:	f043 0302 	orr.w	r3, r3, #2
 8014150:	76bb      	strb	r3, [r7, #26]
 8014152:	e001      	b.n	8014158 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8014154:	693b      	ldr	r3, [r7, #16]
 8014156:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	685b      	ldr	r3, [r3, #4]
 801415c:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8014160:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8014162:	89fa      	ldrh	r2, [r7, #14]
 8014164:	8bbb      	ldrh	r3, [r7, #28]
 8014166:	429a      	cmp	r2, r3
 8014168:	d216      	bcs.n	8014198 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 801416a:	89fb      	ldrh	r3, [r7, #14]
 801416c:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 801416e:	7e3b      	ldrb	r3, [r7, #24]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d00d      	beq.n	8014190 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8014174:	8bbb      	ldrh	r3, [r7, #28]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d10e      	bne.n	8014198 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801417e:	699b      	ldr	r3, [r3, #24]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d102      	bne.n	801418a <lwip_netconn_do_writemore+0x136>
 8014184:	f06f 0306 	mvn.w	r3, #6
 8014188:	e000      	b.n	801418c <lwip_netconn_do_writemore+0x138>
 801418a:	2300      	movs	r3, #0
 801418c:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 801418e:	e08f      	b.n	80142b0 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8014190:	7ebb      	ldrb	r3, [r7, #26]
 8014192:	f043 0302 	orr.w	r3, r3, #2
 8014196:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801419c:	691a      	ldr	r2, [r3, #16]
 801419e:	8bbb      	ldrh	r3, [r7, #28]
 80141a0:	441a      	add	r2, r3
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a6:	689b      	ldr	r3, [r3, #8]
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d906      	bls.n	80141bc <lwip_netconn_do_writemore+0x168>
 80141ae:	4b10      	ldr	r3, [pc, #64]	; (80141f0 <lwip_netconn_do_writemore+0x19c>)
 80141b0:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80141b4:	4916      	ldr	r1, [pc, #88]	; (8014210 <lwip_netconn_do_writemore+0x1bc>)
 80141b6:	4810      	ldr	r0, [pc, #64]	; (80141f8 <lwip_netconn_do_writemore+0x1a4>)
 80141b8:	f00e fdba 	bl	8022d30 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80141bc:	8bbb      	ldrh	r3, [r7, #28]
 80141be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80141c2:	4293      	cmp	r3, r2
 80141c4:	d103      	bne.n	80141ce <lwip_netconn_do_writemore+0x17a>
 80141c6:	693b      	ldr	r3, [r7, #16]
 80141c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80141cc:	d209      	bcs.n	80141e2 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80141ce:	693b      	ldr	r3, [r7, #16]
 80141d0:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80141d2:	8bba      	ldrh	r2, [r7, #28]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d11d      	bne.n	8014214 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141dc:	899b      	ldrh	r3, [r3, #12]
 80141de:	2b01      	cmp	r3, #1
 80141e0:	d918      	bls.n	8014214 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 80141e2:	2301      	movs	r3, #1
 80141e4:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80141e6:	7ebb      	ldrb	r3, [r7, #26]
 80141e8:	f043 0302 	orr.w	r3, r3, #2
 80141ec:	76bb      	strb	r3, [r7, #26]
 80141ee:	e013      	b.n	8014218 <lwip_netconn_do_writemore+0x1c4>
 80141f0:	080249d4 	.word	0x080249d4
 80141f4:	08024b64 	.word	0x08024b64
 80141f8:	08024a50 	.word	0x08024a50
 80141fc:	08024e6c 	.word	0x08024e6c
 8014200:	08024b74 	.word	0x08024b74
 8014204:	08024e8c 	.word	0x08024e8c
 8014208:	08024ea4 	.word	0x08024ea4
 801420c:	08024ee4 	.word	0x08024ee4
 8014210:	08024f0c 	.word	0x08024f0c
      } else {
        write_more = 0;
 8014214:	2300      	movs	r3, #0
 8014216:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	6858      	ldr	r0, [r3, #4]
 801421c:	7ebb      	ldrb	r3, [r7, #26]
 801421e:	8bba      	ldrh	r2, [r7, #28]
 8014220:	6979      	ldr	r1, [r7, #20]
 8014222:	f009 f9a9 	bl	801d578 <tcp_write>
 8014226:	4603      	mov	r3, r0
 8014228:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 801422a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d12c      	bne.n	801428c <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014236:	6999      	ldr	r1, [r3, #24]
 8014238:	8bba      	ldrh	r2, [r7, #28]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801423e:	440a      	add	r2, r1
 8014240:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014246:	6919      	ldr	r1, [r3, #16]
 8014248:	8bba      	ldrh	r2, [r7, #28]
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801424e:	440a      	add	r2, r1
 8014250:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014256:	691a      	ldr	r2, [r3, #16]
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801425c:	689b      	ldr	r3, [r3, #8]
 801425e:	685b      	ldr	r3, [r3, #4]
 8014260:	429a      	cmp	r2, r3
 8014262:	d113      	bne.n	801428c <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014268:	899a      	ldrh	r2, [r3, #12]
 801426a:	3a01      	subs	r2, #1
 801426c:	b292      	uxth	r2, r2
 801426e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014274:	899b      	ldrh	r3, [r3, #12]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d008      	beq.n	801428c <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801427e:	689a      	ldr	r2, [r3, #8]
 8014280:	3208      	adds	r2, #8
 8014282:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014288:	2200      	movs	r2, #0
 801428a:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801428c:	7e7b      	ldrb	r3, [r7, #25]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d004      	beq.n	801429c <lwip_netconn_do_writemore+0x248>
 8014292:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014296:	2b00      	cmp	r3, #0
 8014298:	f43f af3e 	beq.w	8014118 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801429c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d004      	beq.n	80142ae <lwip_netconn_do_writemore+0x25a>
 80142a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80142a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142ac:	d136      	bne.n	801431c <lwip_netconn_do_writemore+0x2c8>
err_mem:
 80142ae:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80142b0:	7e3b      	ldrb	r3, [r7, #24]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d01b      	beq.n	80142ee <lwip_netconn_do_writemore+0x29a>
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ba:	699a      	ldr	r2, [r3, #24]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142c0:	695b      	ldr	r3, [r3, #20]
 80142c2:	429a      	cmp	r2, r3
 80142c4:	d213      	bcs.n	80142ee <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d005      	beq.n	80142da <lwip_netconn_do_writemore+0x286>
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142d2:	2200      	movs	r2, #0
 80142d4:	2103      	movs	r1, #3
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80142e0:	f043 0310 	orr.w	r3, r3, #16
 80142e4:	b2da      	uxtb	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f883 2020 	strb.w	r2, [r3, #32]
 80142ec:	e016      	b.n	801431c <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	685b      	ldr	r3, [r3, #4]
 80142f2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80142f6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80142fa:	d305      	bcc.n	8014308 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	685b      	ldr	r3, [r3, #4]
 8014300:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8014304:	2b04      	cmp	r3, #4
 8014306:	d909      	bls.n	801431c <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801430c:	2b00      	cmp	r3, #0
 801430e:	d005      	beq.n	801431c <lwip_netconn_do_writemore+0x2c8>
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014314:	2200      	movs	r2, #0
 8014316:	2103      	movs	r1, #3
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801431c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014320:	2b00      	cmp	r3, #0
 8014322:	d11d      	bne.n	8014360 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014328:	699a      	ldr	r2, [r3, #24]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801432e:	695b      	ldr	r3, [r3, #20]
 8014330:	429a      	cmp	r2, r3
 8014332:	d002      	beq.n	801433a <lwip_netconn_do_writemore+0x2e6>
 8014334:	7e3b      	ldrb	r3, [r7, #24]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d001      	beq.n	801433e <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 801433a:	2301      	movs	r3, #1
 801433c:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	4618      	mov	r0, r3
 8014344:	f009 ff02 	bl	801e14c <tcp_output>
 8014348:	4603      	mov	r3, r0
 801434a:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801434c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8014350:	f113 0f04 	cmn.w	r3, #4
 8014354:	d12c      	bne.n	80143b0 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8014356:	7b3b      	ldrb	r3, [r7, #12]
 8014358:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801435a:	2301      	movs	r3, #1
 801435c:	76fb      	strb	r3, [r7, #27]
 801435e:	e027      	b.n	80143b0 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 8014360:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014368:	d120      	bne.n	80143ac <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	4618      	mov	r0, r3
 8014370:	f009 feec 	bl	801e14c <tcp_output>
 8014374:	4603      	mov	r3, r0
 8014376:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8014378:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801437c:	f113 0f04 	cmn.w	r3, #4
 8014380:	d104      	bne.n	801438c <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8014382:	7b7b      	ldrb	r3, [r7, #13]
 8014384:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8014386:	2301      	movs	r3, #1
 8014388:	76fb      	strb	r3, [r7, #27]
 801438a:	e011      	b.n	80143b0 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 801438c:	7e3b      	ldrb	r3, [r7, #24]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d00e      	beq.n	80143b0 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014396:	699b      	ldr	r3, [r3, #24]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d102      	bne.n	80143a2 <lwip_netconn_do_writemore+0x34e>
 801439c:	f06f 0306 	mvn.w	r3, #6
 80143a0:	e000      	b.n	80143a4 <lwip_netconn_do_writemore+0x350>
 80143a2:	2300      	movs	r3, #0
 80143a4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80143a6:	2301      	movs	r3, #1
 80143a8:	76fb      	strb	r3, [r7, #27]
 80143aa:	e001      	b.n	80143b0 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80143ac:	2301      	movs	r3, #1
 80143ae:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80143b0:	7efb      	ldrb	r3, [r7, #27]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d015      	beq.n	80143e2 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	330c      	adds	r3, #12
 80143be:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143c4:	7ffa      	ldrb	r2, [r7, #31]
 80143c6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	2200      	movs	r2, #0
 80143cc:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	2200      	movs	r2, #0
 80143d2:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80143d4:	78fb      	ldrb	r3, [r7, #3]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d006      	beq.n	80143e8 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80143da:	68b8      	ldr	r0, [r7, #8]
 80143dc:	f004 fbc6 	bl	8018b6c <sys_sem_signal>
 80143e0:	e002      	b.n	80143e8 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80143e2:	f04f 33ff 	mov.w	r3, #4294967295
 80143e6:	e000      	b.n	80143ea <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 80143e8:	2300      	movs	r3, #0
}
 80143ea:	4618      	mov	r0, r3
 80143ec:	3720      	adds	r7, #32
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}
 80143f2:	bf00      	nop

080143f4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	4618      	mov	r0, r3
 8014406:	f7fe fce6 	bl	8012dd6 <netconn_err>
 801440a:	4603      	mov	r3, r0
 801440c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801440e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d166      	bne.n	80144e4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	781b      	ldrb	r3, [r3, #0]
 801441c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014420:	2b10      	cmp	r3, #16
 8014422:	d15d      	bne.n	80144e0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	785b      	ldrb	r3, [r3, #1]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d002      	beq.n	8014434 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801442e:	23fb      	movs	r3, #251	; 0xfb
 8014430:	73fb      	strb	r3, [r7, #15]
 8014432:	e057      	b.n	80144e4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	685b      	ldr	r3, [r3, #4]
 801443a:	2b00      	cmp	r3, #0
 801443c:	d04d      	beq.n	80144da <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	2201      	movs	r2, #1
 8014444:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801444c:	2b00      	cmp	r3, #0
 801444e:	d006      	beq.n	801445e <lwip_netconn_do_write+0x6a>
 8014450:	4b28      	ldr	r3, [pc, #160]	; (80144f4 <lwip_netconn_do_write+0x100>)
 8014452:	f240 7223 	movw	r2, #1827	; 0x723
 8014456:	4928      	ldr	r1, [pc, #160]	; (80144f8 <lwip_netconn_do_write+0x104>)
 8014458:	4828      	ldr	r0, [pc, #160]	; (80144fc <lwip_netconn_do_write+0x108>)
 801445a:	f00e fc69 	bl	8022d30 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801445e:	68bb      	ldr	r3, [r7, #8]
 8014460:	695b      	ldr	r3, [r3, #20]
 8014462:	2b00      	cmp	r3, #0
 8014464:	d106      	bne.n	8014474 <lwip_netconn_do_write+0x80>
 8014466:	4b23      	ldr	r3, [pc, #140]	; (80144f4 <lwip_netconn_do_write+0x100>)
 8014468:	f240 7224 	movw	r2, #1828	; 0x724
 801446c:	4924      	ldr	r1, [pc, #144]	; (8014500 <lwip_netconn_do_write+0x10c>)
 801446e:	4823      	ldr	r0, [pc, #140]	; (80144fc <lwip_netconn_do_write+0x108>)
 8014470:	f00e fc5e 	bl	8022d30 <iprintf>
        msg->conn->current_msg = msg;
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	68ba      	ldr	r2, [r7, #8]
 801447a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	2100      	movs	r1, #0
 8014482:	4618      	mov	r0, r3
 8014484:	f7ff fde6 	bl	8014054 <lwip_netconn_do_writemore>
 8014488:	4603      	mov	r3, r0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d02e      	beq.n	80144ec <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 801448e:	68bb      	ldr	r3, [r7, #8]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	785b      	ldrb	r3, [r3, #1]
 8014494:	2b01      	cmp	r3, #1
 8014496:	d006      	beq.n	80144a6 <lwip_netconn_do_write+0xb2>
 8014498:	4b16      	ldr	r3, [pc, #88]	; (80144f4 <lwip_netconn_do_write+0x100>)
 801449a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 801449e:	4919      	ldr	r1, [pc, #100]	; (8014504 <lwip_netconn_do_write+0x110>)
 80144a0:	4816      	ldr	r0, [pc, #88]	; (80144fc <lwip_netconn_do_write+0x108>)
 80144a2:	f00e fc45 	bl	8022d30 <iprintf>
          UNLOCK_TCPIP_CORE();
 80144a6:	4818      	ldr	r0, [pc, #96]	; (8014508 <lwip_netconn_do_write+0x114>)
 80144a8:	f004 fbc9 	bl	8018c3e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	330c      	adds	r3, #12
 80144b2:	2100      	movs	r1, #0
 80144b4:	4618      	mov	r0, r3
 80144b6:	f004 fb28 	bl	8018b0a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80144ba:	4813      	ldr	r0, [pc, #76]	; (8014508 <lwip_netconn_do_write+0x114>)
 80144bc:	f004 fbb0 	bl	8018c20 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	785b      	ldrb	r3, [r3, #1]
 80144c6:	2b01      	cmp	r3, #1
 80144c8:	d110      	bne.n	80144ec <lwip_netconn_do_write+0xf8>
 80144ca:	4b0a      	ldr	r3, [pc, #40]	; (80144f4 <lwip_netconn_do_write+0x100>)
 80144cc:	f240 722c 	movw	r2, #1836	; 0x72c
 80144d0:	490c      	ldr	r1, [pc, #48]	; (8014504 <lwip_netconn_do_write+0x110>)
 80144d2:	480a      	ldr	r0, [pc, #40]	; (80144fc <lwip_netconn_do_write+0x108>)
 80144d4:	f00e fc2c 	bl	8022d30 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80144d8:	e008      	b.n	80144ec <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80144da:	23f5      	movs	r3, #245	; 0xf5
 80144dc:	73fb      	strb	r3, [r7, #15]
 80144de:	e001      	b.n	80144e4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80144e0:	23fa      	movs	r3, #250	; 0xfa
 80144e2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	7bfa      	ldrb	r2, [r7, #15]
 80144e8:	711a      	strb	r2, [r3, #4]
 80144ea:	e000      	b.n	80144ee <lwip_netconn_do_write+0xfa>
        return;
 80144ec:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80144ee:	3710      	adds	r7, #16
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}
 80144f4:	080249d4 	.word	0x080249d4
 80144f8:	08024db0 	.word	0x08024db0
 80144fc:	08024a50 	.word	0x08024a50
 8014500:	08024f38 	.word	0x08024f38
 8014504:	08024dcc 	.word	0x08024dcc
 8014508:	20023938 	.word	0x20023938

0801450c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 801450c:	b580      	push	{r7, lr}
 801450e:	b084      	sub	sp, #16
 8014510:	af00      	add	r7, sp, #0
 8014512:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	785b      	ldrb	r3, [r3, #1]
 801451e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	685b      	ldr	r3, [r3, #4]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d069      	beq.n	80145fe <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8014534:	2b10      	cmp	r3, #16
 8014536:	d162      	bne.n	80145fe <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801453c:	2b03      	cmp	r3, #3
 801453e:	d002      	beq.n	8014546 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8014540:	7afb      	ldrb	r3, [r7, #11]
 8014542:	2b02      	cmp	r3, #2
 8014544:	d05b      	beq.n	80145fe <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8014546:	7afb      	ldrb	r3, [r7, #11]
 8014548:	2b03      	cmp	r3, #3
 801454a:	d103      	bne.n	8014554 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	22f5      	movs	r2, #245	; 0xf5
 8014550:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8014552:	e059      	b.n	8014608 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8014554:	7afb      	ldrb	r3, [r7, #11]
 8014556:	2b01      	cmp	r3, #1
 8014558:	d103      	bne.n	8014562 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	22fb      	movs	r2, #251	; 0xfb
 801455e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8014560:	e052      	b.n	8014608 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	7a1b      	ldrb	r3, [r3, #8]
 8014566:	f003 0301 	and.w	r3, r3, #1
 801456a:	2b00      	cmp	r3, #0
 801456c:	d004      	beq.n	8014578 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	4618      	mov	r0, r3
 8014574:	f7ff f8d8 	bl	8013728 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801457e:	2b00      	cmp	r3, #0
 8014580:	d006      	beq.n	8014590 <lwip_netconn_do_close+0x84>
 8014582:	4b23      	ldr	r3, [pc, #140]	; (8014610 <lwip_netconn_do_close+0x104>)
 8014584:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8014588:	4922      	ldr	r1, [pc, #136]	; (8014614 <lwip_netconn_do_close+0x108>)
 801458a:	4823      	ldr	r0, [pc, #140]	; (8014618 <lwip_netconn_do_close+0x10c>)
 801458c:	f00e fbd0 	bl	8022d30 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	2204      	movs	r2, #4
 8014596:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	68fa      	ldr	r2, [r7, #12]
 801459e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	2100      	movs	r1, #0
 80145a6:	4618      	mov	r0, r3
 80145a8:	f7ff f93c 	bl	8013824 <lwip_netconn_do_close_internal>
 80145ac:	4603      	mov	r3, r0
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d029      	beq.n	8014606 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	785b      	ldrb	r3, [r3, #1]
 80145b8:	2b04      	cmp	r3, #4
 80145ba:	d006      	beq.n	80145ca <lwip_netconn_do_close+0xbe>
 80145bc:	4b14      	ldr	r3, [pc, #80]	; (8014610 <lwip_netconn_do_close+0x104>)
 80145be:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80145c2:	4916      	ldr	r1, [pc, #88]	; (801461c <lwip_netconn_do_close+0x110>)
 80145c4:	4814      	ldr	r0, [pc, #80]	; (8014618 <lwip_netconn_do_close+0x10c>)
 80145c6:	f00e fbb3 	bl	8022d30 <iprintf>
        UNLOCK_TCPIP_CORE();
 80145ca:	4815      	ldr	r0, [pc, #84]	; (8014620 <lwip_netconn_do_close+0x114>)
 80145cc:	f004 fb37 	bl	8018c3e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	330c      	adds	r3, #12
 80145d6:	2100      	movs	r1, #0
 80145d8:	4618      	mov	r0, r3
 80145da:	f004 fa96 	bl	8018b0a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80145de:	4810      	ldr	r0, [pc, #64]	; (8014620 <lwip_netconn_do_close+0x114>)
 80145e0:	f004 fb1e 	bl	8018c20 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	785b      	ldrb	r3, [r3, #1]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d00b      	beq.n	8014606 <lwip_netconn_do_close+0xfa>
 80145ee:	4b08      	ldr	r3, [pc, #32]	; (8014610 <lwip_netconn_do_close+0x104>)
 80145f0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80145f4:	4909      	ldr	r1, [pc, #36]	; (801461c <lwip_netconn_do_close+0x110>)
 80145f6:	4808      	ldr	r0, [pc, #32]	; (8014618 <lwip_netconn_do_close+0x10c>)
 80145f8:	f00e fb9a 	bl	8022d30 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80145fc:	e003      	b.n	8014606 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	22f5      	movs	r2, #245	; 0xf5
 8014602:	711a      	strb	r2, [r3, #4]
 8014604:	e000      	b.n	8014608 <lwip_netconn_do_close+0xfc>
      return;
 8014606:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8014608:	3710      	adds	r7, #16
 801460a:	46bd      	mov	sp, r7
 801460c:	bd80      	pop	{r7, pc}
 801460e:	bf00      	nop
 8014610:	080249d4 	.word	0x080249d4
 8014614:	08024db0 	.word	0x08024db0
 8014618:	08024a50 	.word	0x08024a50
 801461c:	08024dcc 	.word	0x08024dcc
 8014620:	20023938 	.word	0x20023938

08014624 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8014624:	b480      	push	{r7}
 8014626:	b083      	sub	sp, #12
 8014628:	af00      	add	r7, sp, #0
 801462a:	4603      	mov	r3, r0
 801462c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801462e:	88fb      	ldrh	r3, [r7, #6]
 8014630:	021b      	lsls	r3, r3, #8
 8014632:	b21a      	sxth	r2, r3
 8014634:	88fb      	ldrh	r3, [r7, #6]
 8014636:	0a1b      	lsrs	r3, r3, #8
 8014638:	b29b      	uxth	r3, r3
 801463a:	b21b      	sxth	r3, r3
 801463c:	4313      	orrs	r3, r2
 801463e:	b21b      	sxth	r3, r3
 8014640:	b29b      	uxth	r3, r3
}
 8014642:	4618      	mov	r0, r3
 8014644:	370c      	adds	r7, #12
 8014646:	46bd      	mov	sp, r7
 8014648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464c:	4770      	bx	lr

0801464e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801464e:	b480      	push	{r7}
 8014650:	b083      	sub	sp, #12
 8014652:	af00      	add	r7, sp, #0
 8014654:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	061a      	lsls	r2, r3, #24
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	021b      	lsls	r3, r3, #8
 801465e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8014662:	431a      	orrs	r2, r3
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	0a1b      	lsrs	r3, r3, #8
 8014668:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801466c:	431a      	orrs	r2, r3
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	0e1b      	lsrs	r3, r3, #24
 8014672:	4313      	orrs	r3, r2
}
 8014674:	4618      	mov	r0, r3
 8014676:	370c      	adds	r7, #12
 8014678:	46bd      	mov	sp, r7
 801467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467e:	4770      	bx	lr

08014680 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014680:	b580      	push	{r7, lr}
 8014682:	b082      	sub	sp, #8
 8014684:	af00      	add	r7, sp, #0
 8014686:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014688:	4915      	ldr	r1, [pc, #84]	; (80146e0 <etharp_free_entry+0x60>)
 801468a:	687a      	ldr	r2, [r7, #4]
 801468c:	4613      	mov	r3, r2
 801468e:	005b      	lsls	r3, r3, #1
 8014690:	4413      	add	r3, r2
 8014692:	00db      	lsls	r3, r3, #3
 8014694:	440b      	add	r3, r1
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d013      	beq.n	80146c4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801469c:	4910      	ldr	r1, [pc, #64]	; (80146e0 <etharp_free_entry+0x60>)
 801469e:	687a      	ldr	r2, [r7, #4]
 80146a0:	4613      	mov	r3, r2
 80146a2:	005b      	lsls	r3, r3, #1
 80146a4:	4413      	add	r3, r2
 80146a6:	00db      	lsls	r3, r3, #3
 80146a8:	440b      	add	r3, r1
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	4618      	mov	r0, r3
 80146ae:	f003 fec1 	bl	8018434 <pbuf_free>
    arp_table[i].q = NULL;
 80146b2:	490b      	ldr	r1, [pc, #44]	; (80146e0 <etharp_free_entry+0x60>)
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	4613      	mov	r3, r2
 80146b8:	005b      	lsls	r3, r3, #1
 80146ba:	4413      	add	r3, r2
 80146bc:	00db      	lsls	r3, r3, #3
 80146be:	440b      	add	r3, r1
 80146c0:	2200      	movs	r2, #0
 80146c2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80146c4:	4906      	ldr	r1, [pc, #24]	; (80146e0 <etharp_free_entry+0x60>)
 80146c6:	687a      	ldr	r2, [r7, #4]
 80146c8:	4613      	mov	r3, r2
 80146ca:	005b      	lsls	r3, r3, #1
 80146cc:	4413      	add	r3, r2
 80146ce:	00db      	lsls	r3, r3, #3
 80146d0:	440b      	add	r3, r1
 80146d2:	3314      	adds	r3, #20
 80146d4:	2200      	movs	r2, #0
 80146d6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80146d8:	bf00      	nop
 80146da:	3708      	adds	r7, #8
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}
 80146e0:	20018e14 	.word	0x20018e14

080146e4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b082      	sub	sp, #8
 80146e8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146ea:	2300      	movs	r3, #0
 80146ec:	607b      	str	r3, [r7, #4]
 80146ee:	e096      	b.n	801481e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80146f0:	494f      	ldr	r1, [pc, #316]	; (8014830 <etharp_tmr+0x14c>)
 80146f2:	687a      	ldr	r2, [r7, #4]
 80146f4:	4613      	mov	r3, r2
 80146f6:	005b      	lsls	r3, r3, #1
 80146f8:	4413      	add	r3, r2
 80146fa:	00db      	lsls	r3, r3, #3
 80146fc:	440b      	add	r3, r1
 80146fe:	3314      	adds	r3, #20
 8014700:	781b      	ldrb	r3, [r3, #0]
 8014702:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014704:	78fb      	ldrb	r3, [r7, #3]
 8014706:	2b00      	cmp	r3, #0
 8014708:	f000 8086 	beq.w	8014818 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801470c:	4948      	ldr	r1, [pc, #288]	; (8014830 <etharp_tmr+0x14c>)
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	4613      	mov	r3, r2
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	4413      	add	r3, r2
 8014716:	00db      	lsls	r3, r3, #3
 8014718:	440b      	add	r3, r1
 801471a:	3312      	adds	r3, #18
 801471c:	881b      	ldrh	r3, [r3, #0]
 801471e:	3301      	adds	r3, #1
 8014720:	b298      	uxth	r0, r3
 8014722:	4943      	ldr	r1, [pc, #268]	; (8014830 <etharp_tmr+0x14c>)
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	4613      	mov	r3, r2
 8014728:	005b      	lsls	r3, r3, #1
 801472a:	4413      	add	r3, r2
 801472c:	00db      	lsls	r3, r3, #3
 801472e:	440b      	add	r3, r1
 8014730:	3312      	adds	r3, #18
 8014732:	4602      	mov	r2, r0
 8014734:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014736:	493e      	ldr	r1, [pc, #248]	; (8014830 <etharp_tmr+0x14c>)
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	4613      	mov	r3, r2
 801473c:	005b      	lsls	r3, r3, #1
 801473e:	4413      	add	r3, r2
 8014740:	00db      	lsls	r3, r3, #3
 8014742:	440b      	add	r3, r1
 8014744:	3312      	adds	r3, #18
 8014746:	881b      	ldrh	r3, [r3, #0]
 8014748:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801474c:	d215      	bcs.n	801477a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801474e:	4938      	ldr	r1, [pc, #224]	; (8014830 <etharp_tmr+0x14c>)
 8014750:	687a      	ldr	r2, [r7, #4]
 8014752:	4613      	mov	r3, r2
 8014754:	005b      	lsls	r3, r3, #1
 8014756:	4413      	add	r3, r2
 8014758:	00db      	lsls	r3, r3, #3
 801475a:	440b      	add	r3, r1
 801475c:	3314      	adds	r3, #20
 801475e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014760:	2b01      	cmp	r3, #1
 8014762:	d10e      	bne.n	8014782 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014764:	4932      	ldr	r1, [pc, #200]	; (8014830 <etharp_tmr+0x14c>)
 8014766:	687a      	ldr	r2, [r7, #4]
 8014768:	4613      	mov	r3, r2
 801476a:	005b      	lsls	r3, r3, #1
 801476c:	4413      	add	r3, r2
 801476e:	00db      	lsls	r3, r3, #3
 8014770:	440b      	add	r3, r1
 8014772:	3312      	adds	r3, #18
 8014774:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014776:	2b04      	cmp	r3, #4
 8014778:	d903      	bls.n	8014782 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f7ff ff80 	bl	8014680 <etharp_free_entry>
 8014780:	e04a      	b.n	8014818 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014782:	492b      	ldr	r1, [pc, #172]	; (8014830 <etharp_tmr+0x14c>)
 8014784:	687a      	ldr	r2, [r7, #4]
 8014786:	4613      	mov	r3, r2
 8014788:	005b      	lsls	r3, r3, #1
 801478a:	4413      	add	r3, r2
 801478c:	00db      	lsls	r3, r3, #3
 801478e:	440b      	add	r3, r1
 8014790:	3314      	adds	r3, #20
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	2b03      	cmp	r3, #3
 8014796:	d10a      	bne.n	80147ae <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014798:	4925      	ldr	r1, [pc, #148]	; (8014830 <etharp_tmr+0x14c>)
 801479a:	687a      	ldr	r2, [r7, #4]
 801479c:	4613      	mov	r3, r2
 801479e:	005b      	lsls	r3, r3, #1
 80147a0:	4413      	add	r3, r2
 80147a2:	00db      	lsls	r3, r3, #3
 80147a4:	440b      	add	r3, r1
 80147a6:	3314      	adds	r3, #20
 80147a8:	2204      	movs	r2, #4
 80147aa:	701a      	strb	r2, [r3, #0]
 80147ac:	e034      	b.n	8014818 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80147ae:	4920      	ldr	r1, [pc, #128]	; (8014830 <etharp_tmr+0x14c>)
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	4613      	mov	r3, r2
 80147b4:	005b      	lsls	r3, r3, #1
 80147b6:	4413      	add	r3, r2
 80147b8:	00db      	lsls	r3, r3, #3
 80147ba:	440b      	add	r3, r1
 80147bc:	3314      	adds	r3, #20
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	2b04      	cmp	r3, #4
 80147c2:	d10a      	bne.n	80147da <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80147c4:	491a      	ldr	r1, [pc, #104]	; (8014830 <etharp_tmr+0x14c>)
 80147c6:	687a      	ldr	r2, [r7, #4]
 80147c8:	4613      	mov	r3, r2
 80147ca:	005b      	lsls	r3, r3, #1
 80147cc:	4413      	add	r3, r2
 80147ce:	00db      	lsls	r3, r3, #3
 80147d0:	440b      	add	r3, r1
 80147d2:	3314      	adds	r3, #20
 80147d4:	2202      	movs	r2, #2
 80147d6:	701a      	strb	r2, [r3, #0]
 80147d8:	e01e      	b.n	8014818 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80147da:	4915      	ldr	r1, [pc, #84]	; (8014830 <etharp_tmr+0x14c>)
 80147dc:	687a      	ldr	r2, [r7, #4]
 80147de:	4613      	mov	r3, r2
 80147e0:	005b      	lsls	r3, r3, #1
 80147e2:	4413      	add	r3, r2
 80147e4:	00db      	lsls	r3, r3, #3
 80147e6:	440b      	add	r3, r1
 80147e8:	3314      	adds	r3, #20
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	2b01      	cmp	r3, #1
 80147ee:	d113      	bne.n	8014818 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80147f0:	490f      	ldr	r1, [pc, #60]	; (8014830 <etharp_tmr+0x14c>)
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	4613      	mov	r3, r2
 80147f6:	005b      	lsls	r3, r3, #1
 80147f8:	4413      	add	r3, r2
 80147fa:	00db      	lsls	r3, r3, #3
 80147fc:	440b      	add	r3, r1
 80147fe:	3308      	adds	r3, #8
 8014800:	6818      	ldr	r0, [r3, #0]
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	4613      	mov	r3, r2
 8014806:	005b      	lsls	r3, r3, #1
 8014808:	4413      	add	r3, r2
 801480a:	00db      	lsls	r3, r3, #3
 801480c:	4a08      	ldr	r2, [pc, #32]	; (8014830 <etharp_tmr+0x14c>)
 801480e:	4413      	add	r3, r2
 8014810:	3304      	adds	r3, #4
 8014812:	4619      	mov	r1, r3
 8014814:	f000 fe6e 	bl	80154f4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	3301      	adds	r3, #1
 801481c:	607b      	str	r3, [r7, #4]
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2b09      	cmp	r3, #9
 8014822:	f77f af65 	ble.w	80146f0 <etharp_tmr+0xc>
      }
    }
  }
}
 8014826:	bf00      	nop
 8014828:	bf00      	nop
 801482a:	3708      	adds	r7, #8
 801482c:	46bd      	mov	sp, r7
 801482e:	bd80      	pop	{r7, pc}
 8014830:	20018e14 	.word	0x20018e14

08014834 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b08a      	sub	sp, #40	; 0x28
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	460b      	mov	r3, r1
 801483e:	607a      	str	r2, [r7, #4]
 8014840:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014842:	230a      	movs	r3, #10
 8014844:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014846:	230a      	movs	r3, #10
 8014848:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801484a:	230a      	movs	r3, #10
 801484c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801484e:	2300      	movs	r3, #0
 8014850:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014852:	230a      	movs	r3, #10
 8014854:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014856:	2300      	movs	r3, #0
 8014858:	83bb      	strh	r3, [r7, #28]
 801485a:	2300      	movs	r3, #0
 801485c:	837b      	strh	r3, [r7, #26]
 801485e:	2300      	movs	r3, #0
 8014860:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014862:	2300      	movs	r3, #0
 8014864:	843b      	strh	r3, [r7, #32]
 8014866:	e0ae      	b.n	80149c6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014868:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801486c:	49a6      	ldr	r1, [pc, #664]	; (8014b08 <etharp_find_entry+0x2d4>)
 801486e:	4613      	mov	r3, r2
 8014870:	005b      	lsls	r3, r3, #1
 8014872:	4413      	add	r3, r2
 8014874:	00db      	lsls	r3, r3, #3
 8014876:	440b      	add	r3, r1
 8014878:	3314      	adds	r3, #20
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801487e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014882:	2b0a      	cmp	r3, #10
 8014884:	d105      	bne.n	8014892 <etharp_find_entry+0x5e>
 8014886:	7dfb      	ldrb	r3, [r7, #23]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d102      	bne.n	8014892 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801488c:	8c3b      	ldrh	r3, [r7, #32]
 801488e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014890:	e095      	b.n	80149be <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014892:	7dfb      	ldrb	r3, [r7, #23]
 8014894:	2b00      	cmp	r3, #0
 8014896:	f000 8092 	beq.w	80149be <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801489a:	7dfb      	ldrb	r3, [r7, #23]
 801489c:	2b01      	cmp	r3, #1
 801489e:	d009      	beq.n	80148b4 <etharp_find_entry+0x80>
 80148a0:	7dfb      	ldrb	r3, [r7, #23]
 80148a2:	2b01      	cmp	r3, #1
 80148a4:	d806      	bhi.n	80148b4 <etharp_find_entry+0x80>
 80148a6:	4b99      	ldr	r3, [pc, #612]	; (8014b0c <etharp_find_entry+0x2d8>)
 80148a8:	f240 1223 	movw	r2, #291	; 0x123
 80148ac:	4998      	ldr	r1, [pc, #608]	; (8014b10 <etharp_find_entry+0x2dc>)
 80148ae:	4899      	ldr	r0, [pc, #612]	; (8014b14 <etharp_find_entry+0x2e0>)
 80148b0:	f00e fa3e 	bl	8022d30 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d020      	beq.n	80148fc <etharp_find_entry+0xc8>
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	6819      	ldr	r1, [r3, #0]
 80148be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148c2:	4891      	ldr	r0, [pc, #580]	; (8014b08 <etharp_find_entry+0x2d4>)
 80148c4:	4613      	mov	r3, r2
 80148c6:	005b      	lsls	r3, r3, #1
 80148c8:	4413      	add	r3, r2
 80148ca:	00db      	lsls	r3, r3, #3
 80148cc:	4403      	add	r3, r0
 80148ce:	3304      	adds	r3, #4
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	4299      	cmp	r1, r3
 80148d4:	d112      	bne.n	80148fc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d00c      	beq.n	80148f6 <etharp_find_entry+0xc2>
 80148dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148e0:	4989      	ldr	r1, [pc, #548]	; (8014b08 <etharp_find_entry+0x2d4>)
 80148e2:	4613      	mov	r3, r2
 80148e4:	005b      	lsls	r3, r3, #1
 80148e6:	4413      	add	r3, r2
 80148e8:	00db      	lsls	r3, r3, #3
 80148ea:	440b      	add	r3, r1
 80148ec:	3308      	adds	r3, #8
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d102      	bne.n	80148fc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80148f6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148fa:	e100      	b.n	8014afe <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80148fc:	7dfb      	ldrb	r3, [r7, #23]
 80148fe:	2b01      	cmp	r3, #1
 8014900:	d140      	bne.n	8014984 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014902:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014906:	4980      	ldr	r1, [pc, #512]	; (8014b08 <etharp_find_entry+0x2d4>)
 8014908:	4613      	mov	r3, r2
 801490a:	005b      	lsls	r3, r3, #1
 801490c:	4413      	add	r3, r2
 801490e:	00db      	lsls	r3, r3, #3
 8014910:	440b      	add	r3, r1
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d01a      	beq.n	801494e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014918:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801491c:	497a      	ldr	r1, [pc, #488]	; (8014b08 <etharp_find_entry+0x2d4>)
 801491e:	4613      	mov	r3, r2
 8014920:	005b      	lsls	r3, r3, #1
 8014922:	4413      	add	r3, r2
 8014924:	00db      	lsls	r3, r3, #3
 8014926:	440b      	add	r3, r1
 8014928:	3312      	adds	r3, #18
 801492a:	881b      	ldrh	r3, [r3, #0]
 801492c:	8bba      	ldrh	r2, [r7, #28]
 801492e:	429a      	cmp	r2, r3
 8014930:	d845      	bhi.n	80149be <etharp_find_entry+0x18a>
            old_queue = i;
 8014932:	8c3b      	ldrh	r3, [r7, #32]
 8014934:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014936:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801493a:	4973      	ldr	r1, [pc, #460]	; (8014b08 <etharp_find_entry+0x2d4>)
 801493c:	4613      	mov	r3, r2
 801493e:	005b      	lsls	r3, r3, #1
 8014940:	4413      	add	r3, r2
 8014942:	00db      	lsls	r3, r3, #3
 8014944:	440b      	add	r3, r1
 8014946:	3312      	adds	r3, #18
 8014948:	881b      	ldrh	r3, [r3, #0]
 801494a:	83bb      	strh	r3, [r7, #28]
 801494c:	e037      	b.n	80149be <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801494e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014952:	496d      	ldr	r1, [pc, #436]	; (8014b08 <etharp_find_entry+0x2d4>)
 8014954:	4613      	mov	r3, r2
 8014956:	005b      	lsls	r3, r3, #1
 8014958:	4413      	add	r3, r2
 801495a:	00db      	lsls	r3, r3, #3
 801495c:	440b      	add	r3, r1
 801495e:	3312      	adds	r3, #18
 8014960:	881b      	ldrh	r3, [r3, #0]
 8014962:	8b7a      	ldrh	r2, [r7, #26]
 8014964:	429a      	cmp	r2, r3
 8014966:	d82a      	bhi.n	80149be <etharp_find_entry+0x18a>
            old_pending = i;
 8014968:	8c3b      	ldrh	r3, [r7, #32]
 801496a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801496c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014970:	4965      	ldr	r1, [pc, #404]	; (8014b08 <etharp_find_entry+0x2d4>)
 8014972:	4613      	mov	r3, r2
 8014974:	005b      	lsls	r3, r3, #1
 8014976:	4413      	add	r3, r2
 8014978:	00db      	lsls	r3, r3, #3
 801497a:	440b      	add	r3, r1
 801497c:	3312      	adds	r3, #18
 801497e:	881b      	ldrh	r3, [r3, #0]
 8014980:	837b      	strh	r3, [r7, #26]
 8014982:	e01c      	b.n	80149be <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014984:	7dfb      	ldrb	r3, [r7, #23]
 8014986:	2b01      	cmp	r3, #1
 8014988:	d919      	bls.n	80149be <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801498a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801498e:	495e      	ldr	r1, [pc, #376]	; (8014b08 <etharp_find_entry+0x2d4>)
 8014990:	4613      	mov	r3, r2
 8014992:	005b      	lsls	r3, r3, #1
 8014994:	4413      	add	r3, r2
 8014996:	00db      	lsls	r3, r3, #3
 8014998:	440b      	add	r3, r1
 801499a:	3312      	adds	r3, #18
 801499c:	881b      	ldrh	r3, [r3, #0]
 801499e:	8b3a      	ldrh	r2, [r7, #24]
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d80c      	bhi.n	80149be <etharp_find_entry+0x18a>
            old_stable = i;
 80149a4:	8c3b      	ldrh	r3, [r7, #32]
 80149a6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80149a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149ac:	4956      	ldr	r1, [pc, #344]	; (8014b08 <etharp_find_entry+0x2d4>)
 80149ae:	4613      	mov	r3, r2
 80149b0:	005b      	lsls	r3, r3, #1
 80149b2:	4413      	add	r3, r2
 80149b4:	00db      	lsls	r3, r3, #3
 80149b6:	440b      	add	r3, r1
 80149b8:	3312      	adds	r3, #18
 80149ba:	881b      	ldrh	r3, [r3, #0]
 80149bc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80149be:	8c3b      	ldrh	r3, [r7, #32]
 80149c0:	3301      	adds	r3, #1
 80149c2:	b29b      	uxth	r3, r3
 80149c4:	843b      	strh	r3, [r7, #32]
 80149c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80149ca:	2b09      	cmp	r3, #9
 80149cc:	f77f af4c 	ble.w	8014868 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80149d0:	7afb      	ldrb	r3, [r7, #11]
 80149d2:	f003 0302 	and.w	r3, r3, #2
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d108      	bne.n	80149ec <etharp_find_entry+0x1b8>
 80149da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80149de:	2b0a      	cmp	r3, #10
 80149e0:	d107      	bne.n	80149f2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80149e2:	7afb      	ldrb	r3, [r7, #11]
 80149e4:	f003 0301 	and.w	r3, r3, #1
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d102      	bne.n	80149f2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80149ec:	f04f 33ff 	mov.w	r3, #4294967295
 80149f0:	e085      	b.n	8014afe <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80149f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80149f6:	2b09      	cmp	r3, #9
 80149f8:	dc02      	bgt.n	8014a00 <etharp_find_entry+0x1cc>
    i = empty;
 80149fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149fc:	843b      	strh	r3, [r7, #32]
 80149fe:	e039      	b.n	8014a74 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014a00:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014a04:	2b09      	cmp	r3, #9
 8014a06:	dc14      	bgt.n	8014a32 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a0a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014a0c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a10:	493d      	ldr	r1, [pc, #244]	; (8014b08 <etharp_find_entry+0x2d4>)
 8014a12:	4613      	mov	r3, r2
 8014a14:	005b      	lsls	r3, r3, #1
 8014a16:	4413      	add	r3, r2
 8014a18:	00db      	lsls	r3, r3, #3
 8014a1a:	440b      	add	r3, r1
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d018      	beq.n	8014a54 <etharp_find_entry+0x220>
 8014a22:	4b3a      	ldr	r3, [pc, #232]	; (8014b0c <etharp_find_entry+0x2d8>)
 8014a24:	f240 126d 	movw	r2, #365	; 0x16d
 8014a28:	493b      	ldr	r1, [pc, #236]	; (8014b18 <etharp_find_entry+0x2e4>)
 8014a2a:	483a      	ldr	r0, [pc, #232]	; (8014b14 <etharp_find_entry+0x2e0>)
 8014a2c:	f00e f980 	bl	8022d30 <iprintf>
 8014a30:	e010      	b.n	8014a54 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014a32:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014a36:	2b09      	cmp	r3, #9
 8014a38:	dc02      	bgt.n	8014a40 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014a3a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014a3c:	843b      	strh	r3, [r7, #32]
 8014a3e:	e009      	b.n	8014a54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014a44:	2b09      	cmp	r3, #9
 8014a46:	dc02      	bgt.n	8014a4e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014a48:	8bfb      	ldrh	r3, [r7, #30]
 8014a4a:	843b      	strh	r3, [r7, #32]
 8014a4c:	e002      	b.n	8014a54 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014a52:	e054      	b.n	8014afe <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014a54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a58:	2b09      	cmp	r3, #9
 8014a5a:	dd06      	ble.n	8014a6a <etharp_find_entry+0x236>
 8014a5c:	4b2b      	ldr	r3, [pc, #172]	; (8014b0c <etharp_find_entry+0x2d8>)
 8014a5e:	f240 127f 	movw	r2, #383	; 0x17f
 8014a62:	492e      	ldr	r1, [pc, #184]	; (8014b1c <etharp_find_entry+0x2e8>)
 8014a64:	482b      	ldr	r0, [pc, #172]	; (8014b14 <etharp_find_entry+0x2e0>)
 8014a66:	f00e f963 	bl	8022d30 <iprintf>
    etharp_free_entry(i);
 8014a6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f7ff fe06 	bl	8014680 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014a74:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a78:	2b09      	cmp	r3, #9
 8014a7a:	dd06      	ble.n	8014a8a <etharp_find_entry+0x256>
 8014a7c:	4b23      	ldr	r3, [pc, #140]	; (8014b0c <etharp_find_entry+0x2d8>)
 8014a7e:	f240 1283 	movw	r2, #387	; 0x183
 8014a82:	4926      	ldr	r1, [pc, #152]	; (8014b1c <etharp_find_entry+0x2e8>)
 8014a84:	4823      	ldr	r0, [pc, #140]	; (8014b14 <etharp_find_entry+0x2e0>)
 8014a86:	f00e f953 	bl	8022d30 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014a8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a8e:	491e      	ldr	r1, [pc, #120]	; (8014b08 <etharp_find_entry+0x2d4>)
 8014a90:	4613      	mov	r3, r2
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	4413      	add	r3, r2
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	440b      	add	r3, r1
 8014a9a:	3314      	adds	r3, #20
 8014a9c:	781b      	ldrb	r3, [r3, #0]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d006      	beq.n	8014ab0 <etharp_find_entry+0x27c>
 8014aa2:	4b1a      	ldr	r3, [pc, #104]	; (8014b0c <etharp_find_entry+0x2d8>)
 8014aa4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014aa8:	491d      	ldr	r1, [pc, #116]	; (8014b20 <etharp_find_entry+0x2ec>)
 8014aaa:	481a      	ldr	r0, [pc, #104]	; (8014b14 <etharp_find_entry+0x2e0>)
 8014aac:	f00e f940 	bl	8022d30 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d00b      	beq.n	8014ace <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014ab6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	6819      	ldr	r1, [r3, #0]
 8014abe:	4812      	ldr	r0, [pc, #72]	; (8014b08 <etharp_find_entry+0x2d4>)
 8014ac0:	4613      	mov	r3, r2
 8014ac2:	005b      	lsls	r3, r3, #1
 8014ac4:	4413      	add	r3, r2
 8014ac6:	00db      	lsls	r3, r3, #3
 8014ac8:	4403      	add	r3, r0
 8014aca:	3304      	adds	r3, #4
 8014acc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014ace:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ad2:	490d      	ldr	r1, [pc, #52]	; (8014b08 <etharp_find_entry+0x2d4>)
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	005b      	lsls	r3, r3, #1
 8014ad8:	4413      	add	r3, r2
 8014ada:	00db      	lsls	r3, r3, #3
 8014adc:	440b      	add	r3, r1
 8014ade:	3312      	adds	r3, #18
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014ae4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014ae8:	4907      	ldr	r1, [pc, #28]	; (8014b08 <etharp_find_entry+0x2d4>)
 8014aea:	4613      	mov	r3, r2
 8014aec:	005b      	lsls	r3, r3, #1
 8014aee:	4413      	add	r3, r2
 8014af0:	00db      	lsls	r3, r3, #3
 8014af2:	440b      	add	r3, r1
 8014af4:	3308      	adds	r3, #8
 8014af6:	687a      	ldr	r2, [r7, #4]
 8014af8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014afa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014afe:	4618      	mov	r0, r3
 8014b00:	3728      	adds	r7, #40	; 0x28
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
 8014b06:	bf00      	nop
 8014b08:	20018e14 	.word	0x20018e14
 8014b0c:	08024f64 	.word	0x08024f64
 8014b10:	08024fd4 	.word	0x08024fd4
 8014b14:	08025014 	.word	0x08025014
 8014b18:	0802503c 	.word	0x0802503c
 8014b1c:	08025054 	.word	0x08025054
 8014b20:	08025068 	.word	0x08025068

08014b24 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b088      	sub	sp, #32
 8014b28:	af02      	add	r7, sp, #8
 8014b2a:	60f8      	str	r0, [r7, #12]
 8014b2c:	60b9      	str	r1, [r7, #8]
 8014b2e:	607a      	str	r2, [r7, #4]
 8014b30:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014b38:	2b06      	cmp	r3, #6
 8014b3a:	d006      	beq.n	8014b4a <etharp_update_arp_entry+0x26>
 8014b3c:	4b48      	ldr	r3, [pc, #288]	; (8014c60 <etharp_update_arp_entry+0x13c>)
 8014b3e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014b42:	4948      	ldr	r1, [pc, #288]	; (8014c64 <etharp_update_arp_entry+0x140>)
 8014b44:	4848      	ldr	r0, [pc, #288]	; (8014c68 <etharp_update_arp_entry+0x144>)
 8014b46:	f00e f8f3 	bl	8022d30 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014b4a:	68bb      	ldr	r3, [r7, #8]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d012      	beq.n	8014b76 <etharp_update_arp_entry+0x52>
 8014b50:	68bb      	ldr	r3, [r7, #8]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d00e      	beq.n	8014b76 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	68f9      	ldr	r1, [r7, #12]
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f001 f9ec 	bl	8015f3c <ip4_addr_isbroadcast_u32>
 8014b64:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d105      	bne.n	8014b76 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014b6a:	68bb      	ldr	r3, [r7, #8]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b72:	2be0      	cmp	r3, #224	; 0xe0
 8014b74:	d102      	bne.n	8014b7c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014b76:	f06f 030f 	mvn.w	r3, #15
 8014b7a:	e06c      	b.n	8014c56 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014b7c:	78fb      	ldrb	r3, [r7, #3]
 8014b7e:	68fa      	ldr	r2, [r7, #12]
 8014b80:	4619      	mov	r1, r3
 8014b82:	68b8      	ldr	r0, [r7, #8]
 8014b84:	f7ff fe56 	bl	8014834 <etharp_find_entry>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014b8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	da02      	bge.n	8014b9a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014b94:	8afb      	ldrh	r3, [r7, #22]
 8014b96:	b25b      	sxtb	r3, r3
 8014b98:	e05d      	b.n	8014c56 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014b9a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b9e:	4933      	ldr	r1, [pc, #204]	; (8014c6c <etharp_update_arp_entry+0x148>)
 8014ba0:	4613      	mov	r3, r2
 8014ba2:	005b      	lsls	r3, r3, #1
 8014ba4:	4413      	add	r3, r2
 8014ba6:	00db      	lsls	r3, r3, #3
 8014ba8:	440b      	add	r3, r1
 8014baa:	3314      	adds	r3, #20
 8014bac:	2202      	movs	r2, #2
 8014bae:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014bb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bb4:	492d      	ldr	r1, [pc, #180]	; (8014c6c <etharp_update_arp_entry+0x148>)
 8014bb6:	4613      	mov	r3, r2
 8014bb8:	005b      	lsls	r3, r3, #1
 8014bba:	4413      	add	r3, r2
 8014bbc:	00db      	lsls	r3, r3, #3
 8014bbe:	440b      	add	r3, r1
 8014bc0:	3308      	adds	r3, #8
 8014bc2:	68fa      	ldr	r2, [r7, #12]
 8014bc4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014bc6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bca:	4613      	mov	r3, r2
 8014bcc:	005b      	lsls	r3, r3, #1
 8014bce:	4413      	add	r3, r2
 8014bd0:	00db      	lsls	r3, r3, #3
 8014bd2:	3308      	adds	r3, #8
 8014bd4:	4a25      	ldr	r2, [pc, #148]	; (8014c6c <etharp_update_arp_entry+0x148>)
 8014bd6:	4413      	add	r3, r2
 8014bd8:	3304      	adds	r3, #4
 8014bda:	2206      	movs	r2, #6
 8014bdc:	6879      	ldr	r1, [r7, #4]
 8014bde:	4618      	mov	r0, r3
 8014be0:	f00e fa96 	bl	8023110 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014be4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014be8:	4920      	ldr	r1, [pc, #128]	; (8014c6c <etharp_update_arp_entry+0x148>)
 8014bea:	4613      	mov	r3, r2
 8014bec:	005b      	lsls	r3, r3, #1
 8014bee:	4413      	add	r3, r2
 8014bf0:	00db      	lsls	r3, r3, #3
 8014bf2:	440b      	add	r3, r1
 8014bf4:	3312      	adds	r3, #18
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014bfa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bfe:	491b      	ldr	r1, [pc, #108]	; (8014c6c <etharp_update_arp_entry+0x148>)
 8014c00:	4613      	mov	r3, r2
 8014c02:	005b      	lsls	r3, r3, #1
 8014c04:	4413      	add	r3, r2
 8014c06:	00db      	lsls	r3, r3, #3
 8014c08:	440b      	add	r3, r1
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d021      	beq.n	8014c54 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014c10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c14:	4915      	ldr	r1, [pc, #84]	; (8014c6c <etharp_update_arp_entry+0x148>)
 8014c16:	4613      	mov	r3, r2
 8014c18:	005b      	lsls	r3, r3, #1
 8014c1a:	4413      	add	r3, r2
 8014c1c:	00db      	lsls	r3, r3, #3
 8014c1e:	440b      	add	r3, r1
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014c24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014c28:	4910      	ldr	r1, [pc, #64]	; (8014c6c <etharp_update_arp_entry+0x148>)
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	005b      	lsls	r3, r3, #1
 8014c2e:	4413      	add	r3, r2
 8014c30:	00db      	lsls	r3, r3, #3
 8014c32:	440b      	add	r3, r1
 8014c34:	2200      	movs	r2, #0
 8014c36:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c42:	9300      	str	r3, [sp, #0]
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	6939      	ldr	r1, [r7, #16]
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f000 fcf3 	bl	8015634 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014c4e:	6938      	ldr	r0, [r7, #16]
 8014c50:	f003 fbf0 	bl	8018434 <pbuf_free>
  }
  return ERR_OK;
 8014c54:	2300      	movs	r3, #0
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3718      	adds	r7, #24
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	08024f64 	.word	0x08024f64
 8014c64:	08025094 	.word	0x08025094
 8014c68:	08025014 	.word	0x08025014
 8014c6c:	20018e14 	.word	0x20018e14

08014c70 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b084      	sub	sp, #16
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c78:	2300      	movs	r3, #0
 8014c7a:	60fb      	str	r3, [r7, #12]
 8014c7c:	e01e      	b.n	8014cbc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014c7e:	4913      	ldr	r1, [pc, #76]	; (8014ccc <etharp_cleanup_netif+0x5c>)
 8014c80:	68fa      	ldr	r2, [r7, #12]
 8014c82:	4613      	mov	r3, r2
 8014c84:	005b      	lsls	r3, r3, #1
 8014c86:	4413      	add	r3, r2
 8014c88:	00db      	lsls	r3, r3, #3
 8014c8a:	440b      	add	r3, r1
 8014c8c:	3314      	adds	r3, #20
 8014c8e:	781b      	ldrb	r3, [r3, #0]
 8014c90:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014c92:	7afb      	ldrb	r3, [r7, #11]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d00e      	beq.n	8014cb6 <etharp_cleanup_netif+0x46>
 8014c98:	490c      	ldr	r1, [pc, #48]	; (8014ccc <etharp_cleanup_netif+0x5c>)
 8014c9a:	68fa      	ldr	r2, [r7, #12]
 8014c9c:	4613      	mov	r3, r2
 8014c9e:	005b      	lsls	r3, r3, #1
 8014ca0:	4413      	add	r3, r2
 8014ca2:	00db      	lsls	r3, r3, #3
 8014ca4:	440b      	add	r3, r1
 8014ca6:	3308      	adds	r3, #8
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	687a      	ldr	r2, [r7, #4]
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d102      	bne.n	8014cb6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	f7ff fce5 	bl	8014680 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	3301      	adds	r3, #1
 8014cba:	60fb      	str	r3, [r7, #12]
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2b09      	cmp	r3, #9
 8014cc0:	dddd      	ble.n	8014c7e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014cc2:	bf00      	nop
 8014cc4:	bf00      	nop
 8014cc6:	3710      	adds	r7, #16
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}
 8014ccc:	20018e14 	.word	0x20018e14

08014cd0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014cd0:	b5b0      	push	{r4, r5, r7, lr}
 8014cd2:	b08a      	sub	sp, #40	; 0x28
 8014cd4:	af04      	add	r7, sp, #16
 8014cd6:	6078      	str	r0, [r7, #4]
 8014cd8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d107      	bne.n	8014cf0 <etharp_input+0x20>
 8014ce0:	4b3d      	ldr	r3, [pc, #244]	; (8014dd8 <etharp_input+0x108>)
 8014ce2:	f240 228a 	movw	r2, #650	; 0x28a
 8014ce6:	493d      	ldr	r1, [pc, #244]	; (8014ddc <etharp_input+0x10c>)
 8014ce8:	483d      	ldr	r0, [pc, #244]	; (8014de0 <etharp_input+0x110>)
 8014cea:	f00e f821 	bl	8022d30 <iprintf>
 8014cee:	e06f      	b.n	8014dd0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	685b      	ldr	r3, [r3, #4]
 8014cf4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	881b      	ldrh	r3, [r3, #0]
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d00:	d10c      	bne.n	8014d1c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014d06:	2b06      	cmp	r3, #6
 8014d08:	d108      	bne.n	8014d1c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014d0a:	693b      	ldr	r3, [r7, #16]
 8014d0c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014d0e:	2b04      	cmp	r3, #4
 8014d10:	d104      	bne.n	8014d1c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014d12:	693b      	ldr	r3, [r7, #16]
 8014d14:	885b      	ldrh	r3, [r3, #2]
 8014d16:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014d18:	2b08      	cmp	r3, #8
 8014d1a:	d003      	beq.n	8014d24 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f003 fb89 	bl	8018434 <pbuf_free>
    return;
 8014d22:	e055      	b.n	8014dd0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014d24:	693b      	ldr	r3, [r7, #16]
 8014d26:	330e      	adds	r3, #14
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	3318      	adds	r3, #24
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	3304      	adds	r3, #4
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d102      	bne.n	8014d44 <etharp_input+0x74>
    for_us = 0;
 8014d3e:	2300      	movs	r3, #0
 8014d40:	75fb      	strb	r3, [r7, #23]
 8014d42:	e009      	b.n	8014d58 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014d44:	68ba      	ldr	r2, [r7, #8]
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	3304      	adds	r3, #4
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	bf0c      	ite	eq
 8014d50:	2301      	moveq	r3, #1
 8014d52:	2300      	movne	r3, #0
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	f103 0208 	add.w	r2, r3, #8
 8014d5e:	7dfb      	ldrb	r3, [r7, #23]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d001      	beq.n	8014d68 <etharp_input+0x98>
 8014d64:	2301      	movs	r3, #1
 8014d66:	e000      	b.n	8014d6a <etharp_input+0x9a>
 8014d68:	2302      	movs	r3, #2
 8014d6a:	f107 010c 	add.w	r1, r7, #12
 8014d6e:	6838      	ldr	r0, [r7, #0]
 8014d70:	f7ff fed8 	bl	8014b24 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	88db      	ldrh	r3, [r3, #6]
 8014d78:	b29b      	uxth	r3, r3
 8014d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d7e:	d003      	beq.n	8014d88 <etharp_input+0xb8>
 8014d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d84:	d01e      	beq.n	8014dc4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014d86:	e020      	b.n	8014dca <etharp_input+0xfa>
      if (for_us) {
 8014d88:	7dfb      	ldrb	r3, [r7, #23]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d01c      	beq.n	8014dc8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014d8e:	683b      	ldr	r3, [r7, #0]
 8014d90:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014d94:	693b      	ldr	r3, [r7, #16]
 8014d96:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014da0:	683b      	ldr	r3, [r7, #0]
 8014da2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014da4:	693a      	ldr	r2, [r7, #16]
 8014da6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014da8:	2102      	movs	r1, #2
 8014daa:	9103      	str	r1, [sp, #12]
 8014dac:	f107 010c 	add.w	r1, r7, #12
 8014db0:	9102      	str	r1, [sp, #8]
 8014db2:	9201      	str	r2, [sp, #4]
 8014db4:	9300      	str	r3, [sp, #0]
 8014db6:	462b      	mov	r3, r5
 8014db8:	4622      	mov	r2, r4
 8014dba:	4601      	mov	r1, r0
 8014dbc:	6838      	ldr	r0, [r7, #0]
 8014dbe:	f000 faeb 	bl	8015398 <etharp_raw>
      break;
 8014dc2:	e001      	b.n	8014dc8 <etharp_input+0xf8>
      break;
 8014dc4:	bf00      	nop
 8014dc6:	e000      	b.n	8014dca <etharp_input+0xfa>
      break;
 8014dc8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f003 fb32 	bl	8018434 <pbuf_free>
}
 8014dd0:	3718      	adds	r7, #24
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	08024f64 	.word	0x08024f64
 8014ddc:	080250ec 	.word	0x080250ec
 8014de0:	08025014 	.word	0x08025014

08014de4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b086      	sub	sp, #24
 8014de8:	af02      	add	r7, sp, #8
 8014dea:	60f8      	str	r0, [r7, #12]
 8014dec:	60b9      	str	r1, [r7, #8]
 8014dee:	4613      	mov	r3, r2
 8014df0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014df2:	79fa      	ldrb	r2, [r7, #7]
 8014df4:	4944      	ldr	r1, [pc, #272]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014df6:	4613      	mov	r3, r2
 8014df8:	005b      	lsls	r3, r3, #1
 8014dfa:	4413      	add	r3, r2
 8014dfc:	00db      	lsls	r3, r3, #3
 8014dfe:	440b      	add	r3, r1
 8014e00:	3314      	adds	r3, #20
 8014e02:	781b      	ldrb	r3, [r3, #0]
 8014e04:	2b01      	cmp	r3, #1
 8014e06:	d806      	bhi.n	8014e16 <etharp_output_to_arp_index+0x32>
 8014e08:	4b40      	ldr	r3, [pc, #256]	; (8014f0c <etharp_output_to_arp_index+0x128>)
 8014e0a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014e0e:	4940      	ldr	r1, [pc, #256]	; (8014f10 <etharp_output_to_arp_index+0x12c>)
 8014e10:	4840      	ldr	r0, [pc, #256]	; (8014f14 <etharp_output_to_arp_index+0x130>)
 8014e12:	f00d ff8d 	bl	8022d30 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014e16:	79fa      	ldrb	r2, [r7, #7]
 8014e18:	493b      	ldr	r1, [pc, #236]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014e1a:	4613      	mov	r3, r2
 8014e1c:	005b      	lsls	r3, r3, #1
 8014e1e:	4413      	add	r3, r2
 8014e20:	00db      	lsls	r3, r3, #3
 8014e22:	440b      	add	r3, r1
 8014e24:	3314      	adds	r3, #20
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	2b02      	cmp	r3, #2
 8014e2a:	d153      	bne.n	8014ed4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014e2c:	79fa      	ldrb	r2, [r7, #7]
 8014e2e:	4936      	ldr	r1, [pc, #216]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014e30:	4613      	mov	r3, r2
 8014e32:	005b      	lsls	r3, r3, #1
 8014e34:	4413      	add	r3, r2
 8014e36:	00db      	lsls	r3, r3, #3
 8014e38:	440b      	add	r3, r1
 8014e3a:	3312      	adds	r3, #18
 8014e3c:	881b      	ldrh	r3, [r3, #0]
 8014e3e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014e42:	d919      	bls.n	8014e78 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014e44:	79fa      	ldrb	r2, [r7, #7]
 8014e46:	4613      	mov	r3, r2
 8014e48:	005b      	lsls	r3, r3, #1
 8014e4a:	4413      	add	r3, r2
 8014e4c:	00db      	lsls	r3, r3, #3
 8014e4e:	4a2e      	ldr	r2, [pc, #184]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014e50:	4413      	add	r3, r2
 8014e52:	3304      	adds	r3, #4
 8014e54:	4619      	mov	r1, r3
 8014e56:	68f8      	ldr	r0, [r7, #12]
 8014e58:	f000 fb4c 	bl	80154f4 <etharp_request>
 8014e5c:	4603      	mov	r3, r0
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d138      	bne.n	8014ed4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014e62:	79fa      	ldrb	r2, [r7, #7]
 8014e64:	4928      	ldr	r1, [pc, #160]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014e66:	4613      	mov	r3, r2
 8014e68:	005b      	lsls	r3, r3, #1
 8014e6a:	4413      	add	r3, r2
 8014e6c:	00db      	lsls	r3, r3, #3
 8014e6e:	440b      	add	r3, r1
 8014e70:	3314      	adds	r3, #20
 8014e72:	2203      	movs	r2, #3
 8014e74:	701a      	strb	r2, [r3, #0]
 8014e76:	e02d      	b.n	8014ed4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014e78:	79fa      	ldrb	r2, [r7, #7]
 8014e7a:	4923      	ldr	r1, [pc, #140]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014e7c:	4613      	mov	r3, r2
 8014e7e:	005b      	lsls	r3, r3, #1
 8014e80:	4413      	add	r3, r2
 8014e82:	00db      	lsls	r3, r3, #3
 8014e84:	440b      	add	r3, r1
 8014e86:	3312      	adds	r3, #18
 8014e88:	881b      	ldrh	r3, [r3, #0]
 8014e8a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014e8e:	d321      	bcc.n	8014ed4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014e90:	79fa      	ldrb	r2, [r7, #7]
 8014e92:	4613      	mov	r3, r2
 8014e94:	005b      	lsls	r3, r3, #1
 8014e96:	4413      	add	r3, r2
 8014e98:	00db      	lsls	r3, r3, #3
 8014e9a:	4a1b      	ldr	r2, [pc, #108]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014e9c:	4413      	add	r3, r2
 8014e9e:	1d19      	adds	r1, r3, #4
 8014ea0:	79fa      	ldrb	r2, [r7, #7]
 8014ea2:	4613      	mov	r3, r2
 8014ea4:	005b      	lsls	r3, r3, #1
 8014ea6:	4413      	add	r3, r2
 8014ea8:	00db      	lsls	r3, r3, #3
 8014eaa:	3308      	adds	r3, #8
 8014eac:	4a16      	ldr	r2, [pc, #88]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014eae:	4413      	add	r3, r2
 8014eb0:	3304      	adds	r3, #4
 8014eb2:	461a      	mov	r2, r3
 8014eb4:	68f8      	ldr	r0, [r7, #12]
 8014eb6:	f000 fafb 	bl	80154b0 <etharp_request_dst>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d109      	bne.n	8014ed4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014ec0:	79fa      	ldrb	r2, [r7, #7]
 8014ec2:	4911      	ldr	r1, [pc, #68]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014ec4:	4613      	mov	r3, r2
 8014ec6:	005b      	lsls	r3, r3, #1
 8014ec8:	4413      	add	r3, r2
 8014eca:	00db      	lsls	r3, r3, #3
 8014ecc:	440b      	add	r3, r1
 8014ece:	3314      	adds	r3, #20
 8014ed0:	2203      	movs	r2, #3
 8014ed2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014eda:	79fa      	ldrb	r2, [r7, #7]
 8014edc:	4613      	mov	r3, r2
 8014ede:	005b      	lsls	r3, r3, #1
 8014ee0:	4413      	add	r3, r2
 8014ee2:	00db      	lsls	r3, r3, #3
 8014ee4:	3308      	adds	r3, #8
 8014ee6:	4a08      	ldr	r2, [pc, #32]	; (8014f08 <etharp_output_to_arp_index+0x124>)
 8014ee8:	4413      	add	r3, r2
 8014eea:	3304      	adds	r3, #4
 8014eec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ef0:	9200      	str	r2, [sp, #0]
 8014ef2:	460a      	mov	r2, r1
 8014ef4:	68b9      	ldr	r1, [r7, #8]
 8014ef6:	68f8      	ldr	r0, [r7, #12]
 8014ef8:	f000 fb9c 	bl	8015634 <ethernet_output>
 8014efc:	4603      	mov	r3, r0
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3710      	adds	r7, #16
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}
 8014f06:	bf00      	nop
 8014f08:	20018e14 	.word	0x20018e14
 8014f0c:	08024f64 	.word	0x08024f64
 8014f10:	0802510c 	.word	0x0802510c
 8014f14:	08025014 	.word	0x08025014

08014f18 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b08a      	sub	sp, #40	; 0x28
 8014f1c:	af02      	add	r7, sp, #8
 8014f1e:	60f8      	str	r0, [r7, #12]
 8014f20:	60b9      	str	r1, [r7, #8]
 8014f22:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d106      	bne.n	8014f3c <etharp_output+0x24>
 8014f2e:	4b73      	ldr	r3, [pc, #460]	; (80150fc <etharp_output+0x1e4>)
 8014f30:	f240 321e 	movw	r2, #798	; 0x31e
 8014f34:	4972      	ldr	r1, [pc, #456]	; (8015100 <etharp_output+0x1e8>)
 8014f36:	4873      	ldr	r0, [pc, #460]	; (8015104 <etharp_output+0x1ec>)
 8014f38:	f00d fefa 	bl	8022d30 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d106      	bne.n	8014f50 <etharp_output+0x38>
 8014f42:	4b6e      	ldr	r3, [pc, #440]	; (80150fc <etharp_output+0x1e4>)
 8014f44:	f240 321f 	movw	r2, #799	; 0x31f
 8014f48:	496f      	ldr	r1, [pc, #444]	; (8015108 <etharp_output+0x1f0>)
 8014f4a:	486e      	ldr	r0, [pc, #440]	; (8015104 <etharp_output+0x1ec>)
 8014f4c:	f00d fef0 	bl	8022d30 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d106      	bne.n	8014f64 <etharp_output+0x4c>
 8014f56:	4b69      	ldr	r3, [pc, #420]	; (80150fc <etharp_output+0x1e4>)
 8014f58:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014f5c:	496b      	ldr	r1, [pc, #428]	; (801510c <etharp_output+0x1f4>)
 8014f5e:	4869      	ldr	r0, [pc, #420]	; (8015104 <etharp_output+0x1ec>)
 8014f60:	f00d fee6 	bl	8022d30 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	68f9      	ldr	r1, [r7, #12]
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f000 ffe6 	bl	8015f3c <ip4_addr_isbroadcast_u32>
 8014f70:	4603      	mov	r3, r0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d002      	beq.n	8014f7c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014f76:	4b66      	ldr	r3, [pc, #408]	; (8015110 <etharp_output+0x1f8>)
 8014f78:	61fb      	str	r3, [r7, #28]
 8014f7a:	e0af      	b.n	80150dc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f84:	2be0      	cmp	r3, #224	; 0xe0
 8014f86:	d118      	bne.n	8014fba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014f88:	2301      	movs	r3, #1
 8014f8a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014f8c:	2300      	movs	r3, #0
 8014f8e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014f90:	235e      	movs	r3, #94	; 0x5e
 8014f92:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	3301      	adds	r3, #1
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f9e:	b2db      	uxtb	r3, r3
 8014fa0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	3302      	adds	r3, #2
 8014fa6:	781b      	ldrb	r3, [r3, #0]
 8014fa8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	3303      	adds	r3, #3
 8014fae:	781b      	ldrb	r3, [r3, #0]
 8014fb0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014fb2:	f107 0310 	add.w	r3, r7, #16
 8014fb6:	61fb      	str	r3, [r7, #28]
 8014fb8:	e090      	b.n	80150dc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	3304      	adds	r3, #4
 8014fc2:	681b      	ldr	r3, [r3, #0]
 8014fc4:	405a      	eors	r2, r3
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	3308      	adds	r3, #8
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	4013      	ands	r3, r2
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d012      	beq.n	8014ff8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014fd8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014fdc:	4293      	cmp	r3, r2
 8014fde:	d00b      	beq.n	8014ff8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	330c      	adds	r3, #12
 8014fe4:	681b      	ldr	r3, [r3, #0]
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d003      	beq.n	8014ff2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	330c      	adds	r3, #12
 8014fee:	61bb      	str	r3, [r7, #24]
 8014ff0:	e002      	b.n	8014ff8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014ff2:	f06f 0303 	mvn.w	r3, #3
 8014ff6:	e07d      	b.n	80150f4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014ff8:	4b46      	ldr	r3, [pc, #280]	; (8015114 <etharp_output+0x1fc>)
 8014ffa:	781b      	ldrb	r3, [r3, #0]
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	4a46      	ldr	r2, [pc, #280]	; (8015118 <etharp_output+0x200>)
 8015000:	460b      	mov	r3, r1
 8015002:	005b      	lsls	r3, r3, #1
 8015004:	440b      	add	r3, r1
 8015006:	00db      	lsls	r3, r3, #3
 8015008:	4413      	add	r3, r2
 801500a:	3314      	adds	r3, #20
 801500c:	781b      	ldrb	r3, [r3, #0]
 801500e:	2b01      	cmp	r3, #1
 8015010:	d925      	bls.n	801505e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015012:	4b40      	ldr	r3, [pc, #256]	; (8015114 <etharp_output+0x1fc>)
 8015014:	781b      	ldrb	r3, [r3, #0]
 8015016:	4619      	mov	r1, r3
 8015018:	4a3f      	ldr	r2, [pc, #252]	; (8015118 <etharp_output+0x200>)
 801501a:	460b      	mov	r3, r1
 801501c:	005b      	lsls	r3, r3, #1
 801501e:	440b      	add	r3, r1
 8015020:	00db      	lsls	r3, r3, #3
 8015022:	4413      	add	r3, r2
 8015024:	3308      	adds	r3, #8
 8015026:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015028:	68fa      	ldr	r2, [r7, #12]
 801502a:	429a      	cmp	r2, r3
 801502c:	d117      	bne.n	801505e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801502e:	69bb      	ldr	r3, [r7, #24]
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	4b38      	ldr	r3, [pc, #224]	; (8015114 <etharp_output+0x1fc>)
 8015034:	781b      	ldrb	r3, [r3, #0]
 8015036:	4618      	mov	r0, r3
 8015038:	4937      	ldr	r1, [pc, #220]	; (8015118 <etharp_output+0x200>)
 801503a:	4603      	mov	r3, r0
 801503c:	005b      	lsls	r3, r3, #1
 801503e:	4403      	add	r3, r0
 8015040:	00db      	lsls	r3, r3, #3
 8015042:	440b      	add	r3, r1
 8015044:	3304      	adds	r3, #4
 8015046:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015048:	429a      	cmp	r2, r3
 801504a:	d108      	bne.n	801505e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801504c:	4b31      	ldr	r3, [pc, #196]	; (8015114 <etharp_output+0x1fc>)
 801504e:	781b      	ldrb	r3, [r3, #0]
 8015050:	461a      	mov	r2, r3
 8015052:	68b9      	ldr	r1, [r7, #8]
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	f7ff fec5 	bl	8014de4 <etharp_output_to_arp_index>
 801505a:	4603      	mov	r3, r0
 801505c:	e04a      	b.n	80150f4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801505e:	2300      	movs	r3, #0
 8015060:	75fb      	strb	r3, [r7, #23]
 8015062:	e031      	b.n	80150c8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015064:	7dfa      	ldrb	r2, [r7, #23]
 8015066:	492c      	ldr	r1, [pc, #176]	; (8015118 <etharp_output+0x200>)
 8015068:	4613      	mov	r3, r2
 801506a:	005b      	lsls	r3, r3, #1
 801506c:	4413      	add	r3, r2
 801506e:	00db      	lsls	r3, r3, #3
 8015070:	440b      	add	r3, r1
 8015072:	3314      	adds	r3, #20
 8015074:	781b      	ldrb	r3, [r3, #0]
 8015076:	2b01      	cmp	r3, #1
 8015078:	d923      	bls.n	80150c2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801507a:	7dfa      	ldrb	r2, [r7, #23]
 801507c:	4926      	ldr	r1, [pc, #152]	; (8015118 <etharp_output+0x200>)
 801507e:	4613      	mov	r3, r2
 8015080:	005b      	lsls	r3, r3, #1
 8015082:	4413      	add	r3, r2
 8015084:	00db      	lsls	r3, r3, #3
 8015086:	440b      	add	r3, r1
 8015088:	3308      	adds	r3, #8
 801508a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801508c:	68fa      	ldr	r2, [r7, #12]
 801508e:	429a      	cmp	r2, r3
 8015090:	d117      	bne.n	80150c2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015092:	69bb      	ldr	r3, [r7, #24]
 8015094:	6819      	ldr	r1, [r3, #0]
 8015096:	7dfa      	ldrb	r2, [r7, #23]
 8015098:	481f      	ldr	r0, [pc, #124]	; (8015118 <etharp_output+0x200>)
 801509a:	4613      	mov	r3, r2
 801509c:	005b      	lsls	r3, r3, #1
 801509e:	4413      	add	r3, r2
 80150a0:	00db      	lsls	r3, r3, #3
 80150a2:	4403      	add	r3, r0
 80150a4:	3304      	adds	r3, #4
 80150a6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80150a8:	4299      	cmp	r1, r3
 80150aa:	d10a      	bne.n	80150c2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80150ac:	4a19      	ldr	r2, [pc, #100]	; (8015114 <etharp_output+0x1fc>)
 80150ae:	7dfb      	ldrb	r3, [r7, #23]
 80150b0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80150b2:	7dfb      	ldrb	r3, [r7, #23]
 80150b4:	461a      	mov	r2, r3
 80150b6:	68b9      	ldr	r1, [r7, #8]
 80150b8:	68f8      	ldr	r0, [r7, #12]
 80150ba:	f7ff fe93 	bl	8014de4 <etharp_output_to_arp_index>
 80150be:	4603      	mov	r3, r0
 80150c0:	e018      	b.n	80150f4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80150c2:	7dfb      	ldrb	r3, [r7, #23]
 80150c4:	3301      	adds	r3, #1
 80150c6:	75fb      	strb	r3, [r7, #23]
 80150c8:	7dfb      	ldrb	r3, [r7, #23]
 80150ca:	2b09      	cmp	r3, #9
 80150cc:	d9ca      	bls.n	8015064 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80150ce:	68ba      	ldr	r2, [r7, #8]
 80150d0:	69b9      	ldr	r1, [r7, #24]
 80150d2:	68f8      	ldr	r0, [r7, #12]
 80150d4:	f000 f822 	bl	801511c <etharp_query>
 80150d8:	4603      	mov	r3, r0
 80150da:	e00b      	b.n	80150f4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80150e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80150e6:	9300      	str	r3, [sp, #0]
 80150e8:	69fb      	ldr	r3, [r7, #28]
 80150ea:	68b9      	ldr	r1, [r7, #8]
 80150ec:	68f8      	ldr	r0, [r7, #12]
 80150ee:	f000 faa1 	bl	8015634 <ethernet_output>
 80150f2:	4603      	mov	r3, r0
}
 80150f4:	4618      	mov	r0, r3
 80150f6:	3720      	adds	r7, #32
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}
 80150fc:	08024f64 	.word	0x08024f64
 8015100:	080250ec 	.word	0x080250ec
 8015104:	08025014 	.word	0x08025014
 8015108:	0802513c 	.word	0x0802513c
 801510c:	080250dc 	.word	0x080250dc
 8015110:	080284b8 	.word	0x080284b8
 8015114:	20018f04 	.word	0x20018f04
 8015118:	20018e14 	.word	0x20018e14

0801511c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801511c:	b580      	push	{r7, lr}
 801511e:	b08c      	sub	sp, #48	; 0x30
 8015120:	af02      	add	r7, sp, #8
 8015122:	60f8      	str	r0, [r7, #12]
 8015124:	60b9      	str	r1, [r7, #8]
 8015126:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	3326      	adds	r3, #38	; 0x26
 801512c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801512e:	23ff      	movs	r3, #255	; 0xff
 8015130:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015134:	2300      	movs	r3, #0
 8015136:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	68f9      	ldr	r1, [r7, #12]
 801513e:	4618      	mov	r0, r3
 8015140:	f000 fefc 	bl	8015f3c <ip4_addr_isbroadcast_u32>
 8015144:	4603      	mov	r3, r0
 8015146:	2b00      	cmp	r3, #0
 8015148:	d10c      	bne.n	8015164 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801514a:	68bb      	ldr	r3, [r7, #8]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015152:	2be0      	cmp	r3, #224	; 0xe0
 8015154:	d006      	beq.n	8015164 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015156:	68bb      	ldr	r3, [r7, #8]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d003      	beq.n	8015164 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801515c:	68bb      	ldr	r3, [r7, #8]
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d102      	bne.n	801516a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015164:	f06f 030f 	mvn.w	r3, #15
 8015168:	e101      	b.n	801536e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801516a:	68fa      	ldr	r2, [r7, #12]
 801516c:	2101      	movs	r1, #1
 801516e:	68b8      	ldr	r0, [r7, #8]
 8015170:	f7ff fb60 	bl	8014834 <etharp_find_entry>
 8015174:	4603      	mov	r3, r0
 8015176:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015178:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801517c:	2b00      	cmp	r3, #0
 801517e:	da02      	bge.n	8015186 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015180:	8a7b      	ldrh	r3, [r7, #18]
 8015182:	b25b      	sxtb	r3, r3
 8015184:	e0f3      	b.n	801536e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015186:	8a7b      	ldrh	r3, [r7, #18]
 8015188:	2b7e      	cmp	r3, #126	; 0x7e
 801518a:	d906      	bls.n	801519a <etharp_query+0x7e>
 801518c:	4b7a      	ldr	r3, [pc, #488]	; (8015378 <etharp_query+0x25c>)
 801518e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015192:	497a      	ldr	r1, [pc, #488]	; (801537c <etharp_query+0x260>)
 8015194:	487a      	ldr	r0, [pc, #488]	; (8015380 <etharp_query+0x264>)
 8015196:	f00d fdcb 	bl	8022d30 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801519a:	8a7b      	ldrh	r3, [r7, #18]
 801519c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801519e:	7c7a      	ldrb	r2, [r7, #17]
 80151a0:	4978      	ldr	r1, [pc, #480]	; (8015384 <etharp_query+0x268>)
 80151a2:	4613      	mov	r3, r2
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	4413      	add	r3, r2
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	440b      	add	r3, r1
 80151ac:	3314      	adds	r3, #20
 80151ae:	781b      	ldrb	r3, [r3, #0]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d115      	bne.n	80151e0 <etharp_query+0xc4>
    is_new_entry = 1;
 80151b4:	2301      	movs	r3, #1
 80151b6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80151b8:	7c7a      	ldrb	r2, [r7, #17]
 80151ba:	4972      	ldr	r1, [pc, #456]	; (8015384 <etharp_query+0x268>)
 80151bc:	4613      	mov	r3, r2
 80151be:	005b      	lsls	r3, r3, #1
 80151c0:	4413      	add	r3, r2
 80151c2:	00db      	lsls	r3, r3, #3
 80151c4:	440b      	add	r3, r1
 80151c6:	3314      	adds	r3, #20
 80151c8:	2201      	movs	r2, #1
 80151ca:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80151cc:	7c7a      	ldrb	r2, [r7, #17]
 80151ce:	496d      	ldr	r1, [pc, #436]	; (8015384 <etharp_query+0x268>)
 80151d0:	4613      	mov	r3, r2
 80151d2:	005b      	lsls	r3, r3, #1
 80151d4:	4413      	add	r3, r2
 80151d6:	00db      	lsls	r3, r3, #3
 80151d8:	440b      	add	r3, r1
 80151da:	3308      	adds	r3, #8
 80151dc:	68fa      	ldr	r2, [r7, #12]
 80151de:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80151e0:	7c7a      	ldrb	r2, [r7, #17]
 80151e2:	4968      	ldr	r1, [pc, #416]	; (8015384 <etharp_query+0x268>)
 80151e4:	4613      	mov	r3, r2
 80151e6:	005b      	lsls	r3, r3, #1
 80151e8:	4413      	add	r3, r2
 80151ea:	00db      	lsls	r3, r3, #3
 80151ec:	440b      	add	r3, r1
 80151ee:	3314      	adds	r3, #20
 80151f0:	781b      	ldrb	r3, [r3, #0]
 80151f2:	2b01      	cmp	r3, #1
 80151f4:	d011      	beq.n	801521a <etharp_query+0xfe>
 80151f6:	7c7a      	ldrb	r2, [r7, #17]
 80151f8:	4962      	ldr	r1, [pc, #392]	; (8015384 <etharp_query+0x268>)
 80151fa:	4613      	mov	r3, r2
 80151fc:	005b      	lsls	r3, r3, #1
 80151fe:	4413      	add	r3, r2
 8015200:	00db      	lsls	r3, r3, #3
 8015202:	440b      	add	r3, r1
 8015204:	3314      	adds	r3, #20
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	2b01      	cmp	r3, #1
 801520a:	d806      	bhi.n	801521a <etharp_query+0xfe>
 801520c:	4b5a      	ldr	r3, [pc, #360]	; (8015378 <etharp_query+0x25c>)
 801520e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015212:	495d      	ldr	r1, [pc, #372]	; (8015388 <etharp_query+0x26c>)
 8015214:	485a      	ldr	r0, [pc, #360]	; (8015380 <etharp_query+0x264>)
 8015216:	f00d fd8b 	bl	8022d30 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801521a:	6a3b      	ldr	r3, [r7, #32]
 801521c:	2b00      	cmp	r3, #0
 801521e:	d102      	bne.n	8015226 <etharp_query+0x10a>
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d10c      	bne.n	8015240 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015226:	68b9      	ldr	r1, [r7, #8]
 8015228:	68f8      	ldr	r0, [r7, #12]
 801522a:	f000 f963 	bl	80154f4 <etharp_request>
 801522e:	4603      	mov	r3, r0
 8015230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d102      	bne.n	8015240 <etharp_query+0x124>
      return result;
 801523a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801523e:	e096      	b.n	801536e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d106      	bne.n	8015254 <etharp_query+0x138>
 8015246:	4b4c      	ldr	r3, [pc, #304]	; (8015378 <etharp_query+0x25c>)
 8015248:	f240 32e1 	movw	r2, #993	; 0x3e1
 801524c:	494f      	ldr	r1, [pc, #316]	; (801538c <etharp_query+0x270>)
 801524e:	484c      	ldr	r0, [pc, #304]	; (8015380 <etharp_query+0x264>)
 8015250:	f00d fd6e 	bl	8022d30 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015254:	7c7a      	ldrb	r2, [r7, #17]
 8015256:	494b      	ldr	r1, [pc, #300]	; (8015384 <etharp_query+0x268>)
 8015258:	4613      	mov	r3, r2
 801525a:	005b      	lsls	r3, r3, #1
 801525c:	4413      	add	r3, r2
 801525e:	00db      	lsls	r3, r3, #3
 8015260:	440b      	add	r3, r1
 8015262:	3314      	adds	r3, #20
 8015264:	781b      	ldrb	r3, [r3, #0]
 8015266:	2b01      	cmp	r3, #1
 8015268:	d917      	bls.n	801529a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801526a:	4a49      	ldr	r2, [pc, #292]	; (8015390 <etharp_query+0x274>)
 801526c:	7c7b      	ldrb	r3, [r7, #17]
 801526e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015270:	7c7a      	ldrb	r2, [r7, #17]
 8015272:	4613      	mov	r3, r2
 8015274:	005b      	lsls	r3, r3, #1
 8015276:	4413      	add	r3, r2
 8015278:	00db      	lsls	r3, r3, #3
 801527a:	3308      	adds	r3, #8
 801527c:	4a41      	ldr	r2, [pc, #260]	; (8015384 <etharp_query+0x268>)
 801527e:	4413      	add	r3, r2
 8015280:	3304      	adds	r3, #4
 8015282:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015286:	9200      	str	r2, [sp, #0]
 8015288:	697a      	ldr	r2, [r7, #20]
 801528a:	6879      	ldr	r1, [r7, #4]
 801528c:	68f8      	ldr	r0, [r7, #12]
 801528e:	f000 f9d1 	bl	8015634 <ethernet_output>
 8015292:	4603      	mov	r3, r0
 8015294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015298:	e067      	b.n	801536a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801529a:	7c7a      	ldrb	r2, [r7, #17]
 801529c:	4939      	ldr	r1, [pc, #228]	; (8015384 <etharp_query+0x268>)
 801529e:	4613      	mov	r3, r2
 80152a0:	005b      	lsls	r3, r3, #1
 80152a2:	4413      	add	r3, r2
 80152a4:	00db      	lsls	r3, r3, #3
 80152a6:	440b      	add	r3, r1
 80152a8:	3314      	adds	r3, #20
 80152aa:	781b      	ldrb	r3, [r3, #0]
 80152ac:	2b01      	cmp	r3, #1
 80152ae:	d15c      	bne.n	801536a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80152b0:	2300      	movs	r3, #0
 80152b2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80152b8:	e01c      	b.n	80152f4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80152ba:	69fb      	ldr	r3, [r7, #28]
 80152bc:	895a      	ldrh	r2, [r3, #10]
 80152be:	69fb      	ldr	r3, [r7, #28]
 80152c0:	891b      	ldrh	r3, [r3, #8]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d10a      	bne.n	80152dc <etharp_query+0x1c0>
 80152c6:	69fb      	ldr	r3, [r7, #28]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d006      	beq.n	80152dc <etharp_query+0x1c0>
 80152ce:	4b2a      	ldr	r3, [pc, #168]	; (8015378 <etharp_query+0x25c>)
 80152d0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80152d4:	492f      	ldr	r1, [pc, #188]	; (8015394 <etharp_query+0x278>)
 80152d6:	482a      	ldr	r0, [pc, #168]	; (8015380 <etharp_query+0x264>)
 80152d8:	f00d fd2a 	bl	8022d30 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80152dc:	69fb      	ldr	r3, [r7, #28]
 80152de:	7b1b      	ldrb	r3, [r3, #12]
 80152e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d002      	beq.n	80152ee <etharp_query+0x1d2>
        copy_needed = 1;
 80152e8:	2301      	movs	r3, #1
 80152ea:	61bb      	str	r3, [r7, #24]
        break;
 80152ec:	e005      	b.n	80152fa <etharp_query+0x1de>
      }
      p = p->next;
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d1df      	bne.n	80152ba <etharp_query+0x19e>
    }
    if (copy_needed) {
 80152fa:	69bb      	ldr	r3, [r7, #24]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d007      	beq.n	8015310 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015300:	687a      	ldr	r2, [r7, #4]
 8015302:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015306:	200e      	movs	r0, #14
 8015308:	f003 fafc 	bl	8018904 <pbuf_clone>
 801530c:	61f8      	str	r0, [r7, #28]
 801530e:	e004      	b.n	801531a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015314:	69f8      	ldr	r0, [r7, #28]
 8015316:	f003 f933 	bl	8018580 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801531a:	69fb      	ldr	r3, [r7, #28]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d021      	beq.n	8015364 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015320:	7c7a      	ldrb	r2, [r7, #17]
 8015322:	4918      	ldr	r1, [pc, #96]	; (8015384 <etharp_query+0x268>)
 8015324:	4613      	mov	r3, r2
 8015326:	005b      	lsls	r3, r3, #1
 8015328:	4413      	add	r3, r2
 801532a:	00db      	lsls	r3, r3, #3
 801532c:	440b      	add	r3, r1
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d00a      	beq.n	801534a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015334:	7c7a      	ldrb	r2, [r7, #17]
 8015336:	4913      	ldr	r1, [pc, #76]	; (8015384 <etharp_query+0x268>)
 8015338:	4613      	mov	r3, r2
 801533a:	005b      	lsls	r3, r3, #1
 801533c:	4413      	add	r3, r2
 801533e:	00db      	lsls	r3, r3, #3
 8015340:	440b      	add	r3, r1
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	4618      	mov	r0, r3
 8015346:	f003 f875 	bl	8018434 <pbuf_free>
      }
      arp_table[i].q = p;
 801534a:	7c7a      	ldrb	r2, [r7, #17]
 801534c:	490d      	ldr	r1, [pc, #52]	; (8015384 <etharp_query+0x268>)
 801534e:	4613      	mov	r3, r2
 8015350:	005b      	lsls	r3, r3, #1
 8015352:	4413      	add	r3, r2
 8015354:	00db      	lsls	r3, r3, #3
 8015356:	440b      	add	r3, r1
 8015358:	69fa      	ldr	r2, [r7, #28]
 801535a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801535c:	2300      	movs	r3, #0
 801535e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015362:	e002      	b.n	801536a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015364:	23ff      	movs	r3, #255	; 0xff
 8015366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801536a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801536e:	4618      	mov	r0, r3
 8015370:	3728      	adds	r7, #40	; 0x28
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}
 8015376:	bf00      	nop
 8015378:	08024f64 	.word	0x08024f64
 801537c:	08025148 	.word	0x08025148
 8015380:	08025014 	.word	0x08025014
 8015384:	20018e14 	.word	0x20018e14
 8015388:	08025158 	.word	0x08025158
 801538c:	0802513c 	.word	0x0802513c
 8015390:	20018f04 	.word	0x20018f04
 8015394:	08025180 	.word	0x08025180

08015398 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b08a      	sub	sp, #40	; 0x28
 801539c:	af02      	add	r7, sp, #8
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
 80153a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80153a6:	2300      	movs	r3, #0
 80153a8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d106      	bne.n	80153be <etharp_raw+0x26>
 80153b0:	4b3a      	ldr	r3, [pc, #232]	; (801549c <etharp_raw+0x104>)
 80153b2:	f240 4257 	movw	r2, #1111	; 0x457
 80153b6:	493a      	ldr	r1, [pc, #232]	; (80154a0 <etharp_raw+0x108>)
 80153b8:	483a      	ldr	r0, [pc, #232]	; (80154a4 <etharp_raw+0x10c>)
 80153ba:	f00d fcb9 	bl	8022d30 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80153be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153c2:	211c      	movs	r1, #28
 80153c4:	200e      	movs	r0, #14
 80153c6:	f002 fd51 	bl	8017e6c <pbuf_alloc>
 80153ca:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80153cc:	69bb      	ldr	r3, [r7, #24]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d102      	bne.n	80153d8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80153d2:	f04f 33ff 	mov.w	r3, #4294967295
 80153d6:	e05d      	b.n	8015494 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80153d8:	69bb      	ldr	r3, [r7, #24]
 80153da:	895b      	ldrh	r3, [r3, #10]
 80153dc:	2b1b      	cmp	r3, #27
 80153de:	d806      	bhi.n	80153ee <etharp_raw+0x56>
 80153e0:	4b2e      	ldr	r3, [pc, #184]	; (801549c <etharp_raw+0x104>)
 80153e2:	f240 4262 	movw	r2, #1122	; 0x462
 80153e6:	4930      	ldr	r1, [pc, #192]	; (80154a8 <etharp_raw+0x110>)
 80153e8:	482e      	ldr	r0, [pc, #184]	; (80154a4 <etharp_raw+0x10c>)
 80153ea:	f00d fca1 	bl	8022d30 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80153ee:	69bb      	ldr	r3, [r7, #24]
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80153f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80153f6:	4618      	mov	r0, r3
 80153f8:	f7ff f914 	bl	8014624 <lwip_htons>
 80153fc:	4603      	mov	r3, r0
 80153fe:	461a      	mov	r2, r3
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801540a:	2b06      	cmp	r3, #6
 801540c:	d006      	beq.n	801541c <etharp_raw+0x84>
 801540e:	4b23      	ldr	r3, [pc, #140]	; (801549c <etharp_raw+0x104>)
 8015410:	f240 4269 	movw	r2, #1129	; 0x469
 8015414:	4925      	ldr	r1, [pc, #148]	; (80154ac <etharp_raw+0x114>)
 8015416:	4823      	ldr	r0, [pc, #140]	; (80154a4 <etharp_raw+0x10c>)
 8015418:	f00d fc8a 	bl	8022d30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801541c:	697b      	ldr	r3, [r7, #20]
 801541e:	3308      	adds	r3, #8
 8015420:	2206      	movs	r2, #6
 8015422:	6839      	ldr	r1, [r7, #0]
 8015424:	4618      	mov	r0, r3
 8015426:	f00d fe73 	bl	8023110 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	3312      	adds	r3, #18
 801542e:	2206      	movs	r2, #6
 8015430:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015432:	4618      	mov	r0, r3
 8015434:	f00d fe6c 	bl	8023110 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015438:	697b      	ldr	r3, [r7, #20]
 801543a:	330e      	adds	r3, #14
 801543c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801543e:	6812      	ldr	r2, [r2, #0]
 8015440:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	3318      	adds	r3, #24
 8015446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015448:	6812      	ldr	r2, [r2, #0]
 801544a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801544c:	697b      	ldr	r3, [r7, #20]
 801544e:	2200      	movs	r2, #0
 8015450:	701a      	strb	r2, [r3, #0]
 8015452:	2200      	movs	r2, #0
 8015454:	f042 0201 	orr.w	r2, r2, #1
 8015458:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	2200      	movs	r2, #0
 801545e:	f042 0208 	orr.w	r2, r2, #8
 8015462:	709a      	strb	r2, [r3, #2]
 8015464:	2200      	movs	r2, #0
 8015466:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015468:	697b      	ldr	r3, [r7, #20]
 801546a:	2206      	movs	r2, #6
 801546c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	2204      	movs	r2, #4
 8015472:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015474:	f640 0306 	movw	r3, #2054	; 0x806
 8015478:	9300      	str	r3, [sp, #0]
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	68ba      	ldr	r2, [r7, #8]
 801547e:	69b9      	ldr	r1, [r7, #24]
 8015480:	68f8      	ldr	r0, [r7, #12]
 8015482:	f000 f8d7 	bl	8015634 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015486:	69b8      	ldr	r0, [r7, #24]
 8015488:	f002 ffd4 	bl	8018434 <pbuf_free>
  p = NULL;
 801548c:	2300      	movs	r3, #0
 801548e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015490:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015494:	4618      	mov	r0, r3
 8015496:	3720      	adds	r7, #32
 8015498:	46bd      	mov	sp, r7
 801549a:	bd80      	pop	{r7, pc}
 801549c:	08024f64 	.word	0x08024f64
 80154a0:	080250ec 	.word	0x080250ec
 80154a4:	08025014 	.word	0x08025014
 80154a8:	0802519c 	.word	0x0802519c
 80154ac:	080251d0 	.word	0x080251d0

080154b0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80154b0:	b580      	push	{r7, lr}
 80154b2:	b088      	sub	sp, #32
 80154b4:	af04      	add	r7, sp, #16
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80154c2:	68fb      	ldr	r3, [r7, #12]
 80154c4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80154cc:	2201      	movs	r2, #1
 80154ce:	9203      	str	r2, [sp, #12]
 80154d0:	68ba      	ldr	r2, [r7, #8]
 80154d2:	9202      	str	r2, [sp, #8]
 80154d4:	4a06      	ldr	r2, [pc, #24]	; (80154f0 <etharp_request_dst+0x40>)
 80154d6:	9201      	str	r2, [sp, #4]
 80154d8:	9300      	str	r3, [sp, #0]
 80154da:	4603      	mov	r3, r0
 80154dc:	687a      	ldr	r2, [r7, #4]
 80154de:	68f8      	ldr	r0, [r7, #12]
 80154e0:	f7ff ff5a 	bl	8015398 <etharp_raw>
 80154e4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	3710      	adds	r7, #16
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	bf00      	nop
 80154f0:	080284c0 	.word	0x080284c0

080154f4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b082      	sub	sp, #8
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
 80154fc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80154fe:	4a05      	ldr	r2, [pc, #20]	; (8015514 <etharp_request+0x20>)
 8015500:	6839      	ldr	r1, [r7, #0]
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f7ff ffd4 	bl	80154b0 <etharp_request_dst>
 8015508:	4603      	mov	r3, r0
}
 801550a:	4618      	mov	r0, r3
 801550c:	3708      	adds	r7, #8
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}
 8015512:	bf00      	nop
 8015514:	080284b8 	.word	0x080284b8

08015518 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b086      	sub	sp, #24
 801551c:	af00      	add	r7, sp, #0
 801551e:	6078      	str	r0, [r7, #4]
 8015520:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015522:	230e      	movs	r3, #14
 8015524:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	895b      	ldrh	r3, [r3, #10]
 801552a:	2b0e      	cmp	r3, #14
 801552c:	d96e      	bls.n	801560c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	7bdb      	ldrb	r3, [r3, #15]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d106      	bne.n	8015544 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015536:	683b      	ldr	r3, [r7, #0]
 8015538:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801553c:	3301      	adds	r3, #1
 801553e:	b2da      	uxtb	r2, r3
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	685b      	ldr	r3, [r3, #4]
 8015548:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801554a:	693b      	ldr	r3, [r7, #16]
 801554c:	7b1a      	ldrb	r2, [r3, #12]
 801554e:	7b5b      	ldrb	r3, [r3, #13]
 8015550:	021b      	lsls	r3, r3, #8
 8015552:	4313      	orrs	r3, r2
 8015554:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	f003 0301 	and.w	r3, r3, #1
 801555e:	2b00      	cmp	r3, #0
 8015560:	d023      	beq.n	80155aa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015562:	693b      	ldr	r3, [r7, #16]
 8015564:	781b      	ldrb	r3, [r3, #0]
 8015566:	2b01      	cmp	r3, #1
 8015568:	d10f      	bne.n	801558a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801556a:	693b      	ldr	r3, [r7, #16]
 801556c:	785b      	ldrb	r3, [r3, #1]
 801556e:	2b00      	cmp	r3, #0
 8015570:	d11b      	bne.n	80155aa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015572:	693b      	ldr	r3, [r7, #16]
 8015574:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015576:	2b5e      	cmp	r3, #94	; 0x5e
 8015578:	d117      	bne.n	80155aa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	7b5b      	ldrb	r3, [r3, #13]
 801557e:	f043 0310 	orr.w	r3, r3, #16
 8015582:	b2da      	uxtb	r2, r3
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	735a      	strb	r2, [r3, #13]
 8015588:	e00f      	b.n	80155aa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	2206      	movs	r2, #6
 801558e:	4928      	ldr	r1, [pc, #160]	; (8015630 <ethernet_input+0x118>)
 8015590:	4618      	mov	r0, r3
 8015592:	f00d fc42 	bl	8022e1a <memcmp>
 8015596:	4603      	mov	r3, r0
 8015598:	2b00      	cmp	r3, #0
 801559a:	d106      	bne.n	80155aa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	7b5b      	ldrb	r3, [r3, #13]
 80155a0:	f043 0308 	orr.w	r3, r3, #8
 80155a4:	b2da      	uxtb	r2, r3
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80155aa:	89fb      	ldrh	r3, [r7, #14]
 80155ac:	2b08      	cmp	r3, #8
 80155ae:	d003      	beq.n	80155b8 <ethernet_input+0xa0>
 80155b0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80155b4:	d014      	beq.n	80155e0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80155b6:	e032      	b.n	801561e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80155b8:	683b      	ldr	r3, [r7, #0]
 80155ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155be:	f003 0308 	and.w	r3, r3, #8
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d024      	beq.n	8015610 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80155c6:	8afb      	ldrh	r3, [r7, #22]
 80155c8:	4619      	mov	r1, r3
 80155ca:	6878      	ldr	r0, [r7, #4]
 80155cc:	f002 feac 	bl	8018328 <pbuf_remove_header>
 80155d0:	4603      	mov	r3, r0
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d11e      	bne.n	8015614 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80155d6:	6839      	ldr	r1, [r7, #0]
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f000 fab3 	bl	8015b44 <ip4_input>
      break;
 80155de:	e013      	b.n	8015608 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80155e0:	683b      	ldr	r3, [r7, #0]
 80155e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155e6:	f003 0308 	and.w	r3, r3, #8
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d014      	beq.n	8015618 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80155ee:	8afb      	ldrh	r3, [r7, #22]
 80155f0:	4619      	mov	r1, r3
 80155f2:	6878      	ldr	r0, [r7, #4]
 80155f4:	f002 fe98 	bl	8018328 <pbuf_remove_header>
 80155f8:	4603      	mov	r3, r0
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d10e      	bne.n	801561c <ethernet_input+0x104>
        etharp_input(p, netif);
 80155fe:	6839      	ldr	r1, [r7, #0]
 8015600:	6878      	ldr	r0, [r7, #4]
 8015602:	f7ff fb65 	bl	8014cd0 <etharp_input>
      break;
 8015606:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015608:	2300      	movs	r3, #0
 801560a:	e00c      	b.n	8015626 <ethernet_input+0x10e>
    goto free_and_return;
 801560c:	bf00      	nop
 801560e:	e006      	b.n	801561e <ethernet_input+0x106>
        goto free_and_return;
 8015610:	bf00      	nop
 8015612:	e004      	b.n	801561e <ethernet_input+0x106>
        goto free_and_return;
 8015614:	bf00      	nop
 8015616:	e002      	b.n	801561e <ethernet_input+0x106>
        goto free_and_return;
 8015618:	bf00      	nop
 801561a:	e000      	b.n	801561e <ethernet_input+0x106>
        goto free_and_return;
 801561c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801561e:	6878      	ldr	r0, [r7, #4]
 8015620:	f002 ff08 	bl	8018434 <pbuf_free>
  return ERR_OK;
 8015624:	2300      	movs	r3, #0
}
 8015626:	4618      	mov	r0, r3
 8015628:	3718      	adds	r7, #24
 801562a:	46bd      	mov	sp, r7
 801562c:	bd80      	pop	{r7, pc}
 801562e:	bf00      	nop
 8015630:	080284b8 	.word	0x080284b8

08015634 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015634:	b580      	push	{r7, lr}
 8015636:	b086      	sub	sp, #24
 8015638:	af00      	add	r7, sp, #0
 801563a:	60f8      	str	r0, [r7, #12]
 801563c:	60b9      	str	r1, [r7, #8]
 801563e:	607a      	str	r2, [r7, #4]
 8015640:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015642:	8c3b      	ldrh	r3, [r7, #32]
 8015644:	4618      	mov	r0, r3
 8015646:	f7fe ffed 	bl	8014624 <lwip_htons>
 801564a:	4603      	mov	r3, r0
 801564c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801564e:	210e      	movs	r1, #14
 8015650:	68b8      	ldr	r0, [r7, #8]
 8015652:	f002 fe59 	bl	8018308 <pbuf_add_header>
 8015656:	4603      	mov	r3, r0
 8015658:	2b00      	cmp	r3, #0
 801565a:	d125      	bne.n	80156a8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	685b      	ldr	r3, [r3, #4]
 8015660:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015662:	693b      	ldr	r3, [r7, #16]
 8015664:	8afa      	ldrh	r2, [r7, #22]
 8015666:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015668:	693b      	ldr	r3, [r7, #16]
 801566a:	2206      	movs	r2, #6
 801566c:	6839      	ldr	r1, [r7, #0]
 801566e:	4618      	mov	r0, r3
 8015670:	f00d fd4e 	bl	8023110 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015674:	693b      	ldr	r3, [r7, #16]
 8015676:	3306      	adds	r3, #6
 8015678:	2206      	movs	r2, #6
 801567a:	6879      	ldr	r1, [r7, #4]
 801567c:	4618      	mov	r0, r3
 801567e:	f00d fd47 	bl	8023110 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015688:	2b06      	cmp	r3, #6
 801568a:	d006      	beq.n	801569a <ethernet_output+0x66>
 801568c:	4b0a      	ldr	r3, [pc, #40]	; (80156b8 <ethernet_output+0x84>)
 801568e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015692:	490a      	ldr	r1, [pc, #40]	; (80156bc <ethernet_output+0x88>)
 8015694:	480a      	ldr	r0, [pc, #40]	; (80156c0 <ethernet_output+0x8c>)
 8015696:	f00d fb4b 	bl	8022d30 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	699b      	ldr	r3, [r3, #24]
 801569e:	68b9      	ldr	r1, [r7, #8]
 80156a0:	68f8      	ldr	r0, [r7, #12]
 80156a2:	4798      	blx	r3
 80156a4:	4603      	mov	r3, r0
 80156a6:	e002      	b.n	80156ae <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80156a8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80156aa:	f06f 0301 	mvn.w	r3, #1
}
 80156ae:	4618      	mov	r0, r3
 80156b0:	3718      	adds	r7, #24
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd80      	pop	{r7, pc}
 80156b6:	bf00      	nop
 80156b8:	08025214 	.word	0x08025214
 80156bc:	08025284 	.word	0x08025284
 80156c0:	080252b8 	.word	0x080252b8

080156c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b08e      	sub	sp, #56	; 0x38
 80156c8:	af04      	add	r7, sp, #16
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80156ce:	4b79      	ldr	r3, [pc, #484]	; (80158b4 <icmp_input+0x1f0>)
 80156d0:	689b      	ldr	r3, [r3, #8]
 80156d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80156d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d6:	781b      	ldrb	r3, [r3, #0]
 80156d8:	f003 030f 	and.w	r3, r3, #15
 80156dc:	b2db      	uxtb	r3, r3
 80156de:	009b      	lsls	r3, r3, #2
 80156e0:	b2db      	uxtb	r3, r3
 80156e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80156e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80156e6:	2b13      	cmp	r3, #19
 80156e8:	f240 80cd 	bls.w	8015886 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	895b      	ldrh	r3, [r3, #10]
 80156f0:	2b03      	cmp	r3, #3
 80156f2:	f240 80ca 	bls.w	801588a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015700:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015704:	2b00      	cmp	r3, #0
 8015706:	f000 80b7 	beq.w	8015878 <icmp_input+0x1b4>
 801570a:	2b08      	cmp	r3, #8
 801570c:	f040 80b7 	bne.w	801587e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015710:	4b69      	ldr	r3, [pc, #420]	; (80158b8 <icmp_input+0x1f4>)
 8015712:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015714:	4b67      	ldr	r3, [pc, #412]	; (80158b4 <icmp_input+0x1f0>)
 8015716:	695b      	ldr	r3, [r3, #20]
 8015718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801571c:	2be0      	cmp	r3, #224	; 0xe0
 801571e:	f000 80bb 	beq.w	8015898 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015722:	4b64      	ldr	r3, [pc, #400]	; (80158b4 <icmp_input+0x1f0>)
 8015724:	695b      	ldr	r3, [r3, #20]
 8015726:	4a63      	ldr	r2, [pc, #396]	; (80158b4 <icmp_input+0x1f0>)
 8015728:	6812      	ldr	r2, [r2, #0]
 801572a:	4611      	mov	r1, r2
 801572c:	4618      	mov	r0, r3
 801572e:	f000 fc05 	bl	8015f3c <ip4_addr_isbroadcast_u32>
 8015732:	4603      	mov	r3, r0
 8015734:	2b00      	cmp	r3, #0
 8015736:	f040 80b1 	bne.w	801589c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	891b      	ldrh	r3, [r3, #8]
 801573e:	2b07      	cmp	r3, #7
 8015740:	f240 80a5 	bls.w	801588e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015744:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015746:	330e      	adds	r3, #14
 8015748:	4619      	mov	r1, r3
 801574a:	6878      	ldr	r0, [r7, #4]
 801574c:	f002 fddc 	bl	8018308 <pbuf_add_header>
 8015750:	4603      	mov	r3, r0
 8015752:	2b00      	cmp	r3, #0
 8015754:	d04b      	beq.n	80157ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	891a      	ldrh	r2, [r3, #8]
 801575a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801575c:	4413      	add	r3, r2
 801575e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	891b      	ldrh	r3, [r3, #8]
 8015764:	8b7a      	ldrh	r2, [r7, #26]
 8015766:	429a      	cmp	r2, r3
 8015768:	f0c0 809a 	bcc.w	80158a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801576c:	8b7b      	ldrh	r3, [r7, #26]
 801576e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015772:	4619      	mov	r1, r3
 8015774:	200e      	movs	r0, #14
 8015776:	f002 fb79 	bl	8017e6c <pbuf_alloc>
 801577a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	2b00      	cmp	r3, #0
 8015780:	f000 8090 	beq.w	80158a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	895b      	ldrh	r3, [r3, #10]
 8015788:	461a      	mov	r2, r3
 801578a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801578c:	3308      	adds	r3, #8
 801578e:	429a      	cmp	r2, r3
 8015790:	d203      	bcs.n	801579a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015792:	6978      	ldr	r0, [r7, #20]
 8015794:	f002 fe4e 	bl	8018434 <pbuf_free>
          goto icmperr;
 8015798:	e085      	b.n	80158a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	685b      	ldr	r3, [r3, #4]
 801579e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80157a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80157a2:	4618      	mov	r0, r3
 80157a4:	f00d fcb4 	bl	8023110 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80157a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157aa:	4619      	mov	r1, r3
 80157ac:	6978      	ldr	r0, [r7, #20]
 80157ae:	f002 fdbb 	bl	8018328 <pbuf_remove_header>
 80157b2:	4603      	mov	r3, r0
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d009      	beq.n	80157cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80157b8:	4b40      	ldr	r3, [pc, #256]	; (80158bc <icmp_input+0x1f8>)
 80157ba:	22b6      	movs	r2, #182	; 0xb6
 80157bc:	4940      	ldr	r1, [pc, #256]	; (80158c0 <icmp_input+0x1fc>)
 80157be:	4841      	ldr	r0, [pc, #260]	; (80158c4 <icmp_input+0x200>)
 80157c0:	f00d fab6 	bl	8022d30 <iprintf>
          pbuf_free(r);
 80157c4:	6978      	ldr	r0, [r7, #20]
 80157c6:	f002 fe35 	bl	8018434 <pbuf_free>
          goto icmperr;
 80157ca:	e06c      	b.n	80158a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80157cc:	6879      	ldr	r1, [r7, #4]
 80157ce:	6978      	ldr	r0, [r7, #20]
 80157d0:	f002 ff54 	bl	801867c <pbuf_copy>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d003      	beq.n	80157e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80157da:	6978      	ldr	r0, [r7, #20]
 80157dc:	f002 fe2a 	bl	8018434 <pbuf_free>
          goto icmperr;
 80157e0:	e061      	b.n	80158a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	f002 fe26 	bl	8018434 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	607b      	str	r3, [r7, #4]
 80157ec:	e00f      	b.n	801580e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80157ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157f0:	330e      	adds	r3, #14
 80157f2:	4619      	mov	r1, r3
 80157f4:	6878      	ldr	r0, [r7, #4]
 80157f6:	f002 fd97 	bl	8018328 <pbuf_remove_header>
 80157fa:	4603      	mov	r3, r0
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d006      	beq.n	801580e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015800:	4b2e      	ldr	r3, [pc, #184]	; (80158bc <icmp_input+0x1f8>)
 8015802:	22c7      	movs	r2, #199	; 0xc7
 8015804:	4930      	ldr	r1, [pc, #192]	; (80158c8 <icmp_input+0x204>)
 8015806:	482f      	ldr	r0, [pc, #188]	; (80158c4 <icmp_input+0x200>)
 8015808:	f00d fa92 	bl	8022d30 <iprintf>
          goto icmperr;
 801580c:	e04b      	b.n	80158a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	685b      	ldr	r3, [r3, #4]
 8015812:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015814:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015816:	4619      	mov	r1, r3
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f002 fd75 	bl	8018308 <pbuf_add_header>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d12b      	bne.n	801587c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	685b      	ldr	r3, [r3, #4]
 8015828:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801582a:	69fb      	ldr	r3, [r7, #28]
 801582c:	681a      	ldr	r2, [r3, #0]
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015832:	4b20      	ldr	r3, [pc, #128]	; (80158b4 <icmp_input+0x1f0>)
 8015834:	691a      	ldr	r2, [r3, #16]
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801583a:	693b      	ldr	r3, [r7, #16]
 801583c:	2200      	movs	r2, #0
 801583e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015840:	693b      	ldr	r3, [r7, #16]
 8015842:	2200      	movs	r2, #0
 8015844:	709a      	strb	r2, [r3, #2]
 8015846:	2200      	movs	r2, #0
 8015848:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	22ff      	movs	r2, #255	; 0xff
 801584e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	2200      	movs	r2, #0
 8015854:	729a      	strb	r2, [r3, #10]
 8015856:	2200      	movs	r2, #0
 8015858:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	9302      	str	r3, [sp, #8]
 801585e:	2301      	movs	r3, #1
 8015860:	9301      	str	r3, [sp, #4]
 8015862:	2300      	movs	r3, #0
 8015864:	9300      	str	r3, [sp, #0]
 8015866:	23ff      	movs	r3, #255	; 0xff
 8015868:	2200      	movs	r2, #0
 801586a:	69f9      	ldr	r1, [r7, #28]
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f000 fa8d 	bl	8015d8c <ip4_output_if>
 8015872:	4603      	mov	r3, r0
 8015874:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015876:	e001      	b.n	801587c <icmp_input+0x1b8>
      break;
 8015878:	bf00      	nop
 801587a:	e000      	b.n	801587e <icmp_input+0x1ba>
      break;
 801587c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801587e:	6878      	ldr	r0, [r7, #4]
 8015880:	f002 fdd8 	bl	8018434 <pbuf_free>
  return;
 8015884:	e013      	b.n	80158ae <icmp_input+0x1ea>
    goto lenerr;
 8015886:	bf00      	nop
 8015888:	e002      	b.n	8015890 <icmp_input+0x1cc>
    goto lenerr;
 801588a:	bf00      	nop
 801588c:	e000      	b.n	8015890 <icmp_input+0x1cc>
        goto lenerr;
 801588e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	f002 fdcf 	bl	8018434 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015896:	e00a      	b.n	80158ae <icmp_input+0x1ea>
        goto icmperr;
 8015898:	bf00      	nop
 801589a:	e004      	b.n	80158a6 <icmp_input+0x1e2>
        goto icmperr;
 801589c:	bf00      	nop
 801589e:	e002      	b.n	80158a6 <icmp_input+0x1e2>
          goto icmperr;
 80158a0:	bf00      	nop
 80158a2:	e000      	b.n	80158a6 <icmp_input+0x1e2>
          goto icmperr;
 80158a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f002 fdc4 	bl	8018434 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80158ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80158ae:	3728      	adds	r7, #40	; 0x28
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}
 80158b4:	20018f08 	.word	0x20018f08
 80158b8:	20018f1c 	.word	0x20018f1c
 80158bc:	080252e0 	.word	0x080252e0
 80158c0:	08025350 	.word	0x08025350
 80158c4:	08025388 	.word	0x08025388
 80158c8:	080253b0 	.word	0x080253b0

080158cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b082      	sub	sp, #8
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	460b      	mov	r3, r1
 80158d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80158d8:	78fb      	ldrb	r3, [r7, #3]
 80158da:	461a      	mov	r2, r3
 80158dc:	2103      	movs	r1, #3
 80158de:	6878      	ldr	r0, [r7, #4]
 80158e0:	f000 f814 	bl	801590c <icmp_send_response>
}
 80158e4:	bf00      	nop
 80158e6:	3708      	adds	r7, #8
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	460b      	mov	r3, r1
 80158f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80158f8:	78fb      	ldrb	r3, [r7, #3]
 80158fa:	461a      	mov	r2, r3
 80158fc:	210b      	movs	r1, #11
 80158fe:	6878      	ldr	r0, [r7, #4]
 8015900:	f000 f804 	bl	801590c <icmp_send_response>
}
 8015904:	bf00      	nop
 8015906:	3708      	adds	r7, #8
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}

0801590c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801590c:	b580      	push	{r7, lr}
 801590e:	b08c      	sub	sp, #48	; 0x30
 8015910:	af04      	add	r7, sp, #16
 8015912:	6078      	str	r0, [r7, #4]
 8015914:	460b      	mov	r3, r1
 8015916:	70fb      	strb	r3, [r7, #3]
 8015918:	4613      	mov	r3, r2
 801591a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801591c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015920:	2124      	movs	r1, #36	; 0x24
 8015922:	2022      	movs	r0, #34	; 0x22
 8015924:	f002 faa2 	bl	8017e6c <pbuf_alloc>
 8015928:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801592a:	69fb      	ldr	r3, [r7, #28]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d04c      	beq.n	80159ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015930:	69fb      	ldr	r3, [r7, #28]
 8015932:	895b      	ldrh	r3, [r3, #10]
 8015934:	2b23      	cmp	r3, #35	; 0x23
 8015936:	d806      	bhi.n	8015946 <icmp_send_response+0x3a>
 8015938:	4b26      	ldr	r3, [pc, #152]	; (80159d4 <icmp_send_response+0xc8>)
 801593a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801593e:	4926      	ldr	r1, [pc, #152]	; (80159d8 <icmp_send_response+0xcc>)
 8015940:	4826      	ldr	r0, [pc, #152]	; (80159dc <icmp_send_response+0xd0>)
 8015942:	f00d f9f5 	bl	8022d30 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801594c:	69fb      	ldr	r3, [r7, #28]
 801594e:	685b      	ldr	r3, [r3, #4]
 8015950:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	78fa      	ldrb	r2, [r7, #3]
 8015956:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015958:	697b      	ldr	r3, [r7, #20]
 801595a:	78ba      	ldrb	r2, [r7, #2]
 801595c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	2200      	movs	r2, #0
 8015962:	711a      	strb	r2, [r3, #4]
 8015964:	2200      	movs	r2, #0
 8015966:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015968:	697b      	ldr	r3, [r7, #20]
 801596a:	2200      	movs	r2, #0
 801596c:	719a      	strb	r2, [r3, #6]
 801596e:	2200      	movs	r2, #0
 8015970:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	685b      	ldr	r3, [r3, #4]
 8015976:	f103 0008 	add.w	r0, r3, #8
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	685b      	ldr	r3, [r3, #4]
 801597e:	221c      	movs	r2, #28
 8015980:	4619      	mov	r1, r3
 8015982:	f00d fbc5 	bl	8023110 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	68db      	ldr	r3, [r3, #12]
 801598a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801598c:	f107 030c 	add.w	r3, r7, #12
 8015990:	4618      	mov	r0, r3
 8015992:	f000 f83d 	bl	8015a10 <ip4_route>
 8015996:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d011      	beq.n	80159c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	2200      	movs	r2, #0
 80159a2:	709a      	strb	r2, [r3, #2]
 80159a4:	2200      	movs	r2, #0
 80159a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80159a8:	f107 020c 	add.w	r2, r7, #12
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	9302      	str	r3, [sp, #8]
 80159b0:	2301      	movs	r3, #1
 80159b2:	9301      	str	r3, [sp, #4]
 80159b4:	2300      	movs	r3, #0
 80159b6:	9300      	str	r3, [sp, #0]
 80159b8:	23ff      	movs	r3, #255	; 0xff
 80159ba:	2100      	movs	r1, #0
 80159bc:	69f8      	ldr	r0, [r7, #28]
 80159be:	f000 f9e5 	bl	8015d8c <ip4_output_if>
  }
  pbuf_free(q);
 80159c2:	69f8      	ldr	r0, [r7, #28]
 80159c4:	f002 fd36 	bl	8018434 <pbuf_free>
 80159c8:	e000      	b.n	80159cc <icmp_send_response+0xc0>
    return;
 80159ca:	bf00      	nop
}
 80159cc:	3720      	adds	r7, #32
 80159ce:	46bd      	mov	sp, r7
 80159d0:	bd80      	pop	{r7, pc}
 80159d2:	bf00      	nop
 80159d4:	080252e0 	.word	0x080252e0
 80159d8:	080253e4 	.word	0x080253e4
 80159dc:	08025388 	.word	0x08025388

080159e0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b082      	sub	sp, #8
 80159e4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80159e6:	2300      	movs	r3, #0
 80159e8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80159ea:	f003 f8f7 	bl	8018bdc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80159ee:	f001 f9eb 	bl	8016dc8 <mem_init>
  memp_init();
 80159f2:	f001 fd47 	bl	8017484 <memp_init>
  pbuf_init();
  netif_init();
 80159f6:	f001 fea3 	bl	8017740 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80159fa:	f009 feab 	bl	801f754 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80159fe:	f003 f969 	bl	8018cd4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8015a02:	f009 fdb3 	bl	801f56c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8015a06:	bf00      	nop
 8015a08:	3708      	adds	r7, #8
 8015a0a:	46bd      	mov	sp, r7
 8015a0c:	bd80      	pop	{r7, pc}
	...

08015a10 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015a10:	b480      	push	{r7}
 8015a12:	b085      	sub	sp, #20
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015a18:	4b33      	ldr	r3, [pc, #204]	; (8015ae8 <ip4_route+0xd8>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	60fb      	str	r3, [r7, #12]
 8015a1e:	e036      	b.n	8015a8e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a26:	f003 0301 	and.w	r3, r3, #1
 8015a2a:	b2db      	uxtb	r3, r3
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d02b      	beq.n	8015a88 <ip4_route+0x78>
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a36:	089b      	lsrs	r3, r3, #2
 8015a38:	f003 0301 	and.w	r3, r3, #1
 8015a3c:	b2db      	uxtb	r3, r3
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d022      	beq.n	8015a88 <ip4_route+0x78>
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	3304      	adds	r3, #4
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d01d      	beq.n	8015a88 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	681a      	ldr	r2, [r3, #0]
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	3304      	adds	r3, #4
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	405a      	eors	r2, r3
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	3308      	adds	r3, #8
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	4013      	ands	r3, r2
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d101      	bne.n	8015a68 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	e038      	b.n	8015ada <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a6e:	f003 0302 	and.w	r3, r3, #2
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d108      	bne.n	8015a88 <ip4_route+0x78>
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	681a      	ldr	r2, [r3, #0]
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	330c      	adds	r3, #12
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d101      	bne.n	8015a88 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	e028      	b.n	8015ada <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015a88:	68fb      	ldr	r3, [r7, #12]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	60fb      	str	r3, [r7, #12]
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d1c5      	bne.n	8015a20 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015a94:	4b15      	ldr	r3, [pc, #84]	; (8015aec <ip4_route+0xdc>)
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d01a      	beq.n	8015ad2 <ip4_route+0xc2>
 8015a9c:	4b13      	ldr	r3, [pc, #76]	; (8015aec <ip4_route+0xdc>)
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015aa4:	f003 0301 	and.w	r3, r3, #1
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d012      	beq.n	8015ad2 <ip4_route+0xc2>
 8015aac:	4b0f      	ldr	r3, [pc, #60]	; (8015aec <ip4_route+0xdc>)
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015ab4:	f003 0304 	and.w	r3, r3, #4
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d00a      	beq.n	8015ad2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015abc:	4b0b      	ldr	r3, [pc, #44]	; (8015aec <ip4_route+0xdc>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	3304      	adds	r3, #4
 8015ac2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d004      	beq.n	8015ad2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	b2db      	uxtb	r3, r3
 8015ace:	2b7f      	cmp	r3, #127	; 0x7f
 8015ad0:	d101      	bne.n	8015ad6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	e001      	b.n	8015ada <ip4_route+0xca>
  }

  return netif_default;
 8015ad6:	4b05      	ldr	r3, [pc, #20]	; (8015aec <ip4_route+0xdc>)
 8015ad8:	681b      	ldr	r3, [r3, #0]
}
 8015ada:	4618      	mov	r0, r3
 8015adc:	3714      	adds	r7, #20
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae4:	4770      	bx	lr
 8015ae6:	bf00      	nop
 8015ae8:	200238cc 	.word	0x200238cc
 8015aec:	200238d0 	.word	0x200238d0

08015af0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b082      	sub	sp, #8
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015afe:	f003 0301 	and.w	r3, r3, #1
 8015b02:	b2db      	uxtb	r3, r3
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d016      	beq.n	8015b36 <ip4_input_accept+0x46>
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	3304      	adds	r3, #4
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d011      	beq.n	8015b36 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015b12:	4b0b      	ldr	r3, [pc, #44]	; (8015b40 <ip4_input_accept+0x50>)
 8015b14:	695a      	ldr	r2, [r3, #20]
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	3304      	adds	r3, #4
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	d008      	beq.n	8015b32 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015b20:	4b07      	ldr	r3, [pc, #28]	; (8015b40 <ip4_input_accept+0x50>)
 8015b22:	695b      	ldr	r3, [r3, #20]
 8015b24:	6879      	ldr	r1, [r7, #4]
 8015b26:	4618      	mov	r0, r3
 8015b28:	f000 fa08 	bl	8015f3c <ip4_addr_isbroadcast_u32>
 8015b2c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d001      	beq.n	8015b36 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015b32:	2301      	movs	r3, #1
 8015b34:	e000      	b.n	8015b38 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015b36:	2300      	movs	r3, #0
}
 8015b38:	4618      	mov	r0, r3
 8015b3a:	3708      	adds	r7, #8
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}
 8015b40:	20018f08 	.word	0x20018f08

08015b44 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b086      	sub	sp, #24
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
 8015b4c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	781b      	ldrb	r3, [r3, #0]
 8015b58:	091b      	lsrs	r3, r3, #4
 8015b5a:	b2db      	uxtb	r3, r3
 8015b5c:	2b04      	cmp	r3, #4
 8015b5e:	d004      	beq.n	8015b6a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015b60:	6878      	ldr	r0, [r7, #4]
 8015b62:	f002 fc67 	bl	8018434 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015b66:	2300      	movs	r3, #0
 8015b68:	e107      	b.n	8015d7a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	f003 030f 	and.w	r3, r3, #15
 8015b72:	b2db      	uxtb	r3, r3
 8015b74:	009b      	lsls	r3, r3, #2
 8015b76:	b2db      	uxtb	r3, r3
 8015b78:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	885b      	ldrh	r3, [r3, #2]
 8015b7e:	b29b      	uxth	r3, r3
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7fe fd4f 	bl	8014624 <lwip_htons>
 8015b86:	4603      	mov	r3, r0
 8015b88:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	891b      	ldrh	r3, [r3, #8]
 8015b8e:	89ba      	ldrh	r2, [r7, #12]
 8015b90:	429a      	cmp	r2, r3
 8015b92:	d204      	bcs.n	8015b9e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015b94:	89bb      	ldrh	r3, [r7, #12]
 8015b96:	4619      	mov	r1, r3
 8015b98:	6878      	ldr	r0, [r7, #4]
 8015b9a:	f002 fac5 	bl	8018128 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	895b      	ldrh	r3, [r3, #10]
 8015ba2:	89fa      	ldrh	r2, [r7, #14]
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d807      	bhi.n	8015bb8 <ip4_input+0x74>
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	891b      	ldrh	r3, [r3, #8]
 8015bac:	89ba      	ldrh	r2, [r7, #12]
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d802      	bhi.n	8015bb8 <ip4_input+0x74>
 8015bb2:	89fb      	ldrh	r3, [r7, #14]
 8015bb4:	2b13      	cmp	r3, #19
 8015bb6:	d804      	bhi.n	8015bc2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f002 fc3b 	bl	8018434 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	e0db      	b.n	8015d7a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	691b      	ldr	r3, [r3, #16]
 8015bc6:	4a6f      	ldr	r2, [pc, #444]	; (8015d84 <ip4_input+0x240>)
 8015bc8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015bca:	697b      	ldr	r3, [r7, #20]
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	4a6d      	ldr	r2, [pc, #436]	; (8015d84 <ip4_input+0x240>)
 8015bd0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015bd2:	4b6c      	ldr	r3, [pc, #432]	; (8015d84 <ip4_input+0x240>)
 8015bd4:	695b      	ldr	r3, [r3, #20]
 8015bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015bda:	2be0      	cmp	r3, #224	; 0xe0
 8015bdc:	d112      	bne.n	8015c04 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015be4:	f003 0301 	and.w	r3, r3, #1
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d007      	beq.n	8015bfe <ip4_input+0xba>
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	3304      	adds	r3, #4
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d002      	beq.n	8015bfe <ip4_input+0xba>
      netif = inp;
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	613b      	str	r3, [r7, #16]
 8015bfc:	e02a      	b.n	8015c54 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	613b      	str	r3, [r7, #16]
 8015c02:	e027      	b.n	8015c54 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015c04:	6838      	ldr	r0, [r7, #0]
 8015c06:	f7ff ff73 	bl	8015af0 <ip4_input_accept>
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d002      	beq.n	8015c16 <ip4_input+0xd2>
      netif = inp;
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	613b      	str	r3, [r7, #16]
 8015c14:	e01e      	b.n	8015c54 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015c16:	2300      	movs	r3, #0
 8015c18:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015c1a:	4b5a      	ldr	r3, [pc, #360]	; (8015d84 <ip4_input+0x240>)
 8015c1c:	695b      	ldr	r3, [r3, #20]
 8015c1e:	b2db      	uxtb	r3, r3
 8015c20:	2b7f      	cmp	r3, #127	; 0x7f
 8015c22:	d017      	beq.n	8015c54 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015c24:	4b58      	ldr	r3, [pc, #352]	; (8015d88 <ip4_input+0x244>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	613b      	str	r3, [r7, #16]
 8015c2a:	e00e      	b.n	8015c4a <ip4_input+0x106>
          if (netif == inp) {
 8015c2c:	693a      	ldr	r2, [r7, #16]
 8015c2e:	683b      	ldr	r3, [r7, #0]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d006      	beq.n	8015c42 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015c34:	6938      	ldr	r0, [r7, #16]
 8015c36:	f7ff ff5b 	bl	8015af0 <ip4_input_accept>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d108      	bne.n	8015c52 <ip4_input+0x10e>
 8015c40:	e000      	b.n	8015c44 <ip4_input+0x100>
            continue;
 8015c42:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	613b      	str	r3, [r7, #16]
 8015c4a:	693b      	ldr	r3, [r7, #16]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d1ed      	bne.n	8015c2c <ip4_input+0xe8>
 8015c50:	e000      	b.n	8015c54 <ip4_input+0x110>
            break;
 8015c52:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015c54:	4b4b      	ldr	r3, [pc, #300]	; (8015d84 <ip4_input+0x240>)
 8015c56:	691b      	ldr	r3, [r3, #16]
 8015c58:	6839      	ldr	r1, [r7, #0]
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f000 f96e 	bl	8015f3c <ip4_addr_isbroadcast_u32>
 8015c60:	4603      	mov	r3, r0
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d105      	bne.n	8015c72 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015c66:	4b47      	ldr	r3, [pc, #284]	; (8015d84 <ip4_input+0x240>)
 8015c68:	691b      	ldr	r3, [r3, #16]
 8015c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015c6e:	2be0      	cmp	r3, #224	; 0xe0
 8015c70:	d104      	bne.n	8015c7c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f002 fbde 	bl	8018434 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	e07e      	b.n	8015d7a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015c7c:	693b      	ldr	r3, [r7, #16]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d104      	bne.n	8015c8c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f002 fbd6 	bl	8018434 <pbuf_free>
    return ERR_OK;
 8015c88:	2300      	movs	r3, #0
 8015c8a:	e076      	b.n	8015d7a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015c8c:	697b      	ldr	r3, [r7, #20]
 8015c8e:	88db      	ldrh	r3, [r3, #6]
 8015c90:	b29b      	uxth	r3, r3
 8015c92:	461a      	mov	r2, r3
 8015c94:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015c98:	4013      	ands	r3, r2
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d00b      	beq.n	8015cb6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015c9e:	6878      	ldr	r0, [r7, #4]
 8015ca0:	f000 fc92 	bl	80165c8 <ip4_reass>
 8015ca4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d101      	bne.n	8015cb0 <ip4_input+0x16c>
      return ERR_OK;
 8015cac:	2300      	movs	r3, #0
 8015cae:	e064      	b.n	8015d7a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	685b      	ldr	r3, [r3, #4]
 8015cb4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015cb6:	4a33      	ldr	r2, [pc, #204]	; (8015d84 <ip4_input+0x240>)
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015cbc:	4a31      	ldr	r2, [pc, #196]	; (8015d84 <ip4_input+0x240>)
 8015cbe:	683b      	ldr	r3, [r7, #0]
 8015cc0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015cc2:	4a30      	ldr	r2, [pc, #192]	; (8015d84 <ip4_input+0x240>)
 8015cc4:	697b      	ldr	r3, [r7, #20]
 8015cc6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	781b      	ldrb	r3, [r3, #0]
 8015ccc:	f003 030f 	and.w	r3, r3, #15
 8015cd0:	b2db      	uxtb	r3, r3
 8015cd2:	009b      	lsls	r3, r3, #2
 8015cd4:	b2db      	uxtb	r3, r3
 8015cd6:	b29a      	uxth	r2, r3
 8015cd8:	4b2a      	ldr	r3, [pc, #168]	; (8015d84 <ip4_input+0x240>)
 8015cda:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015cdc:	89fb      	ldrh	r3, [r7, #14]
 8015cde:	4619      	mov	r1, r3
 8015ce0:	6878      	ldr	r0, [r7, #4]
 8015ce2:	f002 fb21 	bl	8018328 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015ce6:	697b      	ldr	r3, [r7, #20]
 8015ce8:	7a5b      	ldrb	r3, [r3, #9]
 8015cea:	2b11      	cmp	r3, #17
 8015cec:	d006      	beq.n	8015cfc <ip4_input+0x1b8>
 8015cee:	2b11      	cmp	r3, #17
 8015cf0:	dc13      	bgt.n	8015d1a <ip4_input+0x1d6>
 8015cf2:	2b01      	cmp	r3, #1
 8015cf4:	d00c      	beq.n	8015d10 <ip4_input+0x1cc>
 8015cf6:	2b06      	cmp	r3, #6
 8015cf8:	d005      	beq.n	8015d06 <ip4_input+0x1c2>
 8015cfa:	e00e      	b.n	8015d1a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f009 fdd6 	bl	801f8b0 <udp_input>
        break;
 8015d04:	e026      	b.n	8015d54 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015d06:	6839      	ldr	r1, [r7, #0]
 8015d08:	6878      	ldr	r0, [r7, #4]
 8015d0a:	f004 ff63 	bl	801abd4 <tcp_input>
        break;
 8015d0e:	e021      	b.n	8015d54 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015d10:	6839      	ldr	r1, [r7, #0]
 8015d12:	6878      	ldr	r0, [r7, #4]
 8015d14:	f7ff fcd6 	bl	80156c4 <icmp_input>
        break;
 8015d18:	e01c      	b.n	8015d54 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015d1a:	4b1a      	ldr	r3, [pc, #104]	; (8015d84 <ip4_input+0x240>)
 8015d1c:	695b      	ldr	r3, [r3, #20]
 8015d1e:	6939      	ldr	r1, [r7, #16]
 8015d20:	4618      	mov	r0, r3
 8015d22:	f000 f90b 	bl	8015f3c <ip4_addr_isbroadcast_u32>
 8015d26:	4603      	mov	r3, r0
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d10f      	bne.n	8015d4c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015d2c:	4b15      	ldr	r3, [pc, #84]	; (8015d84 <ip4_input+0x240>)
 8015d2e:	695b      	ldr	r3, [r3, #20]
 8015d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015d34:	2be0      	cmp	r3, #224	; 0xe0
 8015d36:	d009      	beq.n	8015d4c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015d38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015d3c:	4619      	mov	r1, r3
 8015d3e:	6878      	ldr	r0, [r7, #4]
 8015d40:	f002 fb65 	bl	801840e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015d44:	2102      	movs	r1, #2
 8015d46:	6878      	ldr	r0, [r7, #4]
 8015d48:	f7ff fdc0 	bl	80158cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f002 fb71 	bl	8018434 <pbuf_free>
        break;
 8015d52:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015d54:	4b0b      	ldr	r3, [pc, #44]	; (8015d84 <ip4_input+0x240>)
 8015d56:	2200      	movs	r2, #0
 8015d58:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015d5a:	4b0a      	ldr	r3, [pc, #40]	; (8015d84 <ip4_input+0x240>)
 8015d5c:	2200      	movs	r2, #0
 8015d5e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015d60:	4b08      	ldr	r3, [pc, #32]	; (8015d84 <ip4_input+0x240>)
 8015d62:	2200      	movs	r2, #0
 8015d64:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015d66:	4b07      	ldr	r3, [pc, #28]	; (8015d84 <ip4_input+0x240>)
 8015d68:	2200      	movs	r2, #0
 8015d6a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015d6c:	4b05      	ldr	r3, [pc, #20]	; (8015d84 <ip4_input+0x240>)
 8015d6e:	2200      	movs	r2, #0
 8015d70:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015d72:	4b04      	ldr	r3, [pc, #16]	; (8015d84 <ip4_input+0x240>)
 8015d74:	2200      	movs	r2, #0
 8015d76:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015d78:	2300      	movs	r3, #0
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	3718      	adds	r7, #24
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	bd80      	pop	{r7, pc}
 8015d82:	bf00      	nop
 8015d84:	20018f08 	.word	0x20018f08
 8015d88:	200238cc 	.word	0x200238cc

08015d8c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b08a      	sub	sp, #40	; 0x28
 8015d90:	af04      	add	r7, sp, #16
 8015d92:	60f8      	str	r0, [r7, #12]
 8015d94:	60b9      	str	r1, [r7, #8]
 8015d96:	607a      	str	r2, [r7, #4]
 8015d98:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015d9a:	68bb      	ldr	r3, [r7, #8]
 8015d9c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d009      	beq.n	8015db8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015da4:	68bb      	ldr	r3, [r7, #8]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d003      	beq.n	8015db2 <ip4_output_if+0x26>
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d102      	bne.n	8015db8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015db4:	3304      	adds	r3, #4
 8015db6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015db8:	78fa      	ldrb	r2, [r7, #3]
 8015dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dbc:	9302      	str	r3, [sp, #8]
 8015dbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015dc2:	9301      	str	r3, [sp, #4]
 8015dc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015dc8:	9300      	str	r3, [sp, #0]
 8015dca:	4613      	mov	r3, r2
 8015dcc:	687a      	ldr	r2, [r7, #4]
 8015dce:	6979      	ldr	r1, [r7, #20]
 8015dd0:	68f8      	ldr	r0, [r7, #12]
 8015dd2:	f000 f805 	bl	8015de0 <ip4_output_if_src>
 8015dd6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3718      	adds	r7, #24
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b088      	sub	sp, #32
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	60f8      	str	r0, [r7, #12]
 8015de8:	60b9      	str	r1, [r7, #8]
 8015dea:	607a      	str	r2, [r7, #4]
 8015dec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	7b9b      	ldrb	r3, [r3, #14]
 8015df2:	2b01      	cmp	r3, #1
 8015df4:	d006      	beq.n	8015e04 <ip4_output_if_src+0x24>
 8015df6:	4b4b      	ldr	r3, [pc, #300]	; (8015f24 <ip4_output_if_src+0x144>)
 8015df8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015dfc:	494a      	ldr	r1, [pc, #296]	; (8015f28 <ip4_output_if_src+0x148>)
 8015dfe:	484b      	ldr	r0, [pc, #300]	; (8015f2c <ip4_output_if_src+0x14c>)
 8015e00:	f00c ff96 	bl	8022d30 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d060      	beq.n	8015ecc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015e0a:	2314      	movs	r3, #20
 8015e0c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015e0e:	2114      	movs	r1, #20
 8015e10:	68f8      	ldr	r0, [r7, #12]
 8015e12:	f002 fa79 	bl	8018308 <pbuf_add_header>
 8015e16:	4603      	mov	r3, r0
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d002      	beq.n	8015e22 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015e1c:	f06f 0301 	mvn.w	r3, #1
 8015e20:	e07c      	b.n	8015f1c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	895b      	ldrh	r3, [r3, #10]
 8015e2c:	2b13      	cmp	r3, #19
 8015e2e:	d806      	bhi.n	8015e3e <ip4_output_if_src+0x5e>
 8015e30:	4b3c      	ldr	r3, [pc, #240]	; (8015f24 <ip4_output_if_src+0x144>)
 8015e32:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015e36:	493e      	ldr	r1, [pc, #248]	; (8015f30 <ip4_output_if_src+0x150>)
 8015e38:	483c      	ldr	r0, [pc, #240]	; (8015f2c <ip4_output_if_src+0x14c>)
 8015e3a:	f00c ff79 	bl	8022d30 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015e3e:	69fb      	ldr	r3, [r7, #28]
 8015e40:	78fa      	ldrb	r2, [r7, #3]
 8015e42:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015e44:	69fb      	ldr	r3, [r7, #28]
 8015e46:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015e4a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681a      	ldr	r2, [r3, #0]
 8015e50:	69fb      	ldr	r3, [r7, #28]
 8015e52:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015e54:	8b7b      	ldrh	r3, [r7, #26]
 8015e56:	089b      	lsrs	r3, r3, #2
 8015e58:	b29b      	uxth	r3, r3
 8015e5a:	b2db      	uxtb	r3, r3
 8015e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e60:	b2da      	uxtb	r2, r3
 8015e62:	69fb      	ldr	r3, [r7, #28]
 8015e64:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015e66:	69fb      	ldr	r3, [r7, #28]
 8015e68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015e6c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	891b      	ldrh	r3, [r3, #8]
 8015e72:	4618      	mov	r0, r3
 8015e74:	f7fe fbd6 	bl	8014624 <lwip_htons>
 8015e78:	4603      	mov	r3, r0
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	69fb      	ldr	r3, [r7, #28]
 8015e7e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	2200      	movs	r2, #0
 8015e84:	719a      	strb	r2, [r3, #6]
 8015e86:	2200      	movs	r2, #0
 8015e88:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015e8a:	4b2a      	ldr	r3, [pc, #168]	; (8015f34 <ip4_output_if_src+0x154>)
 8015e8c:	881b      	ldrh	r3, [r3, #0]
 8015e8e:	4618      	mov	r0, r3
 8015e90:	f7fe fbc8 	bl	8014624 <lwip_htons>
 8015e94:	4603      	mov	r3, r0
 8015e96:	461a      	mov	r2, r3
 8015e98:	69fb      	ldr	r3, [r7, #28]
 8015e9a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015e9c:	4b25      	ldr	r3, [pc, #148]	; (8015f34 <ip4_output_if_src+0x154>)
 8015e9e:	881b      	ldrh	r3, [r3, #0]
 8015ea0:	3301      	adds	r3, #1
 8015ea2:	b29a      	uxth	r2, r3
 8015ea4:	4b23      	ldr	r3, [pc, #140]	; (8015f34 <ip4_output_if_src+0x154>)
 8015ea6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d104      	bne.n	8015eb8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015eae:	4b22      	ldr	r3, [pc, #136]	; (8015f38 <ip4_output_if_src+0x158>)
 8015eb0:	681a      	ldr	r2, [r3, #0]
 8015eb2:	69fb      	ldr	r3, [r7, #28]
 8015eb4:	60da      	str	r2, [r3, #12]
 8015eb6:	e003      	b.n	8015ec0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015eb8:	68bb      	ldr	r3, [r7, #8]
 8015eba:	681a      	ldr	r2, [r3, #0]
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015ec0:	69fb      	ldr	r3, [r7, #28]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	729a      	strb	r2, [r3, #10]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	72da      	strb	r2, [r3, #11]
 8015eca:	e00f      	b.n	8015eec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	895b      	ldrh	r3, [r3, #10]
 8015ed0:	2b13      	cmp	r3, #19
 8015ed2:	d802      	bhi.n	8015eda <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ed4:	f06f 0301 	mvn.w	r3, #1
 8015ed8:	e020      	b.n	8015f1c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015eda:	68fb      	ldr	r3, [r7, #12]
 8015edc:	685b      	ldr	r3, [r3, #4]
 8015ede:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015ee0:	69fb      	ldr	r3, [r7, #28]
 8015ee2:	691b      	ldr	r3, [r3, #16]
 8015ee4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015ee6:	f107 0314 	add.w	r3, r7, #20
 8015eea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d00c      	beq.n	8015f0e <ip4_output_if_src+0x12e>
 8015ef4:	68fb      	ldr	r3, [r7, #12]
 8015ef6:	891a      	ldrh	r2, [r3, #8]
 8015ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015efa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d906      	bls.n	8015f0e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015f00:	687a      	ldr	r2, [r7, #4]
 8015f02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015f04:	68f8      	ldr	r0, [r7, #12]
 8015f06:	f000 fd53 	bl	80169b0 <ip4_frag>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	e006      	b.n	8015f1c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f10:	695b      	ldr	r3, [r3, #20]
 8015f12:	687a      	ldr	r2, [r7, #4]
 8015f14:	68f9      	ldr	r1, [r7, #12]
 8015f16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f18:	4798      	blx	r3
 8015f1a:	4603      	mov	r3, r0
}
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	3720      	adds	r7, #32
 8015f20:	46bd      	mov	sp, r7
 8015f22:	bd80      	pop	{r7, pc}
 8015f24:	08025410 	.word	0x08025410
 8015f28:	08025480 	.word	0x08025480
 8015f2c:	0802548c 	.word	0x0802548c
 8015f30:	080254b4 	.word	0x080254b4
 8015f34:	20018f20 	.word	0x20018f20
 8015f38:	080284c8 	.word	0x080284c8

08015f3c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b085      	sub	sp, #20
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
 8015f44:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f50:	d002      	beq.n	8015f58 <ip4_addr_isbroadcast_u32+0x1c>
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d101      	bne.n	8015f5c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015f58:	2301      	movs	r3, #1
 8015f5a:	e02a      	b.n	8015fb2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015f62:	f003 0302 	and.w	r3, r3, #2
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d101      	bne.n	8015f6e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	e021      	b.n	8015fb2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015f6e:	683b      	ldr	r3, [r7, #0]
 8015f70:	3304      	adds	r3, #4
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	687a      	ldr	r2, [r7, #4]
 8015f76:	429a      	cmp	r2, r3
 8015f78:	d101      	bne.n	8015f7e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	e019      	b.n	8015fb2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015f7e:	68fa      	ldr	r2, [r7, #12]
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	3304      	adds	r3, #4
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	405a      	eors	r2, r3
 8015f88:	683b      	ldr	r3, [r7, #0]
 8015f8a:	3308      	adds	r3, #8
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	4013      	ands	r3, r2
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d10d      	bne.n	8015fb0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	3308      	adds	r3, #8
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	43da      	mvns	r2, r3
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015fa0:	683b      	ldr	r3, [r7, #0]
 8015fa2:	3308      	adds	r3, #8
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015fa8:	429a      	cmp	r2, r3
 8015faa:	d101      	bne.n	8015fb0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015fac:	2301      	movs	r3, #1
 8015fae:	e000      	b.n	8015fb2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015fb0:	2300      	movs	r3, #0
  }
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3714      	adds	r7, #20
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbc:	4770      	bx	lr
	...

08015fc0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b084      	sub	sp, #16
 8015fc4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015fca:	4b12      	ldr	r3, [pc, #72]	; (8016014 <ip_reass_tmr+0x54>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015fd0:	e018      	b.n	8016004 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	7fdb      	ldrb	r3, [r3, #31]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d00b      	beq.n	8015ff2 <ip_reass_tmr+0x32>
      r->timer--;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	7fdb      	ldrb	r3, [r3, #31]
 8015fde:	3b01      	subs	r3, #1
 8015fe0:	b2da      	uxtb	r2, r3
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	60fb      	str	r3, [r7, #12]
 8015ff0:	e008      	b.n	8016004 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015ffc:	68b9      	ldr	r1, [r7, #8]
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f000 f80a 	bl	8016018 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d1e3      	bne.n	8015fd2 <ip_reass_tmr+0x12>
    }
  }
}
 801600a:	bf00      	nop
 801600c:	bf00      	nop
 801600e:	3710      	adds	r7, #16
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}
 8016014:	20018f24 	.word	0x20018f24

08016018 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016018:	b580      	push	{r7, lr}
 801601a:	b088      	sub	sp, #32
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016022:	2300      	movs	r3, #0
 8016024:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016026:	683a      	ldr	r2, [r7, #0]
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	429a      	cmp	r2, r3
 801602c:	d105      	bne.n	801603a <ip_reass_free_complete_datagram+0x22>
 801602e:	4b45      	ldr	r3, [pc, #276]	; (8016144 <ip_reass_free_complete_datagram+0x12c>)
 8016030:	22ab      	movs	r2, #171	; 0xab
 8016032:	4945      	ldr	r1, [pc, #276]	; (8016148 <ip_reass_free_complete_datagram+0x130>)
 8016034:	4845      	ldr	r0, [pc, #276]	; (801614c <ip_reass_free_complete_datagram+0x134>)
 8016036:	f00c fe7b 	bl	8022d30 <iprintf>
  if (prev != NULL) {
 801603a:	683b      	ldr	r3, [r7, #0]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d00a      	beq.n	8016056 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	687a      	ldr	r2, [r7, #4]
 8016046:	429a      	cmp	r2, r3
 8016048:	d005      	beq.n	8016056 <ip_reass_free_complete_datagram+0x3e>
 801604a:	4b3e      	ldr	r3, [pc, #248]	; (8016144 <ip_reass_free_complete_datagram+0x12c>)
 801604c:	22ad      	movs	r2, #173	; 0xad
 801604e:	4940      	ldr	r1, [pc, #256]	; (8016150 <ip_reass_free_complete_datagram+0x138>)
 8016050:	483e      	ldr	r0, [pc, #248]	; (801614c <ip_reass_free_complete_datagram+0x134>)
 8016052:	f00c fe6d 	bl	8022d30 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	685b      	ldr	r3, [r3, #4]
 801605c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	889b      	ldrh	r3, [r3, #4]
 8016062:	b29b      	uxth	r3, r3
 8016064:	2b00      	cmp	r3, #0
 8016066:	d12a      	bne.n	80160be <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	681a      	ldr	r2, [r3, #0]
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016076:	69bb      	ldr	r3, [r7, #24]
 8016078:	6858      	ldr	r0, [r3, #4]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	3308      	adds	r3, #8
 801607e:	2214      	movs	r2, #20
 8016080:	4619      	mov	r1, r3
 8016082:	f00d f845 	bl	8023110 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016086:	2101      	movs	r1, #1
 8016088:	69b8      	ldr	r0, [r7, #24]
 801608a:	f7ff fc2f 	bl	80158ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801608e:	69b8      	ldr	r0, [r7, #24]
 8016090:	f002 fa5e 	bl	8018550 <pbuf_clen>
 8016094:	4603      	mov	r3, r0
 8016096:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016098:	8bfa      	ldrh	r2, [r7, #30]
 801609a:	8a7b      	ldrh	r3, [r7, #18]
 801609c:	4413      	add	r3, r2
 801609e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80160a2:	db05      	blt.n	80160b0 <ip_reass_free_complete_datagram+0x98>
 80160a4:	4b27      	ldr	r3, [pc, #156]	; (8016144 <ip_reass_free_complete_datagram+0x12c>)
 80160a6:	22bc      	movs	r2, #188	; 0xbc
 80160a8:	492a      	ldr	r1, [pc, #168]	; (8016154 <ip_reass_free_complete_datagram+0x13c>)
 80160aa:	4828      	ldr	r0, [pc, #160]	; (801614c <ip_reass_free_complete_datagram+0x134>)
 80160ac:	f00c fe40 	bl	8022d30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80160b0:	8bfa      	ldrh	r2, [r7, #30]
 80160b2:	8a7b      	ldrh	r3, [r7, #18]
 80160b4:	4413      	add	r3, r2
 80160b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80160b8:	69b8      	ldr	r0, [r7, #24]
 80160ba:	f002 f9bb 	bl	8018434 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	685b      	ldr	r3, [r3, #4]
 80160c2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80160c4:	e01f      	b.n	8016106 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80160c6:	69bb      	ldr	r3, [r7, #24]
 80160c8:	685b      	ldr	r3, [r3, #4]
 80160ca:	617b      	str	r3, [r7, #20]
    pcur = p;
 80160cc:	69bb      	ldr	r3, [r7, #24]
 80160ce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80160d0:	697b      	ldr	r3, [r7, #20]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80160d6:	68f8      	ldr	r0, [r7, #12]
 80160d8:	f002 fa3a 	bl	8018550 <pbuf_clen>
 80160dc:	4603      	mov	r3, r0
 80160de:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80160e0:	8bfa      	ldrh	r2, [r7, #30]
 80160e2:	8a7b      	ldrh	r3, [r7, #18]
 80160e4:	4413      	add	r3, r2
 80160e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80160ea:	db05      	blt.n	80160f8 <ip_reass_free_complete_datagram+0xe0>
 80160ec:	4b15      	ldr	r3, [pc, #84]	; (8016144 <ip_reass_free_complete_datagram+0x12c>)
 80160ee:	22cc      	movs	r2, #204	; 0xcc
 80160f0:	4918      	ldr	r1, [pc, #96]	; (8016154 <ip_reass_free_complete_datagram+0x13c>)
 80160f2:	4816      	ldr	r0, [pc, #88]	; (801614c <ip_reass_free_complete_datagram+0x134>)
 80160f4:	f00c fe1c 	bl	8022d30 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80160f8:	8bfa      	ldrh	r2, [r7, #30]
 80160fa:	8a7b      	ldrh	r3, [r7, #18]
 80160fc:	4413      	add	r3, r2
 80160fe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016100:	68f8      	ldr	r0, [r7, #12]
 8016102:	f002 f997 	bl	8018434 <pbuf_free>
  while (p != NULL) {
 8016106:	69bb      	ldr	r3, [r7, #24]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d1dc      	bne.n	80160c6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801610c:	6839      	ldr	r1, [r7, #0]
 801610e:	6878      	ldr	r0, [r7, #4]
 8016110:	f000 f8c2 	bl	8016298 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016114:	4b10      	ldr	r3, [pc, #64]	; (8016158 <ip_reass_free_complete_datagram+0x140>)
 8016116:	881b      	ldrh	r3, [r3, #0]
 8016118:	8bfa      	ldrh	r2, [r7, #30]
 801611a:	429a      	cmp	r2, r3
 801611c:	d905      	bls.n	801612a <ip_reass_free_complete_datagram+0x112>
 801611e:	4b09      	ldr	r3, [pc, #36]	; (8016144 <ip_reass_free_complete_datagram+0x12c>)
 8016120:	22d2      	movs	r2, #210	; 0xd2
 8016122:	490e      	ldr	r1, [pc, #56]	; (801615c <ip_reass_free_complete_datagram+0x144>)
 8016124:	4809      	ldr	r0, [pc, #36]	; (801614c <ip_reass_free_complete_datagram+0x134>)
 8016126:	f00c fe03 	bl	8022d30 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801612a:	4b0b      	ldr	r3, [pc, #44]	; (8016158 <ip_reass_free_complete_datagram+0x140>)
 801612c:	881a      	ldrh	r2, [r3, #0]
 801612e:	8bfb      	ldrh	r3, [r7, #30]
 8016130:	1ad3      	subs	r3, r2, r3
 8016132:	b29a      	uxth	r2, r3
 8016134:	4b08      	ldr	r3, [pc, #32]	; (8016158 <ip_reass_free_complete_datagram+0x140>)
 8016136:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016138:	8bfb      	ldrh	r3, [r7, #30]
}
 801613a:	4618      	mov	r0, r3
 801613c:	3720      	adds	r7, #32
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}
 8016142:	bf00      	nop
 8016144:	080254e4 	.word	0x080254e4
 8016148:	08025558 	.word	0x08025558
 801614c:	08025564 	.word	0x08025564
 8016150:	0802558c 	.word	0x0802558c
 8016154:	080255a0 	.word	0x080255a0
 8016158:	20018f28 	.word	0x20018f28
 801615c:	080255c0 	.word	0x080255c0

08016160 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b08a      	sub	sp, #40	; 0x28
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
 8016168:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801616a:	2300      	movs	r3, #0
 801616c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801616e:	2300      	movs	r3, #0
 8016170:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016172:	2300      	movs	r3, #0
 8016174:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016176:	2300      	movs	r3, #0
 8016178:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801617a:	2300      	movs	r3, #0
 801617c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801617e:	4b28      	ldr	r3, [pc, #160]	; (8016220 <ip_reass_remove_oldest_datagram+0xc0>)
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016184:	e030      	b.n	80161e8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016188:	695a      	ldr	r2, [r3, #20]
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	68db      	ldr	r3, [r3, #12]
 801618e:	429a      	cmp	r2, r3
 8016190:	d10c      	bne.n	80161ac <ip_reass_remove_oldest_datagram+0x4c>
 8016192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016194:	699a      	ldr	r2, [r3, #24]
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	691b      	ldr	r3, [r3, #16]
 801619a:	429a      	cmp	r2, r3
 801619c:	d106      	bne.n	80161ac <ip_reass_remove_oldest_datagram+0x4c>
 801619e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161a0:	899a      	ldrh	r2, [r3, #12]
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	889b      	ldrh	r3, [r3, #4]
 80161a6:	b29b      	uxth	r3, r3
 80161a8:	429a      	cmp	r2, r3
 80161aa:	d014      	beq.n	80161d6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80161ac:	693b      	ldr	r3, [r7, #16]
 80161ae:	3301      	adds	r3, #1
 80161b0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80161b2:	6a3b      	ldr	r3, [r7, #32]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d104      	bne.n	80161c2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80161b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80161bc:	69fb      	ldr	r3, [r7, #28]
 80161be:	61bb      	str	r3, [r7, #24]
 80161c0:	e009      	b.n	80161d6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80161c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161c4:	7fda      	ldrb	r2, [r3, #31]
 80161c6:	6a3b      	ldr	r3, [r7, #32]
 80161c8:	7fdb      	ldrb	r3, [r3, #31]
 80161ca:	429a      	cmp	r2, r3
 80161cc:	d803      	bhi.n	80161d6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80161ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80161d2:	69fb      	ldr	r3, [r7, #28]
 80161d4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80161d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d001      	beq.n	80161e2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80161de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80161e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80161e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d1cb      	bne.n	8016186 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80161ee:	6a3b      	ldr	r3, [r7, #32]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d008      	beq.n	8016206 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80161f4:	69b9      	ldr	r1, [r7, #24]
 80161f6:	6a38      	ldr	r0, [r7, #32]
 80161f8:	f7ff ff0e 	bl	8016018 <ip_reass_free_complete_datagram>
 80161fc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80161fe:	697a      	ldr	r2, [r7, #20]
 8016200:	68fb      	ldr	r3, [r7, #12]
 8016202:	4413      	add	r3, r2
 8016204:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016206:	697a      	ldr	r2, [r7, #20]
 8016208:	683b      	ldr	r3, [r7, #0]
 801620a:	429a      	cmp	r2, r3
 801620c:	da02      	bge.n	8016214 <ip_reass_remove_oldest_datagram+0xb4>
 801620e:	693b      	ldr	r3, [r7, #16]
 8016210:	2b01      	cmp	r3, #1
 8016212:	dcac      	bgt.n	801616e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016214:	697b      	ldr	r3, [r7, #20]
}
 8016216:	4618      	mov	r0, r3
 8016218:	3728      	adds	r7, #40	; 0x28
 801621a:	46bd      	mov	sp, r7
 801621c:	bd80      	pop	{r7, pc}
 801621e:	bf00      	nop
 8016220:	20018f24 	.word	0x20018f24

08016224 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016224:	b580      	push	{r7, lr}
 8016226:	b084      	sub	sp, #16
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
 801622c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801622e:	2004      	movs	r0, #4
 8016230:	f001 f996 	bl	8017560 <memp_malloc>
 8016234:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d110      	bne.n	801625e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801623c:	6839      	ldr	r1, [r7, #0]
 801623e:	6878      	ldr	r0, [r7, #4]
 8016240:	f7ff ff8e 	bl	8016160 <ip_reass_remove_oldest_datagram>
 8016244:	4602      	mov	r2, r0
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	4293      	cmp	r3, r2
 801624a:	dc03      	bgt.n	8016254 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801624c:	2004      	movs	r0, #4
 801624e:	f001 f987 	bl	8017560 <memp_malloc>
 8016252:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016254:	68fb      	ldr	r3, [r7, #12]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d101      	bne.n	801625e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801625a:	2300      	movs	r3, #0
 801625c:	e016      	b.n	801628c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801625e:	2220      	movs	r2, #32
 8016260:	2100      	movs	r1, #0
 8016262:	68f8      	ldr	r0, [r7, #12]
 8016264:	f00c fe03 	bl	8022e6e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	220f      	movs	r2, #15
 801626c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801626e:	4b09      	ldr	r3, [pc, #36]	; (8016294 <ip_reass_enqueue_new_datagram+0x70>)
 8016270:	681a      	ldr	r2, [r3, #0]
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016276:	4a07      	ldr	r2, [pc, #28]	; (8016294 <ip_reass_enqueue_new_datagram+0x70>)
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	3308      	adds	r3, #8
 8016280:	2214      	movs	r2, #20
 8016282:	6879      	ldr	r1, [r7, #4]
 8016284:	4618      	mov	r0, r3
 8016286:	f00c ff43 	bl	8023110 <memcpy>
  return ipr;
 801628a:	68fb      	ldr	r3, [r7, #12]
}
 801628c:	4618      	mov	r0, r3
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	20018f24 	.word	0x20018f24

08016298 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80162a2:	4b10      	ldr	r3, [pc, #64]	; (80162e4 <ip_reass_dequeue_datagram+0x4c>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	687a      	ldr	r2, [r7, #4]
 80162a8:	429a      	cmp	r2, r3
 80162aa:	d104      	bne.n	80162b6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	4a0c      	ldr	r2, [pc, #48]	; (80162e4 <ip_reass_dequeue_datagram+0x4c>)
 80162b2:	6013      	str	r3, [r2, #0]
 80162b4:	e00d      	b.n	80162d2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d106      	bne.n	80162ca <ip_reass_dequeue_datagram+0x32>
 80162bc:	4b0a      	ldr	r3, [pc, #40]	; (80162e8 <ip_reass_dequeue_datagram+0x50>)
 80162be:	f240 1245 	movw	r2, #325	; 0x145
 80162c2:	490a      	ldr	r1, [pc, #40]	; (80162ec <ip_reass_dequeue_datagram+0x54>)
 80162c4:	480a      	ldr	r0, [pc, #40]	; (80162f0 <ip_reass_dequeue_datagram+0x58>)
 80162c6:	f00c fd33 	bl	8022d30 <iprintf>
    prev->next = ipr->next;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	681a      	ldr	r2, [r3, #0]
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80162d2:	6879      	ldr	r1, [r7, #4]
 80162d4:	2004      	movs	r0, #4
 80162d6:	f001 f9b9 	bl	801764c <memp_free>
}
 80162da:	bf00      	nop
 80162dc:	3708      	adds	r7, #8
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	bf00      	nop
 80162e4:	20018f24 	.word	0x20018f24
 80162e8:	080254e4 	.word	0x080254e4
 80162ec:	080255e4 	.word	0x080255e4
 80162f0:	08025564 	.word	0x08025564

080162f4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b08c      	sub	sp, #48	; 0x30
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	60f8      	str	r0, [r7, #12]
 80162fc:	60b9      	str	r1, [r7, #8]
 80162fe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016300:	2300      	movs	r3, #0
 8016302:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016304:	2301      	movs	r3, #1
 8016306:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	685b      	ldr	r3, [r3, #4]
 801630c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801630e:	69fb      	ldr	r3, [r7, #28]
 8016310:	885b      	ldrh	r3, [r3, #2]
 8016312:	b29b      	uxth	r3, r3
 8016314:	4618      	mov	r0, r3
 8016316:	f7fe f985 	bl	8014624 <lwip_htons>
 801631a:	4603      	mov	r3, r0
 801631c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801631e:	69fb      	ldr	r3, [r7, #28]
 8016320:	781b      	ldrb	r3, [r3, #0]
 8016322:	f003 030f 	and.w	r3, r3, #15
 8016326:	b2db      	uxtb	r3, r3
 8016328:	009b      	lsls	r3, r3, #2
 801632a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801632c:	7e7b      	ldrb	r3, [r7, #25]
 801632e:	b29b      	uxth	r3, r3
 8016330:	8b7a      	ldrh	r2, [r7, #26]
 8016332:	429a      	cmp	r2, r3
 8016334:	d202      	bcs.n	801633c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016336:	f04f 33ff 	mov.w	r3, #4294967295
 801633a:	e135      	b.n	80165a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801633c:	7e7b      	ldrb	r3, [r7, #25]
 801633e:	b29b      	uxth	r3, r3
 8016340:	8b7a      	ldrh	r2, [r7, #26]
 8016342:	1ad3      	subs	r3, r2, r3
 8016344:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016346:	69fb      	ldr	r3, [r7, #28]
 8016348:	88db      	ldrh	r3, [r3, #6]
 801634a:	b29b      	uxth	r3, r3
 801634c:	4618      	mov	r0, r3
 801634e:	f7fe f969 	bl	8014624 <lwip_htons>
 8016352:	4603      	mov	r3, r0
 8016354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016358:	b29b      	uxth	r3, r3
 801635a:	00db      	lsls	r3, r3, #3
 801635c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	685b      	ldr	r3, [r3, #4]
 8016362:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016366:	2200      	movs	r2, #0
 8016368:	701a      	strb	r2, [r3, #0]
 801636a:	2200      	movs	r2, #0
 801636c:	705a      	strb	r2, [r3, #1]
 801636e:	2200      	movs	r2, #0
 8016370:	709a      	strb	r2, [r3, #2]
 8016372:	2200      	movs	r2, #0
 8016374:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016378:	8afa      	ldrh	r2, [r7, #22]
 801637a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801637c:	8afa      	ldrh	r2, [r7, #22]
 801637e:	8b7b      	ldrh	r3, [r7, #26]
 8016380:	4413      	add	r3, r2
 8016382:	b29a      	uxth	r2, r3
 8016384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016386:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801638a:	88db      	ldrh	r3, [r3, #6]
 801638c:	b29b      	uxth	r3, r3
 801638e:	8afa      	ldrh	r2, [r7, #22]
 8016390:	429a      	cmp	r2, r3
 8016392:	d902      	bls.n	801639a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016394:	f04f 33ff 	mov.w	r3, #4294967295
 8016398:	e106      	b.n	80165a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	685b      	ldr	r3, [r3, #4]
 801639e:	627b      	str	r3, [r7, #36]	; 0x24
 80163a0:	e068      	b.n	8016474 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80163a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163a4:	685b      	ldr	r3, [r3, #4]
 80163a6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80163a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163aa:	889b      	ldrh	r3, [r3, #4]
 80163ac:	b29a      	uxth	r2, r3
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	889b      	ldrh	r3, [r3, #4]
 80163b2:	b29b      	uxth	r3, r3
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d235      	bcs.n	8016424 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80163b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163bc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80163be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d020      	beq.n	8016406 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80163c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c6:	889b      	ldrh	r3, [r3, #4]
 80163c8:	b29a      	uxth	r2, r3
 80163ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163cc:	88db      	ldrh	r3, [r3, #6]
 80163ce:	b29b      	uxth	r3, r3
 80163d0:	429a      	cmp	r2, r3
 80163d2:	d307      	bcc.n	80163e4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80163d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d6:	88db      	ldrh	r3, [r3, #6]
 80163d8:	b29a      	uxth	r2, r3
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	889b      	ldrh	r3, [r3, #4]
 80163de:	b29b      	uxth	r3, r3
 80163e0:	429a      	cmp	r2, r3
 80163e2:	d902      	bls.n	80163ea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80163e4:	f04f 33ff 	mov.w	r3, #4294967295
 80163e8:	e0de      	b.n	80165a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80163ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ec:	68ba      	ldr	r2, [r7, #8]
 80163ee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80163f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f2:	88db      	ldrh	r3, [r3, #6]
 80163f4:	b29a      	uxth	r2, r3
 80163f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f8:	889b      	ldrh	r3, [r3, #4]
 80163fa:	b29b      	uxth	r3, r3
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d03d      	beq.n	801647c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016400:	2300      	movs	r3, #0
 8016402:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016404:	e03a      	b.n	801647c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016408:	88db      	ldrh	r3, [r3, #6]
 801640a:	b29a      	uxth	r2, r3
 801640c:	693b      	ldr	r3, [r7, #16]
 801640e:	889b      	ldrh	r3, [r3, #4]
 8016410:	b29b      	uxth	r3, r3
 8016412:	429a      	cmp	r2, r3
 8016414:	d902      	bls.n	801641c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016416:	f04f 33ff 	mov.w	r3, #4294967295
 801641a:	e0c5      	b.n	80165a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	68ba      	ldr	r2, [r7, #8]
 8016420:	605a      	str	r2, [r3, #4]
      break;
 8016422:	e02b      	b.n	801647c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016426:	889b      	ldrh	r3, [r3, #4]
 8016428:	b29a      	uxth	r2, r3
 801642a:	693b      	ldr	r3, [r7, #16]
 801642c:	889b      	ldrh	r3, [r3, #4]
 801642e:	b29b      	uxth	r3, r3
 8016430:	429a      	cmp	r2, r3
 8016432:	d102      	bne.n	801643a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016434:	f04f 33ff 	mov.w	r3, #4294967295
 8016438:	e0b6      	b.n	80165a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801643a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801643c:	889b      	ldrh	r3, [r3, #4]
 801643e:	b29a      	uxth	r2, r3
 8016440:	693b      	ldr	r3, [r7, #16]
 8016442:	88db      	ldrh	r3, [r3, #6]
 8016444:	b29b      	uxth	r3, r3
 8016446:	429a      	cmp	r2, r3
 8016448:	d202      	bcs.n	8016450 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801644a:	f04f 33ff 	mov.w	r3, #4294967295
 801644e:	e0ab      	b.n	80165a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016452:	2b00      	cmp	r3, #0
 8016454:	d009      	beq.n	801646a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016458:	88db      	ldrh	r3, [r3, #6]
 801645a:	b29a      	uxth	r2, r3
 801645c:	693b      	ldr	r3, [r7, #16]
 801645e:	889b      	ldrh	r3, [r3, #4]
 8016460:	b29b      	uxth	r3, r3
 8016462:	429a      	cmp	r2, r3
 8016464:	d001      	beq.n	801646a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016466:	2300      	movs	r3, #0
 8016468:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801646a:	693b      	ldr	r3, [r7, #16]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016470:	693b      	ldr	r3, [r7, #16]
 8016472:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016476:	2b00      	cmp	r3, #0
 8016478:	d193      	bne.n	80163a2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801647a:	e000      	b.n	801647e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801647c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016480:	2b00      	cmp	r3, #0
 8016482:	d12d      	bne.n	80164e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016486:	2b00      	cmp	r3, #0
 8016488:	d01c      	beq.n	80164c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801648a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801648c:	88db      	ldrh	r3, [r3, #6]
 801648e:	b29a      	uxth	r2, r3
 8016490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016492:	889b      	ldrh	r3, [r3, #4]
 8016494:	b29b      	uxth	r3, r3
 8016496:	429a      	cmp	r2, r3
 8016498:	d906      	bls.n	80164a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801649a:	4b45      	ldr	r3, [pc, #276]	; (80165b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801649c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80164a0:	4944      	ldr	r1, [pc, #272]	; (80165b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80164a2:	4845      	ldr	r0, [pc, #276]	; (80165b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164a4:	f00c fc44 	bl	8022d30 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80164a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164aa:	68ba      	ldr	r2, [r7, #8]
 80164ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80164ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b0:	88db      	ldrh	r3, [r3, #6]
 80164b2:	b29a      	uxth	r2, r3
 80164b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b6:	889b      	ldrh	r3, [r3, #4]
 80164b8:	b29b      	uxth	r3, r3
 80164ba:	429a      	cmp	r2, r3
 80164bc:	d010      	beq.n	80164e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80164be:	2300      	movs	r3, #0
 80164c0:	623b      	str	r3, [r7, #32]
 80164c2:	e00d      	b.n	80164e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	685b      	ldr	r3, [r3, #4]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d006      	beq.n	80164da <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80164cc:	4b38      	ldr	r3, [pc, #224]	; (80165b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80164ce:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80164d2:	493a      	ldr	r1, [pc, #232]	; (80165bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80164d4:	4838      	ldr	r0, [pc, #224]	; (80165b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80164d6:	f00c fc2b 	bl	8022d30 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	68ba      	ldr	r2, [r7, #8]
 80164de:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d105      	bne.n	80164f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	7f9b      	ldrb	r3, [r3, #30]
 80164ea:	f003 0301 	and.w	r3, r3, #1
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d059      	beq.n	80165a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80164f2:	6a3b      	ldr	r3, [r7, #32]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d04f      	beq.n	8016598 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	685b      	ldr	r3, [r3, #4]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d006      	beq.n	801650e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	685b      	ldr	r3, [r3, #4]
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	889b      	ldrh	r3, [r3, #4]
 8016508:	b29b      	uxth	r3, r3
 801650a:	2b00      	cmp	r3, #0
 801650c:	d002      	beq.n	8016514 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801650e:	2300      	movs	r3, #0
 8016510:	623b      	str	r3, [r7, #32]
 8016512:	e041      	b.n	8016598 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016516:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801651e:	e012      	b.n	8016546 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016522:	685b      	ldr	r3, [r3, #4]
 8016524:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016528:	88db      	ldrh	r3, [r3, #6]
 801652a:	b29a      	uxth	r2, r3
 801652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801652e:	889b      	ldrh	r3, [r3, #4]
 8016530:	b29b      	uxth	r3, r3
 8016532:	429a      	cmp	r2, r3
 8016534:	d002      	beq.n	801653c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016536:	2300      	movs	r3, #0
 8016538:	623b      	str	r3, [r7, #32]
            break;
 801653a:	e007      	b.n	801654c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801653e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016548:	2b00      	cmp	r3, #0
 801654a:	d1e9      	bne.n	8016520 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801654c:	6a3b      	ldr	r3, [r7, #32]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d022      	beq.n	8016598 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d106      	bne.n	8016568 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801655a:	4b15      	ldr	r3, [pc, #84]	; (80165b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801655c:	f240 12df 	movw	r2, #479	; 0x1df
 8016560:	4917      	ldr	r1, [pc, #92]	; (80165c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016562:	4815      	ldr	r0, [pc, #84]	; (80165b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016564:	f00c fbe4 	bl	8022d30 <iprintf>
          LWIP_ASSERT("sanity check",
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016570:	429a      	cmp	r2, r3
 8016572:	d106      	bne.n	8016582 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016574:	4b0e      	ldr	r3, [pc, #56]	; (80165b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016576:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801657a:	4911      	ldr	r1, [pc, #68]	; (80165c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801657c:	480e      	ldr	r0, [pc, #56]	; (80165b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801657e:	f00c fbd7 	bl	8022d30 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d006      	beq.n	8016598 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801658a:	4b09      	ldr	r3, [pc, #36]	; (80165b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801658c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016590:	490c      	ldr	r1, [pc, #48]	; (80165c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016592:	4809      	ldr	r0, [pc, #36]	; (80165b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016594:	f00c fbcc 	bl	8022d30 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016598:	6a3b      	ldr	r3, [r7, #32]
 801659a:	2b00      	cmp	r3, #0
 801659c:	bf14      	ite	ne
 801659e:	2301      	movne	r3, #1
 80165a0:	2300      	moveq	r3, #0
 80165a2:	b2db      	uxtb	r3, r3
 80165a4:	e000      	b.n	80165a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80165a6:	2300      	movs	r3, #0
}
 80165a8:	4618      	mov	r0, r3
 80165aa:	3730      	adds	r7, #48	; 0x30
 80165ac:	46bd      	mov	sp, r7
 80165ae:	bd80      	pop	{r7, pc}
 80165b0:	080254e4 	.word	0x080254e4
 80165b4:	08025600 	.word	0x08025600
 80165b8:	08025564 	.word	0x08025564
 80165bc:	08025620 	.word	0x08025620
 80165c0:	08025658 	.word	0x08025658
 80165c4:	08025668 	.word	0x08025668

080165c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b08e      	sub	sp, #56	; 0x38
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	685b      	ldr	r3, [r3, #4]
 80165d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80165d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d8:	781b      	ldrb	r3, [r3, #0]
 80165da:	f003 030f 	and.w	r3, r3, #15
 80165de:	b2db      	uxtb	r3, r3
 80165e0:	009b      	lsls	r3, r3, #2
 80165e2:	b2db      	uxtb	r3, r3
 80165e4:	2b14      	cmp	r3, #20
 80165e6:	f040 8171 	bne.w	80168cc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80165ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ec:	88db      	ldrh	r3, [r3, #6]
 80165ee:	b29b      	uxth	r3, r3
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7fe f817 	bl	8014624 <lwip_htons>
 80165f6:	4603      	mov	r3, r0
 80165f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165fc:	b29b      	uxth	r3, r3
 80165fe:	00db      	lsls	r3, r3, #3
 8016600:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016604:	885b      	ldrh	r3, [r3, #2]
 8016606:	b29b      	uxth	r3, r3
 8016608:	4618      	mov	r0, r3
 801660a:	f7fe f80b 	bl	8014624 <lwip_htons>
 801660e:	4603      	mov	r3, r0
 8016610:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	f003 030f 	and.w	r3, r3, #15
 801661a:	b2db      	uxtb	r3, r3
 801661c:	009b      	lsls	r3, r3, #2
 801661e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016622:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016626:	b29b      	uxth	r3, r3
 8016628:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801662a:	429a      	cmp	r2, r3
 801662c:	f0c0 8150 	bcc.w	80168d0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016630:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016634:	b29b      	uxth	r3, r3
 8016636:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016638:	1ad3      	subs	r3, r2, r3
 801663a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801663c:	6878      	ldr	r0, [r7, #4]
 801663e:	f001 ff87 	bl	8018550 <pbuf_clen>
 8016642:	4603      	mov	r3, r0
 8016644:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016646:	4b8c      	ldr	r3, [pc, #560]	; (8016878 <ip4_reass+0x2b0>)
 8016648:	881b      	ldrh	r3, [r3, #0]
 801664a:	461a      	mov	r2, r3
 801664c:	8c3b      	ldrh	r3, [r7, #32]
 801664e:	4413      	add	r3, r2
 8016650:	2b0a      	cmp	r3, #10
 8016652:	dd10      	ble.n	8016676 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016654:	8c3b      	ldrh	r3, [r7, #32]
 8016656:	4619      	mov	r1, r3
 8016658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801665a:	f7ff fd81 	bl	8016160 <ip_reass_remove_oldest_datagram>
 801665e:	4603      	mov	r3, r0
 8016660:	2b00      	cmp	r3, #0
 8016662:	f000 8137 	beq.w	80168d4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016666:	4b84      	ldr	r3, [pc, #528]	; (8016878 <ip4_reass+0x2b0>)
 8016668:	881b      	ldrh	r3, [r3, #0]
 801666a:	461a      	mov	r2, r3
 801666c:	8c3b      	ldrh	r3, [r7, #32]
 801666e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016670:	2b0a      	cmp	r3, #10
 8016672:	f300 812f 	bgt.w	80168d4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016676:	4b81      	ldr	r3, [pc, #516]	; (801687c <ip4_reass+0x2b4>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	633b      	str	r3, [r7, #48]	; 0x30
 801667c:	e015      	b.n	80166aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016680:	695a      	ldr	r2, [r3, #20]
 8016682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016684:	68db      	ldr	r3, [r3, #12]
 8016686:	429a      	cmp	r2, r3
 8016688:	d10c      	bne.n	80166a4 <ip4_reass+0xdc>
 801668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801668c:	699a      	ldr	r2, [r3, #24]
 801668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016690:	691b      	ldr	r3, [r3, #16]
 8016692:	429a      	cmp	r2, r3
 8016694:	d106      	bne.n	80166a4 <ip4_reass+0xdc>
 8016696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016698:	899a      	ldrh	r2, [r3, #12]
 801669a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801669c:	889b      	ldrh	r3, [r3, #4]
 801669e:	b29b      	uxth	r3, r3
 80166a0:	429a      	cmp	r2, r3
 80166a2:	d006      	beq.n	80166b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80166a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	633b      	str	r3, [r7, #48]	; 0x30
 80166aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d1e6      	bne.n	801667e <ip4_reass+0xb6>
 80166b0:	e000      	b.n	80166b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80166b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80166b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d109      	bne.n	80166ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80166ba:	8c3b      	ldrh	r3, [r7, #32]
 80166bc:	4619      	mov	r1, r3
 80166be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166c0:	f7ff fdb0 	bl	8016224 <ip_reass_enqueue_new_datagram>
 80166c4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80166c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d11c      	bne.n	8016706 <ip4_reass+0x13e>
      goto nullreturn;
 80166cc:	e105      	b.n	80168da <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80166ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166d0:	88db      	ldrh	r3, [r3, #6]
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	4618      	mov	r0, r3
 80166d6:	f7fd ffa5 	bl	8014624 <lwip_htons>
 80166da:	4603      	mov	r3, r0
 80166dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d110      	bne.n	8016706 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80166e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e6:	89db      	ldrh	r3, [r3, #14]
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7fd ff9b 	bl	8014624 <lwip_htons>
 80166ee:	4603      	mov	r3, r0
 80166f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d006      	beq.n	8016706 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80166f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166fa:	3308      	adds	r3, #8
 80166fc:	2214      	movs	r2, #20
 80166fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016700:	4618      	mov	r0, r3
 8016702:	f00c fd05 	bl	8023110 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016708:	88db      	ldrh	r3, [r3, #6]
 801670a:	b29b      	uxth	r3, r3
 801670c:	f003 0320 	and.w	r3, r3, #32
 8016710:	2b00      	cmp	r3, #0
 8016712:	bf0c      	ite	eq
 8016714:	2301      	moveq	r3, #1
 8016716:	2300      	movne	r3, #0
 8016718:	b2db      	uxtb	r3, r3
 801671a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801671c:	69fb      	ldr	r3, [r7, #28]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d00e      	beq.n	8016740 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016722:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016726:	4413      	add	r3, r2
 8016728:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801672a:	8b7a      	ldrh	r2, [r7, #26]
 801672c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801672e:	429a      	cmp	r2, r3
 8016730:	f0c0 80a0 	bcc.w	8016874 <ip4_reass+0x2ac>
 8016734:	8b7b      	ldrh	r3, [r7, #26]
 8016736:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801673a:	4293      	cmp	r3, r2
 801673c:	f200 809a 	bhi.w	8016874 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016740:	69fa      	ldr	r2, [r7, #28]
 8016742:	6879      	ldr	r1, [r7, #4]
 8016744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016746:	f7ff fdd5 	bl	80162f4 <ip_reass_chain_frag_into_datagram_and_validate>
 801674a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016752:	f000 809b 	beq.w	801688c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016756:	4b48      	ldr	r3, [pc, #288]	; (8016878 <ip4_reass+0x2b0>)
 8016758:	881a      	ldrh	r2, [r3, #0]
 801675a:	8c3b      	ldrh	r3, [r7, #32]
 801675c:	4413      	add	r3, r2
 801675e:	b29a      	uxth	r2, r3
 8016760:	4b45      	ldr	r3, [pc, #276]	; (8016878 <ip4_reass+0x2b0>)
 8016762:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016764:	69fb      	ldr	r3, [r7, #28]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d00d      	beq.n	8016786 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801676a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801676c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801676e:	4413      	add	r3, r2
 8016770:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016774:	8a7a      	ldrh	r2, [r7, #18]
 8016776:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801677a:	7f9b      	ldrb	r3, [r3, #30]
 801677c:	f043 0301 	orr.w	r3, r3, #1
 8016780:	b2da      	uxtb	r2, r3
 8016782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016784:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016786:	697b      	ldr	r3, [r7, #20]
 8016788:	2b01      	cmp	r3, #1
 801678a:	d171      	bne.n	8016870 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801678e:	8b9b      	ldrh	r3, [r3, #28]
 8016790:	3314      	adds	r3, #20
 8016792:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016796:	685b      	ldr	r3, [r3, #4]
 8016798:	685b      	ldr	r3, [r3, #4]
 801679a:	681b      	ldr	r3, [r3, #0]
 801679c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	685b      	ldr	r3, [r3, #4]
 80167a4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80167a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167a8:	3308      	adds	r3, #8
 80167aa:	2214      	movs	r2, #20
 80167ac:	4619      	mov	r1, r3
 80167ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167b0:	f00c fcae 	bl	8023110 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80167b4:	8a3b      	ldrh	r3, [r7, #16]
 80167b6:	4618      	mov	r0, r3
 80167b8:	f7fd ff34 	bl	8014624 <lwip_htons>
 80167bc:	4603      	mov	r3, r0
 80167be:	461a      	mov	r2, r3
 80167c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80167c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c6:	2200      	movs	r2, #0
 80167c8:	719a      	strb	r2, [r3, #6]
 80167ca:	2200      	movs	r2, #0
 80167cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80167ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167d0:	2200      	movs	r2, #0
 80167d2:	729a      	strb	r2, [r3, #10]
 80167d4:	2200      	movs	r2, #0
 80167d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80167d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167da:	685b      	ldr	r3, [r3, #4]
 80167dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80167de:	e00d      	b.n	80167fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80167e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167e2:	685b      	ldr	r3, [r3, #4]
 80167e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80167e6:	2114      	movs	r1, #20
 80167e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80167ea:	f001 fd9d 	bl	8018328 <pbuf_remove_header>
      pbuf_cat(p, r);
 80167ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80167f0:	6878      	ldr	r0, [r7, #4]
 80167f2:	f001 feed 	bl	80185d0 <pbuf_cat>
      r = iprh->next_pbuf;
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80167fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d1ee      	bne.n	80167e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016802:	4b1e      	ldr	r3, [pc, #120]	; (801687c <ip4_reass+0x2b4>)
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016808:	429a      	cmp	r2, r3
 801680a:	d102      	bne.n	8016812 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801680c:	2300      	movs	r3, #0
 801680e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016810:	e010      	b.n	8016834 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016812:	4b1a      	ldr	r3, [pc, #104]	; (801687c <ip4_reass+0x2b4>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016818:	e007      	b.n	801682a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016820:	429a      	cmp	r2, r3
 8016822:	d006      	beq.n	8016832 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	62fb      	str	r3, [r7, #44]	; 0x2c
 801682a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801682c:	2b00      	cmp	r3, #0
 801682e:	d1f4      	bne.n	801681a <ip4_reass+0x252>
 8016830:	e000      	b.n	8016834 <ip4_reass+0x26c>
          break;
 8016832:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016834:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016836:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016838:	f7ff fd2e 	bl	8016298 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f001 fe87 	bl	8018550 <pbuf_clen>
 8016842:	4603      	mov	r3, r0
 8016844:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016846:	4b0c      	ldr	r3, [pc, #48]	; (8016878 <ip4_reass+0x2b0>)
 8016848:	881b      	ldrh	r3, [r3, #0]
 801684a:	8c3a      	ldrh	r2, [r7, #32]
 801684c:	429a      	cmp	r2, r3
 801684e:	d906      	bls.n	801685e <ip4_reass+0x296>
 8016850:	4b0b      	ldr	r3, [pc, #44]	; (8016880 <ip4_reass+0x2b8>)
 8016852:	f240 229b 	movw	r2, #667	; 0x29b
 8016856:	490b      	ldr	r1, [pc, #44]	; (8016884 <ip4_reass+0x2bc>)
 8016858:	480b      	ldr	r0, [pc, #44]	; (8016888 <ip4_reass+0x2c0>)
 801685a:	f00c fa69 	bl	8022d30 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801685e:	4b06      	ldr	r3, [pc, #24]	; (8016878 <ip4_reass+0x2b0>)
 8016860:	881a      	ldrh	r2, [r3, #0]
 8016862:	8c3b      	ldrh	r3, [r7, #32]
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	b29a      	uxth	r2, r3
 8016868:	4b03      	ldr	r3, [pc, #12]	; (8016878 <ip4_reass+0x2b0>)
 801686a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	e038      	b.n	80168e2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016870:	2300      	movs	r3, #0
 8016872:	e036      	b.n	80168e2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016874:	bf00      	nop
 8016876:	e00a      	b.n	801688e <ip4_reass+0x2c6>
 8016878:	20018f28 	.word	0x20018f28
 801687c:	20018f24 	.word	0x20018f24
 8016880:	080254e4 	.word	0x080254e4
 8016884:	0802568c 	.word	0x0802568c
 8016888:	08025564 	.word	0x08025564
    goto nullreturn_ipr;
 801688c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016890:	2b00      	cmp	r3, #0
 8016892:	d106      	bne.n	80168a2 <ip4_reass+0x2da>
 8016894:	4b15      	ldr	r3, [pc, #84]	; (80168ec <ip4_reass+0x324>)
 8016896:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801689a:	4915      	ldr	r1, [pc, #84]	; (80168f0 <ip4_reass+0x328>)
 801689c:	4815      	ldr	r0, [pc, #84]	; (80168f4 <ip4_reass+0x32c>)
 801689e:	f00c fa47 	bl	8022d30 <iprintf>
  if (ipr->p == NULL) {
 80168a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a4:	685b      	ldr	r3, [r3, #4]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d116      	bne.n	80168d8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80168aa:	4b13      	ldr	r3, [pc, #76]	; (80168f8 <ip4_reass+0x330>)
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d006      	beq.n	80168c2 <ip4_reass+0x2fa>
 80168b4:	4b0d      	ldr	r3, [pc, #52]	; (80168ec <ip4_reass+0x324>)
 80168b6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80168ba:	4910      	ldr	r1, [pc, #64]	; (80168fc <ip4_reass+0x334>)
 80168bc:	480d      	ldr	r0, [pc, #52]	; (80168f4 <ip4_reass+0x32c>)
 80168be:	f00c fa37 	bl	8022d30 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80168c2:	2100      	movs	r1, #0
 80168c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168c6:	f7ff fce7 	bl	8016298 <ip_reass_dequeue_datagram>
 80168ca:	e006      	b.n	80168da <ip4_reass+0x312>
    goto nullreturn;
 80168cc:	bf00      	nop
 80168ce:	e004      	b.n	80168da <ip4_reass+0x312>
    goto nullreturn;
 80168d0:	bf00      	nop
 80168d2:	e002      	b.n	80168da <ip4_reass+0x312>
      goto nullreturn;
 80168d4:	bf00      	nop
 80168d6:	e000      	b.n	80168da <ip4_reass+0x312>
  }

nullreturn:
 80168d8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f001 fdaa 	bl	8018434 <pbuf_free>
  return NULL;
 80168e0:	2300      	movs	r3, #0
}
 80168e2:	4618      	mov	r0, r3
 80168e4:	3738      	adds	r7, #56	; 0x38
 80168e6:	46bd      	mov	sp, r7
 80168e8:	bd80      	pop	{r7, pc}
 80168ea:	bf00      	nop
 80168ec:	080254e4 	.word	0x080254e4
 80168f0:	080256a8 	.word	0x080256a8
 80168f4:	08025564 	.word	0x08025564
 80168f8:	20018f24 	.word	0x20018f24
 80168fc:	080256b4 	.word	0x080256b4

08016900 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016904:	2005      	movs	r0, #5
 8016906:	f000 fe2b 	bl	8017560 <memp_malloc>
 801690a:	4603      	mov	r3, r0
}
 801690c:	4618      	mov	r0, r3
 801690e:	bd80      	pop	{r7, pc}

08016910 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d106      	bne.n	801692c <ip_frag_free_pbuf_custom_ref+0x1c>
 801691e:	4b07      	ldr	r3, [pc, #28]	; (801693c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016920:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016924:	4906      	ldr	r1, [pc, #24]	; (8016940 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016926:	4807      	ldr	r0, [pc, #28]	; (8016944 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016928:	f00c fa02 	bl	8022d30 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801692c:	6879      	ldr	r1, [r7, #4]
 801692e:	2005      	movs	r0, #5
 8016930:	f000 fe8c 	bl	801764c <memp_free>
}
 8016934:	bf00      	nop
 8016936:	3708      	adds	r7, #8
 8016938:	46bd      	mov	sp, r7
 801693a:	bd80      	pop	{r7, pc}
 801693c:	080254e4 	.word	0x080254e4
 8016940:	080256d4 	.word	0x080256d4
 8016944:	08025564 	.word	0x08025564

08016948 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b084      	sub	sp, #16
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d106      	bne.n	8016968 <ipfrag_free_pbuf_custom+0x20>
 801695a:	4b11      	ldr	r3, [pc, #68]	; (80169a0 <ipfrag_free_pbuf_custom+0x58>)
 801695c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016960:	4910      	ldr	r1, [pc, #64]	; (80169a4 <ipfrag_free_pbuf_custom+0x5c>)
 8016962:	4811      	ldr	r0, [pc, #68]	; (80169a8 <ipfrag_free_pbuf_custom+0x60>)
 8016964:	f00c f9e4 	bl	8022d30 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016968:	68fa      	ldr	r2, [r7, #12]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	429a      	cmp	r2, r3
 801696e:	d006      	beq.n	801697e <ipfrag_free_pbuf_custom+0x36>
 8016970:	4b0b      	ldr	r3, [pc, #44]	; (80169a0 <ipfrag_free_pbuf_custom+0x58>)
 8016972:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016976:	490d      	ldr	r1, [pc, #52]	; (80169ac <ipfrag_free_pbuf_custom+0x64>)
 8016978:	480b      	ldr	r0, [pc, #44]	; (80169a8 <ipfrag_free_pbuf_custom+0x60>)
 801697a:	f00c f9d9 	bl	8022d30 <iprintf>
  if (pcr->original != NULL) {
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	695b      	ldr	r3, [r3, #20]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d004      	beq.n	8016990 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	695b      	ldr	r3, [r3, #20]
 801698a:	4618      	mov	r0, r3
 801698c:	f001 fd52 	bl	8018434 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016990:	68f8      	ldr	r0, [r7, #12]
 8016992:	f7ff ffbd 	bl	8016910 <ip_frag_free_pbuf_custom_ref>
}
 8016996:	bf00      	nop
 8016998:	3710      	adds	r7, #16
 801699a:	46bd      	mov	sp, r7
 801699c:	bd80      	pop	{r7, pc}
 801699e:	bf00      	nop
 80169a0:	080254e4 	.word	0x080254e4
 80169a4:	080256e0 	.word	0x080256e0
 80169a8:	08025564 	.word	0x08025564
 80169ac:	080256ec 	.word	0x080256ec

080169b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b094      	sub	sp, #80	; 0x50
 80169b4:	af02      	add	r7, sp, #8
 80169b6:	60f8      	str	r0, [r7, #12]
 80169b8:	60b9      	str	r1, [r7, #8]
 80169ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80169bc:	2300      	movs	r3, #0
 80169be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80169c2:	68bb      	ldr	r3, [r7, #8]
 80169c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80169c6:	3b14      	subs	r3, #20
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	da00      	bge.n	80169ce <ip4_frag+0x1e>
 80169cc:	3307      	adds	r3, #7
 80169ce:	10db      	asrs	r3, r3, #3
 80169d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80169d2:	2314      	movs	r3, #20
 80169d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	685b      	ldr	r3, [r3, #4]
 80169da:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80169dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169de:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80169e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169e2:	781b      	ldrb	r3, [r3, #0]
 80169e4:	f003 030f 	and.w	r3, r3, #15
 80169e8:	b2db      	uxtb	r3, r3
 80169ea:	009b      	lsls	r3, r3, #2
 80169ec:	b2db      	uxtb	r3, r3
 80169ee:	2b14      	cmp	r3, #20
 80169f0:	d002      	beq.n	80169f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80169f2:	f06f 0305 	mvn.w	r3, #5
 80169f6:	e110      	b.n	8016c1a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80169f8:	68fb      	ldr	r3, [r7, #12]
 80169fa:	895b      	ldrh	r3, [r3, #10]
 80169fc:	2b13      	cmp	r3, #19
 80169fe:	d809      	bhi.n	8016a14 <ip4_frag+0x64>
 8016a00:	4b88      	ldr	r3, [pc, #544]	; (8016c24 <ip4_frag+0x274>)
 8016a02:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016a06:	4988      	ldr	r1, [pc, #544]	; (8016c28 <ip4_frag+0x278>)
 8016a08:	4888      	ldr	r0, [pc, #544]	; (8016c2c <ip4_frag+0x27c>)
 8016a0a:	f00c f991 	bl	8022d30 <iprintf>
 8016a0e:	f06f 0305 	mvn.w	r3, #5
 8016a12:	e102      	b.n	8016c1a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a16:	88db      	ldrh	r3, [r3, #6]
 8016a18:	b29b      	uxth	r3, r3
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f7fd fe02 	bl	8014624 <lwip_htons>
 8016a20:	4603      	mov	r3, r0
 8016a22:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016a24:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016a2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016a2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016a34:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	891b      	ldrh	r3, [r3, #8]
 8016a3a:	3b14      	subs	r3, #20
 8016a3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016a40:	e0e1      	b.n	8016c06 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016a42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016a44:	00db      	lsls	r3, r3, #3
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016a4c:	4293      	cmp	r3, r2
 8016a4e:	bf28      	it	cs
 8016a50:	4613      	movcs	r3, r2
 8016a52:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016a54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a58:	2114      	movs	r1, #20
 8016a5a:	200e      	movs	r0, #14
 8016a5c:	f001 fa06 	bl	8017e6c <pbuf_alloc>
 8016a60:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	f000 80d5 	beq.w	8016c14 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a6c:	895b      	ldrh	r3, [r3, #10]
 8016a6e:	2b13      	cmp	r3, #19
 8016a70:	d806      	bhi.n	8016a80 <ip4_frag+0xd0>
 8016a72:	4b6c      	ldr	r3, [pc, #432]	; (8016c24 <ip4_frag+0x274>)
 8016a74:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016a78:	496d      	ldr	r1, [pc, #436]	; (8016c30 <ip4_frag+0x280>)
 8016a7a:	486c      	ldr	r0, [pc, #432]	; (8016c2c <ip4_frag+0x27c>)
 8016a7c:	f00c f958 	bl	8022d30 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a82:	685b      	ldr	r3, [r3, #4]
 8016a84:	2214      	movs	r2, #20
 8016a86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016a88:	4618      	mov	r0, r3
 8016a8a:	f00c fb41 	bl	8023110 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a90:	685b      	ldr	r3, [r3, #4]
 8016a92:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016a94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016a96:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016a9a:	e064      	b.n	8016b66 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	895a      	ldrh	r2, [r3, #10]
 8016aa0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016aa2:	1ad3      	subs	r3, r2, r3
 8016aa4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	895b      	ldrh	r3, [r3, #10]
 8016aaa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d906      	bls.n	8016abe <ip4_frag+0x10e>
 8016ab0:	4b5c      	ldr	r3, [pc, #368]	; (8016c24 <ip4_frag+0x274>)
 8016ab2:	f240 322d 	movw	r2, #813	; 0x32d
 8016ab6:	495f      	ldr	r1, [pc, #380]	; (8016c34 <ip4_frag+0x284>)
 8016ab8:	485c      	ldr	r0, [pc, #368]	; (8016c2c <ip4_frag+0x27c>)
 8016aba:	f00c f939 	bl	8022d30 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016abe:	8bfa      	ldrh	r2, [r7, #30]
 8016ac0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016ac4:	4293      	cmp	r3, r2
 8016ac6:	bf28      	it	cs
 8016ac8:	4613      	movcs	r3, r2
 8016aca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016ace:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d105      	bne.n	8016ae2 <ip4_frag+0x132>
        poff = 0;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	60fb      	str	r3, [r7, #12]
        continue;
 8016ae0:	e041      	b.n	8016b66 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016ae2:	f7ff ff0d 	bl	8016900 <ip_frag_alloc_pbuf_custom_ref>
 8016ae6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016ae8:	69bb      	ldr	r3, [r7, #24]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d103      	bne.n	8016af6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016af0:	f001 fca0 	bl	8018434 <pbuf_free>
        goto memerr;
 8016af4:	e08f      	b.n	8016c16 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016af6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016afc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016afe:	4413      	add	r3, r2
 8016b00:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016b04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016b08:	9201      	str	r2, [sp, #4]
 8016b0a:	9300      	str	r3, [sp, #0]
 8016b0c:	4603      	mov	r3, r0
 8016b0e:	2241      	movs	r2, #65	; 0x41
 8016b10:	2000      	movs	r0, #0
 8016b12:	f001 fad5 	bl	80180c0 <pbuf_alloced_custom>
 8016b16:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d106      	bne.n	8016b2c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016b1e:	69b8      	ldr	r0, [r7, #24]
 8016b20:	f7ff fef6 	bl	8016910 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016b24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b26:	f001 fc85 	bl	8018434 <pbuf_free>
        goto memerr;
 8016b2a:	e074      	b.n	8016c16 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016b2c:	68f8      	ldr	r0, [r7, #12]
 8016b2e:	f001 fd27 	bl	8018580 <pbuf_ref>
      pcr->original = p;
 8016b32:	69bb      	ldr	r3, [r7, #24]
 8016b34:	68fa      	ldr	r2, [r7, #12]
 8016b36:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016b38:	69bb      	ldr	r3, [r7, #24]
 8016b3a:	4a3f      	ldr	r2, [pc, #252]	; (8016c38 <ip4_frag+0x288>)
 8016b3c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016b3e:	6979      	ldr	r1, [r7, #20]
 8016b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016b42:	f001 fd45 	bl	80185d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016b46:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016b4a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b4e:	1ad3      	subs	r3, r2, r3
 8016b50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016b54:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	d004      	beq.n	8016b66 <ip4_frag+0x1b6>
        poff = 0;
 8016b5c:	2300      	movs	r3, #0
 8016b5e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016b66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d196      	bne.n	8016a9c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016b6e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016b70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016b74:	4413      	add	r3, r2
 8016b76:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016b78:	68bb      	ldr	r3, [r7, #8]
 8016b7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016b7c:	f1a3 0213 	sub.w	r2, r3, #19
 8016b80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b84:	429a      	cmp	r2, r3
 8016b86:	bfcc      	ite	gt
 8016b88:	2301      	movgt	r3, #1
 8016b8a:	2300      	movle	r3, #0
 8016b8c:	b2db      	uxtb	r3, r3
 8016b8e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016b90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016b98:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016b9a:	6a3b      	ldr	r3, [r7, #32]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d002      	beq.n	8016ba6 <ip4_frag+0x1f6>
 8016ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d003      	beq.n	8016bae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016ba6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ba8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016bac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016bae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7fd fd37 	bl	8014624 <lwip_htons>
 8016bb6:	4603      	mov	r3, r0
 8016bb8:	461a      	mov	r2, r3
 8016bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bbc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016bbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016bc0:	3314      	adds	r3, #20
 8016bc2:	b29b      	uxth	r3, r3
 8016bc4:	4618      	mov	r0, r3
 8016bc6:	f7fd fd2d 	bl	8014624 <lwip_htons>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	461a      	mov	r2, r3
 8016bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bd4:	2200      	movs	r2, #0
 8016bd6:	729a      	strb	r2, [r3, #10]
 8016bd8:	2200      	movs	r2, #0
 8016bda:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016bdc:	68bb      	ldr	r3, [r7, #8]
 8016bde:	695b      	ldr	r3, [r3, #20]
 8016be0:	687a      	ldr	r2, [r7, #4]
 8016be2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016be4:	68b8      	ldr	r0, [r7, #8]
 8016be6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016bea:	f001 fc23 	bl	8018434 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016bee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016bf2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016bf4:	1ad3      	subs	r3, r2, r3
 8016bf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016bfa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016bfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016c00:	4413      	add	r3, r2
 8016c02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016c06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	f47f af19 	bne.w	8016a42 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016c10:	2300      	movs	r3, #0
 8016c12:	e002      	b.n	8016c1a <ip4_frag+0x26a>
      goto memerr;
 8016c14:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	3748      	adds	r7, #72	; 0x48
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}
 8016c22:	bf00      	nop
 8016c24:	080254e4 	.word	0x080254e4
 8016c28:	080256f8 	.word	0x080256f8
 8016c2c:	08025564 	.word	0x08025564
 8016c30:	08025714 	.word	0x08025714
 8016c34:	08025734 	.word	0x08025734
 8016c38:	08016949 	.word	0x08016949

08016c3c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8016c3c:	b480      	push	{r7}
 8016c3e:	b083      	sub	sp, #12
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	4603      	mov	r3, r0
 8016c44:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8016c46:	4b05      	ldr	r3, [pc, #20]	; (8016c5c <ptr_to_mem+0x20>)
 8016c48:	681a      	ldr	r2, [r3, #0]
 8016c4a:	88fb      	ldrh	r3, [r7, #6]
 8016c4c:	4413      	add	r3, r2
}
 8016c4e:	4618      	mov	r0, r3
 8016c50:	370c      	adds	r7, #12
 8016c52:	46bd      	mov	sp, r7
 8016c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c58:	4770      	bx	lr
 8016c5a:	bf00      	nop
 8016c5c:	20020740 	.word	0x20020740

08016c60 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8016c60:	b480      	push	{r7}
 8016c62:	b083      	sub	sp, #12
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8016c68:	4b05      	ldr	r3, [pc, #20]	; (8016c80 <mem_to_ptr+0x20>)
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	687a      	ldr	r2, [r7, #4]
 8016c6e:	1ad3      	subs	r3, r2, r3
 8016c70:	b29b      	uxth	r3, r3
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	370c      	adds	r7, #12
 8016c76:	46bd      	mov	sp, r7
 8016c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7c:	4770      	bx	lr
 8016c7e:	bf00      	nop
 8016c80:	20020740 	.word	0x20020740

08016c84 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8016c84:	b590      	push	{r4, r7, lr}
 8016c86:	b085      	sub	sp, #20
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8016c8c:	4b45      	ldr	r3, [pc, #276]	; (8016da4 <plug_holes+0x120>)
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	687a      	ldr	r2, [r7, #4]
 8016c92:	429a      	cmp	r2, r3
 8016c94:	d206      	bcs.n	8016ca4 <plug_holes+0x20>
 8016c96:	4b44      	ldr	r3, [pc, #272]	; (8016da8 <plug_holes+0x124>)
 8016c98:	f240 12df 	movw	r2, #479	; 0x1df
 8016c9c:	4943      	ldr	r1, [pc, #268]	; (8016dac <plug_holes+0x128>)
 8016c9e:	4844      	ldr	r0, [pc, #272]	; (8016db0 <plug_holes+0x12c>)
 8016ca0:	f00c f846 	bl	8022d30 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8016ca4:	4b43      	ldr	r3, [pc, #268]	; (8016db4 <plug_holes+0x130>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	687a      	ldr	r2, [r7, #4]
 8016caa:	429a      	cmp	r2, r3
 8016cac:	d306      	bcc.n	8016cbc <plug_holes+0x38>
 8016cae:	4b3e      	ldr	r3, [pc, #248]	; (8016da8 <plug_holes+0x124>)
 8016cb0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016cb4:	4940      	ldr	r1, [pc, #256]	; (8016db8 <plug_holes+0x134>)
 8016cb6:	483e      	ldr	r0, [pc, #248]	; (8016db0 <plug_holes+0x12c>)
 8016cb8:	f00c f83a 	bl	8022d30 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	791b      	ldrb	r3, [r3, #4]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d006      	beq.n	8016cd2 <plug_holes+0x4e>
 8016cc4:	4b38      	ldr	r3, [pc, #224]	; (8016da8 <plug_holes+0x124>)
 8016cc6:	f240 12e1 	movw	r2, #481	; 0x1e1
 8016cca:	493c      	ldr	r1, [pc, #240]	; (8016dbc <plug_holes+0x138>)
 8016ccc:	4838      	ldr	r0, [pc, #224]	; (8016db0 <plug_holes+0x12c>)
 8016cce:	f00c f82f 	bl	8022d30 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	881b      	ldrh	r3, [r3, #0]
 8016cd6:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8016cda:	d906      	bls.n	8016cea <plug_holes+0x66>
 8016cdc:	4b32      	ldr	r3, [pc, #200]	; (8016da8 <plug_holes+0x124>)
 8016cde:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8016ce2:	4937      	ldr	r1, [pc, #220]	; (8016dc0 <plug_holes+0x13c>)
 8016ce4:	4832      	ldr	r0, [pc, #200]	; (8016db0 <plug_holes+0x12c>)
 8016ce6:	f00c f823 	bl	8022d30 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	881b      	ldrh	r3, [r3, #0]
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7ff ffa4 	bl	8016c3c <ptr_to_mem>
 8016cf4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8016cf6:	687a      	ldr	r2, [r7, #4]
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d024      	beq.n	8016d48 <plug_holes+0xc4>
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	791b      	ldrb	r3, [r3, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d120      	bne.n	8016d48 <plug_holes+0xc4>
 8016d06:	4b2b      	ldr	r3, [pc, #172]	; (8016db4 <plug_holes+0x130>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	68fa      	ldr	r2, [r7, #12]
 8016d0c:	429a      	cmp	r2, r3
 8016d0e:	d01b      	beq.n	8016d48 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8016d10:	4b2c      	ldr	r3, [pc, #176]	; (8016dc4 <plug_holes+0x140>)
 8016d12:	681b      	ldr	r3, [r3, #0]
 8016d14:	68fa      	ldr	r2, [r7, #12]
 8016d16:	429a      	cmp	r2, r3
 8016d18:	d102      	bne.n	8016d20 <plug_holes+0x9c>
      lfree = mem;
 8016d1a:	4a2a      	ldr	r2, [pc, #168]	; (8016dc4 <plug_holes+0x140>)
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	881a      	ldrh	r2, [r3, #0]
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	881b      	ldrh	r3, [r3, #0]
 8016d2c:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8016d30:	d00a      	beq.n	8016d48 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	881b      	ldrh	r3, [r3, #0]
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7ff ff80 	bl	8016c3c <ptr_to_mem>
 8016d3c:	4604      	mov	r4, r0
 8016d3e:	6878      	ldr	r0, [r7, #4]
 8016d40:	f7ff ff8e 	bl	8016c60 <mem_to_ptr>
 8016d44:	4603      	mov	r3, r0
 8016d46:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	885b      	ldrh	r3, [r3, #2]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7ff ff75 	bl	8016c3c <ptr_to_mem>
 8016d52:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8016d54:	68ba      	ldr	r2, [r7, #8]
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d01f      	beq.n	8016d9c <plug_holes+0x118>
 8016d5c:	68bb      	ldr	r3, [r7, #8]
 8016d5e:	791b      	ldrb	r3, [r3, #4]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d11b      	bne.n	8016d9c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8016d64:	4b17      	ldr	r3, [pc, #92]	; (8016dc4 <plug_holes+0x140>)
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	687a      	ldr	r2, [r7, #4]
 8016d6a:	429a      	cmp	r2, r3
 8016d6c:	d102      	bne.n	8016d74 <plug_holes+0xf0>
      lfree = pmem;
 8016d6e:	4a15      	ldr	r2, [pc, #84]	; (8016dc4 <plug_holes+0x140>)
 8016d70:	68bb      	ldr	r3, [r7, #8]
 8016d72:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	881a      	ldrh	r2, [r3, #0]
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	881b      	ldrh	r3, [r3, #0]
 8016d80:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8016d84:	d00a      	beq.n	8016d9c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	881b      	ldrh	r3, [r3, #0]
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	f7ff ff56 	bl	8016c3c <ptr_to_mem>
 8016d90:	4604      	mov	r4, r0
 8016d92:	68b8      	ldr	r0, [r7, #8]
 8016d94:	f7ff ff64 	bl	8016c60 <mem_to_ptr>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8016d9c:	bf00      	nop
 8016d9e:	3714      	adds	r7, #20
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd90      	pop	{r4, r7, pc}
 8016da4:	20020740 	.word	0x20020740
 8016da8:	08025744 	.word	0x08025744
 8016dac:	080257ac 	.word	0x080257ac
 8016db0:	080257c4 	.word	0x080257c4
 8016db4:	20020744 	.word	0x20020744
 8016db8:	080257ec 	.word	0x080257ec
 8016dbc:	08025808 	.word	0x08025808
 8016dc0:	08025824 	.word	0x08025824
 8016dc4:	2002074c 	.word	0x2002074c

08016dc8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8016dce:	4b1f      	ldr	r3, [pc, #124]	; (8016e4c <mem_init+0x84>)
 8016dd0:	3303      	adds	r3, #3
 8016dd2:	f023 0303 	bic.w	r3, r3, #3
 8016dd6:	461a      	mov	r2, r3
 8016dd8:	4b1d      	ldr	r3, [pc, #116]	; (8016e50 <mem_init+0x88>)
 8016dda:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8016ddc:	4b1c      	ldr	r3, [pc, #112]	; (8016e50 <mem_init+0x88>)
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8016de8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	2200      	movs	r2, #0
 8016dee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2200      	movs	r2, #0
 8016df4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8016df6:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 8016dfa:	f7ff ff1f 	bl	8016c3c <ptr_to_mem>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	4a14      	ldr	r2, [pc, #80]	; (8016e54 <mem_init+0x8c>)
 8016e02:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8016e04:	4b13      	ldr	r3, [pc, #76]	; (8016e54 <mem_init+0x8c>)
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	2201      	movs	r2, #1
 8016e0a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8016e0c:	4b11      	ldr	r3, [pc, #68]	; (8016e54 <mem_init+0x8c>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8016e14:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8016e16:	4b0f      	ldr	r3, [pc, #60]	; (8016e54 <mem_init+0x8c>)
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8016e1e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8016e20:	4b0b      	ldr	r3, [pc, #44]	; (8016e50 <mem_init+0x88>)
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	4a0c      	ldr	r2, [pc, #48]	; (8016e58 <mem_init+0x90>)
 8016e26:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8016e28:	480c      	ldr	r0, [pc, #48]	; (8016e5c <mem_init+0x94>)
 8016e2a:	f001 fee3 	bl	8018bf4 <sys_mutex_new>
 8016e2e:	4603      	mov	r3, r0
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d006      	beq.n	8016e42 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8016e34:	4b0a      	ldr	r3, [pc, #40]	; (8016e60 <mem_init+0x98>)
 8016e36:	f240 221f 	movw	r2, #543	; 0x21f
 8016e3a:	490a      	ldr	r1, [pc, #40]	; (8016e64 <mem_init+0x9c>)
 8016e3c:	480a      	ldr	r0, [pc, #40]	; (8016e68 <mem_init+0xa0>)
 8016e3e:	f00b ff77 	bl	8022d30 <iprintf>
  }
}
 8016e42:	bf00      	nop
 8016e44:	3708      	adds	r7, #8
 8016e46:	46bd      	mov	sp, r7
 8016e48:	bd80      	pop	{r7, pc}
 8016e4a:	bf00      	nop
 8016e4c:	20018f2c 	.word	0x20018f2c
 8016e50:	20020740 	.word	0x20020740
 8016e54:	20020744 	.word	0x20020744
 8016e58:	2002074c 	.word	0x2002074c
 8016e5c:	20020748 	.word	0x20020748
 8016e60:	08025744 	.word	0x08025744
 8016e64:	08025850 	.word	0x08025850
 8016e68:	080257c4 	.word	0x080257c4

08016e6c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b086      	sub	sp, #24
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f7ff fef3 	bl	8016c60 <mem_to_ptr>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	881b      	ldrh	r3, [r3, #0]
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7ff feda 	bl	8016c3c <ptr_to_mem>
 8016e88:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	885b      	ldrh	r3, [r3, #2]
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7ff fed4 	bl	8016c3c <ptr_to_mem>
 8016e94:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	881b      	ldrh	r3, [r3, #0]
 8016e9a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8016e9e:	d818      	bhi.n	8016ed2 <mem_link_valid+0x66>
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	885b      	ldrh	r3, [r3, #2]
 8016ea4:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8016ea8:	d813      	bhi.n	8016ed2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8016eae:	8afa      	ldrh	r2, [r7, #22]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d004      	beq.n	8016ebe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	881b      	ldrh	r3, [r3, #0]
 8016eb8:	8afa      	ldrh	r2, [r7, #22]
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d109      	bne.n	8016ed2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016ebe:	4b08      	ldr	r3, [pc, #32]	; (8016ee0 <mem_link_valid+0x74>)
 8016ec0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016ec2:	693a      	ldr	r2, [r7, #16]
 8016ec4:	429a      	cmp	r2, r3
 8016ec6:	d006      	beq.n	8016ed6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016ec8:	693b      	ldr	r3, [r7, #16]
 8016eca:	885b      	ldrh	r3, [r3, #2]
 8016ecc:	8afa      	ldrh	r2, [r7, #22]
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d001      	beq.n	8016ed6 <mem_link_valid+0x6a>
    return 0;
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	e000      	b.n	8016ed8 <mem_link_valid+0x6c>
  }
  return 1;
 8016ed6:	2301      	movs	r3, #1
}
 8016ed8:	4618      	mov	r0, r3
 8016eda:	3718      	adds	r7, #24
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}
 8016ee0:	20020744 	.word	0x20020744

08016ee4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b088      	sub	sp, #32
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d070      	beq.n	8016fd4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	f003 0303 	and.w	r3, r3, #3
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d00d      	beq.n	8016f18 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8016efc:	4b37      	ldr	r3, [pc, #220]	; (8016fdc <mem_free+0xf8>)
 8016efe:	f240 2273 	movw	r2, #627	; 0x273
 8016f02:	4937      	ldr	r1, [pc, #220]	; (8016fe0 <mem_free+0xfc>)
 8016f04:	4837      	ldr	r0, [pc, #220]	; (8016fe4 <mem_free+0x100>)
 8016f06:	f00b ff13 	bl	8022d30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016f0a:	f001 fec5 	bl	8018c98 <sys_arch_protect>
 8016f0e:	60f8      	str	r0, [r7, #12]
 8016f10:	68f8      	ldr	r0, [r7, #12]
 8016f12:	f001 fecf 	bl	8018cb4 <sys_arch_unprotect>
    return;
 8016f16:	e05e      	b.n	8016fd6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	3b08      	subs	r3, #8
 8016f1c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8016f1e:	4b32      	ldr	r3, [pc, #200]	; (8016fe8 <mem_free+0x104>)
 8016f20:	681b      	ldr	r3, [r3, #0]
 8016f22:	69fa      	ldr	r2, [r7, #28]
 8016f24:	429a      	cmp	r2, r3
 8016f26:	d306      	bcc.n	8016f36 <mem_free+0x52>
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	f103 020c 	add.w	r2, r3, #12
 8016f2e:	4b2f      	ldr	r3, [pc, #188]	; (8016fec <mem_free+0x108>)
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d90d      	bls.n	8016f52 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8016f36:	4b29      	ldr	r3, [pc, #164]	; (8016fdc <mem_free+0xf8>)
 8016f38:	f240 227f 	movw	r2, #639	; 0x27f
 8016f3c:	492c      	ldr	r1, [pc, #176]	; (8016ff0 <mem_free+0x10c>)
 8016f3e:	4829      	ldr	r0, [pc, #164]	; (8016fe4 <mem_free+0x100>)
 8016f40:	f00b fef6 	bl	8022d30 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016f44:	f001 fea8 	bl	8018c98 <sys_arch_protect>
 8016f48:	6138      	str	r0, [r7, #16]
 8016f4a:	6938      	ldr	r0, [r7, #16]
 8016f4c:	f001 feb2 	bl	8018cb4 <sys_arch_unprotect>
    return;
 8016f50:	e041      	b.n	8016fd6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8016f52:	4828      	ldr	r0, [pc, #160]	; (8016ff4 <mem_free+0x110>)
 8016f54:	f001 fe64 	bl	8018c20 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8016f58:	69fb      	ldr	r3, [r7, #28]
 8016f5a:	791b      	ldrb	r3, [r3, #4]
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d110      	bne.n	8016f82 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8016f60:	4b1e      	ldr	r3, [pc, #120]	; (8016fdc <mem_free+0xf8>)
 8016f62:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8016f66:	4924      	ldr	r1, [pc, #144]	; (8016ff8 <mem_free+0x114>)
 8016f68:	481e      	ldr	r0, [pc, #120]	; (8016fe4 <mem_free+0x100>)
 8016f6a:	f00b fee1 	bl	8022d30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8016f6e:	4821      	ldr	r0, [pc, #132]	; (8016ff4 <mem_free+0x110>)
 8016f70:	f001 fe65 	bl	8018c3e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016f74:	f001 fe90 	bl	8018c98 <sys_arch_protect>
 8016f78:	6178      	str	r0, [r7, #20]
 8016f7a:	6978      	ldr	r0, [r7, #20]
 8016f7c:	f001 fe9a 	bl	8018cb4 <sys_arch_unprotect>
    return;
 8016f80:	e029      	b.n	8016fd6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8016f82:	69f8      	ldr	r0, [r7, #28]
 8016f84:	f7ff ff72 	bl	8016e6c <mem_link_valid>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d110      	bne.n	8016fb0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8016f8e:	4b13      	ldr	r3, [pc, #76]	; (8016fdc <mem_free+0xf8>)
 8016f90:	f240 2295 	movw	r2, #661	; 0x295
 8016f94:	4919      	ldr	r1, [pc, #100]	; (8016ffc <mem_free+0x118>)
 8016f96:	4813      	ldr	r0, [pc, #76]	; (8016fe4 <mem_free+0x100>)
 8016f98:	f00b feca 	bl	8022d30 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8016f9c:	4815      	ldr	r0, [pc, #84]	; (8016ff4 <mem_free+0x110>)
 8016f9e:	f001 fe4e 	bl	8018c3e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016fa2:	f001 fe79 	bl	8018c98 <sys_arch_protect>
 8016fa6:	61b8      	str	r0, [r7, #24]
 8016fa8:	69b8      	ldr	r0, [r7, #24]
 8016faa:	f001 fe83 	bl	8018cb4 <sys_arch_unprotect>
    return;
 8016fae:	e012      	b.n	8016fd6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8016fb0:	69fb      	ldr	r3, [r7, #28]
 8016fb2:	2200      	movs	r2, #0
 8016fb4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8016fb6:	4b12      	ldr	r3, [pc, #72]	; (8017000 <mem_free+0x11c>)
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	69fa      	ldr	r2, [r7, #28]
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d202      	bcs.n	8016fc6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8016fc0:	4a0f      	ldr	r2, [pc, #60]	; (8017000 <mem_free+0x11c>)
 8016fc2:	69fb      	ldr	r3, [r7, #28]
 8016fc4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8016fc6:	69f8      	ldr	r0, [r7, #28]
 8016fc8:	f7ff fe5c 	bl	8016c84 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016fcc:	4809      	ldr	r0, [pc, #36]	; (8016ff4 <mem_free+0x110>)
 8016fce:	f001 fe36 	bl	8018c3e <sys_mutex_unlock>
 8016fd2:	e000      	b.n	8016fd6 <mem_free+0xf2>
    return;
 8016fd4:	bf00      	nop
}
 8016fd6:	3720      	adds	r7, #32
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}
 8016fdc:	08025744 	.word	0x08025744
 8016fe0:	0802586c 	.word	0x0802586c
 8016fe4:	080257c4 	.word	0x080257c4
 8016fe8:	20020740 	.word	0x20020740
 8016fec:	20020744 	.word	0x20020744
 8016ff0:	08025890 	.word	0x08025890
 8016ff4:	20020748 	.word	0x20020748
 8016ff8:	080258ac 	.word	0x080258ac
 8016ffc:	080258d4 	.word	0x080258d4
 8017000:	2002074c 	.word	0x2002074c

08017004 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b088      	sub	sp, #32
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
 801700c:	460b      	mov	r3, r1
 801700e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8017010:	887b      	ldrh	r3, [r7, #2]
 8017012:	3303      	adds	r3, #3
 8017014:	b29b      	uxth	r3, r3
 8017016:	f023 0303 	bic.w	r3, r3, #3
 801701a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801701c:	8bfb      	ldrh	r3, [r7, #30]
 801701e:	2b0b      	cmp	r3, #11
 8017020:	d801      	bhi.n	8017026 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8017022:	230c      	movs	r3, #12
 8017024:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8017026:	8bfb      	ldrh	r3, [r7, #30]
 8017028:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801702c:	d803      	bhi.n	8017036 <mem_trim+0x32>
 801702e:	8bfa      	ldrh	r2, [r7, #30]
 8017030:	887b      	ldrh	r3, [r7, #2]
 8017032:	429a      	cmp	r2, r3
 8017034:	d201      	bcs.n	801703a <mem_trim+0x36>
    return NULL;
 8017036:	2300      	movs	r3, #0
 8017038:	e0d8      	b.n	80171ec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801703a:	4b6e      	ldr	r3, [pc, #440]	; (80171f4 <mem_trim+0x1f0>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	429a      	cmp	r2, r3
 8017042:	d304      	bcc.n	801704e <mem_trim+0x4a>
 8017044:	4b6c      	ldr	r3, [pc, #432]	; (80171f8 <mem_trim+0x1f4>)
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	687a      	ldr	r2, [r7, #4]
 801704a:	429a      	cmp	r2, r3
 801704c:	d306      	bcc.n	801705c <mem_trim+0x58>
 801704e:	4b6b      	ldr	r3, [pc, #428]	; (80171fc <mem_trim+0x1f8>)
 8017050:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017054:	496a      	ldr	r1, [pc, #424]	; (8017200 <mem_trim+0x1fc>)
 8017056:	486b      	ldr	r0, [pc, #428]	; (8017204 <mem_trim+0x200>)
 8017058:	f00b fe6a 	bl	8022d30 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801705c:	4b65      	ldr	r3, [pc, #404]	; (80171f4 <mem_trim+0x1f0>)
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	687a      	ldr	r2, [r7, #4]
 8017062:	429a      	cmp	r2, r3
 8017064:	d304      	bcc.n	8017070 <mem_trim+0x6c>
 8017066:	4b64      	ldr	r3, [pc, #400]	; (80171f8 <mem_trim+0x1f4>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	687a      	ldr	r2, [r7, #4]
 801706c:	429a      	cmp	r2, r3
 801706e:	d307      	bcc.n	8017080 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017070:	f001 fe12 	bl	8018c98 <sys_arch_protect>
 8017074:	60b8      	str	r0, [r7, #8]
 8017076:	68b8      	ldr	r0, [r7, #8]
 8017078:	f001 fe1c 	bl	8018cb4 <sys_arch_unprotect>
    return rmem;
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	e0b5      	b.n	80171ec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	3b08      	subs	r3, #8
 8017084:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8017086:	69b8      	ldr	r0, [r7, #24]
 8017088:	f7ff fdea 	bl	8016c60 <mem_to_ptr>
 801708c:	4603      	mov	r3, r0
 801708e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8017090:	69bb      	ldr	r3, [r7, #24]
 8017092:	881a      	ldrh	r2, [r3, #0]
 8017094:	8afb      	ldrh	r3, [r7, #22]
 8017096:	1ad3      	subs	r3, r2, r3
 8017098:	b29b      	uxth	r3, r3
 801709a:	3b08      	subs	r3, #8
 801709c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801709e:	8bfa      	ldrh	r2, [r7, #30]
 80170a0:	8abb      	ldrh	r3, [r7, #20]
 80170a2:	429a      	cmp	r2, r3
 80170a4:	d906      	bls.n	80170b4 <mem_trim+0xb0>
 80170a6:	4b55      	ldr	r3, [pc, #340]	; (80171fc <mem_trim+0x1f8>)
 80170a8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80170ac:	4956      	ldr	r1, [pc, #344]	; (8017208 <mem_trim+0x204>)
 80170ae:	4855      	ldr	r0, [pc, #340]	; (8017204 <mem_trim+0x200>)
 80170b0:	f00b fe3e 	bl	8022d30 <iprintf>
  if (newsize > size) {
 80170b4:	8bfa      	ldrh	r2, [r7, #30]
 80170b6:	8abb      	ldrh	r3, [r7, #20]
 80170b8:	429a      	cmp	r2, r3
 80170ba:	d901      	bls.n	80170c0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80170bc:	2300      	movs	r3, #0
 80170be:	e095      	b.n	80171ec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80170c0:	8bfa      	ldrh	r2, [r7, #30]
 80170c2:	8abb      	ldrh	r3, [r7, #20]
 80170c4:	429a      	cmp	r2, r3
 80170c6:	d101      	bne.n	80170cc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	e08f      	b.n	80171ec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80170cc:	484f      	ldr	r0, [pc, #316]	; (801720c <mem_trim+0x208>)
 80170ce:	f001 fda7 	bl	8018c20 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80170d2:	69bb      	ldr	r3, [r7, #24]
 80170d4:	881b      	ldrh	r3, [r3, #0]
 80170d6:	4618      	mov	r0, r3
 80170d8:	f7ff fdb0 	bl	8016c3c <ptr_to_mem>
 80170dc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80170de:	693b      	ldr	r3, [r7, #16]
 80170e0:	791b      	ldrb	r3, [r3, #4]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d13f      	bne.n	8017166 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80170e6:	69bb      	ldr	r3, [r7, #24]
 80170e8:	881b      	ldrh	r3, [r3, #0]
 80170ea:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80170ee:	d106      	bne.n	80170fe <mem_trim+0xfa>
 80170f0:	4b42      	ldr	r3, [pc, #264]	; (80171fc <mem_trim+0x1f8>)
 80170f2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80170f6:	4946      	ldr	r1, [pc, #280]	; (8017210 <mem_trim+0x20c>)
 80170f8:	4842      	ldr	r0, [pc, #264]	; (8017204 <mem_trim+0x200>)
 80170fa:	f00b fe19 	bl	8022d30 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80170fe:	693b      	ldr	r3, [r7, #16]
 8017100:	881b      	ldrh	r3, [r3, #0]
 8017102:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017104:	8afa      	ldrh	r2, [r7, #22]
 8017106:	8bfb      	ldrh	r3, [r7, #30]
 8017108:	4413      	add	r3, r2
 801710a:	b29b      	uxth	r3, r3
 801710c:	3308      	adds	r3, #8
 801710e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8017110:	4b40      	ldr	r3, [pc, #256]	; (8017214 <mem_trim+0x210>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	693a      	ldr	r2, [r7, #16]
 8017116:	429a      	cmp	r2, r3
 8017118:	d106      	bne.n	8017128 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801711a:	89fb      	ldrh	r3, [r7, #14]
 801711c:	4618      	mov	r0, r3
 801711e:	f7ff fd8d 	bl	8016c3c <ptr_to_mem>
 8017122:	4603      	mov	r3, r0
 8017124:	4a3b      	ldr	r2, [pc, #236]	; (8017214 <mem_trim+0x210>)
 8017126:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8017128:	89fb      	ldrh	r3, [r7, #14]
 801712a:	4618      	mov	r0, r3
 801712c:	f7ff fd86 	bl	8016c3c <ptr_to_mem>
 8017130:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	2200      	movs	r2, #0
 8017136:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	89ba      	ldrh	r2, [r7, #12]
 801713c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801713e:	693b      	ldr	r3, [r7, #16]
 8017140:	8afa      	ldrh	r2, [r7, #22]
 8017142:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017144:	69bb      	ldr	r3, [r7, #24]
 8017146:	89fa      	ldrh	r2, [r7, #14]
 8017148:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	881b      	ldrh	r3, [r3, #0]
 801714e:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8017152:	d047      	beq.n	80171e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017154:	693b      	ldr	r3, [r7, #16]
 8017156:	881b      	ldrh	r3, [r3, #0]
 8017158:	4618      	mov	r0, r3
 801715a:	f7ff fd6f 	bl	8016c3c <ptr_to_mem>
 801715e:	4602      	mov	r2, r0
 8017160:	89fb      	ldrh	r3, [r7, #14]
 8017162:	8053      	strh	r3, [r2, #2]
 8017164:	e03e      	b.n	80171e4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017166:	8bfb      	ldrh	r3, [r7, #30]
 8017168:	f103 0214 	add.w	r2, r3, #20
 801716c:	8abb      	ldrh	r3, [r7, #20]
 801716e:	429a      	cmp	r2, r3
 8017170:	d838      	bhi.n	80171e4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017172:	8afa      	ldrh	r2, [r7, #22]
 8017174:	8bfb      	ldrh	r3, [r7, #30]
 8017176:	4413      	add	r3, r2
 8017178:	b29b      	uxth	r3, r3
 801717a:	3308      	adds	r3, #8
 801717c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801717e:	69bb      	ldr	r3, [r7, #24]
 8017180:	881b      	ldrh	r3, [r3, #0]
 8017182:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8017186:	d106      	bne.n	8017196 <mem_trim+0x192>
 8017188:	4b1c      	ldr	r3, [pc, #112]	; (80171fc <mem_trim+0x1f8>)
 801718a:	f240 3216 	movw	r2, #790	; 0x316
 801718e:	4920      	ldr	r1, [pc, #128]	; (8017210 <mem_trim+0x20c>)
 8017190:	481c      	ldr	r0, [pc, #112]	; (8017204 <mem_trim+0x200>)
 8017192:	f00b fdcd 	bl	8022d30 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8017196:	89fb      	ldrh	r3, [r7, #14]
 8017198:	4618      	mov	r0, r3
 801719a:	f7ff fd4f 	bl	8016c3c <ptr_to_mem>
 801719e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80171a0:	4b1c      	ldr	r3, [pc, #112]	; (8017214 <mem_trim+0x210>)
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	693a      	ldr	r2, [r7, #16]
 80171a6:	429a      	cmp	r2, r3
 80171a8:	d202      	bcs.n	80171b0 <mem_trim+0x1ac>
      lfree = mem2;
 80171aa:	4a1a      	ldr	r2, [pc, #104]	; (8017214 <mem_trim+0x210>)
 80171ac:	693b      	ldr	r3, [r7, #16]
 80171ae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	2200      	movs	r2, #0
 80171b4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80171b6:	69bb      	ldr	r3, [r7, #24]
 80171b8:	881a      	ldrh	r2, [r3, #0]
 80171ba:	693b      	ldr	r3, [r7, #16]
 80171bc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80171be:	693b      	ldr	r3, [r7, #16]
 80171c0:	8afa      	ldrh	r2, [r7, #22]
 80171c2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80171c4:	69bb      	ldr	r3, [r7, #24]
 80171c6:	89fa      	ldrh	r2, [r7, #14]
 80171c8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80171ca:	693b      	ldr	r3, [r7, #16]
 80171cc:	881b      	ldrh	r3, [r3, #0]
 80171ce:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80171d2:	d007      	beq.n	80171e4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80171d4:	693b      	ldr	r3, [r7, #16]
 80171d6:	881b      	ldrh	r3, [r3, #0]
 80171d8:	4618      	mov	r0, r3
 80171da:	f7ff fd2f 	bl	8016c3c <ptr_to_mem>
 80171de:	4602      	mov	r2, r0
 80171e0:	89fb      	ldrh	r3, [r7, #14]
 80171e2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80171e4:	4809      	ldr	r0, [pc, #36]	; (801720c <mem_trim+0x208>)
 80171e6:	f001 fd2a 	bl	8018c3e <sys_mutex_unlock>
  return rmem;
 80171ea:	687b      	ldr	r3, [r7, #4]
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	3720      	adds	r7, #32
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd80      	pop	{r7, pc}
 80171f4:	20020740 	.word	0x20020740
 80171f8:	20020744 	.word	0x20020744
 80171fc:	08025744 	.word	0x08025744
 8017200:	08025908 	.word	0x08025908
 8017204:	080257c4 	.word	0x080257c4
 8017208:	08025920 	.word	0x08025920
 801720c:	20020748 	.word	0x20020748
 8017210:	08025940 	.word	0x08025940
 8017214:	2002074c 	.word	0x2002074c

08017218 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b088      	sub	sp, #32
 801721c:	af00      	add	r7, sp, #0
 801721e:	4603      	mov	r3, r0
 8017220:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8017222:	88fb      	ldrh	r3, [r7, #6]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d101      	bne.n	801722c <mem_malloc+0x14>
    return NULL;
 8017228:	2300      	movs	r3, #0
 801722a:	e0e2      	b.n	80173f2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801722c:	88fb      	ldrh	r3, [r7, #6]
 801722e:	3303      	adds	r3, #3
 8017230:	b29b      	uxth	r3, r3
 8017232:	f023 0303 	bic.w	r3, r3, #3
 8017236:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8017238:	8bbb      	ldrh	r3, [r7, #28]
 801723a:	2b0b      	cmp	r3, #11
 801723c:	d801      	bhi.n	8017242 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801723e:	230c      	movs	r3, #12
 8017240:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8017242:	8bbb      	ldrh	r3, [r7, #28]
 8017244:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8017248:	d803      	bhi.n	8017252 <mem_malloc+0x3a>
 801724a:	8bba      	ldrh	r2, [r7, #28]
 801724c:	88fb      	ldrh	r3, [r7, #6]
 801724e:	429a      	cmp	r2, r3
 8017250:	d201      	bcs.n	8017256 <mem_malloc+0x3e>
    return NULL;
 8017252:	2300      	movs	r3, #0
 8017254:	e0cd      	b.n	80173f2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017256:	4869      	ldr	r0, [pc, #420]	; (80173fc <mem_malloc+0x1e4>)
 8017258:	f001 fce2 	bl	8018c20 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801725c:	4b68      	ldr	r3, [pc, #416]	; (8017400 <mem_malloc+0x1e8>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	4618      	mov	r0, r3
 8017262:	f7ff fcfd 	bl	8016c60 <mem_to_ptr>
 8017266:	4603      	mov	r3, r0
 8017268:	83fb      	strh	r3, [r7, #30]
 801726a:	e0b7      	b.n	80173dc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801726c:	8bfb      	ldrh	r3, [r7, #30]
 801726e:	4618      	mov	r0, r3
 8017270:	f7ff fce4 	bl	8016c3c <ptr_to_mem>
 8017274:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	791b      	ldrb	r3, [r3, #4]
 801727a:	2b00      	cmp	r3, #0
 801727c:	f040 80a7 	bne.w	80173ce <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017280:	697b      	ldr	r3, [r7, #20]
 8017282:	881b      	ldrh	r3, [r3, #0]
 8017284:	461a      	mov	r2, r3
 8017286:	8bfb      	ldrh	r3, [r7, #30]
 8017288:	1ad3      	subs	r3, r2, r3
 801728a:	f1a3 0208 	sub.w	r2, r3, #8
 801728e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8017290:	429a      	cmp	r2, r3
 8017292:	f0c0 809c 	bcc.w	80173ce <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017296:	697b      	ldr	r3, [r7, #20]
 8017298:	881b      	ldrh	r3, [r3, #0]
 801729a:	461a      	mov	r2, r3
 801729c:	8bfb      	ldrh	r3, [r7, #30]
 801729e:	1ad3      	subs	r3, r2, r3
 80172a0:	f1a3 0208 	sub.w	r2, r3, #8
 80172a4:	8bbb      	ldrh	r3, [r7, #28]
 80172a6:	3314      	adds	r3, #20
 80172a8:	429a      	cmp	r2, r3
 80172aa:	d333      	bcc.n	8017314 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80172ac:	8bfa      	ldrh	r2, [r7, #30]
 80172ae:	8bbb      	ldrh	r3, [r7, #28]
 80172b0:	4413      	add	r3, r2
 80172b2:	b29b      	uxth	r3, r3
 80172b4:	3308      	adds	r3, #8
 80172b6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80172b8:	8a7b      	ldrh	r3, [r7, #18]
 80172ba:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80172be:	d106      	bne.n	80172ce <mem_malloc+0xb6>
 80172c0:	4b50      	ldr	r3, [pc, #320]	; (8017404 <mem_malloc+0x1ec>)
 80172c2:	f240 3287 	movw	r2, #903	; 0x387
 80172c6:	4950      	ldr	r1, [pc, #320]	; (8017408 <mem_malloc+0x1f0>)
 80172c8:	4850      	ldr	r0, [pc, #320]	; (801740c <mem_malloc+0x1f4>)
 80172ca:	f00b fd31 	bl	8022d30 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80172ce:	8a7b      	ldrh	r3, [r7, #18]
 80172d0:	4618      	mov	r0, r3
 80172d2:	f7ff fcb3 	bl	8016c3c <ptr_to_mem>
 80172d6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	2200      	movs	r2, #0
 80172dc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	881a      	ldrh	r2, [r3, #0]
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	8bfa      	ldrh	r2, [r7, #30]
 80172ea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80172ec:	697b      	ldr	r3, [r7, #20]
 80172ee:	8a7a      	ldrh	r2, [r7, #18]
 80172f0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	2201      	movs	r2, #1
 80172f6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	881b      	ldrh	r3, [r3, #0]
 80172fc:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8017300:	d00b      	beq.n	801731a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	881b      	ldrh	r3, [r3, #0]
 8017306:	4618      	mov	r0, r3
 8017308:	f7ff fc98 	bl	8016c3c <ptr_to_mem>
 801730c:	4602      	mov	r2, r0
 801730e:	8a7b      	ldrh	r3, [r7, #18]
 8017310:	8053      	strh	r3, [r2, #2]
 8017312:	e002      	b.n	801731a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017314:	697b      	ldr	r3, [r7, #20]
 8017316:	2201      	movs	r2, #1
 8017318:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801731a:	4b39      	ldr	r3, [pc, #228]	; (8017400 <mem_malloc+0x1e8>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	697a      	ldr	r2, [r7, #20]
 8017320:	429a      	cmp	r2, r3
 8017322:	d127      	bne.n	8017374 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8017324:	4b36      	ldr	r3, [pc, #216]	; (8017400 <mem_malloc+0x1e8>)
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801732a:	e005      	b.n	8017338 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801732c:	69bb      	ldr	r3, [r7, #24]
 801732e:	881b      	ldrh	r3, [r3, #0]
 8017330:	4618      	mov	r0, r3
 8017332:	f7ff fc83 	bl	8016c3c <ptr_to_mem>
 8017336:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8017338:	69bb      	ldr	r3, [r7, #24]
 801733a:	791b      	ldrb	r3, [r3, #4]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d004      	beq.n	801734a <mem_malloc+0x132>
 8017340:	4b33      	ldr	r3, [pc, #204]	; (8017410 <mem_malloc+0x1f8>)
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	69ba      	ldr	r2, [r7, #24]
 8017346:	429a      	cmp	r2, r3
 8017348:	d1f0      	bne.n	801732c <mem_malloc+0x114>
          }
          lfree = cur;
 801734a:	4a2d      	ldr	r2, [pc, #180]	; (8017400 <mem_malloc+0x1e8>)
 801734c:	69bb      	ldr	r3, [r7, #24]
 801734e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017350:	4b2b      	ldr	r3, [pc, #172]	; (8017400 <mem_malloc+0x1e8>)
 8017352:	681a      	ldr	r2, [r3, #0]
 8017354:	4b2e      	ldr	r3, [pc, #184]	; (8017410 <mem_malloc+0x1f8>)
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	429a      	cmp	r2, r3
 801735a:	d00b      	beq.n	8017374 <mem_malloc+0x15c>
 801735c:	4b28      	ldr	r3, [pc, #160]	; (8017400 <mem_malloc+0x1e8>)
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	791b      	ldrb	r3, [r3, #4]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d006      	beq.n	8017374 <mem_malloc+0x15c>
 8017366:	4b27      	ldr	r3, [pc, #156]	; (8017404 <mem_malloc+0x1ec>)
 8017368:	f240 32b5 	movw	r2, #949	; 0x3b5
 801736c:	4929      	ldr	r1, [pc, #164]	; (8017414 <mem_malloc+0x1fc>)
 801736e:	4827      	ldr	r0, [pc, #156]	; (801740c <mem_malloc+0x1f4>)
 8017370:	f00b fcde 	bl	8022d30 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017374:	4821      	ldr	r0, [pc, #132]	; (80173fc <mem_malloc+0x1e4>)
 8017376:	f001 fc62 	bl	8018c3e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801737a:	8bba      	ldrh	r2, [r7, #28]
 801737c:	697b      	ldr	r3, [r7, #20]
 801737e:	4413      	add	r3, r2
 8017380:	3308      	adds	r3, #8
 8017382:	4a23      	ldr	r2, [pc, #140]	; (8017410 <mem_malloc+0x1f8>)
 8017384:	6812      	ldr	r2, [r2, #0]
 8017386:	4293      	cmp	r3, r2
 8017388:	d906      	bls.n	8017398 <mem_malloc+0x180>
 801738a:	4b1e      	ldr	r3, [pc, #120]	; (8017404 <mem_malloc+0x1ec>)
 801738c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8017390:	4921      	ldr	r1, [pc, #132]	; (8017418 <mem_malloc+0x200>)
 8017392:	481e      	ldr	r0, [pc, #120]	; (801740c <mem_malloc+0x1f4>)
 8017394:	f00b fccc 	bl	8022d30 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017398:	697b      	ldr	r3, [r7, #20]
 801739a:	f003 0303 	and.w	r3, r3, #3
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d006      	beq.n	80173b0 <mem_malloc+0x198>
 80173a2:	4b18      	ldr	r3, [pc, #96]	; (8017404 <mem_malloc+0x1ec>)
 80173a4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80173a8:	491c      	ldr	r1, [pc, #112]	; (801741c <mem_malloc+0x204>)
 80173aa:	4818      	ldr	r0, [pc, #96]	; (801740c <mem_malloc+0x1f4>)
 80173ac:	f00b fcc0 	bl	8022d30 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80173b0:	697b      	ldr	r3, [r7, #20]
 80173b2:	f003 0303 	and.w	r3, r3, #3
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d006      	beq.n	80173c8 <mem_malloc+0x1b0>
 80173ba:	4b12      	ldr	r3, [pc, #72]	; (8017404 <mem_malloc+0x1ec>)
 80173bc:	f240 32bd 	movw	r2, #957	; 0x3bd
 80173c0:	4917      	ldr	r1, [pc, #92]	; (8017420 <mem_malloc+0x208>)
 80173c2:	4812      	ldr	r0, [pc, #72]	; (801740c <mem_malloc+0x1f4>)
 80173c4:	f00b fcb4 	bl	8022d30 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	3308      	adds	r3, #8
 80173cc:	e011      	b.n	80173f2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80173ce:	8bfb      	ldrh	r3, [r7, #30]
 80173d0:	4618      	mov	r0, r3
 80173d2:	f7ff fc33 	bl	8016c3c <ptr_to_mem>
 80173d6:	4603      	mov	r3, r0
 80173d8:	881b      	ldrh	r3, [r3, #0]
 80173da:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80173dc:	8bfa      	ldrh	r2, [r7, #30]
 80173de:	8bbb      	ldrh	r3, [r7, #28]
 80173e0:	f5c3 43f0 	rsb	r3, r3, #30720	; 0x7800
 80173e4:	429a      	cmp	r2, r3
 80173e6:	f4ff af41 	bcc.w	801726c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80173ea:	4804      	ldr	r0, [pc, #16]	; (80173fc <mem_malloc+0x1e4>)
 80173ec:	f001 fc27 	bl	8018c3e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80173f0:	2300      	movs	r3, #0
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	3720      	adds	r7, #32
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
 80173fa:	bf00      	nop
 80173fc:	20020748 	.word	0x20020748
 8017400:	2002074c 	.word	0x2002074c
 8017404:	08025744 	.word	0x08025744
 8017408:	08025940 	.word	0x08025940
 801740c:	080257c4 	.word	0x080257c4
 8017410:	20020744 	.word	0x20020744
 8017414:	08025954 	.word	0x08025954
 8017418:	08025970 	.word	0x08025970
 801741c:	080259a0 	.word	0x080259a0
 8017420:	080259d0 	.word	0x080259d0

08017424 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8017424:	b480      	push	{r7}
 8017426:	b085      	sub	sp, #20
 8017428:	af00      	add	r7, sp, #0
 801742a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	689b      	ldr	r3, [r3, #8]
 8017430:	2200      	movs	r2, #0
 8017432:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	685b      	ldr	r3, [r3, #4]
 8017438:	3303      	adds	r3, #3
 801743a:	f023 0303 	bic.w	r3, r3, #3
 801743e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8017440:	2300      	movs	r3, #0
 8017442:	60fb      	str	r3, [r7, #12]
 8017444:	e011      	b.n	801746a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	689b      	ldr	r3, [r3, #8]
 801744a:	681a      	ldr	r2, [r3, #0]
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	689b      	ldr	r3, [r3, #8]
 8017454:	68ba      	ldr	r2, [r7, #8]
 8017456:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	881b      	ldrh	r3, [r3, #0]
 801745c:	461a      	mov	r2, r3
 801745e:	68bb      	ldr	r3, [r7, #8]
 8017460:	4413      	add	r3, r2
 8017462:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	3301      	adds	r3, #1
 8017468:	60fb      	str	r3, [r7, #12]
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	885b      	ldrh	r3, [r3, #2]
 801746e:	461a      	mov	r2, r3
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	4293      	cmp	r3, r2
 8017474:	dbe7      	blt.n	8017446 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8017476:	bf00      	nop
 8017478:	bf00      	nop
 801747a:	3714      	adds	r7, #20
 801747c:	46bd      	mov	sp, r7
 801747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017482:	4770      	bx	lr

08017484 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801748a:	2300      	movs	r3, #0
 801748c:	80fb      	strh	r3, [r7, #6]
 801748e:	e009      	b.n	80174a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8017490:	88fb      	ldrh	r3, [r7, #6]
 8017492:	4a08      	ldr	r2, [pc, #32]	; (80174b4 <memp_init+0x30>)
 8017494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017498:	4618      	mov	r0, r3
 801749a:	f7ff ffc3 	bl	8017424 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801749e:	88fb      	ldrh	r3, [r7, #6]
 80174a0:	3301      	adds	r3, #1
 80174a2:	80fb      	strh	r3, [r7, #6]
 80174a4:	88fb      	ldrh	r3, [r7, #6]
 80174a6:	2b0c      	cmp	r3, #12
 80174a8:	d9f2      	bls.n	8017490 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80174aa:	bf00      	nop
 80174ac:	bf00      	nop
 80174ae:	3708      	adds	r7, #8
 80174b0:	46bd      	mov	sp, r7
 80174b2:	bd80      	pop	{r7, pc}
 80174b4:	08028568 	.word	0x08028568

080174b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b084      	sub	sp, #16
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80174c0:	f001 fbea 	bl	8018c98 <sys_arch_protect>
 80174c4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	689b      	ldr	r3, [r3, #8]
 80174ca:	681b      	ldr	r3, [r3, #0]
 80174cc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80174ce:	68bb      	ldr	r3, [r7, #8]
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d015      	beq.n	8017500 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	689b      	ldr	r3, [r3, #8]
 80174d8:	68ba      	ldr	r2, [r7, #8]
 80174da:	6812      	ldr	r2, [r2, #0]
 80174dc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	f003 0303 	and.w	r3, r3, #3
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d006      	beq.n	80174f6 <do_memp_malloc_pool+0x3e>
 80174e8:	4b09      	ldr	r3, [pc, #36]	; (8017510 <do_memp_malloc_pool+0x58>)
 80174ea:	f44f 728c 	mov.w	r2, #280	; 0x118
 80174ee:	4909      	ldr	r1, [pc, #36]	; (8017514 <do_memp_malloc_pool+0x5c>)
 80174f0:	4809      	ldr	r0, [pc, #36]	; (8017518 <do_memp_malloc_pool+0x60>)
 80174f2:	f00b fc1d 	bl	8022d30 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80174f6:	68f8      	ldr	r0, [r7, #12]
 80174f8:	f001 fbdc 	bl	8018cb4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80174fc:	68bb      	ldr	r3, [r7, #8]
 80174fe:	e003      	b.n	8017508 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017500:	68f8      	ldr	r0, [r7, #12]
 8017502:	f001 fbd7 	bl	8018cb4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8017506:	2300      	movs	r3, #0
}
 8017508:	4618      	mov	r0, r3
 801750a:	3710      	adds	r7, #16
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}
 8017510:	080259f4 	.word	0x080259f4
 8017514:	08025a60 	.word	0x08025a60
 8017518:	08025a84 	.word	0x08025a84

0801751c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b082      	sub	sp, #8
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d106      	bne.n	8017538 <memp_malloc_pool+0x1c>
 801752a:	4b0a      	ldr	r3, [pc, #40]	; (8017554 <memp_malloc_pool+0x38>)
 801752c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8017530:	4909      	ldr	r1, [pc, #36]	; (8017558 <memp_malloc_pool+0x3c>)
 8017532:	480a      	ldr	r0, [pc, #40]	; (801755c <memp_malloc_pool+0x40>)
 8017534:	f00b fbfc 	bl	8022d30 <iprintf>
  if (desc == NULL) {
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d101      	bne.n	8017542 <memp_malloc_pool+0x26>
    return NULL;
 801753e:	2300      	movs	r3, #0
 8017540:	e003      	b.n	801754a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8017542:	6878      	ldr	r0, [r7, #4]
 8017544:	f7ff ffb8 	bl	80174b8 <do_memp_malloc_pool>
 8017548:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801754a:	4618      	mov	r0, r3
 801754c:	3708      	adds	r7, #8
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}
 8017552:	bf00      	nop
 8017554:	080259f4 	.word	0x080259f4
 8017558:	08025aac 	.word	0x08025aac
 801755c:	08025a84 	.word	0x08025a84

08017560 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b084      	sub	sp, #16
 8017564:	af00      	add	r7, sp, #0
 8017566:	4603      	mov	r3, r0
 8017568:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801756a:	79fb      	ldrb	r3, [r7, #7]
 801756c:	2b0c      	cmp	r3, #12
 801756e:	d908      	bls.n	8017582 <memp_malloc+0x22>
 8017570:	4b0a      	ldr	r3, [pc, #40]	; (801759c <memp_malloc+0x3c>)
 8017572:	f240 1257 	movw	r2, #343	; 0x157
 8017576:	490a      	ldr	r1, [pc, #40]	; (80175a0 <memp_malloc+0x40>)
 8017578:	480a      	ldr	r0, [pc, #40]	; (80175a4 <memp_malloc+0x44>)
 801757a:	f00b fbd9 	bl	8022d30 <iprintf>
 801757e:	2300      	movs	r3, #0
 8017580:	e008      	b.n	8017594 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8017582:	79fb      	ldrb	r3, [r7, #7]
 8017584:	4a08      	ldr	r2, [pc, #32]	; (80175a8 <memp_malloc+0x48>)
 8017586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801758a:	4618      	mov	r0, r3
 801758c:	f7ff ff94 	bl	80174b8 <do_memp_malloc_pool>
 8017590:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8017592:	68fb      	ldr	r3, [r7, #12]
}
 8017594:	4618      	mov	r0, r3
 8017596:	3710      	adds	r7, #16
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}
 801759c:	080259f4 	.word	0x080259f4
 80175a0:	08025ac0 	.word	0x08025ac0
 80175a4:	08025a84 	.word	0x08025a84
 80175a8:	08028568 	.word	0x08028568

080175ac <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b084      	sub	sp, #16
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80175b6:	683b      	ldr	r3, [r7, #0]
 80175b8:	f003 0303 	and.w	r3, r3, #3
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d006      	beq.n	80175ce <do_memp_free_pool+0x22>
 80175c0:	4b0d      	ldr	r3, [pc, #52]	; (80175f8 <do_memp_free_pool+0x4c>)
 80175c2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80175c6:	490d      	ldr	r1, [pc, #52]	; (80175fc <do_memp_free_pool+0x50>)
 80175c8:	480d      	ldr	r0, [pc, #52]	; (8017600 <do_memp_free_pool+0x54>)
 80175ca:	f00b fbb1 	bl	8022d30 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80175d2:	f001 fb61 	bl	8018c98 <sys_arch_protect>
 80175d6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	689b      	ldr	r3, [r3, #8]
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	689b      	ldr	r3, [r3, #8]
 80175e6:	68fa      	ldr	r2, [r7, #12]
 80175e8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80175ea:	68b8      	ldr	r0, [r7, #8]
 80175ec:	f001 fb62 	bl	8018cb4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80175f0:	bf00      	nop
 80175f2:	3710      	adds	r7, #16
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}
 80175f8:	080259f4 	.word	0x080259f4
 80175fc:	08025ae0 	.word	0x08025ae0
 8017600:	08025a84 	.word	0x08025a84

08017604 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8017604:	b580      	push	{r7, lr}
 8017606:	b082      	sub	sp, #8
 8017608:	af00      	add	r7, sp, #0
 801760a:	6078      	str	r0, [r7, #4]
 801760c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d106      	bne.n	8017622 <memp_free_pool+0x1e>
 8017614:	4b0a      	ldr	r3, [pc, #40]	; (8017640 <memp_free_pool+0x3c>)
 8017616:	f240 1295 	movw	r2, #405	; 0x195
 801761a:	490a      	ldr	r1, [pc, #40]	; (8017644 <memp_free_pool+0x40>)
 801761c:	480a      	ldr	r0, [pc, #40]	; (8017648 <memp_free_pool+0x44>)
 801761e:	f00b fb87 	bl	8022d30 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d007      	beq.n	8017638 <memp_free_pool+0x34>
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	2b00      	cmp	r3, #0
 801762c:	d004      	beq.n	8017638 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801762e:	6839      	ldr	r1, [r7, #0]
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f7ff ffbb 	bl	80175ac <do_memp_free_pool>
 8017636:	e000      	b.n	801763a <memp_free_pool+0x36>
    return;
 8017638:	bf00      	nop
}
 801763a:	3708      	adds	r7, #8
 801763c:	46bd      	mov	sp, r7
 801763e:	bd80      	pop	{r7, pc}
 8017640:	080259f4 	.word	0x080259f4
 8017644:	08025aac 	.word	0x08025aac
 8017648:	08025a84 	.word	0x08025a84

0801764c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b082      	sub	sp, #8
 8017650:	af00      	add	r7, sp, #0
 8017652:	4603      	mov	r3, r0
 8017654:	6039      	str	r1, [r7, #0]
 8017656:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017658:	79fb      	ldrb	r3, [r7, #7]
 801765a:	2b0c      	cmp	r3, #12
 801765c:	d907      	bls.n	801766e <memp_free+0x22>
 801765e:	4b0c      	ldr	r3, [pc, #48]	; (8017690 <memp_free+0x44>)
 8017660:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8017664:	490b      	ldr	r1, [pc, #44]	; (8017694 <memp_free+0x48>)
 8017666:	480c      	ldr	r0, [pc, #48]	; (8017698 <memp_free+0x4c>)
 8017668:	f00b fb62 	bl	8022d30 <iprintf>
 801766c:	e00c      	b.n	8017688 <memp_free+0x3c>

  if (mem == NULL) {
 801766e:	683b      	ldr	r3, [r7, #0]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d008      	beq.n	8017686 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8017674:	79fb      	ldrb	r3, [r7, #7]
 8017676:	4a09      	ldr	r2, [pc, #36]	; (801769c <memp_free+0x50>)
 8017678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801767c:	6839      	ldr	r1, [r7, #0]
 801767e:	4618      	mov	r0, r3
 8017680:	f7ff ff94 	bl	80175ac <do_memp_free_pool>
 8017684:	e000      	b.n	8017688 <memp_free+0x3c>
    return;
 8017686:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8017688:	3708      	adds	r7, #8
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}
 801768e:	bf00      	nop
 8017690:	080259f4 	.word	0x080259f4
 8017694:	08025b00 	.word	0x08025b00
 8017698:	08025a84 	.word	0x08025a84
 801769c:	08028568 	.word	0x08028568

080176a0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d013      	beq.n	80176d6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d00b      	beq.n	80176ce <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	4618      	mov	r0, r3
 80176bc:	f000 feba 	bl	8018434 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2200      	movs	r2, #0
 80176c4:	605a      	str	r2, [r3, #4]
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	685a      	ldr	r2, [r3, #4]
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80176ce:	6879      	ldr	r1, [r7, #4]
 80176d0:	2006      	movs	r0, #6
 80176d2:	f7ff ffbb 	bl	801764c <memp_free>
  }
}
 80176d6:	bf00      	nop
 80176d8:	3708      	adds	r7, #8
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}
	...

080176e0 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d108      	bne.n	8017700 <netbuf_next+0x20>
 80176ee:	4b11      	ldr	r3, [pc, #68]	; (8017734 <netbuf_next+0x54>)
 80176f0:	22e0      	movs	r2, #224	; 0xe0
 80176f2:	4911      	ldr	r1, [pc, #68]	; (8017738 <netbuf_next+0x58>)
 80176f4:	4811      	ldr	r0, [pc, #68]	; (801773c <netbuf_next+0x5c>)
 80176f6:	f00b fb1b 	bl	8022d30 <iprintf>
 80176fa:	f04f 33ff 	mov.w	r3, #4294967295
 80176fe:	e014      	b.n	801772a <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	685b      	ldr	r3, [r3, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d102      	bne.n	8017710 <netbuf_next+0x30>
    return -1;
 801770a:	f04f 33ff 	mov.w	r3, #4294967295
 801770e:	e00c      	b.n	801772a <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	685b      	ldr	r3, [r3, #4]
 8017714:	681a      	ldr	r2, [r3, #0]
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	685b      	ldr	r3, [r3, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d101      	bne.n	8017728 <netbuf_next+0x48>
    return 1;
 8017724:	2301      	movs	r3, #1
 8017726:	e000      	b.n	801772a <netbuf_next+0x4a>
  }
  return 0;
 8017728:	2300      	movs	r3, #0
}
 801772a:	4618      	mov	r0, r3
 801772c:	3708      	adds	r7, #8
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}
 8017732:	bf00      	nop
 8017734:	08025b1c 	.word	0x08025b1c
 8017738:	08025cb4 	.word	0x08025cb4
 801773c:	08025ba4 	.word	0x08025ba4

08017740 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8017740:	b480      	push	{r7}
 8017742:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8017744:	bf00      	nop
 8017746:	46bd      	mov	sp, r7
 8017748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801774c:	4770      	bx	lr
	...

08017750 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8017750:	b580      	push	{r7, lr}
 8017752:	b086      	sub	sp, #24
 8017754:	af00      	add	r7, sp, #0
 8017756:	60f8      	str	r0, [r7, #12]
 8017758:	60b9      	str	r1, [r7, #8]
 801775a:	607a      	str	r2, [r7, #4]
 801775c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	2b00      	cmp	r3, #0
 8017762:	d108      	bne.n	8017776 <netif_add+0x26>
 8017764:	4b57      	ldr	r3, [pc, #348]	; (80178c4 <netif_add+0x174>)
 8017766:	f240 1227 	movw	r2, #295	; 0x127
 801776a:	4957      	ldr	r1, [pc, #348]	; (80178c8 <netif_add+0x178>)
 801776c:	4857      	ldr	r0, [pc, #348]	; (80178cc <netif_add+0x17c>)
 801776e:	f00b fadf 	bl	8022d30 <iprintf>
 8017772:	2300      	movs	r3, #0
 8017774:	e0a2      	b.n	80178bc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8017776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017778:	2b00      	cmp	r3, #0
 801777a:	d108      	bne.n	801778e <netif_add+0x3e>
 801777c:	4b51      	ldr	r3, [pc, #324]	; (80178c4 <netif_add+0x174>)
 801777e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8017782:	4953      	ldr	r1, [pc, #332]	; (80178d0 <netif_add+0x180>)
 8017784:	4851      	ldr	r0, [pc, #324]	; (80178cc <netif_add+0x17c>)
 8017786:	f00b fad3 	bl	8022d30 <iprintf>
 801778a:	2300      	movs	r3, #0
 801778c:	e096      	b.n	80178bc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801778e:	68bb      	ldr	r3, [r7, #8]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d101      	bne.n	8017798 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8017794:	4b4f      	ldr	r3, [pc, #316]	; (80178d4 <netif_add+0x184>)
 8017796:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d101      	bne.n	80177a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801779e:	4b4d      	ldr	r3, [pc, #308]	; (80178d4 <netif_add+0x184>)
 80177a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80177a2:	683b      	ldr	r3, [r7, #0]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d101      	bne.n	80177ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80177a8:	4b4a      	ldr	r3, [pc, #296]	; (80178d4 <netif_add+0x184>)
 80177aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	2200      	movs	r2, #0
 80177b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	2200      	movs	r2, #0
 80177b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	2200      	movs	r2, #0
 80177bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	4a45      	ldr	r2, [pc, #276]	; (80178d8 <netif_add+0x188>)
 80177c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80177c4:	68fb      	ldr	r3, [r7, #12]
 80177c6:	2200      	movs	r2, #0
 80177c8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	2200      	movs	r2, #0
 80177ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	2200      	movs	r2, #0
 80177d6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	6a3a      	ldr	r2, [r7, #32]
 80177dc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80177de:	4b3f      	ldr	r3, [pc, #252]	; (80178dc <netif_add+0x18c>)
 80177e0:	781a      	ldrb	r2, [r3, #0]
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177ec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80177ee:	683b      	ldr	r3, [r7, #0]
 80177f0:	687a      	ldr	r2, [r7, #4]
 80177f2:	68b9      	ldr	r1, [r7, #8]
 80177f4:	68f8      	ldr	r0, [r7, #12]
 80177f6:	f000 f913 	bl	8017a20 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80177fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fc:	68f8      	ldr	r0, [r7, #12]
 80177fe:	4798      	blx	r3
 8017800:	4603      	mov	r3, r0
 8017802:	2b00      	cmp	r3, #0
 8017804:	d001      	beq.n	801780a <netif_add+0xba>
    return NULL;
 8017806:	2300      	movs	r3, #0
 8017808:	e058      	b.n	80178bc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017810:	2bff      	cmp	r3, #255	; 0xff
 8017812:	d103      	bne.n	801781c <netif_add+0xcc>
        netif->num = 0;
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	2200      	movs	r2, #0
 8017818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801781c:	2300      	movs	r3, #0
 801781e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017820:	4b2f      	ldr	r3, [pc, #188]	; (80178e0 <netif_add+0x190>)
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	617b      	str	r3, [r7, #20]
 8017826:	e02b      	b.n	8017880 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8017828:	697a      	ldr	r2, [r7, #20]
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	429a      	cmp	r2, r3
 801782e:	d106      	bne.n	801783e <netif_add+0xee>
 8017830:	4b24      	ldr	r3, [pc, #144]	; (80178c4 <netif_add+0x174>)
 8017832:	f240 128b 	movw	r2, #395	; 0x18b
 8017836:	492b      	ldr	r1, [pc, #172]	; (80178e4 <netif_add+0x194>)
 8017838:	4824      	ldr	r0, [pc, #144]	; (80178cc <netif_add+0x17c>)
 801783a:	f00b fa79 	bl	8022d30 <iprintf>
        num_netifs++;
 801783e:	693b      	ldr	r3, [r7, #16]
 8017840:	3301      	adds	r3, #1
 8017842:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8017844:	693b      	ldr	r3, [r7, #16]
 8017846:	2bff      	cmp	r3, #255	; 0xff
 8017848:	dd06      	ble.n	8017858 <netif_add+0x108>
 801784a:	4b1e      	ldr	r3, [pc, #120]	; (80178c4 <netif_add+0x174>)
 801784c:	f240 128d 	movw	r2, #397	; 0x18d
 8017850:	4925      	ldr	r1, [pc, #148]	; (80178e8 <netif_add+0x198>)
 8017852:	481e      	ldr	r0, [pc, #120]	; (80178cc <netif_add+0x17c>)
 8017854:	f00b fa6c 	bl	8022d30 <iprintf>
        if (netif2->num == netif->num) {
 8017858:	697b      	ldr	r3, [r7, #20]
 801785a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017864:	429a      	cmp	r2, r3
 8017866:	d108      	bne.n	801787a <netif_add+0x12a>
          netif->num++;
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801786e:	3301      	adds	r3, #1
 8017870:	b2da      	uxtb	r2, r3
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8017878:	e005      	b.n	8017886 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	617b      	str	r3, [r7, #20]
 8017880:	697b      	ldr	r3, [r7, #20]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d1d0      	bne.n	8017828 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d1be      	bne.n	801780a <netif_add+0xba>
  }
  if (netif->num == 254) {
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017892:	2bfe      	cmp	r3, #254	; 0xfe
 8017894:	d103      	bne.n	801789e <netif_add+0x14e>
    netif_num = 0;
 8017896:	4b11      	ldr	r3, [pc, #68]	; (80178dc <netif_add+0x18c>)
 8017898:	2200      	movs	r2, #0
 801789a:	701a      	strb	r2, [r3, #0]
 801789c:	e006      	b.n	80178ac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80178a4:	3301      	adds	r3, #1
 80178a6:	b2da      	uxtb	r2, r3
 80178a8:	4b0c      	ldr	r3, [pc, #48]	; (80178dc <netif_add+0x18c>)
 80178aa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80178ac:	4b0c      	ldr	r3, [pc, #48]	; (80178e0 <netif_add+0x190>)
 80178ae:	681a      	ldr	r2, [r3, #0]
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80178b4:	4a0a      	ldr	r2, [pc, #40]	; (80178e0 <netif_add+0x190>)
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80178ba:	68fb      	ldr	r3, [r7, #12]
}
 80178bc:	4618      	mov	r0, r3
 80178be:	3718      	adds	r7, #24
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}
 80178c4:	08025cec 	.word	0x08025cec
 80178c8:	08025db8 	.word	0x08025db8
 80178cc:	08025d74 	.word	0x08025d74
 80178d0:	08025dd4 	.word	0x08025dd4
 80178d4:	080284c8 	.word	0x080284c8
 80178d8:	08017cfb 	.word	0x08017cfb
 80178dc:	200238d4 	.word	0x200238d4
 80178e0:	200238cc 	.word	0x200238cc
 80178e4:	08025df8 	.word	0x08025df8
 80178e8:	08025e0c 	.word	0x08025e0c

080178ec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b082      	sub	sp, #8
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	6078      	str	r0, [r7, #4]
 80178f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80178f6:	6839      	ldr	r1, [r7, #0]
 80178f8:	6878      	ldr	r0, [r7, #4]
 80178fa:	f003 f883 	bl	801aa04 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80178fe:	6839      	ldr	r1, [r7, #0]
 8017900:	6878      	ldr	r0, [r7, #4]
 8017902:	f008 fa65 	bl	801fdd0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8017906:	bf00      	nop
 8017908:	3708      	adds	r7, #8
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}
	...

08017910 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b086      	sub	sp, #24
 8017914:	af00      	add	r7, sp, #0
 8017916:	60f8      	str	r0, [r7, #12]
 8017918:	60b9      	str	r1, [r7, #8]
 801791a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801791c:	68bb      	ldr	r3, [r7, #8]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d106      	bne.n	8017930 <netif_do_set_ipaddr+0x20>
 8017922:	4b1d      	ldr	r3, [pc, #116]	; (8017998 <netif_do_set_ipaddr+0x88>)
 8017924:	f240 12cb 	movw	r2, #459	; 0x1cb
 8017928:	491c      	ldr	r1, [pc, #112]	; (801799c <netif_do_set_ipaddr+0x8c>)
 801792a:	481d      	ldr	r0, [pc, #116]	; (80179a0 <netif_do_set_ipaddr+0x90>)
 801792c:	f00b fa00 	bl	8022d30 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d106      	bne.n	8017944 <netif_do_set_ipaddr+0x34>
 8017936:	4b18      	ldr	r3, [pc, #96]	; (8017998 <netif_do_set_ipaddr+0x88>)
 8017938:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801793c:	4917      	ldr	r1, [pc, #92]	; (801799c <netif_do_set_ipaddr+0x8c>)
 801793e:	4818      	ldr	r0, [pc, #96]	; (80179a0 <netif_do_set_ipaddr+0x90>)
 8017940:	f00b f9f6 	bl	8022d30 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8017944:	68bb      	ldr	r3, [r7, #8]
 8017946:	681a      	ldr	r2, [r3, #0]
 8017948:	68fb      	ldr	r3, [r7, #12]
 801794a:	3304      	adds	r3, #4
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	429a      	cmp	r2, r3
 8017950:	d01c      	beq.n	801798c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8017952:	68bb      	ldr	r3, [r7, #8]
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	3304      	adds	r3, #4
 801795c:	681a      	ldr	r2, [r3, #0]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8017962:	f107 0314 	add.w	r3, r7, #20
 8017966:	4619      	mov	r1, r3
 8017968:	6878      	ldr	r0, [r7, #4]
 801796a:	f7ff ffbf 	bl	80178ec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801796e:	68bb      	ldr	r3, [r7, #8]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d002      	beq.n	801797a <netif_do_set_ipaddr+0x6a>
 8017974:	68bb      	ldr	r3, [r7, #8]
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	e000      	b.n	801797c <netif_do_set_ipaddr+0x6c>
 801797a:	2300      	movs	r3, #0
 801797c:	68fa      	ldr	r2, [r7, #12]
 801797e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017980:	2101      	movs	r1, #1
 8017982:	68f8      	ldr	r0, [r7, #12]
 8017984:	f000 f8d2 	bl	8017b2c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8017988:	2301      	movs	r3, #1
 801798a:	e000      	b.n	801798e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801798c:	2300      	movs	r3, #0
}
 801798e:	4618      	mov	r0, r3
 8017990:	3718      	adds	r7, #24
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}
 8017996:	bf00      	nop
 8017998:	08025cec 	.word	0x08025cec
 801799c:	08025e3c 	.word	0x08025e3c
 80179a0:	08025d74 	.word	0x08025d74

080179a4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80179a4:	b480      	push	{r7}
 80179a6:	b085      	sub	sp, #20
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	60f8      	str	r0, [r7, #12]
 80179ac:	60b9      	str	r1, [r7, #8]
 80179ae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80179b0:	68bb      	ldr	r3, [r7, #8]
 80179b2:	681a      	ldr	r2, [r3, #0]
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	3308      	adds	r3, #8
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	d00a      	beq.n	80179d4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80179be:	68bb      	ldr	r3, [r7, #8]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d002      	beq.n	80179ca <netif_do_set_netmask+0x26>
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	e000      	b.n	80179cc <netif_do_set_netmask+0x28>
 80179ca:	2300      	movs	r3, #0
 80179cc:	68fa      	ldr	r2, [r7, #12]
 80179ce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80179d0:	2301      	movs	r3, #1
 80179d2:	e000      	b.n	80179d6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80179d4:	2300      	movs	r3, #0
}
 80179d6:	4618      	mov	r0, r3
 80179d8:	3714      	adds	r7, #20
 80179da:	46bd      	mov	sp, r7
 80179dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e0:	4770      	bx	lr

080179e2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80179e2:	b480      	push	{r7}
 80179e4:	b085      	sub	sp, #20
 80179e6:	af00      	add	r7, sp, #0
 80179e8:	60f8      	str	r0, [r7, #12]
 80179ea:	60b9      	str	r1, [r7, #8]
 80179ec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80179ee:	68bb      	ldr	r3, [r7, #8]
 80179f0:	681a      	ldr	r2, [r3, #0]
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	330c      	adds	r3, #12
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	429a      	cmp	r2, r3
 80179fa:	d00a      	beq.n	8017a12 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80179fc:	68bb      	ldr	r3, [r7, #8]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d002      	beq.n	8017a08 <netif_do_set_gw+0x26>
 8017a02:	68bb      	ldr	r3, [r7, #8]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	e000      	b.n	8017a0a <netif_do_set_gw+0x28>
 8017a08:	2300      	movs	r3, #0
 8017a0a:	68fa      	ldr	r2, [r7, #12]
 8017a0c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8017a0e:	2301      	movs	r3, #1
 8017a10:	e000      	b.n	8017a14 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8017a12:	2300      	movs	r3, #0
}
 8017a14:	4618      	mov	r0, r3
 8017a16:	3714      	adds	r7, #20
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1e:	4770      	bx	lr

08017a20 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b088      	sub	sp, #32
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	60f8      	str	r0, [r7, #12]
 8017a28:	60b9      	str	r1, [r7, #8]
 8017a2a:	607a      	str	r2, [r7, #4]
 8017a2c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8017a32:	2300      	movs	r3, #0
 8017a34:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017a36:	68bb      	ldr	r3, [r7, #8]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d101      	bne.n	8017a40 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8017a3c:	4b1c      	ldr	r3, [pc, #112]	; (8017ab0 <netif_set_addr+0x90>)
 8017a3e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	2b00      	cmp	r3, #0
 8017a44:	d101      	bne.n	8017a4a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8017a46:	4b1a      	ldr	r3, [pc, #104]	; (8017ab0 <netif_set_addr+0x90>)
 8017a48:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d101      	bne.n	8017a54 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8017a50:	4b17      	ldr	r3, [pc, #92]	; (8017ab0 <netif_set_addr+0x90>)
 8017a52:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8017a54:	68bb      	ldr	r3, [r7, #8]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d003      	beq.n	8017a62 <netif_set_addr+0x42>
 8017a5a:	68bb      	ldr	r3, [r7, #8]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d101      	bne.n	8017a66 <netif_set_addr+0x46>
 8017a62:	2301      	movs	r3, #1
 8017a64:	e000      	b.n	8017a68 <netif_set_addr+0x48>
 8017a66:	2300      	movs	r3, #0
 8017a68:	617b      	str	r3, [r7, #20]
  if (remove) {
 8017a6a:	697b      	ldr	r3, [r7, #20]
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d006      	beq.n	8017a7e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017a70:	f107 0310 	add.w	r3, r7, #16
 8017a74:	461a      	mov	r2, r3
 8017a76:	68b9      	ldr	r1, [r7, #8]
 8017a78:	68f8      	ldr	r0, [r7, #12]
 8017a7a:	f7ff ff49 	bl	8017910 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8017a7e:	69fa      	ldr	r2, [r7, #28]
 8017a80:	6879      	ldr	r1, [r7, #4]
 8017a82:	68f8      	ldr	r0, [r7, #12]
 8017a84:	f7ff ff8e 	bl	80179a4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017a88:	69ba      	ldr	r2, [r7, #24]
 8017a8a:	6839      	ldr	r1, [r7, #0]
 8017a8c:	68f8      	ldr	r0, [r7, #12]
 8017a8e:	f7ff ffa8 	bl	80179e2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8017a92:	697b      	ldr	r3, [r7, #20]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d106      	bne.n	8017aa6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017a98:	f107 0310 	add.w	r3, r7, #16
 8017a9c:	461a      	mov	r2, r3
 8017a9e:	68b9      	ldr	r1, [r7, #8]
 8017aa0:	68f8      	ldr	r0, [r7, #12]
 8017aa2:	f7ff ff35 	bl	8017910 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8017aa6:	bf00      	nop
 8017aa8:	3720      	adds	r7, #32
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	bd80      	pop	{r7, pc}
 8017aae:	bf00      	nop
 8017ab0:	080284c8 	.word	0x080284c8

08017ab4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8017ab4:	b480      	push	{r7}
 8017ab6:	b083      	sub	sp, #12
 8017ab8:	af00      	add	r7, sp, #0
 8017aba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8017abc:	4a04      	ldr	r2, [pc, #16]	; (8017ad0 <netif_set_default+0x1c>)
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8017ac2:	bf00      	nop
 8017ac4:	370c      	adds	r7, #12
 8017ac6:	46bd      	mov	sp, r7
 8017ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017acc:	4770      	bx	lr
 8017ace:	bf00      	nop
 8017ad0:	200238d0 	.word	0x200238d0

08017ad4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8017ad4:	b580      	push	{r7, lr}
 8017ad6:	b082      	sub	sp, #8
 8017ad8:	af00      	add	r7, sp, #0
 8017ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d107      	bne.n	8017af2 <netif_set_up+0x1e>
 8017ae2:	4b0f      	ldr	r3, [pc, #60]	; (8017b20 <netif_set_up+0x4c>)
 8017ae4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8017ae8:	490e      	ldr	r1, [pc, #56]	; (8017b24 <netif_set_up+0x50>)
 8017aea:	480f      	ldr	r0, [pc, #60]	; (8017b28 <netif_set_up+0x54>)
 8017aec:	f00b f920 	bl	8022d30 <iprintf>
 8017af0:	e013      	b.n	8017b1a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017af8:	f003 0301 	and.w	r3, r3, #1
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d10c      	bne.n	8017b1a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b06:	f043 0301 	orr.w	r3, r3, #1
 8017b0a:	b2da      	uxtb	r2, r3
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017b12:	2103      	movs	r1, #3
 8017b14:	6878      	ldr	r0, [r7, #4]
 8017b16:	f000 f809 	bl	8017b2c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8017b1a:	3708      	adds	r7, #8
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	08025cec 	.word	0x08025cec
 8017b24:	08025eac 	.word	0x08025eac
 8017b28:	08025d74 	.word	0x08025d74

08017b2c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8017b2c:	b580      	push	{r7, lr}
 8017b2e:	b082      	sub	sp, #8
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	6078      	str	r0, [r7, #4]
 8017b34:	460b      	mov	r3, r1
 8017b36:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d106      	bne.n	8017b4c <netif_issue_reports+0x20>
 8017b3e:	4b18      	ldr	r3, [pc, #96]	; (8017ba0 <netif_issue_reports+0x74>)
 8017b40:	f240 326d 	movw	r2, #877	; 0x36d
 8017b44:	4917      	ldr	r1, [pc, #92]	; (8017ba4 <netif_issue_reports+0x78>)
 8017b46:	4818      	ldr	r0, [pc, #96]	; (8017ba8 <netif_issue_reports+0x7c>)
 8017b48:	f00b f8f2 	bl	8022d30 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b52:	f003 0304 	and.w	r3, r3, #4
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d01e      	beq.n	8017b98 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b60:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d017      	beq.n	8017b98 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017b68:	78fb      	ldrb	r3, [r7, #3]
 8017b6a:	f003 0301 	and.w	r3, r3, #1
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d013      	beq.n	8017b9a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	3304      	adds	r3, #4
 8017b76:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d00e      	beq.n	8017b9a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017b82:	f003 0308 	and.w	r3, r3, #8
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d007      	beq.n	8017b9a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	3304      	adds	r3, #4
 8017b8e:	4619      	mov	r1, r3
 8017b90:	6878      	ldr	r0, [r7, #4]
 8017b92:	f7fd fcaf 	bl	80154f4 <etharp_request>
 8017b96:	e000      	b.n	8017b9a <netif_issue_reports+0x6e>
    return;
 8017b98:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8017b9a:	3708      	adds	r7, #8
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}
 8017ba0:	08025cec 	.word	0x08025cec
 8017ba4:	08025ec8 	.word	0x08025ec8
 8017ba8:	08025d74 	.word	0x08025d74

08017bac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b082      	sub	sp, #8
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d107      	bne.n	8017bca <netif_set_down+0x1e>
 8017bba:	4b12      	ldr	r3, [pc, #72]	; (8017c04 <netif_set_down+0x58>)
 8017bbc:	f240 329b 	movw	r2, #923	; 0x39b
 8017bc0:	4911      	ldr	r1, [pc, #68]	; (8017c08 <netif_set_down+0x5c>)
 8017bc2:	4812      	ldr	r0, [pc, #72]	; (8017c0c <netif_set_down+0x60>)
 8017bc4:	f00b f8b4 	bl	8022d30 <iprintf>
 8017bc8:	e019      	b.n	8017bfe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bd0:	f003 0301 	and.w	r3, r3, #1
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d012      	beq.n	8017bfe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bde:	f023 0301 	bic.w	r3, r3, #1
 8017be2:	b2da      	uxtb	r2, r3
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017bf0:	f003 0308 	and.w	r3, r3, #8
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d002      	beq.n	8017bfe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8017bf8:	6878      	ldr	r0, [r7, #4]
 8017bfa:	f7fd f839 	bl	8014c70 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8017bfe:	3708      	adds	r7, #8
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}
 8017c04:	08025cec 	.word	0x08025cec
 8017c08:	08025eec 	.word	0x08025eec
 8017c0c:	08025d74 	.word	0x08025d74

08017c10 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8017c10:	b580      	push	{r7, lr}
 8017c12:	b082      	sub	sp, #8
 8017c14:	af00      	add	r7, sp, #0
 8017c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d107      	bne.n	8017c2e <netif_set_link_up+0x1e>
 8017c1e:	4b13      	ldr	r3, [pc, #76]	; (8017c6c <netif_set_link_up+0x5c>)
 8017c20:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8017c24:	4912      	ldr	r1, [pc, #72]	; (8017c70 <netif_set_link_up+0x60>)
 8017c26:	4813      	ldr	r0, [pc, #76]	; (8017c74 <netif_set_link_up+0x64>)
 8017c28:	f00b f882 	bl	8022d30 <iprintf>
 8017c2c:	e01b      	b.n	8017c66 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c34:	f003 0304 	and.w	r3, r3, #4
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d114      	bne.n	8017c66 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c42:	f043 0304 	orr.w	r3, r3, #4
 8017c46:	b2da      	uxtb	r2, r3
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017c4e:	2103      	movs	r1, #3
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f7ff ff6b 	bl	8017b2c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	69db      	ldr	r3, [r3, #28]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d003      	beq.n	8017c66 <netif_set_link_up+0x56>
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	69db      	ldr	r3, [r3, #28]
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017c66:	3708      	adds	r7, #8
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}
 8017c6c:	08025cec 	.word	0x08025cec
 8017c70:	08025f0c 	.word	0x08025f0c
 8017c74:	08025d74 	.word	0x08025d74

08017c78 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b082      	sub	sp, #8
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d107      	bne.n	8017c96 <netif_set_link_down+0x1e>
 8017c86:	4b11      	ldr	r3, [pc, #68]	; (8017ccc <netif_set_link_down+0x54>)
 8017c88:	f240 4206 	movw	r2, #1030	; 0x406
 8017c8c:	4910      	ldr	r1, [pc, #64]	; (8017cd0 <netif_set_link_down+0x58>)
 8017c8e:	4811      	ldr	r0, [pc, #68]	; (8017cd4 <netif_set_link_down+0x5c>)
 8017c90:	f00b f84e 	bl	8022d30 <iprintf>
 8017c94:	e017      	b.n	8017cc6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c9c:	f003 0304 	and.w	r3, r3, #4
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d010      	beq.n	8017cc6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017caa:	f023 0304 	bic.w	r3, r3, #4
 8017cae:	b2da      	uxtb	r2, r3
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	69db      	ldr	r3, [r3, #28]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d003      	beq.n	8017cc6 <netif_set_link_down+0x4e>
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	69db      	ldr	r3, [r3, #28]
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017cc6:	3708      	adds	r7, #8
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	08025cec 	.word	0x08025cec
 8017cd0:	08025f30 	.word	0x08025f30
 8017cd4:	08025d74 	.word	0x08025d74

08017cd8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8017cd8:	b480      	push	{r7}
 8017cda:	b083      	sub	sp, #12
 8017cdc:	af00      	add	r7, sp, #0
 8017cde:	6078      	str	r0, [r7, #4]
 8017ce0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d002      	beq.n	8017cee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	683a      	ldr	r2, [r7, #0]
 8017cec:	61da      	str	r2, [r3, #28]
  }
}
 8017cee:	bf00      	nop
 8017cf0:	370c      	adds	r7, #12
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf8:	4770      	bx	lr

08017cfa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8017cfa:	b480      	push	{r7}
 8017cfc:	b085      	sub	sp, #20
 8017cfe:	af00      	add	r7, sp, #0
 8017d00:	60f8      	str	r0, [r7, #12]
 8017d02:	60b9      	str	r1, [r7, #8]
 8017d04:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8017d06:	f06f 030b 	mvn.w	r3, #11
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3714      	adds	r7, #20
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d14:	4770      	bx	lr
	...

08017d18 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8017d18:	b480      	push	{r7}
 8017d1a:	b085      	sub	sp, #20
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	4603      	mov	r3, r0
 8017d20:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8017d22:	79fb      	ldrb	r3, [r7, #7]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d013      	beq.n	8017d50 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8017d28:	4b0d      	ldr	r3, [pc, #52]	; (8017d60 <netif_get_by_index+0x48>)
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	60fb      	str	r3, [r7, #12]
 8017d2e:	e00c      	b.n	8017d4a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017d36:	3301      	adds	r3, #1
 8017d38:	b2db      	uxtb	r3, r3
 8017d3a:	79fa      	ldrb	r2, [r7, #7]
 8017d3c:	429a      	cmp	r2, r3
 8017d3e:	d101      	bne.n	8017d44 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	e006      	b.n	8017d52 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	60fb      	str	r3, [r7, #12]
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d1ef      	bne.n	8017d30 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8017d50:	2300      	movs	r3, #0
}
 8017d52:	4618      	mov	r0, r3
 8017d54:	3714      	adds	r7, #20
 8017d56:	46bd      	mov	sp, r7
 8017d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5c:	4770      	bx	lr
 8017d5e:	bf00      	nop
 8017d60:	200238cc 	.word	0x200238cc

08017d64 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8017d64:	b580      	push	{r7, lr}
 8017d66:	b082      	sub	sp, #8
 8017d68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8017d6a:	f000 ff95 	bl	8018c98 <sys_arch_protect>
 8017d6e:	6038      	str	r0, [r7, #0]
 8017d70:	4b0d      	ldr	r3, [pc, #52]	; (8017da8 <pbuf_free_ooseq+0x44>)
 8017d72:	2200      	movs	r2, #0
 8017d74:	701a      	strb	r2, [r3, #0]
 8017d76:	6838      	ldr	r0, [r7, #0]
 8017d78:	f000 ff9c 	bl	8018cb4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017d7c:	4b0b      	ldr	r3, [pc, #44]	; (8017dac <pbuf_free_ooseq+0x48>)
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	607b      	str	r3, [r7, #4]
 8017d82:	e00a      	b.n	8017d9a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d003      	beq.n	8017d94 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8017d8c:	6878      	ldr	r0, [r7, #4]
 8017d8e:	f002 fe77 	bl	801aa80 <tcp_free_ooseq>
      return;
 8017d92:	e005      	b.n	8017da0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	68db      	ldr	r3, [r3, #12]
 8017d98:	607b      	str	r3, [r7, #4]
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d1f1      	bne.n	8017d84 <pbuf_free_ooseq+0x20>
    }
  }
}
 8017da0:	3708      	adds	r7, #8
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bd80      	pop	{r7, pc}
 8017da6:	bf00      	nop
 8017da8:	200238d5 	.word	0x200238d5
 8017dac:	200238e8 	.word	0x200238e8

08017db0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8017db0:	b580      	push	{r7, lr}
 8017db2:	b082      	sub	sp, #8
 8017db4:	af00      	add	r7, sp, #0
 8017db6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8017db8:	f7ff ffd4 	bl	8017d64 <pbuf_free_ooseq>
}
 8017dbc:	bf00      	nop
 8017dbe:	3708      	adds	r7, #8
 8017dc0:	46bd      	mov	sp, r7
 8017dc2:	bd80      	pop	{r7, pc}

08017dc4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b082      	sub	sp, #8
 8017dc8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8017dca:	f000 ff65 	bl	8018c98 <sys_arch_protect>
 8017dce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8017dd0:	4b0f      	ldr	r3, [pc, #60]	; (8017e10 <pbuf_pool_is_empty+0x4c>)
 8017dd2:	781b      	ldrb	r3, [r3, #0]
 8017dd4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8017dd6:	4b0e      	ldr	r3, [pc, #56]	; (8017e10 <pbuf_pool_is_empty+0x4c>)
 8017dd8:	2201      	movs	r2, #1
 8017dda:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f000 ff69 	bl	8018cb4 <sys_arch_unprotect>

  if (!queued) {
 8017de2:	78fb      	ldrb	r3, [r7, #3]
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d10f      	bne.n	8017e08 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8017de8:	2100      	movs	r1, #0
 8017dea:	480a      	ldr	r0, [pc, #40]	; (8017e14 <pbuf_pool_is_empty+0x50>)
 8017dec:	f007 fa3a 	bl	801f264 <tcpip_try_callback>
 8017df0:	4603      	mov	r3, r0
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d008      	beq.n	8017e08 <pbuf_pool_is_empty+0x44>
 8017df6:	f000 ff4f 	bl	8018c98 <sys_arch_protect>
 8017dfa:	6078      	str	r0, [r7, #4]
 8017dfc:	4b04      	ldr	r3, [pc, #16]	; (8017e10 <pbuf_pool_is_empty+0x4c>)
 8017dfe:	2200      	movs	r2, #0
 8017e00:	701a      	strb	r2, [r3, #0]
 8017e02:	6878      	ldr	r0, [r7, #4]
 8017e04:	f000 ff56 	bl	8018cb4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8017e08:	bf00      	nop
 8017e0a:	3708      	adds	r7, #8
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bd80      	pop	{r7, pc}
 8017e10:	200238d5 	.word	0x200238d5
 8017e14:	08017db1 	.word	0x08017db1

08017e18 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8017e18:	b480      	push	{r7}
 8017e1a:	b085      	sub	sp, #20
 8017e1c:	af00      	add	r7, sp, #0
 8017e1e:	60f8      	str	r0, [r7, #12]
 8017e20:	60b9      	str	r1, [r7, #8]
 8017e22:	4611      	mov	r1, r2
 8017e24:	461a      	mov	r2, r3
 8017e26:	460b      	mov	r3, r1
 8017e28:	80fb      	strh	r3, [r7, #6]
 8017e2a:	4613      	mov	r3, r2
 8017e2c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2200      	movs	r2, #0
 8017e32:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	68ba      	ldr	r2, [r7, #8]
 8017e38:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	88fa      	ldrh	r2, [r7, #6]
 8017e3e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	88ba      	ldrh	r2, [r7, #4]
 8017e44:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8017e46:	8b3b      	ldrh	r3, [r7, #24]
 8017e48:	b2da      	uxtb	r2, r3
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	7f3a      	ldrb	r2, [r7, #28]
 8017e52:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	2201      	movs	r2, #1
 8017e58:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	73da      	strb	r2, [r3, #15]
}
 8017e60:	bf00      	nop
 8017e62:	3714      	adds	r7, #20
 8017e64:	46bd      	mov	sp, r7
 8017e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6a:	4770      	bx	lr

08017e6c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b08c      	sub	sp, #48	; 0x30
 8017e70:	af02      	add	r7, sp, #8
 8017e72:	4603      	mov	r3, r0
 8017e74:	71fb      	strb	r3, [r7, #7]
 8017e76:	460b      	mov	r3, r1
 8017e78:	80bb      	strh	r3, [r7, #4]
 8017e7a:	4613      	mov	r3, r2
 8017e7c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8017e7e:	79fb      	ldrb	r3, [r7, #7]
 8017e80:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8017e82:	887b      	ldrh	r3, [r7, #2]
 8017e84:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017e88:	d07f      	beq.n	8017f8a <pbuf_alloc+0x11e>
 8017e8a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8017e8e:	f300 80c8 	bgt.w	8018022 <pbuf_alloc+0x1b6>
 8017e92:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8017e96:	d010      	beq.n	8017eba <pbuf_alloc+0x4e>
 8017e98:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8017e9c:	f300 80c1 	bgt.w	8018022 <pbuf_alloc+0x1b6>
 8017ea0:	2b01      	cmp	r3, #1
 8017ea2:	d002      	beq.n	8017eaa <pbuf_alloc+0x3e>
 8017ea4:	2b41      	cmp	r3, #65	; 0x41
 8017ea6:	f040 80bc 	bne.w	8018022 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8017eaa:	887a      	ldrh	r2, [r7, #2]
 8017eac:	88bb      	ldrh	r3, [r7, #4]
 8017eae:	4619      	mov	r1, r3
 8017eb0:	2000      	movs	r0, #0
 8017eb2:	f000 f8d1 	bl	8018058 <pbuf_alloc_reference>
 8017eb6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8017eb8:	e0bd      	b.n	8018036 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8017eba:	2300      	movs	r3, #0
 8017ebc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8017ebe:	2300      	movs	r3, #0
 8017ec0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8017ec2:	88bb      	ldrh	r3, [r7, #4]
 8017ec4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8017ec6:	200c      	movs	r0, #12
 8017ec8:	f7ff fb4a 	bl	8017560 <memp_malloc>
 8017ecc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8017ece:	693b      	ldr	r3, [r7, #16]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d109      	bne.n	8017ee8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8017ed4:	f7ff ff76 	bl	8017dc4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8017ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d002      	beq.n	8017ee4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8017ede:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ee0:	f000 faa8 	bl	8018434 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	e0a7      	b.n	8018038 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8017ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017eea:	3303      	adds	r3, #3
 8017eec:	b29b      	uxth	r3, r3
 8017eee:	f023 0303 	bic.w	r3, r3, #3
 8017ef2:	b29b      	uxth	r3, r3
 8017ef4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8017ef8:	b29b      	uxth	r3, r3
 8017efa:	8b7a      	ldrh	r2, [r7, #26]
 8017efc:	4293      	cmp	r3, r2
 8017efe:	bf28      	it	cs
 8017f00:	4613      	movcs	r3, r2
 8017f02:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8017f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017f06:	3310      	adds	r3, #16
 8017f08:	693a      	ldr	r2, [r7, #16]
 8017f0a:	4413      	add	r3, r2
 8017f0c:	3303      	adds	r3, #3
 8017f0e:	f023 0303 	bic.w	r3, r3, #3
 8017f12:	4618      	mov	r0, r3
 8017f14:	89f9      	ldrh	r1, [r7, #14]
 8017f16:	8b7a      	ldrh	r2, [r7, #26]
 8017f18:	2300      	movs	r3, #0
 8017f1a:	9301      	str	r3, [sp, #4]
 8017f1c:	887b      	ldrh	r3, [r7, #2]
 8017f1e:	9300      	str	r3, [sp, #0]
 8017f20:	460b      	mov	r3, r1
 8017f22:	4601      	mov	r1, r0
 8017f24:	6938      	ldr	r0, [r7, #16]
 8017f26:	f7ff ff77 	bl	8017e18 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8017f2a:	693b      	ldr	r3, [r7, #16]
 8017f2c:	685b      	ldr	r3, [r3, #4]
 8017f2e:	f003 0303 	and.w	r3, r3, #3
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d006      	beq.n	8017f44 <pbuf_alloc+0xd8>
 8017f36:	4b42      	ldr	r3, [pc, #264]	; (8018040 <pbuf_alloc+0x1d4>)
 8017f38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017f3c:	4941      	ldr	r1, [pc, #260]	; (8018044 <pbuf_alloc+0x1d8>)
 8017f3e:	4842      	ldr	r0, [pc, #264]	; (8018048 <pbuf_alloc+0x1dc>)
 8017f40:	f00a fef6 	bl	8022d30 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8017f44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017f46:	3303      	adds	r3, #3
 8017f48:	f023 0303 	bic.w	r3, r3, #3
 8017f4c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8017f50:	d106      	bne.n	8017f60 <pbuf_alloc+0xf4>
 8017f52:	4b3b      	ldr	r3, [pc, #236]	; (8018040 <pbuf_alloc+0x1d4>)
 8017f54:	f44f 7281 	mov.w	r2, #258	; 0x102
 8017f58:	493c      	ldr	r1, [pc, #240]	; (801804c <pbuf_alloc+0x1e0>)
 8017f5a:	483b      	ldr	r0, [pc, #236]	; (8018048 <pbuf_alloc+0x1dc>)
 8017f5c:	f00a fee8 	bl	8022d30 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8017f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d102      	bne.n	8017f6c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8017f66:	693b      	ldr	r3, [r7, #16]
 8017f68:	627b      	str	r3, [r7, #36]	; 0x24
 8017f6a:	e002      	b.n	8017f72 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8017f6c:	69fb      	ldr	r3, [r7, #28]
 8017f6e:	693a      	ldr	r2, [r7, #16]
 8017f70:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8017f72:	693b      	ldr	r3, [r7, #16]
 8017f74:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8017f76:	8b7a      	ldrh	r2, [r7, #26]
 8017f78:	89fb      	ldrh	r3, [r7, #14]
 8017f7a:	1ad3      	subs	r3, r2, r3
 8017f7c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8017f7e:	2300      	movs	r3, #0
 8017f80:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8017f82:	8b7b      	ldrh	r3, [r7, #26]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d19e      	bne.n	8017ec6 <pbuf_alloc+0x5a>
      break;
 8017f88:	e055      	b.n	8018036 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8017f8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017f8c:	3303      	adds	r3, #3
 8017f8e:	b29b      	uxth	r3, r3
 8017f90:	f023 0303 	bic.w	r3, r3, #3
 8017f94:	b29a      	uxth	r2, r3
 8017f96:	88bb      	ldrh	r3, [r7, #4]
 8017f98:	3303      	adds	r3, #3
 8017f9a:	b29b      	uxth	r3, r3
 8017f9c:	f023 0303 	bic.w	r3, r3, #3
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	4413      	add	r3, r2
 8017fa4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8017fa6:	8b3b      	ldrh	r3, [r7, #24]
 8017fa8:	3310      	adds	r3, #16
 8017faa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017fac:	8b3a      	ldrh	r2, [r7, #24]
 8017fae:	88bb      	ldrh	r3, [r7, #4]
 8017fb0:	3303      	adds	r3, #3
 8017fb2:	f023 0303 	bic.w	r3, r3, #3
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	d306      	bcc.n	8017fc8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8017fba:	8afa      	ldrh	r2, [r7, #22]
 8017fbc:	88bb      	ldrh	r3, [r7, #4]
 8017fbe:	3303      	adds	r3, #3
 8017fc0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	d201      	bcs.n	8017fcc <pbuf_alloc+0x160>
        return NULL;
 8017fc8:	2300      	movs	r3, #0
 8017fca:	e035      	b.n	8018038 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8017fcc:	8afb      	ldrh	r3, [r7, #22]
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7ff f922 	bl	8017218 <mem_malloc>
 8017fd4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8017fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d101      	bne.n	8017fe0 <pbuf_alloc+0x174>
        return NULL;
 8017fdc:	2300      	movs	r3, #0
 8017fde:	e02b      	b.n	8018038 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017fe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017fe2:	3310      	adds	r3, #16
 8017fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017fe6:	4413      	add	r3, r2
 8017fe8:	3303      	adds	r3, #3
 8017fea:	f023 0303 	bic.w	r3, r3, #3
 8017fee:	4618      	mov	r0, r3
 8017ff0:	88b9      	ldrh	r1, [r7, #4]
 8017ff2:	88ba      	ldrh	r2, [r7, #4]
 8017ff4:	2300      	movs	r3, #0
 8017ff6:	9301      	str	r3, [sp, #4]
 8017ff8:	887b      	ldrh	r3, [r7, #2]
 8017ffa:	9300      	str	r3, [sp, #0]
 8017ffc:	460b      	mov	r3, r1
 8017ffe:	4601      	mov	r1, r0
 8018000:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018002:	f7ff ff09 	bl	8017e18 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8018006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018008:	685b      	ldr	r3, [r3, #4]
 801800a:	f003 0303 	and.w	r3, r3, #3
 801800e:	2b00      	cmp	r3, #0
 8018010:	d010      	beq.n	8018034 <pbuf_alloc+0x1c8>
 8018012:	4b0b      	ldr	r3, [pc, #44]	; (8018040 <pbuf_alloc+0x1d4>)
 8018014:	f44f 7291 	mov.w	r2, #290	; 0x122
 8018018:	490d      	ldr	r1, [pc, #52]	; (8018050 <pbuf_alloc+0x1e4>)
 801801a:	480b      	ldr	r0, [pc, #44]	; (8018048 <pbuf_alloc+0x1dc>)
 801801c:	f00a fe88 	bl	8022d30 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8018020:	e008      	b.n	8018034 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018022:	4b07      	ldr	r3, [pc, #28]	; (8018040 <pbuf_alloc+0x1d4>)
 8018024:	f240 1227 	movw	r2, #295	; 0x127
 8018028:	490a      	ldr	r1, [pc, #40]	; (8018054 <pbuf_alloc+0x1e8>)
 801802a:	4807      	ldr	r0, [pc, #28]	; (8018048 <pbuf_alloc+0x1dc>)
 801802c:	f00a fe80 	bl	8022d30 <iprintf>
      return NULL;
 8018030:	2300      	movs	r3, #0
 8018032:	e001      	b.n	8018038 <pbuf_alloc+0x1cc>
      break;
 8018034:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8018036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018038:	4618      	mov	r0, r3
 801803a:	3728      	adds	r7, #40	; 0x28
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}
 8018040:	08025f54 	.word	0x08025f54
 8018044:	08025fc0 	.word	0x08025fc0
 8018048:	08025ff0 	.word	0x08025ff0
 801804c:	08026018 	.word	0x08026018
 8018050:	0802604c 	.word	0x0802604c
 8018054:	08026078 	.word	0x08026078

08018058 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b086      	sub	sp, #24
 801805c:	af02      	add	r7, sp, #8
 801805e:	6078      	str	r0, [r7, #4]
 8018060:	460b      	mov	r3, r1
 8018062:	807b      	strh	r3, [r7, #2]
 8018064:	4613      	mov	r3, r2
 8018066:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018068:	883b      	ldrh	r3, [r7, #0]
 801806a:	2b41      	cmp	r3, #65	; 0x41
 801806c:	d009      	beq.n	8018082 <pbuf_alloc_reference+0x2a>
 801806e:	883b      	ldrh	r3, [r7, #0]
 8018070:	2b01      	cmp	r3, #1
 8018072:	d006      	beq.n	8018082 <pbuf_alloc_reference+0x2a>
 8018074:	4b0f      	ldr	r3, [pc, #60]	; (80180b4 <pbuf_alloc_reference+0x5c>)
 8018076:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801807a:	490f      	ldr	r1, [pc, #60]	; (80180b8 <pbuf_alloc_reference+0x60>)
 801807c:	480f      	ldr	r0, [pc, #60]	; (80180bc <pbuf_alloc_reference+0x64>)
 801807e:	f00a fe57 	bl	8022d30 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8018082:	200b      	movs	r0, #11
 8018084:	f7ff fa6c 	bl	8017560 <memp_malloc>
 8018088:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d101      	bne.n	8018094 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8018090:	2300      	movs	r3, #0
 8018092:	e00b      	b.n	80180ac <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8018094:	8879      	ldrh	r1, [r7, #2]
 8018096:	887a      	ldrh	r2, [r7, #2]
 8018098:	2300      	movs	r3, #0
 801809a:	9301      	str	r3, [sp, #4]
 801809c:	883b      	ldrh	r3, [r7, #0]
 801809e:	9300      	str	r3, [sp, #0]
 80180a0:	460b      	mov	r3, r1
 80180a2:	6879      	ldr	r1, [r7, #4]
 80180a4:	68f8      	ldr	r0, [r7, #12]
 80180a6:	f7ff feb7 	bl	8017e18 <pbuf_init_alloced_pbuf>
  return p;
 80180aa:	68fb      	ldr	r3, [r7, #12]
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	3710      	adds	r7, #16
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}
 80180b4:	08025f54 	.word	0x08025f54
 80180b8:	08026094 	.word	0x08026094
 80180bc:	08025ff0 	.word	0x08025ff0

080180c0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b088      	sub	sp, #32
 80180c4:	af02      	add	r7, sp, #8
 80180c6:	607b      	str	r3, [r7, #4]
 80180c8:	4603      	mov	r3, r0
 80180ca:	73fb      	strb	r3, [r7, #15]
 80180cc:	460b      	mov	r3, r1
 80180ce:	81bb      	strh	r3, [r7, #12]
 80180d0:	4613      	mov	r3, r2
 80180d2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80180d4:	7bfb      	ldrb	r3, [r7, #15]
 80180d6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80180d8:	8a7b      	ldrh	r3, [r7, #18]
 80180da:	3303      	adds	r3, #3
 80180dc:	f023 0203 	bic.w	r2, r3, #3
 80180e0:	89bb      	ldrh	r3, [r7, #12]
 80180e2:	441a      	add	r2, r3
 80180e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80180e6:	429a      	cmp	r2, r3
 80180e8:	d901      	bls.n	80180ee <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80180ea:	2300      	movs	r3, #0
 80180ec:	e018      	b.n	8018120 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80180ee:	6a3b      	ldr	r3, [r7, #32]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d007      	beq.n	8018104 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80180f4:	8a7b      	ldrh	r3, [r7, #18]
 80180f6:	3303      	adds	r3, #3
 80180f8:	f023 0303 	bic.w	r3, r3, #3
 80180fc:	6a3a      	ldr	r2, [r7, #32]
 80180fe:	4413      	add	r3, r2
 8018100:	617b      	str	r3, [r7, #20]
 8018102:	e001      	b.n	8018108 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8018104:	2300      	movs	r3, #0
 8018106:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8018108:	6878      	ldr	r0, [r7, #4]
 801810a:	89b9      	ldrh	r1, [r7, #12]
 801810c:	89ba      	ldrh	r2, [r7, #12]
 801810e:	2302      	movs	r3, #2
 8018110:	9301      	str	r3, [sp, #4]
 8018112:	897b      	ldrh	r3, [r7, #10]
 8018114:	9300      	str	r3, [sp, #0]
 8018116:	460b      	mov	r3, r1
 8018118:	6979      	ldr	r1, [r7, #20]
 801811a:	f7ff fe7d 	bl	8017e18 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801811e:	687b      	ldr	r3, [r7, #4]
}
 8018120:	4618      	mov	r0, r3
 8018122:	3718      	adds	r7, #24
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}

08018128 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8018128:	b580      	push	{r7, lr}
 801812a:	b084      	sub	sp, #16
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	460b      	mov	r3, r1
 8018132:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	2b00      	cmp	r3, #0
 8018138:	d106      	bne.n	8018148 <pbuf_realloc+0x20>
 801813a:	4b3a      	ldr	r3, [pc, #232]	; (8018224 <pbuf_realloc+0xfc>)
 801813c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8018140:	4939      	ldr	r1, [pc, #228]	; (8018228 <pbuf_realloc+0x100>)
 8018142:	483a      	ldr	r0, [pc, #232]	; (801822c <pbuf_realloc+0x104>)
 8018144:	f00a fdf4 	bl	8022d30 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	891b      	ldrh	r3, [r3, #8]
 801814c:	887a      	ldrh	r2, [r7, #2]
 801814e:	429a      	cmp	r2, r3
 8018150:	d263      	bcs.n	801821a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	891a      	ldrh	r2, [r3, #8]
 8018156:	887b      	ldrh	r3, [r7, #2]
 8018158:	1ad3      	subs	r3, r2, r3
 801815a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801815c:	887b      	ldrh	r3, [r7, #2]
 801815e:	817b      	strh	r3, [r7, #10]
  q = p;
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8018164:	e018      	b.n	8018198 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	895b      	ldrh	r3, [r3, #10]
 801816a:	897a      	ldrh	r2, [r7, #10]
 801816c:	1ad3      	subs	r3, r2, r3
 801816e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	891a      	ldrh	r2, [r3, #8]
 8018174:	893b      	ldrh	r3, [r7, #8]
 8018176:	1ad3      	subs	r3, r2, r3
 8018178:	b29a      	uxth	r2, r3
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d106      	bne.n	8018198 <pbuf_realloc+0x70>
 801818a:	4b26      	ldr	r3, [pc, #152]	; (8018224 <pbuf_realloc+0xfc>)
 801818c:	f240 12af 	movw	r2, #431	; 0x1af
 8018190:	4927      	ldr	r1, [pc, #156]	; (8018230 <pbuf_realloc+0x108>)
 8018192:	4826      	ldr	r0, [pc, #152]	; (801822c <pbuf_realloc+0x104>)
 8018194:	f00a fdcc 	bl	8022d30 <iprintf>
  while (rem_len > q->len) {
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	895b      	ldrh	r3, [r3, #10]
 801819c:	897a      	ldrh	r2, [r7, #10]
 801819e:	429a      	cmp	r2, r3
 80181a0:	d8e1      	bhi.n	8018166 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	7b1b      	ldrb	r3, [r3, #12]
 80181a6:	f003 030f 	and.w	r3, r3, #15
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d121      	bne.n	80181f2 <pbuf_realloc+0xca>
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	895b      	ldrh	r3, [r3, #10]
 80181b2:	897a      	ldrh	r2, [r7, #10]
 80181b4:	429a      	cmp	r2, r3
 80181b6:	d01c      	beq.n	80181f2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	7b5b      	ldrb	r3, [r3, #13]
 80181bc:	f003 0302 	and.w	r3, r3, #2
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d116      	bne.n	80181f2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	685a      	ldr	r2, [r3, #4]
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	1ad3      	subs	r3, r2, r3
 80181cc:	b29a      	uxth	r2, r3
 80181ce:	897b      	ldrh	r3, [r7, #10]
 80181d0:	4413      	add	r3, r2
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	4619      	mov	r1, r3
 80181d6:	68f8      	ldr	r0, [r7, #12]
 80181d8:	f7fe ff14 	bl	8017004 <mem_trim>
 80181dc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d106      	bne.n	80181f2 <pbuf_realloc+0xca>
 80181e4:	4b0f      	ldr	r3, [pc, #60]	; (8018224 <pbuf_realloc+0xfc>)
 80181e6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80181ea:	4912      	ldr	r1, [pc, #72]	; (8018234 <pbuf_realloc+0x10c>)
 80181ec:	480f      	ldr	r0, [pc, #60]	; (801822c <pbuf_realloc+0x104>)
 80181ee:	f00a fd9f 	bl	8022d30 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	897a      	ldrh	r2, [r7, #10]
 80181f6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	895a      	ldrh	r2, [r3, #10]
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	2b00      	cmp	r3, #0
 8018206:	d004      	beq.n	8018212 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	681b      	ldr	r3, [r3, #0]
 801820c:	4618      	mov	r0, r3
 801820e:	f000 f911 	bl	8018434 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	2200      	movs	r2, #0
 8018216:	601a      	str	r2, [r3, #0]
 8018218:	e000      	b.n	801821c <pbuf_realloc+0xf4>
    return;
 801821a:	bf00      	nop

}
 801821c:	3710      	adds	r7, #16
 801821e:	46bd      	mov	sp, r7
 8018220:	bd80      	pop	{r7, pc}
 8018222:	bf00      	nop
 8018224:	08025f54 	.word	0x08025f54
 8018228:	080260a8 	.word	0x080260a8
 801822c:	08025ff0 	.word	0x08025ff0
 8018230:	080260c0 	.word	0x080260c0
 8018234:	080260d8 	.word	0x080260d8

08018238 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b086      	sub	sp, #24
 801823c:	af00      	add	r7, sp, #0
 801823e:	60f8      	str	r0, [r7, #12]
 8018240:	60b9      	str	r1, [r7, #8]
 8018242:	4613      	mov	r3, r2
 8018244:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d106      	bne.n	801825a <pbuf_add_header_impl+0x22>
 801824c:	4b2b      	ldr	r3, [pc, #172]	; (80182fc <pbuf_add_header_impl+0xc4>)
 801824e:	f240 12df 	movw	r2, #479	; 0x1df
 8018252:	492b      	ldr	r1, [pc, #172]	; (8018300 <pbuf_add_header_impl+0xc8>)
 8018254:	482b      	ldr	r0, [pc, #172]	; (8018304 <pbuf_add_header_impl+0xcc>)
 8018256:	f00a fd6b 	bl	8022d30 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d003      	beq.n	8018268 <pbuf_add_header_impl+0x30>
 8018260:	68bb      	ldr	r3, [r7, #8]
 8018262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018266:	d301      	bcc.n	801826c <pbuf_add_header_impl+0x34>
    return 1;
 8018268:	2301      	movs	r3, #1
 801826a:	e043      	b.n	80182f4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801826c:	68bb      	ldr	r3, [r7, #8]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d101      	bne.n	8018276 <pbuf_add_header_impl+0x3e>
    return 0;
 8018272:	2300      	movs	r3, #0
 8018274:	e03e      	b.n	80182f4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8018276:	68bb      	ldr	r3, [r7, #8]
 8018278:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	891a      	ldrh	r2, [r3, #8]
 801827e:	8a7b      	ldrh	r3, [r7, #18]
 8018280:	4413      	add	r3, r2
 8018282:	b29b      	uxth	r3, r3
 8018284:	8a7a      	ldrh	r2, [r7, #18]
 8018286:	429a      	cmp	r2, r3
 8018288:	d901      	bls.n	801828e <pbuf_add_header_impl+0x56>
    return 1;
 801828a:	2301      	movs	r3, #1
 801828c:	e032      	b.n	80182f4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	7b1b      	ldrb	r3, [r3, #12]
 8018292:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8018294:	8a3b      	ldrh	r3, [r7, #16]
 8018296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801829a:	2b00      	cmp	r3, #0
 801829c:	d00c      	beq.n	80182b8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	685a      	ldr	r2, [r3, #4]
 80182a2:	68bb      	ldr	r3, [r7, #8]
 80182a4:	425b      	negs	r3, r3
 80182a6:	4413      	add	r3, r2
 80182a8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	3310      	adds	r3, #16
 80182ae:	697a      	ldr	r2, [r7, #20]
 80182b0:	429a      	cmp	r2, r3
 80182b2:	d20d      	bcs.n	80182d0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80182b4:	2301      	movs	r3, #1
 80182b6:	e01d      	b.n	80182f4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80182b8:	79fb      	ldrb	r3, [r7, #7]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d006      	beq.n	80182cc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	685a      	ldr	r2, [r3, #4]
 80182c2:	68bb      	ldr	r3, [r7, #8]
 80182c4:	425b      	negs	r3, r3
 80182c6:	4413      	add	r3, r2
 80182c8:	617b      	str	r3, [r7, #20]
 80182ca:	e001      	b.n	80182d0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80182cc:	2301      	movs	r3, #1
 80182ce:	e011      	b.n	80182f4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	697a      	ldr	r2, [r7, #20]
 80182d4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	895a      	ldrh	r2, [r3, #10]
 80182da:	8a7b      	ldrh	r3, [r7, #18]
 80182dc:	4413      	add	r3, r2
 80182de:	b29a      	uxth	r2, r3
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	891a      	ldrh	r2, [r3, #8]
 80182e8:	8a7b      	ldrh	r3, [r7, #18]
 80182ea:	4413      	add	r3, r2
 80182ec:	b29a      	uxth	r2, r3
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	811a      	strh	r2, [r3, #8]


  return 0;
 80182f2:	2300      	movs	r3, #0
}
 80182f4:	4618      	mov	r0, r3
 80182f6:	3718      	adds	r7, #24
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	08025f54 	.word	0x08025f54
 8018300:	080260f4 	.word	0x080260f4
 8018304:	08025ff0 	.word	0x08025ff0

08018308 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
 8018310:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8018312:	2200      	movs	r2, #0
 8018314:	6839      	ldr	r1, [r7, #0]
 8018316:	6878      	ldr	r0, [r7, #4]
 8018318:	f7ff ff8e 	bl	8018238 <pbuf_add_header_impl>
 801831c:	4603      	mov	r3, r0
}
 801831e:	4618      	mov	r0, r3
 8018320:	3708      	adds	r7, #8
 8018322:	46bd      	mov	sp, r7
 8018324:	bd80      	pop	{r7, pc}
	...

08018328 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8018328:	b580      	push	{r7, lr}
 801832a:	b084      	sub	sp, #16
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
 8018330:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d106      	bne.n	8018346 <pbuf_remove_header+0x1e>
 8018338:	4b20      	ldr	r3, [pc, #128]	; (80183bc <pbuf_remove_header+0x94>)
 801833a:	f240 224b 	movw	r2, #587	; 0x24b
 801833e:	4920      	ldr	r1, [pc, #128]	; (80183c0 <pbuf_remove_header+0x98>)
 8018340:	4820      	ldr	r0, [pc, #128]	; (80183c4 <pbuf_remove_header+0x9c>)
 8018342:	f00a fcf5 	bl	8022d30 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d003      	beq.n	8018354 <pbuf_remove_header+0x2c>
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018352:	d301      	bcc.n	8018358 <pbuf_remove_header+0x30>
    return 1;
 8018354:	2301      	movs	r3, #1
 8018356:	e02c      	b.n	80183b2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d101      	bne.n	8018362 <pbuf_remove_header+0x3a>
    return 0;
 801835e:	2300      	movs	r3, #0
 8018360:	e027      	b.n	80183b2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018362:	683b      	ldr	r3, [r7, #0]
 8018364:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	895b      	ldrh	r3, [r3, #10]
 801836a:	89fa      	ldrh	r2, [r7, #14]
 801836c:	429a      	cmp	r2, r3
 801836e:	d908      	bls.n	8018382 <pbuf_remove_header+0x5a>
 8018370:	4b12      	ldr	r3, [pc, #72]	; (80183bc <pbuf_remove_header+0x94>)
 8018372:	f240 2255 	movw	r2, #597	; 0x255
 8018376:	4914      	ldr	r1, [pc, #80]	; (80183c8 <pbuf_remove_header+0xa0>)
 8018378:	4812      	ldr	r0, [pc, #72]	; (80183c4 <pbuf_remove_header+0x9c>)
 801837a:	f00a fcd9 	bl	8022d30 <iprintf>
 801837e:	2301      	movs	r3, #1
 8018380:	e017      	b.n	80183b2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	685a      	ldr	r2, [r3, #4]
 801838c:	683b      	ldr	r3, [r7, #0]
 801838e:	441a      	add	r2, r3
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	895a      	ldrh	r2, [r3, #10]
 8018398:	89fb      	ldrh	r3, [r7, #14]
 801839a:	1ad3      	subs	r3, r2, r3
 801839c:	b29a      	uxth	r2, r3
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	891a      	ldrh	r2, [r3, #8]
 80183a6:	89fb      	ldrh	r3, [r7, #14]
 80183a8:	1ad3      	subs	r3, r2, r3
 80183aa:	b29a      	uxth	r2, r3
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80183b0:	2300      	movs	r3, #0
}
 80183b2:	4618      	mov	r0, r3
 80183b4:	3710      	adds	r7, #16
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}
 80183ba:	bf00      	nop
 80183bc:	08025f54 	.word	0x08025f54
 80183c0:	080260f4 	.word	0x080260f4
 80183c4:	08025ff0 	.word	0x08025ff0
 80183c8:	08026100 	.word	0x08026100

080183cc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b082      	sub	sp, #8
 80183d0:	af00      	add	r7, sp, #0
 80183d2:	6078      	str	r0, [r7, #4]
 80183d4:	460b      	mov	r3, r1
 80183d6:	807b      	strh	r3, [r7, #2]
 80183d8:	4613      	mov	r3, r2
 80183da:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80183dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	da08      	bge.n	80183f6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80183e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80183e8:	425b      	negs	r3, r3
 80183ea:	4619      	mov	r1, r3
 80183ec:	6878      	ldr	r0, [r7, #4]
 80183ee:	f7ff ff9b 	bl	8018328 <pbuf_remove_header>
 80183f2:	4603      	mov	r3, r0
 80183f4:	e007      	b.n	8018406 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80183f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80183fa:	787a      	ldrb	r2, [r7, #1]
 80183fc:	4619      	mov	r1, r3
 80183fe:	6878      	ldr	r0, [r7, #4]
 8018400:	f7ff ff1a 	bl	8018238 <pbuf_add_header_impl>
 8018404:	4603      	mov	r3, r0
  }
}
 8018406:	4618      	mov	r0, r3
 8018408:	3708      	adds	r7, #8
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}

0801840e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801840e:	b580      	push	{r7, lr}
 8018410:	b082      	sub	sp, #8
 8018412:	af00      	add	r7, sp, #0
 8018414:	6078      	str	r0, [r7, #4]
 8018416:	460b      	mov	r3, r1
 8018418:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801841a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801841e:	2201      	movs	r2, #1
 8018420:	4619      	mov	r1, r3
 8018422:	6878      	ldr	r0, [r7, #4]
 8018424:	f7ff ffd2 	bl	80183cc <pbuf_header_impl>
 8018428:	4603      	mov	r3, r0
}
 801842a:	4618      	mov	r0, r3
 801842c:	3708      	adds	r7, #8
 801842e:	46bd      	mov	sp, r7
 8018430:	bd80      	pop	{r7, pc}
	...

08018434 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018434:	b580      	push	{r7, lr}
 8018436:	b088      	sub	sp, #32
 8018438:	af00      	add	r7, sp, #0
 801843a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d10b      	bne.n	801845a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d106      	bne.n	8018456 <pbuf_free+0x22>
 8018448:	4b3b      	ldr	r3, [pc, #236]	; (8018538 <pbuf_free+0x104>)
 801844a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801844e:	493b      	ldr	r1, [pc, #236]	; (801853c <pbuf_free+0x108>)
 8018450:	483b      	ldr	r0, [pc, #236]	; (8018540 <pbuf_free+0x10c>)
 8018452:	f00a fc6d 	bl	8022d30 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8018456:	2300      	movs	r3, #0
 8018458:	e069      	b.n	801852e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801845a:	2300      	movs	r3, #0
 801845c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801845e:	e062      	b.n	8018526 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8018460:	f000 fc1a 	bl	8018c98 <sys_arch_protect>
 8018464:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	7b9b      	ldrb	r3, [r3, #14]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d106      	bne.n	801847c <pbuf_free+0x48>
 801846e:	4b32      	ldr	r3, [pc, #200]	; (8018538 <pbuf_free+0x104>)
 8018470:	f240 22f1 	movw	r2, #753	; 0x2f1
 8018474:	4933      	ldr	r1, [pc, #204]	; (8018544 <pbuf_free+0x110>)
 8018476:	4832      	ldr	r0, [pc, #200]	; (8018540 <pbuf_free+0x10c>)
 8018478:	f00a fc5a 	bl	8022d30 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	7b9b      	ldrb	r3, [r3, #14]
 8018480:	3b01      	subs	r3, #1
 8018482:	b2da      	uxtb	r2, r3
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	739a      	strb	r2, [r3, #14]
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	7b9b      	ldrb	r3, [r3, #14]
 801848c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801848e:	69b8      	ldr	r0, [r7, #24]
 8018490:	f000 fc10 	bl	8018cb4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8018494:	7dfb      	ldrb	r3, [r7, #23]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d143      	bne.n	8018522 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	7b1b      	ldrb	r3, [r3, #12]
 80184a4:	f003 030f 	and.w	r3, r3, #15
 80184a8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	7b5b      	ldrb	r3, [r3, #13]
 80184ae:	f003 0302 	and.w	r3, r3, #2
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d011      	beq.n	80184da <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80184ba:	68bb      	ldr	r3, [r7, #8]
 80184bc:	691b      	ldr	r3, [r3, #16]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d106      	bne.n	80184d0 <pbuf_free+0x9c>
 80184c2:	4b1d      	ldr	r3, [pc, #116]	; (8018538 <pbuf_free+0x104>)
 80184c4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80184c8:	491f      	ldr	r1, [pc, #124]	; (8018548 <pbuf_free+0x114>)
 80184ca:	481d      	ldr	r0, [pc, #116]	; (8018540 <pbuf_free+0x10c>)
 80184cc:	f00a fc30 	bl	8022d30 <iprintf>
        pc->custom_free_function(p);
 80184d0:	68bb      	ldr	r3, [r7, #8]
 80184d2:	691b      	ldr	r3, [r3, #16]
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	4798      	blx	r3
 80184d8:	e01d      	b.n	8018516 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80184da:	7bfb      	ldrb	r3, [r7, #15]
 80184dc:	2b02      	cmp	r3, #2
 80184de:	d104      	bne.n	80184ea <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80184e0:	6879      	ldr	r1, [r7, #4]
 80184e2:	200c      	movs	r0, #12
 80184e4:	f7ff f8b2 	bl	801764c <memp_free>
 80184e8:	e015      	b.n	8018516 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80184ea:	7bfb      	ldrb	r3, [r7, #15]
 80184ec:	2b01      	cmp	r3, #1
 80184ee:	d104      	bne.n	80184fa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80184f0:	6879      	ldr	r1, [r7, #4]
 80184f2:	200b      	movs	r0, #11
 80184f4:	f7ff f8aa 	bl	801764c <memp_free>
 80184f8:	e00d      	b.n	8018516 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80184fa:	7bfb      	ldrb	r3, [r7, #15]
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d103      	bne.n	8018508 <pbuf_free+0xd4>
          mem_free(p);
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f7fe fcef 	bl	8016ee4 <mem_free>
 8018506:	e006      	b.n	8018516 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8018508:	4b0b      	ldr	r3, [pc, #44]	; (8018538 <pbuf_free+0x104>)
 801850a:	f240 320f 	movw	r2, #783	; 0x30f
 801850e:	490f      	ldr	r1, [pc, #60]	; (801854c <pbuf_free+0x118>)
 8018510:	480b      	ldr	r0, [pc, #44]	; (8018540 <pbuf_free+0x10c>)
 8018512:	f00a fc0d 	bl	8022d30 <iprintf>
        }
      }
      count++;
 8018516:	7ffb      	ldrb	r3, [r7, #31]
 8018518:	3301      	adds	r3, #1
 801851a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801851c:	693b      	ldr	r3, [r7, #16]
 801851e:	607b      	str	r3, [r7, #4]
 8018520:	e001      	b.n	8018526 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8018522:	2300      	movs	r3, #0
 8018524:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	2b00      	cmp	r3, #0
 801852a:	d199      	bne.n	8018460 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801852c:	7ffb      	ldrb	r3, [r7, #31]
}
 801852e:	4618      	mov	r0, r3
 8018530:	3720      	adds	r7, #32
 8018532:	46bd      	mov	sp, r7
 8018534:	bd80      	pop	{r7, pc}
 8018536:	bf00      	nop
 8018538:	08025f54 	.word	0x08025f54
 801853c:	080260f4 	.word	0x080260f4
 8018540:	08025ff0 	.word	0x08025ff0
 8018544:	08026120 	.word	0x08026120
 8018548:	08026138 	.word	0x08026138
 801854c:	0802615c 	.word	0x0802615c

08018550 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8018550:	b480      	push	{r7}
 8018552:	b085      	sub	sp, #20
 8018554:	af00      	add	r7, sp, #0
 8018556:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8018558:	2300      	movs	r3, #0
 801855a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801855c:	e005      	b.n	801856a <pbuf_clen+0x1a>
    ++len;
 801855e:	89fb      	ldrh	r3, [r7, #14]
 8018560:	3301      	adds	r3, #1
 8018562:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	681b      	ldr	r3, [r3, #0]
 8018568:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d1f6      	bne.n	801855e <pbuf_clen+0xe>
  }
  return len;
 8018570:	89fb      	ldrh	r3, [r7, #14]
}
 8018572:	4618      	mov	r0, r3
 8018574:	3714      	adds	r7, #20
 8018576:	46bd      	mov	sp, r7
 8018578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801857c:	4770      	bx	lr
	...

08018580 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b084      	sub	sp, #16
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	2b00      	cmp	r3, #0
 801858c:	d016      	beq.n	80185bc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801858e:	f000 fb83 	bl	8018c98 <sys_arch_protect>
 8018592:	60f8      	str	r0, [r7, #12]
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	7b9b      	ldrb	r3, [r3, #14]
 8018598:	3301      	adds	r3, #1
 801859a:	b2da      	uxtb	r2, r3
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	739a      	strb	r2, [r3, #14]
 80185a0:	68f8      	ldr	r0, [r7, #12]
 80185a2:	f000 fb87 	bl	8018cb4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	7b9b      	ldrb	r3, [r3, #14]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d106      	bne.n	80185bc <pbuf_ref+0x3c>
 80185ae:	4b05      	ldr	r3, [pc, #20]	; (80185c4 <pbuf_ref+0x44>)
 80185b0:	f240 3242 	movw	r2, #834	; 0x342
 80185b4:	4904      	ldr	r1, [pc, #16]	; (80185c8 <pbuf_ref+0x48>)
 80185b6:	4805      	ldr	r0, [pc, #20]	; (80185cc <pbuf_ref+0x4c>)
 80185b8:	f00a fbba 	bl	8022d30 <iprintf>
  }
}
 80185bc:	bf00      	nop
 80185be:	3710      	adds	r7, #16
 80185c0:	46bd      	mov	sp, r7
 80185c2:	bd80      	pop	{r7, pc}
 80185c4:	08025f54 	.word	0x08025f54
 80185c8:	08026170 	.word	0x08026170
 80185cc:	08025ff0 	.word	0x08025ff0

080185d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b084      	sub	sp, #16
 80185d4:	af00      	add	r7, sp, #0
 80185d6:	6078      	str	r0, [r7, #4]
 80185d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	2b00      	cmp	r3, #0
 80185de:	d002      	beq.n	80185e6 <pbuf_cat+0x16>
 80185e0:	683b      	ldr	r3, [r7, #0]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d107      	bne.n	80185f6 <pbuf_cat+0x26>
 80185e6:	4b20      	ldr	r3, [pc, #128]	; (8018668 <pbuf_cat+0x98>)
 80185e8:	f240 3259 	movw	r2, #857	; 0x359
 80185ec:	491f      	ldr	r1, [pc, #124]	; (801866c <pbuf_cat+0x9c>)
 80185ee:	4820      	ldr	r0, [pc, #128]	; (8018670 <pbuf_cat+0xa0>)
 80185f0:	f00a fb9e 	bl	8022d30 <iprintf>
 80185f4:	e034      	b.n	8018660 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	60fb      	str	r3, [r7, #12]
 80185fa:	e00a      	b.n	8018612 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	891a      	ldrh	r2, [r3, #8]
 8018600:	683b      	ldr	r3, [r7, #0]
 8018602:	891b      	ldrh	r3, [r3, #8]
 8018604:	4413      	add	r3, r2
 8018606:	b29a      	uxth	r2, r3
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	60fb      	str	r3, [r7, #12]
 8018612:	68fb      	ldr	r3, [r7, #12]
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d1f0      	bne.n	80185fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801861a:	68fb      	ldr	r3, [r7, #12]
 801861c:	891a      	ldrh	r2, [r3, #8]
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	895b      	ldrh	r3, [r3, #10]
 8018622:	429a      	cmp	r2, r3
 8018624:	d006      	beq.n	8018634 <pbuf_cat+0x64>
 8018626:	4b10      	ldr	r3, [pc, #64]	; (8018668 <pbuf_cat+0x98>)
 8018628:	f240 3262 	movw	r2, #866	; 0x362
 801862c:	4911      	ldr	r1, [pc, #68]	; (8018674 <pbuf_cat+0xa4>)
 801862e:	4810      	ldr	r0, [pc, #64]	; (8018670 <pbuf_cat+0xa0>)
 8018630:	f00a fb7e 	bl	8022d30 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d006      	beq.n	801864a <pbuf_cat+0x7a>
 801863c:	4b0a      	ldr	r3, [pc, #40]	; (8018668 <pbuf_cat+0x98>)
 801863e:	f240 3263 	movw	r2, #867	; 0x363
 8018642:	490d      	ldr	r1, [pc, #52]	; (8018678 <pbuf_cat+0xa8>)
 8018644:	480a      	ldr	r0, [pc, #40]	; (8018670 <pbuf_cat+0xa0>)
 8018646:	f00a fb73 	bl	8022d30 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	891a      	ldrh	r2, [r3, #8]
 801864e:	683b      	ldr	r3, [r7, #0]
 8018650:	891b      	ldrh	r3, [r3, #8]
 8018652:	4413      	add	r3, r2
 8018654:	b29a      	uxth	r2, r3
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	683a      	ldr	r2, [r7, #0]
 801865e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8018660:	3710      	adds	r7, #16
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}
 8018666:	bf00      	nop
 8018668:	08025f54 	.word	0x08025f54
 801866c:	08026184 	.word	0x08026184
 8018670:	08025ff0 	.word	0x08025ff0
 8018674:	080261bc 	.word	0x080261bc
 8018678:	080261ec 	.word	0x080261ec

0801867c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801867c:	b580      	push	{r7, lr}
 801867e:	b086      	sub	sp, #24
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8018686:	2300      	movs	r3, #0
 8018688:	617b      	str	r3, [r7, #20]
 801868a:	2300      	movs	r3, #0
 801868c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d008      	beq.n	80186a6 <pbuf_copy+0x2a>
 8018694:	683b      	ldr	r3, [r7, #0]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d005      	beq.n	80186a6 <pbuf_copy+0x2a>
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	891a      	ldrh	r2, [r3, #8]
 801869e:	683b      	ldr	r3, [r7, #0]
 80186a0:	891b      	ldrh	r3, [r3, #8]
 80186a2:	429a      	cmp	r2, r3
 80186a4:	d209      	bcs.n	80186ba <pbuf_copy+0x3e>
 80186a6:	4b57      	ldr	r3, [pc, #348]	; (8018804 <pbuf_copy+0x188>)
 80186a8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80186ac:	4956      	ldr	r1, [pc, #344]	; (8018808 <pbuf_copy+0x18c>)
 80186ae:	4857      	ldr	r0, [pc, #348]	; (801880c <pbuf_copy+0x190>)
 80186b0:	f00a fb3e 	bl	8022d30 <iprintf>
 80186b4:	f06f 030f 	mvn.w	r3, #15
 80186b8:	e09f      	b.n	80187fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	895b      	ldrh	r3, [r3, #10]
 80186be:	461a      	mov	r2, r3
 80186c0:	697b      	ldr	r3, [r7, #20]
 80186c2:	1ad2      	subs	r2, r2, r3
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	895b      	ldrh	r3, [r3, #10]
 80186c8:	4619      	mov	r1, r3
 80186ca:	693b      	ldr	r3, [r7, #16]
 80186cc:	1acb      	subs	r3, r1, r3
 80186ce:	429a      	cmp	r2, r3
 80186d0:	d306      	bcc.n	80186e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80186d2:	683b      	ldr	r3, [r7, #0]
 80186d4:	895b      	ldrh	r3, [r3, #10]
 80186d6:	461a      	mov	r2, r3
 80186d8:	693b      	ldr	r3, [r7, #16]
 80186da:	1ad3      	subs	r3, r2, r3
 80186dc:	60fb      	str	r3, [r7, #12]
 80186de:	e005      	b.n	80186ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	895b      	ldrh	r3, [r3, #10]
 80186e4:	461a      	mov	r2, r3
 80186e6:	697b      	ldr	r3, [r7, #20]
 80186e8:	1ad3      	subs	r3, r2, r3
 80186ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	685a      	ldr	r2, [r3, #4]
 80186f0:	697b      	ldr	r3, [r7, #20]
 80186f2:	18d0      	adds	r0, r2, r3
 80186f4:	683b      	ldr	r3, [r7, #0]
 80186f6:	685a      	ldr	r2, [r3, #4]
 80186f8:	693b      	ldr	r3, [r7, #16]
 80186fa:	4413      	add	r3, r2
 80186fc:	68fa      	ldr	r2, [r7, #12]
 80186fe:	4619      	mov	r1, r3
 8018700:	f00a fd06 	bl	8023110 <memcpy>
    offset_to += len;
 8018704:	697a      	ldr	r2, [r7, #20]
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	4413      	add	r3, r2
 801870a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801870c:	693a      	ldr	r2, [r7, #16]
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	4413      	add	r3, r2
 8018712:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	895b      	ldrh	r3, [r3, #10]
 8018718:	461a      	mov	r2, r3
 801871a:	697b      	ldr	r3, [r7, #20]
 801871c:	4293      	cmp	r3, r2
 801871e:	d906      	bls.n	801872e <pbuf_copy+0xb2>
 8018720:	4b38      	ldr	r3, [pc, #224]	; (8018804 <pbuf_copy+0x188>)
 8018722:	f240 32d9 	movw	r2, #985	; 0x3d9
 8018726:	493a      	ldr	r1, [pc, #232]	; (8018810 <pbuf_copy+0x194>)
 8018728:	4838      	ldr	r0, [pc, #224]	; (801880c <pbuf_copy+0x190>)
 801872a:	f00a fb01 	bl	8022d30 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801872e:	683b      	ldr	r3, [r7, #0]
 8018730:	895b      	ldrh	r3, [r3, #10]
 8018732:	461a      	mov	r2, r3
 8018734:	693b      	ldr	r3, [r7, #16]
 8018736:	4293      	cmp	r3, r2
 8018738:	d906      	bls.n	8018748 <pbuf_copy+0xcc>
 801873a:	4b32      	ldr	r3, [pc, #200]	; (8018804 <pbuf_copy+0x188>)
 801873c:	f240 32da 	movw	r2, #986	; 0x3da
 8018740:	4934      	ldr	r1, [pc, #208]	; (8018814 <pbuf_copy+0x198>)
 8018742:	4832      	ldr	r0, [pc, #200]	; (801880c <pbuf_copy+0x190>)
 8018744:	f00a faf4 	bl	8022d30 <iprintf>
    if (offset_from >= p_from->len) {
 8018748:	683b      	ldr	r3, [r7, #0]
 801874a:	895b      	ldrh	r3, [r3, #10]
 801874c:	461a      	mov	r2, r3
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	4293      	cmp	r3, r2
 8018752:	d304      	bcc.n	801875e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8018754:	2300      	movs	r3, #0
 8018756:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	895b      	ldrh	r3, [r3, #10]
 8018762:	461a      	mov	r2, r3
 8018764:	697b      	ldr	r3, [r7, #20]
 8018766:	4293      	cmp	r3, r2
 8018768:	d114      	bne.n	8018794 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801876a:	2300      	movs	r3, #0
 801876c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	2b00      	cmp	r3, #0
 8018778:	d10c      	bne.n	8018794 <pbuf_copy+0x118>
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	2b00      	cmp	r3, #0
 801877e:	d009      	beq.n	8018794 <pbuf_copy+0x118>
 8018780:	4b20      	ldr	r3, [pc, #128]	; (8018804 <pbuf_copy+0x188>)
 8018782:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8018786:	4924      	ldr	r1, [pc, #144]	; (8018818 <pbuf_copy+0x19c>)
 8018788:	4820      	ldr	r0, [pc, #128]	; (801880c <pbuf_copy+0x190>)
 801878a:	f00a fad1 	bl	8022d30 <iprintf>
 801878e:	f06f 030f 	mvn.w	r3, #15
 8018792:	e032      	b.n	80187fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d013      	beq.n	80187c2 <pbuf_copy+0x146>
 801879a:	683b      	ldr	r3, [r7, #0]
 801879c:	895a      	ldrh	r2, [r3, #10]
 801879e:	683b      	ldr	r3, [r7, #0]
 80187a0:	891b      	ldrh	r3, [r3, #8]
 80187a2:	429a      	cmp	r2, r3
 80187a4:	d10d      	bne.n	80187c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80187a6:	683b      	ldr	r3, [r7, #0]
 80187a8:	681b      	ldr	r3, [r3, #0]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d009      	beq.n	80187c2 <pbuf_copy+0x146>
 80187ae:	4b15      	ldr	r3, [pc, #84]	; (8018804 <pbuf_copy+0x188>)
 80187b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80187b4:	4919      	ldr	r1, [pc, #100]	; (801881c <pbuf_copy+0x1a0>)
 80187b6:	4815      	ldr	r0, [pc, #84]	; (801880c <pbuf_copy+0x190>)
 80187b8:	f00a faba 	bl	8022d30 <iprintf>
 80187bc:	f06f 0305 	mvn.w	r3, #5
 80187c0:	e01b      	b.n	80187fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d013      	beq.n	80187f0 <pbuf_copy+0x174>
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	895a      	ldrh	r2, [r3, #10]
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	891b      	ldrh	r3, [r3, #8]
 80187d0:	429a      	cmp	r2, r3
 80187d2:	d10d      	bne.n	80187f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d009      	beq.n	80187f0 <pbuf_copy+0x174>
 80187dc:	4b09      	ldr	r3, [pc, #36]	; (8018804 <pbuf_copy+0x188>)
 80187de:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80187e2:	490e      	ldr	r1, [pc, #56]	; (801881c <pbuf_copy+0x1a0>)
 80187e4:	4809      	ldr	r0, [pc, #36]	; (801880c <pbuf_copy+0x190>)
 80187e6:	f00a faa3 	bl	8022d30 <iprintf>
 80187ea:	f06f 0305 	mvn.w	r3, #5
 80187ee:	e004      	b.n	80187fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	f47f af61 	bne.w	80186ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80187f8:	2300      	movs	r3, #0
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3718      	adds	r7, #24
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
 8018802:	bf00      	nop
 8018804:	08025f54 	.word	0x08025f54
 8018808:	08026238 	.word	0x08026238
 801880c:	08025ff0 	.word	0x08025ff0
 8018810:	08026268 	.word	0x08026268
 8018814:	08026280 	.word	0x08026280
 8018818:	0802629c 	.word	0x0802629c
 801881c:	080262ac 	.word	0x080262ac

08018820 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8018820:	b580      	push	{r7, lr}
 8018822:	b088      	sub	sp, #32
 8018824:	af00      	add	r7, sp, #0
 8018826:	60f8      	str	r0, [r7, #12]
 8018828:	60b9      	str	r1, [r7, #8]
 801882a:	4611      	mov	r1, r2
 801882c:	461a      	mov	r2, r3
 801882e:	460b      	mov	r3, r1
 8018830:	80fb      	strh	r3, [r7, #6]
 8018832:	4613      	mov	r3, r2
 8018834:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8018836:	2300      	movs	r3, #0
 8018838:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801883a:	2300      	movs	r3, #0
 801883c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	2b00      	cmp	r3, #0
 8018842:	d108      	bne.n	8018856 <pbuf_copy_partial+0x36>
 8018844:	4b2b      	ldr	r3, [pc, #172]	; (80188f4 <pbuf_copy_partial+0xd4>)
 8018846:	f240 420a 	movw	r2, #1034	; 0x40a
 801884a:	492b      	ldr	r1, [pc, #172]	; (80188f8 <pbuf_copy_partial+0xd8>)
 801884c:	482b      	ldr	r0, [pc, #172]	; (80188fc <pbuf_copy_partial+0xdc>)
 801884e:	f00a fa6f 	bl	8022d30 <iprintf>
 8018852:	2300      	movs	r3, #0
 8018854:	e04a      	b.n	80188ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8018856:	68bb      	ldr	r3, [r7, #8]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d108      	bne.n	801886e <pbuf_copy_partial+0x4e>
 801885c:	4b25      	ldr	r3, [pc, #148]	; (80188f4 <pbuf_copy_partial+0xd4>)
 801885e:	f240 420b 	movw	r2, #1035	; 0x40b
 8018862:	4927      	ldr	r1, [pc, #156]	; (8018900 <pbuf_copy_partial+0xe0>)
 8018864:	4825      	ldr	r0, [pc, #148]	; (80188fc <pbuf_copy_partial+0xdc>)
 8018866:	f00a fa63 	bl	8022d30 <iprintf>
 801886a:	2300      	movs	r3, #0
 801886c:	e03e      	b.n	80188ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801886e:	68fb      	ldr	r3, [r7, #12]
 8018870:	61fb      	str	r3, [r7, #28]
 8018872:	e034      	b.n	80188de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8018874:	88bb      	ldrh	r3, [r7, #4]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d00a      	beq.n	8018890 <pbuf_copy_partial+0x70>
 801887a:	69fb      	ldr	r3, [r7, #28]
 801887c:	895b      	ldrh	r3, [r3, #10]
 801887e:	88ba      	ldrh	r2, [r7, #4]
 8018880:	429a      	cmp	r2, r3
 8018882:	d305      	bcc.n	8018890 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8018884:	69fb      	ldr	r3, [r7, #28]
 8018886:	895b      	ldrh	r3, [r3, #10]
 8018888:	88ba      	ldrh	r2, [r7, #4]
 801888a:	1ad3      	subs	r3, r2, r3
 801888c:	80bb      	strh	r3, [r7, #4]
 801888e:	e023      	b.n	80188d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8018890:	69fb      	ldr	r3, [r7, #28]
 8018892:	895a      	ldrh	r2, [r3, #10]
 8018894:	88bb      	ldrh	r3, [r7, #4]
 8018896:	1ad3      	subs	r3, r2, r3
 8018898:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801889a:	8b3a      	ldrh	r2, [r7, #24]
 801889c:	88fb      	ldrh	r3, [r7, #6]
 801889e:	429a      	cmp	r2, r3
 80188a0:	d901      	bls.n	80188a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80188a2:	88fb      	ldrh	r3, [r7, #6]
 80188a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80188a6:	8b7b      	ldrh	r3, [r7, #26]
 80188a8:	68ba      	ldr	r2, [r7, #8]
 80188aa:	18d0      	adds	r0, r2, r3
 80188ac:	69fb      	ldr	r3, [r7, #28]
 80188ae:	685a      	ldr	r2, [r3, #4]
 80188b0:	88bb      	ldrh	r3, [r7, #4]
 80188b2:	4413      	add	r3, r2
 80188b4:	8b3a      	ldrh	r2, [r7, #24]
 80188b6:	4619      	mov	r1, r3
 80188b8:	f00a fc2a 	bl	8023110 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80188bc:	8afa      	ldrh	r2, [r7, #22]
 80188be:	8b3b      	ldrh	r3, [r7, #24]
 80188c0:	4413      	add	r3, r2
 80188c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80188c4:	8b7a      	ldrh	r2, [r7, #26]
 80188c6:	8b3b      	ldrh	r3, [r7, #24]
 80188c8:	4413      	add	r3, r2
 80188ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80188cc:	88fa      	ldrh	r2, [r7, #6]
 80188ce:	8b3b      	ldrh	r3, [r7, #24]
 80188d0:	1ad3      	subs	r3, r2, r3
 80188d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80188d4:	2300      	movs	r3, #0
 80188d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80188d8:	69fb      	ldr	r3, [r7, #28]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	61fb      	str	r3, [r7, #28]
 80188de:	88fb      	ldrh	r3, [r7, #6]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d002      	beq.n	80188ea <pbuf_copy_partial+0xca>
 80188e4:	69fb      	ldr	r3, [r7, #28]
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d1c4      	bne.n	8018874 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80188ea:	8afb      	ldrh	r3, [r7, #22]
}
 80188ec:	4618      	mov	r0, r3
 80188ee:	3720      	adds	r7, #32
 80188f0:	46bd      	mov	sp, r7
 80188f2:	bd80      	pop	{r7, pc}
 80188f4:	08025f54 	.word	0x08025f54
 80188f8:	080262d8 	.word	0x080262d8
 80188fc:	08025ff0 	.word	0x08025ff0
 8018900:	080262f8 	.word	0x080262f8

08018904 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b084      	sub	sp, #16
 8018908:	af00      	add	r7, sp, #0
 801890a:	4603      	mov	r3, r0
 801890c:	603a      	str	r2, [r7, #0]
 801890e:	71fb      	strb	r3, [r7, #7]
 8018910:	460b      	mov	r3, r1
 8018912:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8018914:	683b      	ldr	r3, [r7, #0]
 8018916:	8919      	ldrh	r1, [r3, #8]
 8018918:	88ba      	ldrh	r2, [r7, #4]
 801891a:	79fb      	ldrb	r3, [r7, #7]
 801891c:	4618      	mov	r0, r3
 801891e:	f7ff faa5 	bl	8017e6c <pbuf_alloc>
 8018922:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	2b00      	cmp	r3, #0
 8018928:	d101      	bne.n	801892e <pbuf_clone+0x2a>
    return NULL;
 801892a:	2300      	movs	r3, #0
 801892c:	e011      	b.n	8018952 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801892e:	6839      	ldr	r1, [r7, #0]
 8018930:	68f8      	ldr	r0, [r7, #12]
 8018932:	f7ff fea3 	bl	801867c <pbuf_copy>
 8018936:	4603      	mov	r3, r0
 8018938:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801893a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d006      	beq.n	8018950 <pbuf_clone+0x4c>
 8018942:	4b06      	ldr	r3, [pc, #24]	; (801895c <pbuf_clone+0x58>)
 8018944:	f240 5224 	movw	r2, #1316	; 0x524
 8018948:	4905      	ldr	r1, [pc, #20]	; (8018960 <pbuf_clone+0x5c>)
 801894a:	4806      	ldr	r0, [pc, #24]	; (8018964 <pbuf_clone+0x60>)
 801894c:	f00a f9f0 	bl	8022d30 <iprintf>
  return q;
 8018950:	68fb      	ldr	r3, [r7, #12]
}
 8018952:	4618      	mov	r0, r3
 8018954:	3710      	adds	r7, #16
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	08025f54 	.word	0x08025f54
 8018960:	08026404 	.word	0x08026404
 8018964:	08025ff0 	.word	0x08025ff0

08018968 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b082      	sub	sp, #8
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
 8018970:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018972:	683b      	ldr	r3, [r7, #0]
 8018974:	2200      	movs	r2, #0
 8018976:	2104      	movs	r1, #4
 8018978:	4618      	mov	r0, r3
 801897a:	f7f6 f80d 	bl	800e998 <osMessageQueueNew>
 801897e:	4602      	mov	r2, r0
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d102      	bne.n	8018992 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801898c:	f04f 33ff 	mov.w	r3, #4294967295
 8018990:	e000      	b.n	8018994 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018992:	2300      	movs	r3, #0
}
 8018994:	4618      	mov	r0, r3
 8018996:	3708      	adds	r7, #8
 8018998:	46bd      	mov	sp, r7
 801899a:	bd80      	pop	{r7, pc}

0801899c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b082      	sub	sp, #8
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	4618      	mov	r0, r3
 80189aa:	f7f6 f961 	bl	800ec70 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	4618      	mov	r0, r3
 80189b4:	f7f6 f98e 	bl	800ecd4 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80189b8:	bf00      	nop
 80189ba:	3708      	adds	r7, #8
 80189bc:	46bd      	mov	sp, r7
 80189be:	bd80      	pop	{r7, pc}

080189c0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80189c0:	b580      	push	{r7, lr}
 80189c2:	b084      	sub	sp, #16
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
 80189c8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	6818      	ldr	r0, [r3, #0]
 80189ce:	4639      	mov	r1, r7
 80189d0:	2300      	movs	r3, #0
 80189d2:	2200      	movs	r2, #0
 80189d4:	f7f6 f866 	bl	800eaa4 <osMessageQueuePut>
 80189d8:	4603      	mov	r3, r0
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d102      	bne.n	80189e4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80189de:	2300      	movs	r3, #0
 80189e0:	73fb      	strb	r3, [r7, #15]
 80189e2:	e001      	b.n	80189e8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80189e4:	23ff      	movs	r3, #255	; 0xff
 80189e6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80189e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80189ec:	4618      	mov	r0, r3
 80189ee:	3710      	adds	r7, #16
 80189f0:	46bd      	mov	sp, r7
 80189f2:	bd80      	pop	{r7, pc}

080189f4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80189f4:	b580      	push	{r7, lr}
 80189f6:	b086      	sub	sp, #24
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	60f8      	str	r0, [r7, #12]
 80189fc:	60b9      	str	r1, [r7, #8]
 80189fe:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018a00:	f7f5 fb1c 	bl	800e03c <osKernelGetTickCount>
 8018a04:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d013      	beq.n	8018a34 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	6818      	ldr	r0, [r3, #0]
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	2200      	movs	r2, #0
 8018a14:	68b9      	ldr	r1, [r7, #8]
 8018a16:	f7f6 f8b9 	bl	800eb8c <osMessageQueueGet>
 8018a1a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018a1c:	693b      	ldr	r3, [r7, #16]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d105      	bne.n	8018a2e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018a22:	f7f5 fb0b 	bl	800e03c <osKernelGetTickCount>
 8018a26:	4602      	mov	r2, r0
 8018a28:	697b      	ldr	r3, [r7, #20]
 8018a2a:	1ad3      	subs	r3, r2, r3
 8018a2c:	e00f      	b.n	8018a4e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8018a32:	e00c      	b.n	8018a4e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018a34:	68fb      	ldr	r3, [r7, #12]
 8018a36:	6818      	ldr	r0, [r3, #0]
 8018a38:	f04f 33ff 	mov.w	r3, #4294967295
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	68b9      	ldr	r1, [r7, #8]
 8018a40:	f7f6 f8a4 	bl	800eb8c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018a44:	f7f5 fafa 	bl	800e03c <osKernelGetTickCount>
 8018a48:	4602      	mov	r2, r0
 8018a4a:	697b      	ldr	r3, [r7, #20]
 8018a4c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018a4e:	4618      	mov	r0, r3
 8018a50:	3718      	adds	r7, #24
 8018a52:	46bd      	mov	sp, r7
 8018a54:	bd80      	pop	{r7, pc}

08018a56 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018a56:	b580      	push	{r7, lr}
 8018a58:	b082      	sub	sp, #8
 8018a5a:	af00      	add	r7, sp, #0
 8018a5c:	6078      	str	r0, [r7, #4]
 8018a5e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	6818      	ldr	r0, [r3, #0]
 8018a64:	2300      	movs	r3, #0
 8018a66:	2200      	movs	r2, #0
 8018a68:	6839      	ldr	r1, [r7, #0]
 8018a6a:	f7f6 f88f 	bl	800eb8c <osMessageQueueGet>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d101      	bne.n	8018a78 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018a74:	2300      	movs	r3, #0
 8018a76:	e001      	b.n	8018a7c <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018a78:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	3708      	adds	r7, #8
 8018a80:	46bd      	mov	sp, r7
 8018a82:	bd80      	pop	{r7, pc}

08018a84 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018a84:	b480      	push	{r7}
 8018a86:	b083      	sub	sp, #12
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d101      	bne.n	8018a98 <sys_mbox_valid+0x14>
    return 0;
 8018a94:	2300      	movs	r3, #0
 8018a96:	e000      	b.n	8018a9a <sys_mbox_valid+0x16>
  else
    return 1;
 8018a98:	2301      	movs	r3, #1
}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	370c      	adds	r7, #12
 8018a9e:	46bd      	mov	sp, r7
 8018aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa4:	4770      	bx	lr

08018aa6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018aa6:	b480      	push	{r7}
 8018aa8:	b083      	sub	sp, #12
 8018aaa:	af00      	add	r7, sp, #0
 8018aac:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2200      	movs	r2, #0
 8018ab2:	601a      	str	r2, [r3, #0]
}
 8018ab4:	bf00      	nop
 8018ab6:	370c      	adds	r7, #12
 8018ab8:	46bd      	mov	sp, r7
 8018aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018abe:	4770      	bx	lr

08018ac0 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b082      	sub	sp, #8
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
 8018ac8:	460b      	mov	r3, r1
 8018aca:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8018acc:	78fb      	ldrb	r3, [r7, #3]
 8018ace:	2200      	movs	r2, #0
 8018ad0:	4619      	mov	r1, r3
 8018ad2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018ad6:	f7f5 fdcf 	bl	800e678 <osSemaphoreNew>
 8018ada:	4602      	mov	r2, r0
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	2b00      	cmp	r3, #0
 8018ae6:	d102      	bne.n	8018aee <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8018aec:	e009      	b.n	8018b02 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8018aee:	78fb      	ldrb	r3, [r7, #3]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d105      	bne.n	8018b00 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	2100      	movs	r1, #0
 8018afa:	4618      	mov	r0, r3
 8018afc:	f7f5 fe58 	bl	800e7b0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018b00:	2300      	movs	r3, #0
}
 8018b02:	4618      	mov	r0, r3
 8018b04:	3708      	adds	r7, #8
 8018b06:	46bd      	mov	sp, r7
 8018b08:	bd80      	pop	{r7, pc}

08018b0a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018b0a:	b580      	push	{r7, lr}
 8018b0c:	b084      	sub	sp, #16
 8018b0e:	af00      	add	r7, sp, #0
 8018b10:	6078      	str	r0, [r7, #4]
 8018b12:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8018b14:	f7f5 fa92 	bl	800e03c <osKernelGetTickCount>
 8018b18:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8018b1a:	683b      	ldr	r3, [r7, #0]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d011      	beq.n	8018b44 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	6839      	ldr	r1, [r7, #0]
 8018b26:	4618      	mov	r0, r3
 8018b28:	f7f5 fe42 	bl	800e7b0 <osSemaphoreAcquire>
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d105      	bne.n	8018b3e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8018b32:	f7f5 fa83 	bl	800e03c <osKernelGetTickCount>
 8018b36:	4602      	mov	r2, r0
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	1ad3      	subs	r3, r2, r3
 8018b3c:	e012      	b.n	8018b64 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b42:	e00f      	b.n	8018b64 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018b44:	bf00      	nop
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	f04f 31ff 	mov.w	r1, #4294967295
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f7f5 fe2e 	bl	800e7b0 <osSemaphoreAcquire>
 8018b54:	4603      	mov	r3, r0
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d1f5      	bne.n	8018b46 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8018b5a:	f7f5 fa6f 	bl	800e03c <osKernelGetTickCount>
 8018b5e:	4602      	mov	r2, r0
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018b64:	4618      	mov	r0, r3
 8018b66:	3710      	adds	r7, #16
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	bd80      	pop	{r7, pc}

08018b6c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018b6c:	b580      	push	{r7, lr}
 8018b6e:	b082      	sub	sp, #8
 8018b70:	af00      	add	r7, sp, #0
 8018b72:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7f5 fe7f 	bl	800e87c <osSemaphoreRelease>
}
 8018b7e:	bf00      	nop
 8018b80:	3708      	adds	r7, #8
 8018b82:	46bd      	mov	sp, r7
 8018b84:	bd80      	pop	{r7, pc}

08018b86 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018b86:	b580      	push	{r7, lr}
 8018b88:	b082      	sub	sp, #8
 8018b8a:	af00      	add	r7, sp, #0
 8018b8c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	4618      	mov	r0, r3
 8018b94:	f7f5 feca 	bl	800e92c <osSemaphoreDelete>
}
 8018b98:	bf00      	nop
 8018b9a:	3708      	adds	r7, #8
 8018b9c:	46bd      	mov	sp, r7
 8018b9e:	bd80      	pop	{r7, pc}

08018ba0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018ba0:	b480      	push	{r7}
 8018ba2:	b083      	sub	sp, #12
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d101      	bne.n	8018bb4 <sys_sem_valid+0x14>
    return 0;
 8018bb0:	2300      	movs	r3, #0
 8018bb2:	e000      	b.n	8018bb6 <sys_sem_valid+0x16>
  else
    return 1;
 8018bb4:	2301      	movs	r3, #1
}
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	370c      	adds	r7, #12
 8018bba:	46bd      	mov	sp, r7
 8018bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc0:	4770      	bx	lr

08018bc2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018bc2:	b480      	push	{r7}
 8018bc4:	b083      	sub	sp, #12
 8018bc6:	af00      	add	r7, sp, #0
 8018bc8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	2200      	movs	r2, #0
 8018bce:	601a      	str	r2, [r3, #0]
}
 8018bd0:	bf00      	nop
 8018bd2:	370c      	adds	r7, #12
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bda:	4770      	bx	lr

08018bdc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018be0:	2000      	movs	r0, #0
 8018be2:	f7f5 fc01 	bl	800e3e8 <osMutexNew>
 8018be6:	4603      	mov	r3, r0
 8018be8:	4a01      	ldr	r2, [pc, #4]	; (8018bf0 <sys_init+0x14>)
 8018bea:	6013      	str	r3, [r2, #0]
#endif
}
 8018bec:	bf00      	nop
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	200238d8 	.word	0x200238d8

08018bf4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b082      	sub	sp, #8
 8018bf8:	af00      	add	r7, sp, #0
 8018bfa:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018bfc:	2000      	movs	r0, #0
 8018bfe:	f7f5 fbf3 	bl	800e3e8 <osMutexNew>
 8018c02:	4602      	mov	r2, r0
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d102      	bne.n	8018c16 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018c10:	f04f 33ff 	mov.w	r3, #4294967295
 8018c14:	e000      	b.n	8018c18 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018c16:	2300      	movs	r3, #0
}
 8018c18:	4618      	mov	r0, r3
 8018c1a:	3708      	adds	r7, #8
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd80      	pop	{r7, pc}

08018c20 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b082      	sub	sp, #8
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8018c30:	4618      	mov	r0, r3
 8018c32:	f7f5 fc73 	bl	800e51c <osMutexAcquire>
#endif
}
 8018c36:	bf00      	nop
 8018c38:	3708      	adds	r7, #8
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}

08018c3e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018c3e:	b580      	push	{r7, lr}
 8018c40:	b082      	sub	sp, #8
 8018c42:	af00      	add	r7, sp, #0
 8018c44:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	681b      	ldr	r3, [r3, #0]
 8018c4a:	4618      	mov	r0, r3
 8018c4c:	f7f5 fcc4 	bl	800e5d8 <osMutexRelease>
}
 8018c50:	bf00      	nop
 8018c52:	3708      	adds	r7, #8
 8018c54:	46bd      	mov	sp, r7
 8018c56:	bd80      	pop	{r7, pc}

08018c58 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b08e      	sub	sp, #56	; 0x38
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	60f8      	str	r0, [r7, #12]
 8018c60:	60b9      	str	r1, [r7, #8]
 8018c62:	607a      	str	r2, [r7, #4]
 8018c64:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018c66:	f107 0314 	add.w	r3, r7, #20
 8018c6a:	2224      	movs	r2, #36	; 0x24
 8018c6c:	2100      	movs	r1, #0
 8018c6e:	4618      	mov	r0, r3
 8018c70:	f00a f8fd 	bl	8022e6e <memset>
 8018c74:	68fb      	ldr	r3, [r7, #12]
 8018c76:	617b      	str	r3, [r7, #20]
 8018c78:	683b      	ldr	r3, [r7, #0]
 8018c7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8018c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018c80:	f107 0314 	add.w	r3, r7, #20
 8018c84:	461a      	mov	r2, r3
 8018c86:	6879      	ldr	r1, [r7, #4]
 8018c88:	68b8      	ldr	r0, [r7, #8]
 8018c8a:	f7f5 f9ff 	bl	800e08c <osThreadNew>
 8018c8e:	4603      	mov	r3, r0
#endif
}
 8018c90:	4618      	mov	r0, r3
 8018c92:	3738      	adds	r7, #56	; 0x38
 8018c94:	46bd      	mov	sp, r7
 8018c96:	bd80      	pop	{r7, pc}

08018c98 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018c98:	b580      	push	{r7, lr}
 8018c9a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018c9c:	4b04      	ldr	r3, [pc, #16]	; (8018cb0 <sys_arch_protect+0x18>)
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	f7f5 fc39 	bl	800e51c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018caa:	2301      	movs	r3, #1
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	bd80      	pop	{r7, pc}
 8018cb0:	200238d8 	.word	0x200238d8

08018cb4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018cb4:	b580      	push	{r7, lr}
 8018cb6:	b082      	sub	sp, #8
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018cbc:	4b04      	ldr	r3, [pc, #16]	; (8018cd0 <sys_arch_unprotect+0x1c>)
 8018cbe:	681b      	ldr	r3, [r3, #0]
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	f7f5 fc89 	bl	800e5d8 <osMutexRelease>
}
 8018cc6:	bf00      	nop
 8018cc8:	3708      	adds	r7, #8
 8018cca:	46bd      	mov	sp, r7
 8018ccc:	bd80      	pop	{r7, pc}
 8018cce:	bf00      	nop
 8018cd0:	200238d8 	.word	0x200238d8

08018cd4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018cd8:	f009 ff3c 	bl	8022b54 <rand>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	b29b      	uxth	r3, r3
 8018ce0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018ce4:	b29b      	uxth	r3, r3
 8018ce6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018cea:	b29a      	uxth	r2, r3
 8018cec:	4b01      	ldr	r3, [pc, #4]	; (8018cf4 <tcp_init+0x20>)
 8018cee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018cf0:	bf00      	nop
 8018cf2:	bd80      	pop	{r7, pc}
 8018cf4:	2000002c 	.word	0x2000002c

08018cf8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	b082      	sub	sp, #8
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	7f1b      	ldrb	r3, [r3, #28]
 8018d04:	2b01      	cmp	r3, #1
 8018d06:	d105      	bne.n	8018d14 <tcp_free+0x1c>
 8018d08:	4b09      	ldr	r3, [pc, #36]	; (8018d30 <tcp_free+0x38>)
 8018d0a:	22d4      	movs	r2, #212	; 0xd4
 8018d0c:	4909      	ldr	r1, [pc, #36]	; (8018d34 <tcp_free+0x3c>)
 8018d0e:	480a      	ldr	r0, [pc, #40]	; (8018d38 <tcp_free+0x40>)
 8018d10:	f00a f80e 	bl	8022d30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	3314      	adds	r3, #20
 8018d18:	4618      	mov	r0, r3
 8018d1a:	f001 fec5 	bl	801aaa8 <tcp_ext_arg_invoke_callbacks_destroyed>
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8018d1e:	6879      	ldr	r1, [r7, #4]
 8018d20:	2001      	movs	r0, #1
 8018d22:	f7fe fc93 	bl	801764c <memp_free>
}
 8018d26:	bf00      	nop
 8018d28:	3708      	adds	r7, #8
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	bd80      	pop	{r7, pc}
 8018d2e:	bf00      	nop
 8018d30:	08026490 	.word	0x08026490
 8018d34:	080264f8 	.word	0x080264f8
 8018d38:	0802650c 	.word	0x0802650c

08018d3c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b082      	sub	sp, #8
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	7f1b      	ldrb	r3, [r3, #28]
 8018d48:	2b01      	cmp	r3, #1
 8018d4a:	d105      	bne.n	8018d58 <tcp_free_listen+0x1c>
 8018d4c:	4b09      	ldr	r3, [pc, #36]	; (8018d74 <tcp_free_listen+0x38>)
 8018d4e:	22df      	movs	r2, #223	; 0xdf
 8018d50:	4909      	ldr	r1, [pc, #36]	; (8018d78 <tcp_free_listen+0x3c>)
 8018d52:	480a      	ldr	r0, [pc, #40]	; (8018d7c <tcp_free_listen+0x40>)
 8018d54:	f009 ffec 	bl	8022d30 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	3314      	adds	r3, #20
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	f001 fea3 	bl	801aaa8 <tcp_ext_arg_invoke_callbacks_destroyed>
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8018d62:	6879      	ldr	r1, [r7, #4]
 8018d64:	2002      	movs	r0, #2
 8018d66:	f7fe fc71 	bl	801764c <memp_free>
}
 8018d6a:	bf00      	nop
 8018d6c:	3708      	adds	r7, #8
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}
 8018d72:	bf00      	nop
 8018d74:	08026490 	.word	0x08026490
 8018d78:	08026534 	.word	0x08026534
 8018d7c:	0802650c 	.word	0x0802650c

08018d80 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8018d84:	f001 f900 	bl	8019f88 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8018d88:	4b07      	ldr	r3, [pc, #28]	; (8018da8 <tcp_tmr+0x28>)
 8018d8a:	781b      	ldrb	r3, [r3, #0]
 8018d8c:	3301      	adds	r3, #1
 8018d8e:	b2da      	uxtb	r2, r3
 8018d90:	4b05      	ldr	r3, [pc, #20]	; (8018da8 <tcp_tmr+0x28>)
 8018d92:	701a      	strb	r2, [r3, #0]
 8018d94:	4b04      	ldr	r3, [pc, #16]	; (8018da8 <tcp_tmr+0x28>)
 8018d96:	781b      	ldrb	r3, [r3, #0]
 8018d98:	f003 0301 	and.w	r3, r3, #1
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d001      	beq.n	8018da4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8018da0:	f000 fdaa 	bl	80198f8 <tcp_slowtmr>
  }
}
 8018da4:	bf00      	nop
 8018da6:	bd80      	pop	{r7, pc}
 8018da8:	200238f1 	.word	0x200238f1

08018dac <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b084      	sub	sp, #16
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
 8018db4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018db6:	683b      	ldr	r3, [r7, #0]
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d105      	bne.n	8018dc8 <tcp_remove_listener+0x1c>
 8018dbc:	4b0e      	ldr	r3, [pc, #56]	; (8018df8 <tcp_remove_listener+0x4c>)
 8018dbe:	22ff      	movs	r2, #255	; 0xff
 8018dc0:	490e      	ldr	r1, [pc, #56]	; (8018dfc <tcp_remove_listener+0x50>)
 8018dc2:	480f      	ldr	r0, [pc, #60]	; (8018e00 <tcp_remove_listener+0x54>)
 8018dc4:	f009 ffb4 	bl	8022d30 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	60fb      	str	r3, [r7, #12]
 8018dcc:	e00c      	b.n	8018de8 <tcp_remove_listener+0x3c>
    if (pcb->listener == lpcb) {
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018dd4:	683a      	ldr	r2, [r7, #0]
 8018dd6:	429a      	cmp	r2, r3
 8018dd8:	d103      	bne.n	8018de2 <tcp_remove_listener+0x36>
      pcb->listener = NULL;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	2200      	movs	r2, #0
 8018dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018de2:	68fb      	ldr	r3, [r7, #12]
 8018de4:	68db      	ldr	r3, [r3, #12]
 8018de6:	60fb      	str	r3, [r7, #12]
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d1ef      	bne.n	8018dce <tcp_remove_listener+0x22>
    }
  }
}
 8018dee:	bf00      	nop
 8018df0:	bf00      	nop
 8018df2:	3710      	adds	r7, #16
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	08026490 	.word	0x08026490
 8018dfc:	08026550 	.word	0x08026550
 8018e00:	0802650c 	.word	0x0802650c

08018e04 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b084      	sub	sp, #16
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d106      	bne.n	8018e20 <tcp_listen_closed+0x1c>
 8018e12:	4b14      	ldr	r3, [pc, #80]	; (8018e64 <tcp_listen_closed+0x60>)
 8018e14:	f240 1211 	movw	r2, #273	; 0x111
 8018e18:	4913      	ldr	r1, [pc, #76]	; (8018e68 <tcp_listen_closed+0x64>)
 8018e1a:	4814      	ldr	r0, [pc, #80]	; (8018e6c <tcp_listen_closed+0x68>)
 8018e1c:	f009 ff88 	bl	8022d30 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	7f1b      	ldrb	r3, [r3, #28]
 8018e24:	2b01      	cmp	r3, #1
 8018e26:	d006      	beq.n	8018e36 <tcp_listen_closed+0x32>
 8018e28:	4b0e      	ldr	r3, [pc, #56]	; (8018e64 <tcp_listen_closed+0x60>)
 8018e2a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8018e2e:	4910      	ldr	r1, [pc, #64]	; (8018e70 <tcp_listen_closed+0x6c>)
 8018e30:	480e      	ldr	r0, [pc, #56]	; (8018e6c <tcp_listen_closed+0x68>)
 8018e32:	f009 ff7d 	bl	8022d30 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018e36:	2301      	movs	r3, #1
 8018e38:	60fb      	str	r3, [r7, #12]
 8018e3a:	e00b      	b.n	8018e54 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8018e3c:	4a0d      	ldr	r2, [pc, #52]	; (8018e74 <tcp_listen_closed+0x70>)
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	6879      	ldr	r1, [r7, #4]
 8018e48:	4618      	mov	r0, r3
 8018e4a:	f7ff ffaf 	bl	8018dac <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018e4e:	68fb      	ldr	r3, [r7, #12]
 8018e50:	3301      	adds	r3, #1
 8018e52:	60fb      	str	r3, [r7, #12]
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	2b03      	cmp	r3, #3
 8018e58:	d9f0      	bls.n	8018e3c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8018e5a:	bf00      	nop
 8018e5c:	bf00      	nop
 8018e5e:	3710      	adds	r7, #16
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}
 8018e64:	08026490 	.word	0x08026490
 8018e68:	08026578 	.word	0x08026578
 8018e6c:	0802650c 	.word	0x0802650c
 8018e70:	08026584 	.word	0x08026584
 8018e74:	080285b4 	.word	0x080285b4

08018e78 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018e78:	b5b0      	push	{r4, r5, r7, lr}
 8018e7a:	b088      	sub	sp, #32
 8018e7c:	af04      	add	r7, sp, #16
 8018e7e:	6078      	str	r0, [r7, #4]
 8018e80:	460b      	mov	r3, r1
 8018e82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d106      	bne.n	8018e98 <tcp_close_shutdown+0x20>
 8018e8a:	4b63      	ldr	r3, [pc, #396]	; (8019018 <tcp_close_shutdown+0x1a0>)
 8018e8c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8018e90:	4962      	ldr	r1, [pc, #392]	; (801901c <tcp_close_shutdown+0x1a4>)
 8018e92:	4863      	ldr	r0, [pc, #396]	; (8019020 <tcp_close_shutdown+0x1a8>)
 8018e94:	f009 ff4c 	bl	8022d30 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018e98:	78fb      	ldrb	r3, [r7, #3]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d067      	beq.n	8018f6e <tcp_close_shutdown+0xf6>
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	7f1b      	ldrb	r3, [r3, #28]
 8018ea2:	2b04      	cmp	r3, #4
 8018ea4:	d003      	beq.n	8018eae <tcp_close_shutdown+0x36>
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	7f1b      	ldrb	r3, [r3, #28]
 8018eaa:	2b07      	cmp	r3, #7
 8018eac:	d15f      	bne.n	8018f6e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d104      	bne.n	8018ec2 <tcp_close_shutdown+0x4a>
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8018ebc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018ec0:	d055      	beq.n	8018f6e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8018ec6:	f003 0310 	and.w	r3, r3, #16
 8018eca:	2b00      	cmp	r3, #0
 8018ecc:	d106      	bne.n	8018edc <tcp_close_shutdown+0x64>
 8018ece:	4b52      	ldr	r3, [pc, #328]	; (8019018 <tcp_close_shutdown+0x1a0>)
 8018ed0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8018ed4:	4953      	ldr	r1, [pc, #332]	; (8019024 <tcp_close_shutdown+0x1ac>)
 8018ed6:	4852      	ldr	r0, [pc, #328]	; (8019020 <tcp_close_shutdown+0x1a8>)
 8018ed8:	f009 ff2a 	bl	8022d30 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8018ee4:	687d      	ldr	r5, [r7, #4]
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	3304      	adds	r3, #4
 8018eea:	687a      	ldr	r2, [r7, #4]
 8018eec:	8bd2      	ldrh	r2, [r2, #30]
 8018eee:	6879      	ldr	r1, [r7, #4]
 8018ef0:	8c09      	ldrh	r1, [r1, #32]
 8018ef2:	9102      	str	r1, [sp, #8]
 8018ef4:	9201      	str	r2, [sp, #4]
 8018ef6:	9300      	str	r3, [sp, #0]
 8018ef8:	462b      	mov	r3, r5
 8018efa:	4622      	mov	r2, r4
 8018efc:	4601      	mov	r1, r0
 8018efe:	6878      	ldr	r0, [r7, #4]
 8018f00:	f005 fed8 	bl	801ecb4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8018f04:	6878      	ldr	r0, [r7, #4]
 8018f06:	f001 fc03 	bl	801a710 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8018f0a:	4b47      	ldr	r3, [pc, #284]	; (8019028 <tcp_close_shutdown+0x1b0>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	687a      	ldr	r2, [r7, #4]
 8018f10:	429a      	cmp	r2, r3
 8018f12:	d105      	bne.n	8018f20 <tcp_close_shutdown+0xa8>
 8018f14:	4b44      	ldr	r3, [pc, #272]	; (8019028 <tcp_close_shutdown+0x1b0>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	68db      	ldr	r3, [r3, #12]
 8018f1a:	4a43      	ldr	r2, [pc, #268]	; (8019028 <tcp_close_shutdown+0x1b0>)
 8018f1c:	6013      	str	r3, [r2, #0]
 8018f1e:	e013      	b.n	8018f48 <tcp_close_shutdown+0xd0>
 8018f20:	4b41      	ldr	r3, [pc, #260]	; (8019028 <tcp_close_shutdown+0x1b0>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	60fb      	str	r3, [r7, #12]
 8018f26:	e00c      	b.n	8018f42 <tcp_close_shutdown+0xca>
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	68db      	ldr	r3, [r3, #12]
 8018f2c:	687a      	ldr	r2, [r7, #4]
 8018f2e:	429a      	cmp	r2, r3
 8018f30:	d104      	bne.n	8018f3c <tcp_close_shutdown+0xc4>
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	68da      	ldr	r2, [r3, #12]
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	60da      	str	r2, [r3, #12]
 8018f3a:	e005      	b.n	8018f48 <tcp_close_shutdown+0xd0>
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	68db      	ldr	r3, [r3, #12]
 8018f40:	60fb      	str	r3, [r7, #12]
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	2b00      	cmp	r3, #0
 8018f46:	d1ef      	bne.n	8018f28 <tcp_close_shutdown+0xb0>
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	60da      	str	r2, [r3, #12]
 8018f4e:	4b37      	ldr	r3, [pc, #220]	; (801902c <tcp_close_shutdown+0x1b4>)
 8018f50:	2201      	movs	r2, #1
 8018f52:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8018f54:	4b36      	ldr	r3, [pc, #216]	; (8019030 <tcp_close_shutdown+0x1b8>)
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	687a      	ldr	r2, [r7, #4]
 8018f5a:	429a      	cmp	r2, r3
 8018f5c:	d102      	bne.n	8018f64 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8018f5e:	f004 f94d 	bl	801d1fc <tcp_trigger_input_pcb_close>
 8018f62:	e002      	b.n	8018f6a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8018f64:	6878      	ldr	r0, [r7, #4]
 8018f66:	f7ff fec7 	bl	8018cf8 <tcp_free>
      }
      return ERR_OK;
 8018f6a:	2300      	movs	r3, #0
 8018f6c:	e050      	b.n	8019010 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	7f1b      	ldrb	r3, [r3, #28]
 8018f72:	2b02      	cmp	r3, #2
 8018f74:	d03b      	beq.n	8018fee <tcp_close_shutdown+0x176>
 8018f76:	2b02      	cmp	r3, #2
 8018f78:	dc44      	bgt.n	8019004 <tcp_close_shutdown+0x18c>
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d002      	beq.n	8018f84 <tcp_close_shutdown+0x10c>
 8018f7e:	2b01      	cmp	r3, #1
 8018f80:	d02a      	beq.n	8018fd8 <tcp_close_shutdown+0x160>
 8018f82:	e03f      	b.n	8019004 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	8bdb      	ldrh	r3, [r3, #30]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d021      	beq.n	8018fd0 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018f8c:	4b29      	ldr	r3, [pc, #164]	; (8019034 <tcp_close_shutdown+0x1bc>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	687a      	ldr	r2, [r7, #4]
 8018f92:	429a      	cmp	r2, r3
 8018f94:	d105      	bne.n	8018fa2 <tcp_close_shutdown+0x12a>
 8018f96:	4b27      	ldr	r3, [pc, #156]	; (8019034 <tcp_close_shutdown+0x1bc>)
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	68db      	ldr	r3, [r3, #12]
 8018f9c:	4a25      	ldr	r2, [pc, #148]	; (8019034 <tcp_close_shutdown+0x1bc>)
 8018f9e:	6013      	str	r3, [r2, #0]
 8018fa0:	e013      	b.n	8018fca <tcp_close_shutdown+0x152>
 8018fa2:	4b24      	ldr	r3, [pc, #144]	; (8019034 <tcp_close_shutdown+0x1bc>)
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	60bb      	str	r3, [r7, #8]
 8018fa8:	e00c      	b.n	8018fc4 <tcp_close_shutdown+0x14c>
 8018faa:	68bb      	ldr	r3, [r7, #8]
 8018fac:	68db      	ldr	r3, [r3, #12]
 8018fae:	687a      	ldr	r2, [r7, #4]
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d104      	bne.n	8018fbe <tcp_close_shutdown+0x146>
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	68da      	ldr	r2, [r3, #12]
 8018fb8:	68bb      	ldr	r3, [r7, #8]
 8018fba:	60da      	str	r2, [r3, #12]
 8018fbc:	e005      	b.n	8018fca <tcp_close_shutdown+0x152>
 8018fbe:	68bb      	ldr	r3, [r7, #8]
 8018fc0:	68db      	ldr	r3, [r3, #12]
 8018fc2:	60bb      	str	r3, [r7, #8]
 8018fc4:	68bb      	ldr	r3, [r7, #8]
 8018fc6:	2b00      	cmp	r3, #0
 8018fc8:	d1ef      	bne.n	8018faa <tcp_close_shutdown+0x132>
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	2200      	movs	r2, #0
 8018fce:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8018fd0:	6878      	ldr	r0, [r7, #4]
 8018fd2:	f7ff fe91 	bl	8018cf8 <tcp_free>
      break;
 8018fd6:	e01a      	b.n	801900e <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8018fd8:	6878      	ldr	r0, [r7, #4]
 8018fda:	f7ff ff13 	bl	8018e04 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8018fde:	6879      	ldr	r1, [r7, #4]
 8018fe0:	4815      	ldr	r0, [pc, #84]	; (8019038 <tcp_close_shutdown+0x1c0>)
 8018fe2:	f001 fbe9 	bl	801a7b8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8018fe6:	6878      	ldr	r0, [r7, #4]
 8018fe8:	f7ff fea8 	bl	8018d3c <tcp_free_listen>
      break;
 8018fec:	e00f      	b.n	801900e <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8018fee:	6879      	ldr	r1, [r7, #4]
 8018ff0:	480d      	ldr	r0, [pc, #52]	; (8019028 <tcp_close_shutdown+0x1b0>)
 8018ff2:	f001 fbe1 	bl	801a7b8 <tcp_pcb_remove>
 8018ff6:	4b0d      	ldr	r3, [pc, #52]	; (801902c <tcp_close_shutdown+0x1b4>)
 8018ff8:	2201      	movs	r2, #1
 8018ffa:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8018ffc:	6878      	ldr	r0, [r7, #4]
 8018ffe:	f7ff fe7b 	bl	8018cf8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8019002:	e004      	b.n	801900e <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8019004:	6878      	ldr	r0, [r7, #4]
 8019006:	f000 f819 	bl	801903c <tcp_close_shutdown_fin>
 801900a:	4603      	mov	r3, r0
 801900c:	e000      	b.n	8019010 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801900e:	2300      	movs	r3, #0
}
 8019010:	4618      	mov	r0, r3
 8019012:	3710      	adds	r7, #16
 8019014:	46bd      	mov	sp, r7
 8019016:	bdb0      	pop	{r4, r5, r7, pc}
 8019018:	08026490 	.word	0x08026490
 801901c:	0802659c 	.word	0x0802659c
 8019020:	0802650c 	.word	0x0802650c
 8019024:	080265bc 	.word	0x080265bc
 8019028:	200238e8 	.word	0x200238e8
 801902c:	200238f0 	.word	0x200238f0
 8019030:	20023928 	.word	0x20023928
 8019034:	200238e0 	.word	0x200238e0
 8019038:	200238e4 	.word	0x200238e4

0801903c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801903c:	b580      	push	{r7, lr}
 801903e:	b084      	sub	sp, #16
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	2b00      	cmp	r3, #0
 8019048:	d106      	bne.n	8019058 <tcp_close_shutdown_fin+0x1c>
 801904a:	4b2e      	ldr	r3, [pc, #184]	; (8019104 <tcp_close_shutdown_fin+0xc8>)
 801904c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019050:	492d      	ldr	r1, [pc, #180]	; (8019108 <tcp_close_shutdown_fin+0xcc>)
 8019052:	482e      	ldr	r0, [pc, #184]	; (801910c <tcp_close_shutdown_fin+0xd0>)
 8019054:	f009 fe6c 	bl	8022d30 <iprintf>

  switch (pcb->state) {
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	7f1b      	ldrb	r3, [r3, #28]
 801905c:	2b07      	cmp	r3, #7
 801905e:	d020      	beq.n	80190a2 <tcp_close_shutdown_fin+0x66>
 8019060:	2b07      	cmp	r3, #7
 8019062:	dc2b      	bgt.n	80190bc <tcp_close_shutdown_fin+0x80>
 8019064:	2b03      	cmp	r3, #3
 8019066:	d002      	beq.n	801906e <tcp_close_shutdown_fin+0x32>
 8019068:	2b04      	cmp	r3, #4
 801906a:	d00d      	beq.n	8019088 <tcp_close_shutdown_fin+0x4c>
 801906c:	e026      	b.n	80190bc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801906e:	6878      	ldr	r0, [r7, #4]
 8019070:	f004 ff2e 	bl	801ded0 <tcp_send_fin>
 8019074:	4603      	mov	r3, r0
 8019076:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d11f      	bne.n	80190c0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	2205      	movs	r2, #5
 8019084:	771a      	strb	r2, [r3, #28]
      }
      break;
 8019086:	e01b      	b.n	80190c0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8019088:	6878      	ldr	r0, [r7, #4]
 801908a:	f004 ff21 	bl	801ded0 <tcp_send_fin>
 801908e:	4603      	mov	r3, r0
 8019090:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019092:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d114      	bne.n	80190c4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	2205      	movs	r2, #5
 801909e:	771a      	strb	r2, [r3, #28]
      }
      break;
 80190a0:	e010      	b.n	80190c4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f004 ff14 	bl	801ded0 <tcp_send_fin>
 80190a8:	4603      	mov	r3, r0
 80190aa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80190ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d109      	bne.n	80190c8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	2209      	movs	r2, #9
 80190b8:	771a      	strb	r2, [r3, #28]
      }
      break;
 80190ba:	e005      	b.n	80190c8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80190bc:	2300      	movs	r3, #0
 80190be:	e01c      	b.n	80190fa <tcp_close_shutdown_fin+0xbe>
      break;
 80190c0:	bf00      	nop
 80190c2:	e002      	b.n	80190ca <tcp_close_shutdown_fin+0x8e>
      break;
 80190c4:	bf00      	nop
 80190c6:	e000      	b.n	80190ca <tcp_close_shutdown_fin+0x8e>
      break;
 80190c8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80190ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d103      	bne.n	80190da <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80190d2:	6878      	ldr	r0, [r7, #4]
 80190d4:	f005 f83a 	bl	801e14c <tcp_output>
 80190d8:	e00d      	b.n	80190f6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80190da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80190de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190e2:	d108      	bne.n	80190f6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80190e8:	f043 0308 	orr.w	r3, r3, #8
 80190ec:	b29a      	uxth	r2, r3
 80190ee:	687b      	ldr	r3, [r7, #4]
 80190f0:	845a      	strh	r2, [r3, #34]	; 0x22
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80190f2:	2300      	movs	r3, #0
 80190f4:	e001      	b.n	80190fa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80190f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80190fa:	4618      	mov	r0, r3
 80190fc:	3710      	adds	r7, #16
 80190fe:	46bd      	mov	sp, r7
 8019100:	bd80      	pop	{r7, pc}
 8019102:	bf00      	nop
 8019104:	08026490 	.word	0x08026490
 8019108:	08026578 	.word	0x08026578
 801910c:	0802650c 	.word	0x0802650c

08019110 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b082      	sub	sp, #8
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d109      	bne.n	8019132 <tcp_close+0x22>
 801911e:	4b0f      	ldr	r3, [pc, #60]	; (801915c <tcp_close+0x4c>)
 8019120:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8019124:	490e      	ldr	r1, [pc, #56]	; (8019160 <tcp_close+0x50>)
 8019126:	480f      	ldr	r0, [pc, #60]	; (8019164 <tcp_close+0x54>)
 8019128:	f009 fe02 	bl	8022d30 <iprintf>
 801912c:	f06f 030f 	mvn.w	r3, #15
 8019130:	e00f      	b.n	8019152 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	7f1b      	ldrb	r3, [r3, #28]
 8019136:	2b01      	cmp	r3, #1
 8019138:	d006      	beq.n	8019148 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801913e:	f043 0310 	orr.w	r3, r3, #16
 8019142:	b29a      	uxth	r2, r3
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	845a      	strh	r2, [r3, #34]	; 0x22
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8019148:	2101      	movs	r1, #1
 801914a:	6878      	ldr	r0, [r7, #4]
 801914c:	f7ff fe94 	bl	8018e78 <tcp_close_shutdown>
 8019150:	4603      	mov	r3, r0
}
 8019152:	4618      	mov	r0, r3
 8019154:	3708      	adds	r7, #8
 8019156:	46bd      	mov	sp, r7
 8019158:	bd80      	pop	{r7, pc}
 801915a:	bf00      	nop
 801915c:	08026490 	.word	0x08026490
 8019160:	080265d8 	.word	0x080265d8
 8019164:	0802650c 	.word	0x0802650c

08019168 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8019168:	b580      	push	{r7, lr}
 801916a:	b084      	sub	sp, #16
 801916c:	af00      	add	r7, sp, #0
 801916e:	60f8      	str	r0, [r7, #12]
 8019170:	60b9      	str	r1, [r7, #8]
 8019172:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	2b00      	cmp	r3, #0
 8019178:	d109      	bne.n	801918e <tcp_shutdown+0x26>
 801917a:	4b27      	ldr	r3, [pc, #156]	; (8019218 <tcp_shutdown+0xb0>)
 801917c:	f240 2207 	movw	r2, #519	; 0x207
 8019180:	4926      	ldr	r1, [pc, #152]	; (801921c <tcp_shutdown+0xb4>)
 8019182:	4827      	ldr	r0, [pc, #156]	; (8019220 <tcp_shutdown+0xb8>)
 8019184:	f009 fdd4 	bl	8022d30 <iprintf>
 8019188:	f06f 030f 	mvn.w	r3, #15
 801918c:	e040      	b.n	8019210 <tcp_shutdown+0xa8>

  if (pcb->state == LISTEN) {
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	7f1b      	ldrb	r3, [r3, #28]
 8019192:	2b01      	cmp	r3, #1
 8019194:	d102      	bne.n	801919c <tcp_shutdown+0x34>
    return ERR_CONN;
 8019196:	f06f 030a 	mvn.w	r3, #10
 801919a:	e039      	b.n	8019210 <tcp_shutdown+0xa8>
  }
  if (shut_rx) {
 801919c:	68bb      	ldr	r3, [r7, #8]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d01e      	beq.n	80191e0 <tcp_shutdown+0x78>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80191a6:	f043 0310 	orr.w	r3, r3, #16
 80191aa:	b29a      	uxth	r2, r3
 80191ac:	68fb      	ldr	r3, [r7, #12]
 80191ae:	845a      	strh	r2, [r3, #34]	; 0x22
    if (shut_tx) {
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d005      	beq.n	80191c2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80191b6:	2101      	movs	r1, #1
 80191b8:	68f8      	ldr	r0, [r7, #12]
 80191ba:	f7ff fe5d 	bl	8018e78 <tcp_close_shutdown>
 80191be:	4603      	mov	r3, r0
 80191c0:	e026      	b.n	8019210 <tcp_shutdown+0xa8>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80191c8:	2b00      	cmp	r3, #0
 80191ca:	d009      	beq.n	80191e0 <tcp_shutdown+0x78>
      pbuf_free(pcb->refused_data);
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80191d2:	4618      	mov	r0, r3
 80191d4:	f7ff f92e 	bl	8018434 <pbuf_free>
      pcb->refused_data = NULL;
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	2200      	movs	r2, #0
 80191dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  if (shut_tx) {
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	d013      	beq.n	801920e <tcp_shutdown+0xa6>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	7f1b      	ldrb	r3, [r3, #28]
 80191ea:	2b04      	cmp	r3, #4
 80191ec:	dc02      	bgt.n	80191f4 <tcp_shutdown+0x8c>
 80191ee:	2b03      	cmp	r3, #3
 80191f0:	da02      	bge.n	80191f8 <tcp_shutdown+0x90>
 80191f2:	e009      	b.n	8019208 <tcp_shutdown+0xa0>
 80191f4:	2b07      	cmp	r3, #7
 80191f6:	d107      	bne.n	8019208 <tcp_shutdown+0xa0>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80191f8:	68bb      	ldr	r3, [r7, #8]
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	4619      	mov	r1, r3
 80191fe:	68f8      	ldr	r0, [r7, #12]
 8019200:	f7ff fe3a 	bl	8018e78 <tcp_close_shutdown>
 8019204:	4603      	mov	r3, r0
 8019206:	e003      	b.n	8019210 <tcp_shutdown+0xa8>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8019208:	f06f 030a 	mvn.w	r3, #10
 801920c:	e000      	b.n	8019210 <tcp_shutdown+0xa8>
    }
  }
  return ERR_OK;
 801920e:	2300      	movs	r3, #0
}
 8019210:	4618      	mov	r0, r3
 8019212:	3710      	adds	r7, #16
 8019214:	46bd      	mov	sp, r7
 8019216:	bd80      	pop	{r7, pc}
 8019218:	08026490 	.word	0x08026490
 801921c:	080265f0 	.word	0x080265f0
 8019220:	0802650c 	.word	0x0802650c

08019224 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8019224:	b580      	push	{r7, lr}
 8019226:	b08e      	sub	sp, #56	; 0x38
 8019228:	af04      	add	r7, sp, #16
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d107      	bne.n	8019244 <tcp_abandon+0x20>
 8019234:	4b52      	ldr	r3, [pc, #328]	; (8019380 <tcp_abandon+0x15c>)
 8019236:	f240 223d 	movw	r2, #573	; 0x23d
 801923a:	4952      	ldr	r1, [pc, #328]	; (8019384 <tcp_abandon+0x160>)
 801923c:	4852      	ldr	r0, [pc, #328]	; (8019388 <tcp_abandon+0x164>)
 801923e:	f009 fd77 	bl	8022d30 <iprintf>
 8019242:	e099      	b.n	8019378 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	7f1b      	ldrb	r3, [r3, #28]
 8019248:	2b01      	cmp	r3, #1
 801924a:	d106      	bne.n	801925a <tcp_abandon+0x36>
 801924c:	4b4c      	ldr	r3, [pc, #304]	; (8019380 <tcp_abandon+0x15c>)
 801924e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019252:	494e      	ldr	r1, [pc, #312]	; (801938c <tcp_abandon+0x168>)
 8019254:	484c      	ldr	r0, [pc, #304]	; (8019388 <tcp_abandon+0x164>)
 8019256:	f009 fd6b 	bl	8022d30 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	7f1b      	ldrb	r3, [r3, #28]
 801925e:	2b0a      	cmp	r3, #10
 8019260:	d107      	bne.n	8019272 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019262:	6879      	ldr	r1, [r7, #4]
 8019264:	484a      	ldr	r0, [pc, #296]	; (8019390 <tcp_abandon+0x16c>)
 8019266:	f001 faa7 	bl	801a7b8 <tcp_pcb_remove>
    tcp_free(pcb);
 801926a:	6878      	ldr	r0, [r7, #4]
 801926c:	f7ff fd44 	bl	8018cf8 <tcp_free>
 8019270:	e082      	b.n	8019378 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8019272:	2300      	movs	r3, #0
 8019274:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8019276:	2300      	movs	r3, #0
 8019278:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801927e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019284:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801928c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	691b      	ldr	r3, [r3, #16]
 8019292:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	7f1b      	ldrb	r3, [r3, #28]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d126      	bne.n	80192ea <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	8bdb      	ldrh	r3, [r3, #30]
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d02e      	beq.n	8019302 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80192a4:	4b3b      	ldr	r3, [pc, #236]	; (8019394 <tcp_abandon+0x170>)
 80192a6:	681b      	ldr	r3, [r3, #0]
 80192a8:	687a      	ldr	r2, [r7, #4]
 80192aa:	429a      	cmp	r2, r3
 80192ac:	d105      	bne.n	80192ba <tcp_abandon+0x96>
 80192ae:	4b39      	ldr	r3, [pc, #228]	; (8019394 <tcp_abandon+0x170>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	68db      	ldr	r3, [r3, #12]
 80192b4:	4a37      	ldr	r2, [pc, #220]	; (8019394 <tcp_abandon+0x170>)
 80192b6:	6013      	str	r3, [r2, #0]
 80192b8:	e013      	b.n	80192e2 <tcp_abandon+0xbe>
 80192ba:	4b36      	ldr	r3, [pc, #216]	; (8019394 <tcp_abandon+0x170>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	61fb      	str	r3, [r7, #28]
 80192c0:	e00c      	b.n	80192dc <tcp_abandon+0xb8>
 80192c2:	69fb      	ldr	r3, [r7, #28]
 80192c4:	68db      	ldr	r3, [r3, #12]
 80192c6:	687a      	ldr	r2, [r7, #4]
 80192c8:	429a      	cmp	r2, r3
 80192ca:	d104      	bne.n	80192d6 <tcp_abandon+0xb2>
 80192cc:	687b      	ldr	r3, [r7, #4]
 80192ce:	68da      	ldr	r2, [r3, #12]
 80192d0:	69fb      	ldr	r3, [r7, #28]
 80192d2:	60da      	str	r2, [r3, #12]
 80192d4:	e005      	b.n	80192e2 <tcp_abandon+0xbe>
 80192d6:	69fb      	ldr	r3, [r7, #28]
 80192d8:	68db      	ldr	r3, [r3, #12]
 80192da:	61fb      	str	r3, [r7, #28]
 80192dc:	69fb      	ldr	r3, [r7, #28]
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d1ef      	bne.n	80192c2 <tcp_abandon+0x9e>
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	2200      	movs	r2, #0
 80192e6:	60da      	str	r2, [r3, #12]
 80192e8:	e00b      	b.n	8019302 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80192ea:	683b      	ldr	r3, [r7, #0]
 80192ec:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	8bdb      	ldrh	r3, [r3, #30]
 80192f2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80192f4:	6879      	ldr	r1, [r7, #4]
 80192f6:	4828      	ldr	r0, [pc, #160]	; (8019398 <tcp_abandon+0x174>)
 80192f8:	f001 fa5e 	bl	801a7b8 <tcp_pcb_remove>
 80192fc:	4b27      	ldr	r3, [pc, #156]	; (801939c <tcp_abandon+0x178>)
 80192fe:	2201      	movs	r2, #1
 8019300:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019306:	2b00      	cmp	r3, #0
 8019308:	d004      	beq.n	8019314 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801930e:	4618      	mov	r0, r3
 8019310:	f000 ff22 	bl	801a158 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019318:	2b00      	cmp	r3, #0
 801931a:	d004      	beq.n	8019326 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019320:	4618      	mov	r0, r3
 8019322:	f000 ff19 	bl	801a158 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801932a:	2b00      	cmp	r3, #0
 801932c:	d004      	beq.n	8019338 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019332:	4618      	mov	r0, r3
 8019334:	f000 ff10 	bl	801a158 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8019338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801933a:	2b00      	cmp	r3, #0
 801933c:	d00e      	beq.n	801935c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801933e:	6879      	ldr	r1, [r7, #4]
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	3304      	adds	r3, #4
 8019344:	687a      	ldr	r2, [r7, #4]
 8019346:	8c12      	ldrh	r2, [r2, #32]
 8019348:	9202      	str	r2, [sp, #8]
 801934a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801934c:	9201      	str	r2, [sp, #4]
 801934e:	9300      	str	r3, [sp, #0]
 8019350:	460b      	mov	r3, r1
 8019352:	697a      	ldr	r2, [r7, #20]
 8019354:	69b9      	ldr	r1, [r7, #24]
 8019356:	6878      	ldr	r0, [r7, #4]
 8019358:	f005 fcac 	bl	801ecb4 <tcp_rst>
    }
    last_state = pcb->state;
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	7f1b      	ldrb	r3, [r3, #28]
 8019360:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8019362:	6878      	ldr	r0, [r7, #4]
 8019364:	f7ff fcc8 	bl	8018cf8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d004      	beq.n	8019378 <tcp_abandon+0x154>
 801936e:	693b      	ldr	r3, [r7, #16]
 8019370:	f06f 010c 	mvn.w	r1, #12
 8019374:	68f8      	ldr	r0, [r7, #12]
 8019376:	4798      	blx	r3
  }
}
 8019378:	3728      	adds	r7, #40	; 0x28
 801937a:	46bd      	mov	sp, r7
 801937c:	bd80      	pop	{r7, pc}
 801937e:	bf00      	nop
 8019380:	08026490 	.word	0x08026490
 8019384:	0802660c 	.word	0x0802660c
 8019388:	0802650c 	.word	0x0802650c
 801938c:	08026628 	.word	0x08026628
 8019390:	200238ec 	.word	0x200238ec
 8019394:	200238e0 	.word	0x200238e0
 8019398:	200238e8 	.word	0x200238e8
 801939c:	200238f0 	.word	0x200238f0

080193a0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80193a0:	b580      	push	{r7, lr}
 80193a2:	b082      	sub	sp, #8
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80193a8:	2101      	movs	r1, #1
 80193aa:	6878      	ldr	r0, [r7, #4]
 80193ac:	f7ff ff3a 	bl	8019224 <tcp_abandon>
}
 80193b0:	bf00      	nop
 80193b2:	3708      	adds	r7, #8
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}

080193b8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b088      	sub	sp, #32
 80193bc:	af00      	add	r7, sp, #0
 80193be:	60f8      	str	r0, [r7, #12]
 80193c0:	60b9      	str	r1, [r7, #8]
 80193c2:	4613      	mov	r3, r2
 80193c4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80193c6:	2304      	movs	r3, #4
 80193c8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80193ca:	68bb      	ldr	r3, [r7, #8]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d101      	bne.n	80193d4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80193d0:	4b3e      	ldr	r3, [pc, #248]	; (80194cc <tcp_bind+0x114>)
 80193d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d109      	bne.n	80193ee <tcp_bind+0x36>
 80193da:	4b3d      	ldr	r3, [pc, #244]	; (80194d0 <tcp_bind+0x118>)
 80193dc:	f240 22a9 	movw	r2, #681	; 0x2a9
 80193e0:	493c      	ldr	r1, [pc, #240]	; (80194d4 <tcp_bind+0x11c>)
 80193e2:	483d      	ldr	r0, [pc, #244]	; (80194d8 <tcp_bind+0x120>)
 80193e4:	f009 fca4 	bl	8022d30 <iprintf>
 80193e8:	f06f 030f 	mvn.w	r3, #15
 80193ec:	e06a      	b.n	80194c4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	7f1b      	ldrb	r3, [r3, #28]
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	d009      	beq.n	801940a <tcp_bind+0x52>
 80193f6:	4b36      	ldr	r3, [pc, #216]	; (80194d0 <tcp_bind+0x118>)
 80193f8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80193fc:	4937      	ldr	r1, [pc, #220]	; (80194dc <tcp_bind+0x124>)
 80193fe:	4836      	ldr	r0, [pc, #216]	; (80194d8 <tcp_bind+0x120>)
 8019400:	f009 fc96 	bl	8022d30 <iprintf>
 8019404:	f06f 0305 	mvn.w	r3, #5
 8019408:	e05c      	b.n	80194c4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801940a:	88fb      	ldrh	r3, [r7, #6]
 801940c:	2b00      	cmp	r3, #0
 801940e:	d109      	bne.n	8019424 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019410:	f000 f914 	bl	801963c <tcp_new_port>
 8019414:	4603      	mov	r3, r0
 8019416:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019418:	88fb      	ldrh	r3, [r7, #6]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d135      	bne.n	801948a <tcp_bind+0xd2>
      return ERR_BUF;
 801941e:	f06f 0301 	mvn.w	r3, #1
 8019422:	e04f      	b.n	80194c4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019424:	2300      	movs	r3, #0
 8019426:	61fb      	str	r3, [r7, #28]
 8019428:	e02b      	b.n	8019482 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801942a:	4a2d      	ldr	r2, [pc, #180]	; (80194e0 <tcp_bind+0x128>)
 801942c:	69fb      	ldr	r3, [r7, #28]
 801942e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	61bb      	str	r3, [r7, #24]
 8019436:	e01e      	b.n	8019476 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8019438:	69bb      	ldr	r3, [r7, #24]
 801943a:	8bdb      	ldrh	r3, [r3, #30]
 801943c:	88fa      	ldrh	r2, [r7, #6]
 801943e:	429a      	cmp	r2, r3
 8019440:	d116      	bne.n	8019470 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8019442:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019444:	2b00      	cmp	r3, #0
 8019446:	d010      	beq.n	801946a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8019448:	69bb      	ldr	r3, [r7, #24]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d00c      	beq.n	801946a <tcp_bind+0xb2>
 8019450:	68bb      	ldr	r3, [r7, #8]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d009      	beq.n	801946a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8019456:	68bb      	ldr	r3, [r7, #8]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	2b00      	cmp	r3, #0
 801945c:	d005      	beq.n	801946a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801945e:	69bb      	ldr	r3, [r7, #24]
 8019460:	681a      	ldr	r2, [r3, #0]
 8019462:	68bb      	ldr	r3, [r7, #8]
 8019464:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019466:	429a      	cmp	r2, r3
 8019468:	d102      	bne.n	8019470 <tcp_bind+0xb8>
              return ERR_USE;
 801946a:	f06f 0307 	mvn.w	r3, #7
 801946e:	e029      	b.n	80194c4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019470:	69bb      	ldr	r3, [r7, #24]
 8019472:	68db      	ldr	r3, [r3, #12]
 8019474:	61bb      	str	r3, [r7, #24]
 8019476:	69bb      	ldr	r3, [r7, #24]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d1dd      	bne.n	8019438 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801947c:	69fb      	ldr	r3, [r7, #28]
 801947e:	3301      	adds	r3, #1
 8019480:	61fb      	str	r3, [r7, #28]
 8019482:	69fa      	ldr	r2, [r7, #28]
 8019484:	697b      	ldr	r3, [r7, #20]
 8019486:	429a      	cmp	r2, r3
 8019488:	dbcf      	blt.n	801942a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d00c      	beq.n	80194aa <tcp_bind+0xf2>
 8019490:	68bb      	ldr	r3, [r7, #8]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	2b00      	cmp	r3, #0
 8019496:	d008      	beq.n	80194aa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8019498:	68bb      	ldr	r3, [r7, #8]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d002      	beq.n	80194a4 <tcp_bind+0xec>
 801949e:	68bb      	ldr	r3, [r7, #8]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	e000      	b.n	80194a6 <tcp_bind+0xee>
 80194a4:	2300      	movs	r3, #0
 80194a6:	68fa      	ldr	r2, [r7, #12]
 80194a8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	88fa      	ldrh	r2, [r7, #6]
 80194ae:	83da      	strh	r2, [r3, #30]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80194b0:	4b0c      	ldr	r3, [pc, #48]	; (80194e4 <tcp_bind+0x12c>)
 80194b2:	681a      	ldr	r2, [r3, #0]
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	60da      	str	r2, [r3, #12]
 80194b8:	4a0a      	ldr	r2, [pc, #40]	; (80194e4 <tcp_bind+0x12c>)
 80194ba:	68fb      	ldr	r3, [r7, #12]
 80194bc:	6013      	str	r3, [r2, #0]
 80194be:	f005 ff95 	bl	801f3ec <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80194c2:	2300      	movs	r3, #0
}
 80194c4:	4618      	mov	r0, r3
 80194c6:	3720      	adds	r7, #32
 80194c8:	46bd      	mov	sp, r7
 80194ca:	bd80      	pop	{r7, pc}
 80194cc:	080284c8 	.word	0x080284c8
 80194d0:	08026490 	.word	0x08026490
 80194d4:	0802665c 	.word	0x0802665c
 80194d8:	0802650c 	.word	0x0802650c
 80194dc:	08026674 	.word	0x08026674
 80194e0:	080285b4 	.word	0x080285b4
 80194e4:	200238e0 	.word	0x200238e0

080194e8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b084      	sub	sp, #16
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	2b00      	cmp	r3, #0
 80194f4:	d106      	bne.n	8019504 <tcp_update_rcv_ann_wnd+0x1c>
 80194f6:	4b25      	ldr	r3, [pc, #148]	; (801958c <tcp_update_rcv_ann_wnd+0xa4>)
 80194f8:	f240 32a6 	movw	r2, #934	; 0x3a6
 80194fc:	4924      	ldr	r1, [pc, #144]	; (8019590 <tcp_update_rcv_ann_wnd+0xa8>)
 80194fe:	4825      	ldr	r0, [pc, #148]	; (8019594 <tcp_update_rcv_ann_wnd+0xac>)
 8019500:	f009 fc16 	bl	8022d30 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8019504:	687b      	ldr	r3, [r7, #4]
 8019506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019508:	687a      	ldr	r2, [r7, #4]
 801950a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 801950c:	4413      	add	r3, r2
 801950e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019514:	687a      	ldr	r2, [r7, #4]
 8019516:	8f52      	ldrh	r2, [r2, #58]	; 0x3a
 8019518:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801951c:	bf28      	it	cs
 801951e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8019522:	b292      	uxth	r2, r2
 8019524:	4413      	add	r3, r2
 8019526:	68fa      	ldr	r2, [r7, #12]
 8019528:	1ad3      	subs	r3, r2, r3
 801952a:	2b00      	cmp	r3, #0
 801952c:	db08      	blt.n	8019540 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	865a      	strh	r2, [r3, #50]	; 0x32
    return new_right_edge - pcb->rcv_ann_right_edge;
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801953a:	68fa      	ldr	r2, [r7, #12]
 801953c:	1ad3      	subs	r3, r2, r3
 801953e:	e020      	b.n	8019582 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019548:	1ad3      	subs	r3, r2, r3
 801954a:	2b00      	cmp	r3, #0
 801954c:	dd03      	ble.n	8019556 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	2200      	movs	r2, #0
 8019552:	865a      	strh	r2, [r3, #50]	; 0x32
 8019554:	e014      	b.n	8019580 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801955e:	1ad3      	subs	r3, r2, r3
 8019560:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8019562:	68bb      	ldr	r3, [r7, #8]
 8019564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019568:	d306      	bcc.n	8019578 <tcp_update_rcv_ann_wnd+0x90>
 801956a:	4b08      	ldr	r3, [pc, #32]	; (801958c <tcp_update_rcv_ann_wnd+0xa4>)
 801956c:	f240 32b6 	movw	r2, #950	; 0x3b6
 8019570:	4909      	ldr	r1, [pc, #36]	; (8019598 <tcp_update_rcv_ann_wnd+0xb0>)
 8019572:	4808      	ldr	r0, [pc, #32]	; (8019594 <tcp_update_rcv_ann_wnd+0xac>)
 8019574:	f009 fbdc 	bl	8022d30 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019578:	68bb      	ldr	r3, [r7, #8]
 801957a:	b29a      	uxth	r2, r3
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	865a      	strh	r2, [r3, #50]	; 0x32
    }
    return 0;
 8019580:	2300      	movs	r3, #0
  }
}
 8019582:	4618      	mov	r0, r3
 8019584:	3710      	adds	r7, #16
 8019586:	46bd      	mov	sp, r7
 8019588:	bd80      	pop	{r7, pc}
 801958a:	bf00      	nop
 801958c:	08026490 	.word	0x08026490
 8019590:	08026724 	.word	0x08026724
 8019594:	0802650c 	.word	0x0802650c
 8019598:	08026748 	.word	0x08026748

0801959c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b084      	sub	sp, #16
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	460b      	mov	r3, r1
 80195a6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d107      	bne.n	80195be <tcp_recved+0x22>
 80195ae:	4b1f      	ldr	r3, [pc, #124]	; (801962c <tcp_recved+0x90>)
 80195b0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80195b4:	491e      	ldr	r1, [pc, #120]	; (8019630 <tcp_recved+0x94>)
 80195b6:	481f      	ldr	r0, [pc, #124]	; (8019634 <tcp_recved+0x98>)
 80195b8:	f009 fbba 	bl	8022d30 <iprintf>
 80195bc:	e032      	b.n	8019624 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	7f1b      	ldrb	r3, [r3, #28]
 80195c2:	2b01      	cmp	r3, #1
 80195c4:	d106      	bne.n	80195d4 <tcp_recved+0x38>
 80195c6:	4b19      	ldr	r3, [pc, #100]	; (801962c <tcp_recved+0x90>)
 80195c8:	f240 32d2 	movw	r2, #978	; 0x3d2
 80195cc:	491a      	ldr	r1, [pc, #104]	; (8019638 <tcp_recved+0x9c>)
 80195ce:	4819      	ldr	r0, [pc, #100]	; (8019634 <tcp_recved+0x98>)
 80195d0:	f009 fbae 	bl	8022d30 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 80195d8:	887b      	ldrh	r3, [r7, #2]
 80195da:	4413      	add	r3, r2
 80195dc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80195de:	89fb      	ldrh	r3, [r7, #14]
 80195e0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80195e4:	d804      	bhi.n	80195f0 <tcp_recved+0x54>
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80195ea:	89fa      	ldrh	r2, [r7, #14]
 80195ec:	429a      	cmp	r2, r3
 80195ee:	d204      	bcs.n	80195fa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80195f6:	861a      	strh	r2, [r3, #48]	; 0x30
 80195f8:	e002      	b.n	8019600 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	89fa      	ldrh	r2, [r7, #14]
 80195fe:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8019600:	6878      	ldr	r0, [r7, #4]
 8019602:	f7ff ff71 	bl	80194e8 <tcp_update_rcv_ann_wnd>
 8019606:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8019608:	68bb      	ldr	r3, [r7, #8]
 801960a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801960e:	d309      	bcc.n	8019624 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019614:	f043 0302 	orr.w	r3, r3, #2
 8019618:	b29a      	uxth	r2, r3
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	845a      	strh	r2, [r3, #34]	; 0x22
    tcp_output(pcb);
 801961e:	6878      	ldr	r0, [r7, #4]
 8019620:	f004 fd94 	bl	801e14c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8019624:	3710      	adds	r7, #16
 8019626:	46bd      	mov	sp, r7
 8019628:	bd80      	pop	{r7, pc}
 801962a:	bf00      	nop
 801962c:	08026490 	.word	0x08026490
 8019630:	08026764 	.word	0x08026764
 8019634:	0802650c 	.word	0x0802650c
 8019638:	0802677c 	.word	0x0802677c

0801963c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801963c:	b480      	push	{r7}
 801963e:	b083      	sub	sp, #12
 8019640:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8019642:	2300      	movs	r3, #0
 8019644:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8019646:	4b1e      	ldr	r3, [pc, #120]	; (80196c0 <tcp_new_port+0x84>)
 8019648:	881b      	ldrh	r3, [r3, #0]
 801964a:	3301      	adds	r3, #1
 801964c:	b29a      	uxth	r2, r3
 801964e:	4b1c      	ldr	r3, [pc, #112]	; (80196c0 <tcp_new_port+0x84>)
 8019650:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8019652:	4b1b      	ldr	r3, [pc, #108]	; (80196c0 <tcp_new_port+0x84>)
 8019654:	881b      	ldrh	r3, [r3, #0]
 8019656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801965a:	4293      	cmp	r3, r2
 801965c:	d103      	bne.n	8019666 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801965e:	4b18      	ldr	r3, [pc, #96]	; (80196c0 <tcp_new_port+0x84>)
 8019660:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019664:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019666:	2300      	movs	r3, #0
 8019668:	71fb      	strb	r3, [r7, #7]
 801966a:	e01e      	b.n	80196aa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801966c:	79fb      	ldrb	r3, [r7, #7]
 801966e:	4a15      	ldr	r2, [pc, #84]	; (80196c4 <tcp_new_port+0x88>)
 8019670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	603b      	str	r3, [r7, #0]
 8019678:	e011      	b.n	801969e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801967a:	683b      	ldr	r3, [r7, #0]
 801967c:	8bda      	ldrh	r2, [r3, #30]
 801967e:	4b10      	ldr	r3, [pc, #64]	; (80196c0 <tcp_new_port+0x84>)
 8019680:	881b      	ldrh	r3, [r3, #0]
 8019682:	429a      	cmp	r2, r3
 8019684:	d108      	bne.n	8019698 <tcp_new_port+0x5c>
        n++;
 8019686:	88bb      	ldrh	r3, [r7, #4]
 8019688:	3301      	adds	r3, #1
 801968a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801968c:	88bb      	ldrh	r3, [r7, #4]
 801968e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019692:	d3d8      	bcc.n	8019646 <tcp_new_port+0xa>
          return 0;
 8019694:	2300      	movs	r3, #0
 8019696:	e00d      	b.n	80196b4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019698:	683b      	ldr	r3, [r7, #0]
 801969a:	68db      	ldr	r3, [r3, #12]
 801969c:	603b      	str	r3, [r7, #0]
 801969e:	683b      	ldr	r3, [r7, #0]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d1ea      	bne.n	801967a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80196a4:	79fb      	ldrb	r3, [r7, #7]
 80196a6:	3301      	adds	r3, #1
 80196a8:	71fb      	strb	r3, [r7, #7]
 80196aa:	79fb      	ldrb	r3, [r7, #7]
 80196ac:	2b03      	cmp	r3, #3
 80196ae:	d9dd      	bls.n	801966c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80196b0:	4b03      	ldr	r3, [pc, #12]	; (80196c0 <tcp_new_port+0x84>)
 80196b2:	881b      	ldrh	r3, [r3, #0]
}
 80196b4:	4618      	mov	r0, r3
 80196b6:	370c      	adds	r7, #12
 80196b8:	46bd      	mov	sp, r7
 80196ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196be:	4770      	bx	lr
 80196c0:	2000002c 	.word	0x2000002c
 80196c4:	080285b4 	.word	0x080285b4

080196c8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80196c8:	b580      	push	{r7, lr}
 80196ca:	b08a      	sub	sp, #40	; 0x28
 80196cc:	af00      	add	r7, sp, #0
 80196ce:	60f8      	str	r0, [r7, #12]
 80196d0:	60b9      	str	r1, [r7, #8]
 80196d2:	603b      	str	r3, [r7, #0]
 80196d4:	4613      	mov	r3, r2
 80196d6:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80196d8:	2300      	movs	r3, #0
 80196da:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d109      	bne.n	80196f6 <tcp_connect+0x2e>
 80196e2:	4b7d      	ldr	r3, [pc, #500]	; (80198d8 <tcp_connect+0x210>)
 80196e4:	f240 4235 	movw	r2, #1077	; 0x435
 80196e8:	497c      	ldr	r1, [pc, #496]	; (80198dc <tcp_connect+0x214>)
 80196ea:	487d      	ldr	r0, [pc, #500]	; (80198e0 <tcp_connect+0x218>)
 80196ec:	f009 fb20 	bl	8022d30 <iprintf>
 80196f0:	f06f 030f 	mvn.w	r3, #15
 80196f4:	e0ec      	b.n	80198d0 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80196f6:	68bb      	ldr	r3, [r7, #8]
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d109      	bne.n	8019710 <tcp_connect+0x48>
 80196fc:	4b76      	ldr	r3, [pc, #472]	; (80198d8 <tcp_connect+0x210>)
 80196fe:	f240 4236 	movw	r2, #1078	; 0x436
 8019702:	4978      	ldr	r1, [pc, #480]	; (80198e4 <tcp_connect+0x21c>)
 8019704:	4876      	ldr	r0, [pc, #472]	; (80198e0 <tcp_connect+0x218>)
 8019706:	f009 fb13 	bl	8022d30 <iprintf>
 801970a:	f06f 030f 	mvn.w	r3, #15
 801970e:	e0df      	b.n	80198d0 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	7f1b      	ldrb	r3, [r3, #28]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d009      	beq.n	801972c <tcp_connect+0x64>
 8019718:	4b6f      	ldr	r3, [pc, #444]	; (80198d8 <tcp_connect+0x210>)
 801971a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801971e:	4972      	ldr	r1, [pc, #456]	; (80198e8 <tcp_connect+0x220>)
 8019720:	486f      	ldr	r0, [pc, #444]	; (80198e0 <tcp_connect+0x218>)
 8019722:	f009 fb05 	bl	8022d30 <iprintf>
 8019726:	f06f 0309 	mvn.w	r3, #9
 801972a:	e0d1      	b.n	80198d0 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801972c:	68bb      	ldr	r3, [r7, #8]
 801972e:	2b00      	cmp	r3, #0
 8019730:	d002      	beq.n	8019738 <tcp_connect+0x70>
 8019732:	68bb      	ldr	r3, [r7, #8]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	e000      	b.n	801973a <tcp_connect+0x72>
 8019738:	2300      	movs	r3, #0
 801973a:	68fa      	ldr	r2, [r7, #12]
 801973c:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	88fa      	ldrh	r2, [r7, #6]
 8019742:	841a      	strh	r2, [r3, #32]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	7a1b      	ldrb	r3, [r3, #8]
 8019748:	2b00      	cmp	r3, #0
 801974a:	d006      	beq.n	801975a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	7a1b      	ldrb	r3, [r3, #8]
 8019750:	4618      	mov	r0, r3
 8019752:	f7fe fae1 	bl	8017d18 <netif_get_by_index>
 8019756:	6278      	str	r0, [r7, #36]	; 0x24
 8019758:	e005      	b.n	8019766 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	3304      	adds	r3, #4
 801975e:	4618      	mov	r0, r3
 8019760:	f7fc f956 	bl	8015a10 <ip4_route>
 8019764:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8019766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019768:	2b00      	cmp	r3, #0
 801976a:	d102      	bne.n	8019772 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 801976c:	f06f 0303 	mvn.w	r3, #3
 8019770:	e0ae      	b.n	80198d0 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d003      	beq.n	8019780 <tcp_connect+0xb8>
 8019778:	68fb      	ldr	r3, [r7, #12]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d111      	bne.n	80197a4 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8019780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019782:	2b00      	cmp	r3, #0
 8019784:	d002      	beq.n	801978c <tcp_connect+0xc4>
 8019786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019788:	3304      	adds	r3, #4
 801978a:	e000      	b.n	801978e <tcp_connect+0xc6>
 801978c:	2300      	movs	r3, #0
 801978e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8019790:	69fb      	ldr	r3, [r7, #28]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d102      	bne.n	801979c <tcp_connect+0xd4>
      return ERR_RTE;
 8019796:	f06f 0303 	mvn.w	r3, #3
 801979a:	e099      	b.n	80198d0 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801979c:	69fb      	ldr	r3, [r7, #28]
 801979e:	681a      	ldr	r2, [r3, #0]
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	8bdb      	ldrh	r3, [r3, #30]
 80197a8:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80197aa:	68fb      	ldr	r3, [r7, #12]
 80197ac:	8bdb      	ldrh	r3, [r3, #30]
 80197ae:	2b00      	cmp	r3, #0
 80197b0:	d10c      	bne.n	80197cc <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80197b2:	f7ff ff43 	bl	801963c <tcp_new_port>
 80197b6:	4603      	mov	r3, r0
 80197b8:	461a      	mov	r2, r3
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	83da      	strh	r2, [r3, #30]
    if (pcb->local_port == 0) {
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	8bdb      	ldrh	r3, [r3, #30]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	d102      	bne.n	80197cc <tcp_connect+0x104>
      return ERR_BUF;
 80197c6:	f06f 0301 	mvn.w	r3, #1
 80197ca:	e081      	b.n	80198d0 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80197cc:	68f8      	ldr	r0, [r7, #12]
 80197ce:	f001 f887 	bl	801a8e0 <tcp_next_iss>
 80197d2:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	2200      	movs	r2, #0
 80197d8:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_nxt = iss;
 80197da:	68fb      	ldr	r3, [r7, #12]
 80197dc:	697a      	ldr	r2, [r7, #20]
 80197de:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->lastack = iss - 1;
 80197e0:	697b      	ldr	r3, [r7, #20]
 80197e2:	1e5a      	subs	r2, r3, #1
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->snd_wl2 = iss - 1;
 80197e8:	697b      	ldr	r3, [r7, #20]
 80197ea:	1e5a      	subs	r2, r3, #1
 80197ec:	68fb      	ldr	r3, [r7, #12]
 80197ee:	661a      	str	r2, [r3, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 80197f0:	697b      	ldr	r3, [r7, #20]
 80197f2:	1e5a      	subs	r2, r3, #1
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	665a      	str	r2, [r3, #100]	; 0x64
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80197fe:	865a      	strh	r2, [r3, #50]	; 0x32
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	861a      	strh	r2, [r3, #48]	; 0x30
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801980c:	68fb      	ldr	r3, [r7, #12]
 801980e:	635a      	str	r2, [r3, #52]	; 0x34
  pcb->snd_wnd = TCP_WND;
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019820:	875a      	strh	r2, [r3, #58]	; 0x3a
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8019822:	68fb      	ldr	r3, [r7, #12]
 8019824:	8f58      	ldrh	r0, [r3, #58]	; 0x3a
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	3304      	adds	r3, #4
 801982a:	461a      	mov	r2, r3
 801982c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801982e:	f001 f87d 	bl	801a92c <tcp_eff_send_mss_netif>
 8019832:	4603      	mov	r3, r0
 8019834:	461a      	mov	r2, r3
 8019836:	68fb      	ldr	r3, [r7, #12]
 8019838:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	2201      	movs	r2, #1
 801983e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	683a      	ldr	r2, [r7, #0]
 8019846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801984a:	2102      	movs	r1, #2
 801984c:	68f8      	ldr	r0, [r7, #12]
 801984e:	f004 fb8f 	bl	801df70 <tcp_enqueue_flags>
 8019852:	4603      	mov	r3, r0
 8019854:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8019856:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d136      	bne.n	80198cc <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801985e:	68fb      	ldr	r3, [r7, #12]
 8019860:	2202      	movs	r2, #2
 8019862:	771a      	strb	r2, [r3, #28]
    if (old_local_port != 0) {
 8019864:	8b7b      	ldrh	r3, [r7, #26]
 8019866:	2b00      	cmp	r3, #0
 8019868:	d021      	beq.n	80198ae <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801986a:	4b20      	ldr	r3, [pc, #128]	; (80198ec <tcp_connect+0x224>)
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	68fa      	ldr	r2, [r7, #12]
 8019870:	429a      	cmp	r2, r3
 8019872:	d105      	bne.n	8019880 <tcp_connect+0x1b8>
 8019874:	4b1d      	ldr	r3, [pc, #116]	; (80198ec <tcp_connect+0x224>)
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	68db      	ldr	r3, [r3, #12]
 801987a:	4a1c      	ldr	r2, [pc, #112]	; (80198ec <tcp_connect+0x224>)
 801987c:	6013      	str	r3, [r2, #0]
 801987e:	e013      	b.n	80198a8 <tcp_connect+0x1e0>
 8019880:	4b1a      	ldr	r3, [pc, #104]	; (80198ec <tcp_connect+0x224>)
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	623b      	str	r3, [r7, #32]
 8019886:	e00c      	b.n	80198a2 <tcp_connect+0x1da>
 8019888:	6a3b      	ldr	r3, [r7, #32]
 801988a:	68db      	ldr	r3, [r3, #12]
 801988c:	68fa      	ldr	r2, [r7, #12]
 801988e:	429a      	cmp	r2, r3
 8019890:	d104      	bne.n	801989c <tcp_connect+0x1d4>
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	68da      	ldr	r2, [r3, #12]
 8019896:	6a3b      	ldr	r3, [r7, #32]
 8019898:	60da      	str	r2, [r3, #12]
 801989a:	e005      	b.n	80198a8 <tcp_connect+0x1e0>
 801989c:	6a3b      	ldr	r3, [r7, #32]
 801989e:	68db      	ldr	r3, [r3, #12]
 80198a0:	623b      	str	r3, [r7, #32]
 80198a2:	6a3b      	ldr	r3, [r7, #32]
 80198a4:	2b00      	cmp	r3, #0
 80198a6:	d1ef      	bne.n	8019888 <tcp_connect+0x1c0>
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	2200      	movs	r2, #0
 80198ac:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80198ae:	4b10      	ldr	r3, [pc, #64]	; (80198f0 <tcp_connect+0x228>)
 80198b0:	681a      	ldr	r2, [r3, #0]
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	60da      	str	r2, [r3, #12]
 80198b6:	4a0e      	ldr	r2, [pc, #56]	; (80198f0 <tcp_connect+0x228>)
 80198b8:	68fb      	ldr	r3, [r7, #12]
 80198ba:	6013      	str	r3, [r2, #0]
 80198bc:	f005 fd96 	bl	801f3ec <tcp_timer_needed>
 80198c0:	4b0c      	ldr	r3, [pc, #48]	; (80198f4 <tcp_connect+0x22c>)
 80198c2:	2201      	movs	r2, #1
 80198c4:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80198c6:	68f8      	ldr	r0, [r7, #12]
 80198c8:	f004 fc40 	bl	801e14c <tcp_output>
  }
  return ret;
 80198cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80198d0:	4618      	mov	r0, r3
 80198d2:	3728      	adds	r7, #40	; 0x28
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}
 80198d8:	08026490 	.word	0x08026490
 80198dc:	080267a4 	.word	0x080267a4
 80198e0:	0802650c 	.word	0x0802650c
 80198e4:	080267c0 	.word	0x080267c0
 80198e8:	080267dc 	.word	0x080267dc
 80198ec:	200238e0 	.word	0x200238e0
 80198f0:	200238e8 	.word	0x200238e8
 80198f4:	200238f0 	.word	0x200238f0

080198f8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80198f8:	b5b0      	push	{r4, r5, r7, lr}
 80198fa:	b090      	sub	sp, #64	; 0x40
 80198fc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80198fe:	2300      	movs	r3, #0
 8019900:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8019904:	4b95      	ldr	r3, [pc, #596]	; (8019b5c <tcp_slowtmr+0x264>)
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	3301      	adds	r3, #1
 801990a:	4a94      	ldr	r2, [pc, #592]	; (8019b5c <tcp_slowtmr+0x264>)
 801990c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801990e:	4b94      	ldr	r3, [pc, #592]	; (8019b60 <tcp_slowtmr+0x268>)
 8019910:	781b      	ldrb	r3, [r3, #0]
 8019912:	3301      	adds	r3, #1
 8019914:	b2da      	uxtb	r2, r3
 8019916:	4b92      	ldr	r3, [pc, #584]	; (8019b60 <tcp_slowtmr+0x268>)
 8019918:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801991a:	2300      	movs	r3, #0
 801991c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801991e:	4b91      	ldr	r3, [pc, #580]	; (8019b64 <tcp_slowtmr+0x26c>)
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8019924:	e2bd      	b.n	8019ea2 <tcp_slowtmr+0x5aa>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019928:	7f1b      	ldrb	r3, [r3, #28]
 801992a:	2b00      	cmp	r3, #0
 801992c:	d106      	bne.n	801993c <tcp_slowtmr+0x44>
 801992e:	4b8e      	ldr	r3, [pc, #568]	; (8019b68 <tcp_slowtmr+0x270>)
 8019930:	f240 42be 	movw	r2, #1214	; 0x4be
 8019934:	498d      	ldr	r1, [pc, #564]	; (8019b6c <tcp_slowtmr+0x274>)
 8019936:	488e      	ldr	r0, [pc, #568]	; (8019b70 <tcp_slowtmr+0x278>)
 8019938:	f009 f9fa 	bl	8022d30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801993c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801993e:	7f1b      	ldrb	r3, [r3, #28]
 8019940:	2b01      	cmp	r3, #1
 8019942:	d106      	bne.n	8019952 <tcp_slowtmr+0x5a>
 8019944:	4b88      	ldr	r3, [pc, #544]	; (8019b68 <tcp_slowtmr+0x270>)
 8019946:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801994a:	498a      	ldr	r1, [pc, #552]	; (8019b74 <tcp_slowtmr+0x27c>)
 801994c:	4888      	ldr	r0, [pc, #544]	; (8019b70 <tcp_slowtmr+0x278>)
 801994e:	f009 f9ef 	bl	8022d30 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8019952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019954:	7f1b      	ldrb	r3, [r3, #28]
 8019956:	2b0a      	cmp	r3, #10
 8019958:	d106      	bne.n	8019968 <tcp_slowtmr+0x70>
 801995a:	4b83      	ldr	r3, [pc, #524]	; (8019b68 <tcp_slowtmr+0x270>)
 801995c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019960:	4985      	ldr	r1, [pc, #532]	; (8019b78 <tcp_slowtmr+0x280>)
 8019962:	4883      	ldr	r0, [pc, #524]	; (8019b70 <tcp_slowtmr+0x278>)
 8019964:	f009 f9e4 	bl	8022d30 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801996a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801996e:	4b7c      	ldr	r3, [pc, #496]	; (8019b60 <tcp_slowtmr+0x268>)
 8019970:	781b      	ldrb	r3, [r3, #0]
 8019972:	429a      	cmp	r2, r3
 8019974:	d105      	bne.n	8019982 <tcp_slowtmr+0x8a>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8019976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019978:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801997a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801997c:	68db      	ldr	r3, [r3, #12]
 801997e:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8019980:	e28f      	b.n	8019ea2 <tcp_slowtmr+0x5aa>
    }
    pcb->last_timer = tcp_timer_ctr;
 8019982:	4b77      	ldr	r3, [pc, #476]	; (8019b60 <tcp_slowtmr+0x268>)
 8019984:	781a      	ldrb	r2, [r3, #0]
 8019986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019988:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

    pcb_remove = 0;
 801998c:	2300      	movs	r3, #0
 801998e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8019992:	2300      	movs	r3, #0
 8019994:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801999a:	7f1b      	ldrb	r3, [r3, #28]
 801999c:	2b02      	cmp	r3, #2
 801999e:	d10a      	bne.n	80199b6 <tcp_slowtmr+0xbe>
 80199a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199a2:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80199a6:	2b01      	cmp	r3, #1
 80199a8:	d905      	bls.n	80199b6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80199aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199ae:	3301      	adds	r3, #1
 80199b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80199b4:	e11e      	b.n	8019bf4 <tcp_slowtmr+0x2fc>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80199b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199b8:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80199bc:	2b0b      	cmp	r3, #11
 80199be:	d905      	bls.n	80199cc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80199c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199c4:	3301      	adds	r3, #1
 80199c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80199ca:	e113      	b.n	8019bf4 <tcp_slowtmr+0x2fc>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80199cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ce:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d075      	beq.n	8019ac2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80199d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d006      	beq.n	80199ec <tcp_slowtmr+0xf4>
 80199de:	4b62      	ldr	r3, [pc, #392]	; (8019b68 <tcp_slowtmr+0x270>)
 80199e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80199e4:	4965      	ldr	r1, [pc, #404]	; (8019b7c <tcp_slowtmr+0x284>)
 80199e6:	4862      	ldr	r0, [pc, #392]	; (8019b70 <tcp_slowtmr+0x278>)
 80199e8:	f009 f9a2 	bl	8022d30 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80199ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d106      	bne.n	8019a02 <tcp_slowtmr+0x10a>
 80199f4:	4b5c      	ldr	r3, [pc, #368]	; (8019b68 <tcp_slowtmr+0x270>)
 80199f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80199fa:	4961      	ldr	r1, [pc, #388]	; (8019b80 <tcp_slowtmr+0x288>)
 80199fc:	485c      	ldr	r0, [pc, #368]	; (8019b70 <tcp_slowtmr+0x278>)
 80199fe:	f009 f997 	bl	8022d30 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a04:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8019a08:	2b0b      	cmp	r3, #11
 8019a0a:	d905      	bls.n	8019a18 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8019a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a10:	3301      	adds	r3, #1
 8019a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019a16:	e0ed      	b.n	8019bf4 <tcp_slowtmr+0x2fc>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8019a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a1a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8019a1e:	3b01      	subs	r3, #1
 8019a20:	4a58      	ldr	r2, [pc, #352]	; (8019b84 <tcp_slowtmr+0x28c>)
 8019a22:	5cd3      	ldrb	r3, [r2, r3]
 8019a24:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8019a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a28:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8019a2c:	7c7a      	ldrb	r2, [r7, #17]
 8019a2e:	429a      	cmp	r2, r3
 8019a30:	d907      	bls.n	8019a42 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8019a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a34:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8019a38:	3301      	adds	r3, #1
 8019a3a:	b2da      	uxtb	r2, r3
 8019a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a3e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8019a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a44:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8019a48:	7c7a      	ldrb	r2, [r7, #17]
 8019a4a:	429a      	cmp	r2, r3
 8019a4c:	f200 80d2 	bhi.w	8019bf4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8019a50:	2301      	movs	r3, #1
 8019a52:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8019a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d108      	bne.n	8019a70 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8019a5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019a60:	f005 fa1c 	bl	801ee9c <tcp_zero_window_probe>
 8019a64:	4603      	mov	r3, r0
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d014      	beq.n	8019a94 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8019a6a:	2300      	movs	r3, #0
 8019a6c:	623b      	str	r3, [r7, #32]
 8019a6e:	e011      	b.n	8019a94 <tcp_slowtmr+0x19c>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8019a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019a76:	4619      	mov	r1, r3
 8019a78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019a7a:	f004 f8e1 	bl	801dc40 <tcp_split_unsent_seg>
 8019a7e:	4603      	mov	r3, r0
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d107      	bne.n	8019a94 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8019a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019a86:	f004 fb61 	bl	801e14c <tcp_output>
 8019a8a:	4603      	mov	r3, r0
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d101      	bne.n	8019a94 <tcp_slowtmr+0x19c>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8019a90:	2300      	movs	r3, #0
 8019a92:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8019a94:	6a3b      	ldr	r3, [r7, #32]
 8019a96:	2b00      	cmp	r3, #0
 8019a98:	f000 80ac 	beq.w	8019bf4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8019a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a9e:	2200      	movs	r2, #0
 8019aa0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019aa6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8019aaa:	2b06      	cmp	r3, #6
 8019aac:	f200 80a2 	bhi.w	8019bf4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8019ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ab2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8019ab6:	3301      	adds	r3, #1
 8019ab8:	b2da      	uxtb	r2, r3
 8019aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019abc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8019ac0:	e098      	b.n	8019bf4 <tcp_slowtmr+0x2fc>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ac4:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	db0f      	blt.n	8019aec <tcp_slowtmr+0x1f4>
 8019acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ace:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8019ad2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	d008      	beq.n	8019aec <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8019ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019adc:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8019ae0:	b29b      	uxth	r3, r3
 8019ae2:	3301      	adds	r3, #1
 8019ae4:	b29b      	uxth	r3, r3
 8019ae6:	b21a      	sxth	r2, r3
 8019ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019aea:	871a      	strh	r2, [r3, #56]	; 0x38
        }

        if (pcb->rtime >= pcb->rto) {
 8019aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019aee:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8019af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019af4:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8019af8:	429a      	cmp	r2, r3
 8019afa:	db7b      	blt.n	8019bf4 <tcp_slowtmr+0x2fc>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8019afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019afe:	f004 fe19 	bl	801e734 <tcp_rexmit_rto_prepare>
 8019b02:	4603      	mov	r3, r0
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d007      	beq.n	8019b18 <tcp_slowtmr+0x220>
 8019b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d171      	bne.n	8019bf4 <tcp_slowtmr+0x2fc>
 8019b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d06d      	beq.n	8019bf4 <tcp_slowtmr+0x2fc>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8019b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b1a:	7f1b      	ldrb	r3, [r3, #28]
 8019b1c:	2b02      	cmp	r3, #2
 8019b1e:	d03a      	beq.n	8019b96 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8019b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b22:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8019b26:	2b0c      	cmp	r3, #12
 8019b28:	bf28      	it	cs
 8019b2a:	230c      	movcs	r3, #12
 8019b2c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8019b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b30:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8019b34:	10db      	asrs	r3, r3, #3
 8019b36:	b21b      	sxth	r3, r3
 8019b38:	461a      	mov	r2, r3
 8019b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b3c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8019b40:	4413      	add	r3, r2
 8019b42:	7efa      	ldrb	r2, [r7, #27]
 8019b44:	4910      	ldr	r1, [pc, #64]	; (8019b88 <tcp_slowtmr+0x290>)
 8019b46:	5c8a      	ldrb	r2, [r1, r2]
 8019b48:	4093      	lsls	r3, r2
 8019b4a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019b4c:	697b      	ldr	r3, [r7, #20]
 8019b4e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8019b52:	4293      	cmp	r3, r2
 8019b54:	dc1a      	bgt.n	8019b8c <tcp_slowtmr+0x294>
 8019b56:	697b      	ldr	r3, [r7, #20]
 8019b58:	b21a      	sxth	r2, r3
 8019b5a:	e019      	b.n	8019b90 <tcp_slowtmr+0x298>
 8019b5c:	200238dc 	.word	0x200238dc
 8019b60:	200238f2 	.word	0x200238f2
 8019b64:	200238e8 	.word	0x200238e8
 8019b68:	08026490 	.word	0x08026490
 8019b6c:	0802680c 	.word	0x0802680c
 8019b70:	0802650c 	.word	0x0802650c
 8019b74:	08026838 	.word	0x08026838
 8019b78:	08026864 	.word	0x08026864
 8019b7c:	08026894 	.word	0x08026894
 8019b80:	080268c8 	.word	0x080268c8
 8019b84:	080285ac 	.word	0x080285ac
 8019b88:	0802859c 	.word	0x0802859c
 8019b8c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8019b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b98:	2200      	movs	r2, #0
 8019b9a:	871a      	strh	r2, [r3, #56]	; 0x38

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8019b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019b9e:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8019ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ba4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8019ba8:	4293      	cmp	r3, r2
 8019baa:	bf28      	it	cs
 8019bac:	4613      	movcs	r3, r2
 8019bae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8019bb0:	8a7b      	ldrh	r3, [r7, #18]
 8019bb2:	085b      	lsrs	r3, r3, #1
 8019bb4:	b29a      	uxth	r2, r3
 8019bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8019bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bbe:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8019bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bc4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8019bc6:	005b      	lsls	r3, r3, #1
 8019bc8:	b29b      	uxth	r3, r3
 8019bca:	429a      	cmp	r2, r3
 8019bcc:	d206      	bcs.n	8019bdc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8019bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bd0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8019bd2:	005b      	lsls	r3, r3, #1
 8019bd4:	b29a      	uxth	r2, r3
 8019bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
            }
            pcb->cwnd = pcb->mss;
 8019bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bde:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8019be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019be2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8019be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019be8:	2200      	movs	r2, #0
 8019bea:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8019bee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019bf0:	f004 fe10 	bl	801e814 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8019bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bf6:	7f1b      	ldrb	r3, [r3, #28]
 8019bf8:	2b06      	cmp	r3, #6
 8019bfa:	d111      	bne.n	8019c20 <tcp_slowtmr+0x328>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8019bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019bfe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019c00:	f003 0310 	and.w	r3, r3, #16
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d00b      	beq.n	8019c20 <tcp_slowtmr+0x328>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019c08:	4b9a      	ldr	r3, [pc, #616]	; (8019e74 <tcp_slowtmr+0x57c>)
 8019c0a:	681a      	ldr	r2, [r3, #0]
 8019c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c10:	1ad3      	subs	r3, r2, r3
 8019c12:	2b28      	cmp	r3, #40	; 0x28
 8019c14:	d904      	bls.n	8019c20 <tcp_slowtmr+0x328>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8019c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c1a:	3301      	adds	r3, #1
 8019c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c22:	7a5b      	ldrb	r3, [r3, #9]
 8019c24:	f003 0308 	and.w	r3, r3, #8
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d053      	beq.n	8019cd4 <tcp_slowtmr+0x3dc>
        ((pcb->state == ESTABLISHED) ||
 8019c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c2e:	7f1b      	ldrb	r3, [r3, #28]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019c30:	2b04      	cmp	r3, #4
 8019c32:	d003      	beq.n	8019c3c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8019c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c36:	7f1b      	ldrb	r3, [r3, #28]
        ((pcb->state == ESTABLISHED) ||
 8019c38:	2b07      	cmp	r3, #7
 8019c3a:	d14b      	bne.n	8019cd4 <tcp_slowtmr+0x3dc>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019c3c:	4b8d      	ldr	r3, [pc, #564]	; (8019e74 <tcp_slowtmr+0x57c>)
 8019c3e:	681a      	ldr	r2, [r3, #0]
 8019c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c44:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c48:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8019c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019c52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019c54:	f8d0 00a0 	ldr.w	r0, [r0, #160]	; 0xa0
 8019c58:	fb00 f303 	mul.w	r3, r0, r3
 8019c5c:	440b      	add	r3, r1
 8019c5e:	4986      	ldr	r1, [pc, #536]	; (8019e78 <tcp_slowtmr+0x580>)
 8019c60:	fba1 1303 	umull	r1, r3, r1, r3
 8019c64:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019c66:	429a      	cmp	r2, r3
 8019c68:	d90a      	bls.n	8019c80 <tcp_slowtmr+0x388>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8019c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019c6e:	3301      	adds	r3, #1
 8019c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8019c74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019c78:	3301      	adds	r3, #1
 8019c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019c7e:	e029      	b.n	8019cd4 <tcp_slowtmr+0x3dc>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019c80:	4b7c      	ldr	r3, [pc, #496]	; (8019e74 <tcp_slowtmr+0x57c>)
 8019c82:	681a      	ldr	r2, [r3, #0]
 8019c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c88:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8019c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c8c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8019c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c92:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8019c96:	4618      	mov	r0, r3
 8019c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019c9e:	fb00 f303 	mul.w	r3, r0, r3
 8019ca2:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8019ca4:	4974      	ldr	r1, [pc, #464]	; (8019e78 <tcp_slowtmr+0x580>)
 8019ca6:	fba1 1303 	umull	r1, r3, r1, r3
 8019caa:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019cac:	429a      	cmp	r2, r3
 8019cae:	d911      	bls.n	8019cd4 <tcp_slowtmr+0x3dc>
        err = tcp_keepalive(pcb);
 8019cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019cb2:	f005 f8b3 	bl	801ee1c <tcp_keepalive>
 8019cb6:	4603      	mov	r3, r0
 8019cb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8019cbc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d107      	bne.n	8019cd4 <tcp_slowtmr+0x3dc>
          pcb->keep_cnt_sent++;
 8019cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cc6:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8019cca:	3301      	adds	r3, #1
 8019ccc:	b2da      	uxtb	r2, r3
 8019cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cd0:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8019cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d011      	beq.n	8019d00 <tcp_slowtmr+0x408>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8019cdc:	4b65      	ldr	r3, [pc, #404]	; (8019e74 <tcp_slowtmr+0x57c>)
 8019cde:	681a      	ldr	r2, [r3, #0]
 8019ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ce4:	1ad2      	subs	r2, r2, r3
 8019ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ce8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8019cec:	4619      	mov	r1, r3
 8019cee:	460b      	mov	r3, r1
 8019cf0:	005b      	lsls	r3, r3, #1
 8019cf2:	440b      	add	r3, r1
 8019cf4:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8019cf6:	429a      	cmp	r2, r3
 8019cf8:	d302      	bcc.n	8019d00 <tcp_slowtmr+0x408>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8019cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019cfc:	f000 fec0 	bl	801aa80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8019d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d02:	7f1b      	ldrb	r3, [r3, #28]
 8019d04:	2b03      	cmp	r3, #3
 8019d06:	d10b      	bne.n	8019d20 <tcp_slowtmr+0x428>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019d08:	4b5a      	ldr	r3, [pc, #360]	; (8019e74 <tcp_slowtmr+0x57c>)
 8019d0a:	681a      	ldr	r2, [r3, #0]
 8019d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d10:	1ad3      	subs	r3, r2, r3
 8019d12:	2b28      	cmp	r3, #40	; 0x28
 8019d14:	d904      	bls.n	8019d20 <tcp_slowtmr+0x428>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8019d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d1a:	3301      	adds	r3, #1
 8019d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8019d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d22:	7f1b      	ldrb	r3, [r3, #28]
 8019d24:	2b09      	cmp	r3, #9
 8019d26:	d10b      	bne.n	8019d40 <tcp_slowtmr+0x448>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019d28:	4b52      	ldr	r3, [pc, #328]	; (8019e74 <tcp_slowtmr+0x57c>)
 8019d2a:	681a      	ldr	r2, [r3, #0]
 8019d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d30:	1ad3      	subs	r3, r2, r3
 8019d32:	2bf0      	cmp	r3, #240	; 0xf0
 8019d34:	d904      	bls.n	8019d40 <tcp_slowtmr+0x448>
        ++pcb_remove;
 8019d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d3a:	3301      	adds	r3, #1
 8019d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8019d40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d060      	beq.n	8019e0a <tcp_slowtmr+0x512>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8019d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019d4e:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8019d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d52:	f000 fcdd 	bl	801a710 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8019d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d010      	beq.n	8019d7e <tcp_slowtmr+0x486>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019d5c:	4b47      	ldr	r3, [pc, #284]	; (8019e7c <tcp_slowtmr+0x584>)
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d62:	429a      	cmp	r2, r3
 8019d64:	d106      	bne.n	8019d74 <tcp_slowtmr+0x47c>
 8019d66:	4b46      	ldr	r3, [pc, #280]	; (8019e80 <tcp_slowtmr+0x588>)
 8019d68:	f240 526d 	movw	r2, #1389	; 0x56d
 8019d6c:	4945      	ldr	r1, [pc, #276]	; (8019e84 <tcp_slowtmr+0x58c>)
 8019d6e:	4846      	ldr	r0, [pc, #280]	; (8019e88 <tcp_slowtmr+0x590>)
 8019d70:	f008 ffde 	bl	8022d30 <iprintf>
        prev->next = pcb->next;
 8019d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d76:	68da      	ldr	r2, [r3, #12]
 8019d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d7a:	60da      	str	r2, [r3, #12]
 8019d7c:	e00f      	b.n	8019d9e <tcp_slowtmr+0x4a6>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8019d7e:	4b3f      	ldr	r3, [pc, #252]	; (8019e7c <tcp_slowtmr+0x584>)
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019d84:	429a      	cmp	r2, r3
 8019d86:	d006      	beq.n	8019d96 <tcp_slowtmr+0x49e>
 8019d88:	4b3d      	ldr	r3, [pc, #244]	; (8019e80 <tcp_slowtmr+0x588>)
 8019d8a:	f240 5271 	movw	r2, #1393	; 0x571
 8019d8e:	493f      	ldr	r1, [pc, #252]	; (8019e8c <tcp_slowtmr+0x594>)
 8019d90:	483d      	ldr	r0, [pc, #244]	; (8019e88 <tcp_slowtmr+0x590>)
 8019d92:	f008 ffcd 	bl	8022d30 <iprintf>
        tcp_active_pcbs = pcb->next;
 8019d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d98:	68db      	ldr	r3, [r3, #12]
 8019d9a:	4a38      	ldr	r2, [pc, #224]	; (8019e7c <tcp_slowtmr+0x584>)
 8019d9c:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8019d9e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019da2:	2b00      	cmp	r3, #0
 8019da4:	d013      	beq.n	8019dce <tcp_slowtmr+0x4d6>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8019da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019da8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8019daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dac:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8019dae:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8019db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019db2:	3304      	adds	r3, #4
 8019db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019db6:	8bd2      	ldrh	r2, [r2, #30]
 8019db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019dba:	8c09      	ldrh	r1, [r1, #32]
 8019dbc:	9102      	str	r1, [sp, #8]
 8019dbe:	9201      	str	r2, [sp, #4]
 8019dc0:	9300      	str	r3, [sp, #0]
 8019dc2:	462b      	mov	r3, r5
 8019dc4:	4622      	mov	r2, r4
 8019dc6:	4601      	mov	r1, r0
 8019dc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019dca:	f004 ff73 	bl	801ecb4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8019dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd0:	691b      	ldr	r3, [r3, #16]
 8019dd2:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8019dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd6:	7f1b      	ldrb	r3, [r3, #28]
 8019dd8:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8019dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ddc:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8019dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de0:	68db      	ldr	r3, [r3, #12]
 8019de2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8019de4:	6838      	ldr	r0, [r7, #0]
 8019de6:	f7fe ff87 	bl	8018cf8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8019dea:	4b29      	ldr	r3, [pc, #164]	; (8019e90 <tcp_slowtmr+0x598>)
 8019dec:	2200      	movs	r2, #0
 8019dee:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d004      	beq.n	8019e00 <tcp_slowtmr+0x508>
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	f06f 010c 	mvn.w	r1, #12
 8019dfc:	68b8      	ldr	r0, [r7, #8]
 8019dfe:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8019e00:	4b23      	ldr	r3, [pc, #140]	; (8019e90 <tcp_slowtmr+0x598>)
 8019e02:	781b      	ldrb	r3, [r3, #0]
 8019e04:	2b00      	cmp	r3, #0
 8019e06:	d04c      	beq.n	8019ea2 <tcp_slowtmr+0x5aa>
        goto tcp_slowtmr_start;
 8019e08:	e587      	b.n	801991a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8019e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e10:	68db      	ldr	r3, [r3, #12]
 8019e12:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8019e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019e1a:	3301      	adds	r3, #1
 8019e1c:	b2da      	uxtb	r2, r3
 8019e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      if (prev->polltmr >= prev->pollinterval) {
 8019e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e26:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8019e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019e30:	429a      	cmp	r2, r3
 8019e32:	d336      	bcc.n	8019ea2 <tcp_slowtmr+0x5aa>
        prev->polltmr = 0;
 8019e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e36:	2200      	movs	r2, #0
 8019e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8019e3c:	4b14      	ldr	r3, [pc, #80]	; (8019e90 <tcp_slowtmr+0x598>)
 8019e3e:	2200      	movs	r2, #0
 8019e40:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8019e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d00b      	beq.n	8019e64 <tcp_slowtmr+0x56c>
 8019e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8019e52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e54:	6912      	ldr	r2, [r2, #16]
 8019e56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019e58:	4610      	mov	r0, r2
 8019e5a:	4798      	blx	r3
 8019e5c:	4603      	mov	r3, r0
 8019e5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8019e62:	e002      	b.n	8019e6a <tcp_slowtmr+0x572>
 8019e64:	2300      	movs	r3, #0
 8019e66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8019e6a:	4b09      	ldr	r3, [pc, #36]	; (8019e90 <tcp_slowtmr+0x598>)
 8019e6c:	781b      	ldrb	r3, [r3, #0]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d010      	beq.n	8019e94 <tcp_slowtmr+0x59c>
          goto tcp_slowtmr_start;
 8019e72:	e552      	b.n	801991a <tcp_slowtmr+0x22>
 8019e74:	200238dc 	.word	0x200238dc
 8019e78:	10624dd3 	.word	0x10624dd3
 8019e7c:	200238e8 	.word	0x200238e8
 8019e80:	08026490 	.word	0x08026490
 8019e84:	08026900 	.word	0x08026900
 8019e88:	0802650c 	.word	0x0802650c
 8019e8c:	0802692c 	.word	0x0802692c
 8019e90:	200238f0 	.word	0x200238f0
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8019e94:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	d102      	bne.n	8019ea2 <tcp_slowtmr+0x5aa>
          tcp_output(prev);
 8019e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019e9e:	f004 f955 	bl	801e14c <tcp_output>
  while (pcb != NULL) {
 8019ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	f47f ad3e 	bne.w	8019926 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8019eaa:	2300      	movs	r3, #0
 8019eac:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8019eae:	4b2f      	ldr	r3, [pc, #188]	; (8019f6c <tcp_slowtmr+0x674>)
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019eb4:	e052      	b.n	8019f5c <tcp_slowtmr+0x664>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eb8:	7f1b      	ldrb	r3, [r3, #28]
 8019eba:	2b0a      	cmp	r3, #10
 8019ebc:	d006      	beq.n	8019ecc <tcp_slowtmr+0x5d4>
 8019ebe:	4b2c      	ldr	r3, [pc, #176]	; (8019f70 <tcp_slowtmr+0x678>)
 8019ec0:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8019ec4:	492b      	ldr	r1, [pc, #172]	; (8019f74 <tcp_slowtmr+0x67c>)
 8019ec6:	482c      	ldr	r0, [pc, #176]	; (8019f78 <tcp_slowtmr+0x680>)
 8019ec8:	f008 ff32 	bl	8022d30 <iprintf>
    pcb_remove = 0;
 8019ecc:	2300      	movs	r3, #0
 8019ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019ed2:	4b2a      	ldr	r3, [pc, #168]	; (8019f7c <tcp_slowtmr+0x684>)
 8019ed4:	681a      	ldr	r2, [r3, #0]
 8019ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019eda:	1ad3      	subs	r3, r2, r3
 8019edc:	2bf0      	cmp	r3, #240	; 0xf0
 8019ede:	d904      	bls.n	8019eea <tcp_slowtmr+0x5f2>
      ++pcb_remove;
 8019ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ee4:	3301      	adds	r3, #1
 8019ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8019eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	d02f      	beq.n	8019f52 <tcp_slowtmr+0x65a>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8019ef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019ef4:	f000 fc0c 	bl	801a710 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8019ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d010      	beq.n	8019f20 <tcp_slowtmr+0x628>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019efe:	4b1b      	ldr	r3, [pc, #108]	; (8019f6c <tcp_slowtmr+0x674>)
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d106      	bne.n	8019f16 <tcp_slowtmr+0x61e>
 8019f08:	4b19      	ldr	r3, [pc, #100]	; (8019f70 <tcp_slowtmr+0x678>)
 8019f0a:	f240 52af 	movw	r2, #1455	; 0x5af
 8019f0e:	491c      	ldr	r1, [pc, #112]	; (8019f80 <tcp_slowtmr+0x688>)
 8019f10:	4819      	ldr	r0, [pc, #100]	; (8019f78 <tcp_slowtmr+0x680>)
 8019f12:	f008 ff0d 	bl	8022d30 <iprintf>
        prev->next = pcb->next;
 8019f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f18:	68da      	ldr	r2, [r3, #12]
 8019f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f1c:	60da      	str	r2, [r3, #12]
 8019f1e:	e00f      	b.n	8019f40 <tcp_slowtmr+0x648>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8019f20:	4b12      	ldr	r3, [pc, #72]	; (8019f6c <tcp_slowtmr+0x674>)
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019f26:	429a      	cmp	r2, r3
 8019f28:	d006      	beq.n	8019f38 <tcp_slowtmr+0x640>
 8019f2a:	4b11      	ldr	r3, [pc, #68]	; (8019f70 <tcp_slowtmr+0x678>)
 8019f2c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8019f30:	4914      	ldr	r1, [pc, #80]	; (8019f84 <tcp_slowtmr+0x68c>)
 8019f32:	4811      	ldr	r0, [pc, #68]	; (8019f78 <tcp_slowtmr+0x680>)
 8019f34:	f008 fefc 	bl	8022d30 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8019f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f3a:	68db      	ldr	r3, [r3, #12]
 8019f3c:	4a0b      	ldr	r2, [pc, #44]	; (8019f6c <tcp_slowtmr+0x674>)
 8019f3e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8019f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f42:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8019f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f46:	68db      	ldr	r3, [r3, #12]
 8019f48:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8019f4a:	69f8      	ldr	r0, [r7, #28]
 8019f4c:	f7fe fed4 	bl	8018cf8 <tcp_free>
 8019f50:	e004      	b.n	8019f5c <tcp_slowtmr+0x664>
    } else {
      prev = pcb;
 8019f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f54:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f58:	68db      	ldr	r3, [r3, #12]
 8019f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8019f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f5e:	2b00      	cmp	r3, #0
 8019f60:	d1a9      	bne.n	8019eb6 <tcp_slowtmr+0x5be>
    }
  }
}
 8019f62:	bf00      	nop
 8019f64:	bf00      	nop
 8019f66:	3730      	adds	r7, #48	; 0x30
 8019f68:	46bd      	mov	sp, r7
 8019f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8019f6c:	200238ec 	.word	0x200238ec
 8019f70:	08026490 	.word	0x08026490
 8019f74:	08026958 	.word	0x08026958
 8019f78:	0802650c 	.word	0x0802650c
 8019f7c:	200238dc 	.word	0x200238dc
 8019f80:	08026988 	.word	0x08026988
 8019f84:	080269b0 	.word	0x080269b0

08019f88 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b082      	sub	sp, #8
 8019f8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8019f8e:	4b2f      	ldr	r3, [pc, #188]	; (801a04c <tcp_fasttmr+0xc4>)
 8019f90:	781b      	ldrb	r3, [r3, #0]
 8019f92:	3301      	adds	r3, #1
 8019f94:	b2da      	uxtb	r2, r3
 8019f96:	4b2d      	ldr	r3, [pc, #180]	; (801a04c <tcp_fasttmr+0xc4>)
 8019f98:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8019f9a:	4b2d      	ldr	r3, [pc, #180]	; (801a050 <tcp_fasttmr+0xc8>)
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019fa0:	e04b      	b.n	801a03a <tcp_fasttmr+0xb2>
    if (pcb->last_timer != tcp_timer_ctr) {
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8019fa8:	4b28      	ldr	r3, [pc, #160]	; (801a04c <tcp_fasttmr+0xc4>)
 8019faa:	781b      	ldrb	r3, [r3, #0]
 8019fac:	429a      	cmp	r2, r3
 8019fae:	d041      	beq.n	801a034 <tcp_fasttmr+0xac>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8019fb0:	4b26      	ldr	r3, [pc, #152]	; (801a04c <tcp_fasttmr+0xc4>)
 8019fb2:	781a      	ldrb	r2, [r3, #0]
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019fbe:	f003 0301 	and.w	r3, r3, #1
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d010      	beq.n	8019fe8 <tcp_fasttmr+0x60>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019fca:	f043 0302 	orr.w	r3, r3, #2
 8019fce:	b29a      	uxth	r2, r3
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	845a      	strh	r2, [r3, #34]	; 0x22
        tcp_output(pcb);
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	f004 f8b9 	bl	801e14c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019fde:	f023 0303 	bic.w	r3, r3, #3
 8019fe2:	b29a      	uxth	r2, r3
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	845a      	strh	r2, [r3, #34]	; 0x22
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019fec:	f003 0308 	and.w	r3, r3, #8
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	d009      	beq.n	801a008 <tcp_fasttmr+0x80>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8019ff8:	f023 0308 	bic.w	r3, r3, #8
 8019ffc:	b29a      	uxth	r2, r3
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	845a      	strh	r2, [r3, #34]	; 0x22
        tcp_close_shutdown_fin(pcb);
 801a002:	6878      	ldr	r0, [r7, #4]
 801a004:	f7ff f81a 	bl	801903c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	68db      	ldr	r3, [r3, #12]
 801a00c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a014:	2b00      	cmp	r3, #0
 801a016:	d00a      	beq.n	801a02e <tcp_fasttmr+0xa6>
        tcp_active_pcbs_changed = 0;
 801a018:	4b0e      	ldr	r3, [pc, #56]	; (801a054 <tcp_fasttmr+0xcc>)
 801a01a:	2200      	movs	r2, #0
 801a01c:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a01e:	6878      	ldr	r0, [r7, #4]
 801a020:	f000 f81a 	bl	801a058 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a024:	4b0b      	ldr	r3, [pc, #44]	; (801a054 <tcp_fasttmr+0xcc>)
 801a026:	781b      	ldrb	r3, [r3, #0]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d000      	beq.n	801a02e <tcp_fasttmr+0xa6>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a02c:	e7b5      	b.n	8019f9a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	607b      	str	r3, [r7, #4]
 801a032:	e002      	b.n	801a03a <tcp_fasttmr+0xb2>
    } else {
      pcb = pcb->next;
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	68db      	ldr	r3, [r3, #12]
 801a038:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d1b0      	bne.n	8019fa2 <tcp_fasttmr+0x1a>
    }
  }
}
 801a040:	bf00      	nop
 801a042:	bf00      	nop
 801a044:	3708      	adds	r7, #8
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}
 801a04a:	bf00      	nop
 801a04c:	200238f2 	.word	0x200238f2
 801a050:	200238e8 	.word	0x200238e8
 801a054:	200238f0 	.word	0x200238f0

0801a058 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801a058:	b590      	push	{r4, r7, lr}
 801a05a:	b085      	sub	sp, #20
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d109      	bne.n	801a07a <tcp_process_refused_data+0x22>
 801a066:	4b39      	ldr	r3, [pc, #228]	; (801a14c <tcp_process_refused_data+0xf4>)
 801a068:	f240 6209 	movw	r2, #1545	; 0x609
 801a06c:	4938      	ldr	r1, [pc, #224]	; (801a150 <tcp_process_refused_data+0xf8>)
 801a06e:	4839      	ldr	r0, [pc, #228]	; (801a154 <tcp_process_refused_data+0xfc>)
 801a070:	f008 fe5e 	bl	8022d30 <iprintf>
 801a074:	f06f 030f 	mvn.w	r3, #15
 801a078:	e064      	b.n	801a144 <tcp_process_refused_data+0xec>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a080:	7b5b      	ldrb	r3, [r3, #13]
 801a082:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a08a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	2200      	movs	r2, #0
 801a090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d00b      	beq.n	801a0b6 <tcp_process_refused_data+0x5e>
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	6918      	ldr	r0, [r3, #16]
 801a0a8:	2300      	movs	r3, #0
 801a0aa:	68ba      	ldr	r2, [r7, #8]
 801a0ac:	6879      	ldr	r1, [r7, #4]
 801a0ae:	47a0      	blx	r4
 801a0b0:	4603      	mov	r3, r0
 801a0b2:	73fb      	strb	r3, [r7, #15]
 801a0b4:	e007      	b.n	801a0c6 <tcp_process_refused_data+0x6e>
 801a0b6:	2300      	movs	r3, #0
 801a0b8:	68ba      	ldr	r2, [r7, #8]
 801a0ba:	6879      	ldr	r1, [r7, #4]
 801a0bc:	2000      	movs	r0, #0
 801a0be:	f000 f8a5 	bl	801a20c <tcp_recv_null>
 801a0c2:	4603      	mov	r3, r0
 801a0c4:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801a0c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0ca:	2b00      	cmp	r3, #0
 801a0cc:	d12a      	bne.n	801a124 <tcp_process_refused_data+0xcc>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a0ce:	7bbb      	ldrb	r3, [r7, #14]
 801a0d0:	f003 0320 	and.w	r3, r3, #32
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d034      	beq.n	801a142 <tcp_process_refused_data+0xea>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a0dc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a0e0:	d005      	beq.n	801a0ee <tcp_process_refused_data+0x96>
          pcb->rcv_wnd++;
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801a0e6:	3301      	adds	r3, #1
 801a0e8:	b29a      	uxth	r2, r3
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	861a      	strh	r2, [r3, #48]	; 0x30
        }
        TCP_EVENT_CLOSED(pcb, err);
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d00b      	beq.n	801a110 <tcp_process_refused_data+0xb8>
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	6918      	ldr	r0, [r3, #16]
 801a102:	2300      	movs	r3, #0
 801a104:	2200      	movs	r2, #0
 801a106:	6879      	ldr	r1, [r7, #4]
 801a108:	47a0      	blx	r4
 801a10a:	4603      	mov	r3, r0
 801a10c:	73fb      	strb	r3, [r7, #15]
 801a10e:	e001      	b.n	801a114 <tcp_process_refused_data+0xbc>
 801a110:	2300      	movs	r3, #0
 801a112:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801a114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a118:	f113 0f0d 	cmn.w	r3, #13
 801a11c:	d111      	bne.n	801a142 <tcp_process_refused_data+0xea>
          return ERR_ABRT;
 801a11e:	f06f 030c 	mvn.w	r3, #12
 801a122:	e00f      	b.n	801a144 <tcp_process_refused_data+0xec>
        }
      }
    } else if (err == ERR_ABRT) {
 801a124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a128:	f113 0f0d 	cmn.w	r3, #13
 801a12c:	d102      	bne.n	801a134 <tcp_process_refused_data+0xdc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801a12e:	f06f 030c 	mvn.w	r3, #12
 801a132:	e007      	b.n	801a144 <tcp_process_refused_data+0xec>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	68ba      	ldr	r2, [r7, #8]
 801a138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      return ERR_INPROGRESS;
 801a13c:	f06f 0304 	mvn.w	r3, #4
 801a140:	e000      	b.n	801a144 <tcp_process_refused_data+0xec>
    }
  }
  return ERR_OK;
 801a142:	2300      	movs	r3, #0
}
 801a144:	4618      	mov	r0, r3
 801a146:	3714      	adds	r7, #20
 801a148:	46bd      	mov	sp, r7
 801a14a:	bd90      	pop	{r4, r7, pc}
 801a14c:	08026490 	.word	0x08026490
 801a150:	080269d8 	.word	0x080269d8
 801a154:	0802650c 	.word	0x0802650c

0801a158 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801a158:	b580      	push	{r7, lr}
 801a15a:	b084      	sub	sp, #16
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801a160:	e007      	b.n	801a172 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	681b      	ldr	r3, [r3, #0]
 801a166:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801a168:	6878      	ldr	r0, [r7, #4]
 801a16a:	f000 f80a 	bl	801a182 <tcp_seg_free>
    seg = next;
 801a16e:	68fb      	ldr	r3, [r7, #12]
 801a170:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d1f4      	bne.n	801a162 <tcp_segs_free+0xa>
  }
}
 801a178:	bf00      	nop
 801a17a:	bf00      	nop
 801a17c:	3710      	adds	r7, #16
 801a17e:	46bd      	mov	sp, r7
 801a180:	bd80      	pop	{r7, pc}

0801a182 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801a182:	b580      	push	{r7, lr}
 801a184:	b082      	sub	sp, #8
 801a186:	af00      	add	r7, sp, #0
 801a188:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	2b00      	cmp	r3, #0
 801a18e:	d00c      	beq.n	801a1aa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	685b      	ldr	r3, [r3, #4]
 801a194:	2b00      	cmp	r3, #0
 801a196:	d004      	beq.n	801a1a2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	685b      	ldr	r3, [r3, #4]
 801a19c:	4618      	mov	r0, r3
 801a19e:	f7fe f949 	bl	8018434 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801a1a2:	6879      	ldr	r1, [r7, #4]
 801a1a4:	2003      	movs	r0, #3
 801a1a6:	f7fd fa51 	bl	801764c <memp_free>
  }
}
 801a1aa:	bf00      	nop
 801a1ac:	3708      	adds	r7, #8
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}
	...

0801a1b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b084      	sub	sp, #16
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d106      	bne.n	801a1d0 <tcp_seg_copy+0x1c>
 801a1c2:	4b0f      	ldr	r3, [pc, #60]	; (801a200 <tcp_seg_copy+0x4c>)
 801a1c4:	f240 6282 	movw	r2, #1666	; 0x682
 801a1c8:	490e      	ldr	r1, [pc, #56]	; (801a204 <tcp_seg_copy+0x50>)
 801a1ca:	480f      	ldr	r0, [pc, #60]	; (801a208 <tcp_seg_copy+0x54>)
 801a1cc:	f008 fdb0 	bl	8022d30 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801a1d0:	2003      	movs	r0, #3
 801a1d2:	f7fd f9c5 	bl	8017560 <memp_malloc>
 801a1d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801a1d8:	68fb      	ldr	r3, [r7, #12]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d101      	bne.n	801a1e2 <tcp_seg_copy+0x2e>
    return NULL;
 801a1de:	2300      	movs	r3, #0
 801a1e0:	e00a      	b.n	801a1f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801a1e2:	2210      	movs	r2, #16
 801a1e4:	6879      	ldr	r1, [r7, #4]
 801a1e6:	68f8      	ldr	r0, [r7, #12]
 801a1e8:	f008 ff92 	bl	8023110 <memcpy>
  pbuf_ref(cseg->p);
 801a1ec:	68fb      	ldr	r3, [r7, #12]
 801a1ee:	685b      	ldr	r3, [r3, #4]
 801a1f0:	4618      	mov	r0, r3
 801a1f2:	f7fe f9c5 	bl	8018580 <pbuf_ref>
  return cseg;
 801a1f6:	68fb      	ldr	r3, [r7, #12]
}
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	3710      	adds	r7, #16
 801a1fc:	46bd      	mov	sp, r7
 801a1fe:	bd80      	pop	{r7, pc}
 801a200:	08026490 	.word	0x08026490
 801a204:	08026a1c 	.word	0x08026a1c
 801a208:	0802650c 	.word	0x0802650c

0801a20c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801a20c:	b580      	push	{r7, lr}
 801a20e:	b084      	sub	sp, #16
 801a210:	af00      	add	r7, sp, #0
 801a212:	60f8      	str	r0, [r7, #12]
 801a214:	60b9      	str	r1, [r7, #8]
 801a216:	607a      	str	r2, [r7, #4]
 801a218:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801a21a:	68bb      	ldr	r3, [r7, #8]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d109      	bne.n	801a234 <tcp_recv_null+0x28>
 801a220:	4b12      	ldr	r3, [pc, #72]	; (801a26c <tcp_recv_null+0x60>)
 801a222:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a226:	4912      	ldr	r1, [pc, #72]	; (801a270 <tcp_recv_null+0x64>)
 801a228:	4812      	ldr	r0, [pc, #72]	; (801a274 <tcp_recv_null+0x68>)
 801a22a:	f008 fd81 	bl	8022d30 <iprintf>
 801a22e:	f06f 030f 	mvn.w	r3, #15
 801a232:	e016      	b.n	801a262 <tcp_recv_null+0x56>

  if (p != NULL) {
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d009      	beq.n	801a24e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	891b      	ldrh	r3, [r3, #8]
 801a23e:	4619      	mov	r1, r3
 801a240:	68b8      	ldr	r0, [r7, #8]
 801a242:	f7ff f9ab 	bl	801959c <tcp_recved>
    pbuf_free(p);
 801a246:	6878      	ldr	r0, [r7, #4]
 801a248:	f7fe f8f4 	bl	8018434 <pbuf_free>
 801a24c:	e008      	b.n	801a260 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801a24e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a252:	2b00      	cmp	r3, #0
 801a254:	d104      	bne.n	801a260 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801a256:	68b8      	ldr	r0, [r7, #8]
 801a258:	f7fe ff5a 	bl	8019110 <tcp_close>
 801a25c:	4603      	mov	r3, r0
 801a25e:	e000      	b.n	801a262 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801a260:	2300      	movs	r3, #0
}
 801a262:	4618      	mov	r0, r3
 801a264:	3710      	adds	r7, #16
 801a266:	46bd      	mov	sp, r7
 801a268:	bd80      	pop	{r7, pc}
 801a26a:	bf00      	nop
 801a26c:	08026490 	.word	0x08026490
 801a270:	08026a38 	.word	0x08026a38
 801a274:	0802650c 	.word	0x0802650c

0801a278 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	b086      	sub	sp, #24
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	4603      	mov	r3, r0
 801a280:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801a282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a286:	2b00      	cmp	r3, #0
 801a288:	db01      	blt.n	801a28e <tcp_kill_prio+0x16>
 801a28a:	79fb      	ldrb	r3, [r7, #7]
 801a28c:	e000      	b.n	801a290 <tcp_kill_prio+0x18>
 801a28e:	237f      	movs	r3, #127	; 0x7f
 801a290:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801a292:	7afb      	ldrb	r3, [r7, #11]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d034      	beq.n	801a302 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801a298:	7afb      	ldrb	r3, [r7, #11]
 801a29a:	3b01      	subs	r3, #1
 801a29c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801a29e:	2300      	movs	r3, #0
 801a2a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a2a2:	2300      	movs	r3, #0
 801a2a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a2a6:	4b19      	ldr	r3, [pc, #100]	; (801a30c <tcp_kill_prio+0x94>)
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	617b      	str	r3, [r7, #20]
 801a2ac:	e01f      	b.n	801a2ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801a2ae:	697b      	ldr	r3, [r7, #20]
 801a2b0:	7f5b      	ldrb	r3, [r3, #29]
 801a2b2:	7afa      	ldrb	r2, [r7, #11]
 801a2b4:	429a      	cmp	r2, r3
 801a2b6:	d80c      	bhi.n	801a2d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a2b8:	697b      	ldr	r3, [r7, #20]
 801a2ba:	7f5b      	ldrb	r3, [r3, #29]
    if ((pcb->prio < mprio) ||
 801a2bc:	7afa      	ldrb	r2, [r7, #11]
 801a2be:	429a      	cmp	r2, r3
 801a2c0:	d112      	bne.n	801a2e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a2c2:	4b13      	ldr	r3, [pc, #76]	; (801a310 <tcp_kill_prio+0x98>)
 801a2c4:	681a      	ldr	r2, [r3, #0]
 801a2c6:	697b      	ldr	r3, [r7, #20]
 801a2c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2ca:	1ad3      	subs	r3, r2, r3
 801a2cc:	68fa      	ldr	r2, [r7, #12]
 801a2ce:	429a      	cmp	r2, r3
 801a2d0:	d80a      	bhi.n	801a2e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801a2d2:	4b0f      	ldr	r3, [pc, #60]	; (801a310 <tcp_kill_prio+0x98>)
 801a2d4:	681a      	ldr	r2, [r3, #0]
 801a2d6:	697b      	ldr	r3, [r7, #20]
 801a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2da:	1ad3      	subs	r3, r2, r3
 801a2dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801a2de:	697b      	ldr	r3, [r7, #20]
 801a2e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801a2e2:	697b      	ldr	r3, [r7, #20]
 801a2e4:	7f5b      	ldrb	r3, [r3, #29]
 801a2e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a2e8:	697b      	ldr	r3, [r7, #20]
 801a2ea:	68db      	ldr	r3, [r3, #12]
 801a2ec:	617b      	str	r3, [r7, #20]
 801a2ee:	697b      	ldr	r3, [r7, #20]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d1dc      	bne.n	801a2ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801a2f4:	693b      	ldr	r3, [r7, #16]
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	d004      	beq.n	801a304 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a2fa:	6938      	ldr	r0, [r7, #16]
 801a2fc:	f7ff f850 	bl	80193a0 <tcp_abort>
 801a300:	e000      	b.n	801a304 <tcp_kill_prio+0x8c>
    return;
 801a302:	bf00      	nop
  }
}
 801a304:	3718      	adds	r7, #24
 801a306:	46bd      	mov	sp, r7
 801a308:	bd80      	pop	{r7, pc}
 801a30a:	bf00      	nop
 801a30c:	200238e8 	.word	0x200238e8
 801a310:	200238dc 	.word	0x200238dc

0801a314 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801a314:	b580      	push	{r7, lr}
 801a316:	b086      	sub	sp, #24
 801a318:	af00      	add	r7, sp, #0
 801a31a:	4603      	mov	r3, r0
 801a31c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801a31e:	79fb      	ldrb	r3, [r7, #7]
 801a320:	2b08      	cmp	r3, #8
 801a322:	d009      	beq.n	801a338 <tcp_kill_state+0x24>
 801a324:	79fb      	ldrb	r3, [r7, #7]
 801a326:	2b09      	cmp	r3, #9
 801a328:	d006      	beq.n	801a338 <tcp_kill_state+0x24>
 801a32a:	4b1a      	ldr	r3, [pc, #104]	; (801a394 <tcp_kill_state+0x80>)
 801a32c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801a330:	4919      	ldr	r1, [pc, #100]	; (801a398 <tcp_kill_state+0x84>)
 801a332:	481a      	ldr	r0, [pc, #104]	; (801a39c <tcp_kill_state+0x88>)
 801a334:	f008 fcfc 	bl	8022d30 <iprintf>

  inactivity = 0;
 801a338:	2300      	movs	r3, #0
 801a33a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a33c:	2300      	movs	r3, #0
 801a33e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a340:	4b17      	ldr	r3, [pc, #92]	; (801a3a0 <tcp_kill_state+0x8c>)
 801a342:	681b      	ldr	r3, [r3, #0]
 801a344:	617b      	str	r3, [r7, #20]
 801a346:	e017      	b.n	801a378 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801a348:	697b      	ldr	r3, [r7, #20]
 801a34a:	7f1b      	ldrb	r3, [r3, #28]
 801a34c:	79fa      	ldrb	r2, [r7, #7]
 801a34e:	429a      	cmp	r2, r3
 801a350:	d10f      	bne.n	801a372 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a352:	4b14      	ldr	r3, [pc, #80]	; (801a3a4 <tcp_kill_state+0x90>)
 801a354:	681a      	ldr	r2, [r3, #0]
 801a356:	697b      	ldr	r3, [r7, #20]
 801a358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a35a:	1ad3      	subs	r3, r2, r3
 801a35c:	68fa      	ldr	r2, [r7, #12]
 801a35e:	429a      	cmp	r2, r3
 801a360:	d807      	bhi.n	801a372 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801a362:	4b10      	ldr	r3, [pc, #64]	; (801a3a4 <tcp_kill_state+0x90>)
 801a364:	681a      	ldr	r2, [r3, #0]
 801a366:	697b      	ldr	r3, [r7, #20]
 801a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a36a:	1ad3      	subs	r3, r2, r3
 801a36c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801a36e:	697b      	ldr	r3, [r7, #20]
 801a370:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a372:	697b      	ldr	r3, [r7, #20]
 801a374:	68db      	ldr	r3, [r3, #12]
 801a376:	617b      	str	r3, [r7, #20]
 801a378:	697b      	ldr	r3, [r7, #20]
 801a37a:	2b00      	cmp	r3, #0
 801a37c:	d1e4      	bne.n	801a348 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801a37e:	693b      	ldr	r3, [r7, #16]
 801a380:	2b00      	cmp	r3, #0
 801a382:	d003      	beq.n	801a38c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801a384:	2100      	movs	r1, #0
 801a386:	6938      	ldr	r0, [r7, #16]
 801a388:	f7fe ff4c 	bl	8019224 <tcp_abandon>
  }
}
 801a38c:	bf00      	nop
 801a38e:	3718      	adds	r7, #24
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}
 801a394:	08026490 	.word	0x08026490
 801a398:	08026a54 	.word	0x08026a54
 801a39c:	0802650c 	.word	0x0802650c
 801a3a0:	200238e8 	.word	0x200238e8
 801a3a4:	200238dc 	.word	0x200238dc

0801a3a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b084      	sub	sp, #16
 801a3ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801a3b2:	2300      	movs	r3, #0
 801a3b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a3b6:	4b12      	ldr	r3, [pc, #72]	; (801a400 <tcp_kill_timewait+0x58>)
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	60fb      	str	r3, [r7, #12]
 801a3bc:	e012      	b.n	801a3e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a3be:	4b11      	ldr	r3, [pc, #68]	; (801a404 <tcp_kill_timewait+0x5c>)
 801a3c0:	681a      	ldr	r2, [r3, #0]
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3c6:	1ad3      	subs	r3, r2, r3
 801a3c8:	687a      	ldr	r2, [r7, #4]
 801a3ca:	429a      	cmp	r2, r3
 801a3cc:	d807      	bhi.n	801a3de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801a3ce:	4b0d      	ldr	r3, [pc, #52]	; (801a404 <tcp_kill_timewait+0x5c>)
 801a3d0:	681a      	ldr	r2, [r3, #0]
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3d6:	1ad3      	subs	r3, r2, r3
 801a3d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	68db      	ldr	r3, [r3, #12]
 801a3e2:	60fb      	str	r3, [r7, #12]
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d1e9      	bne.n	801a3be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801a3ea:	68bb      	ldr	r3, [r7, #8]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d002      	beq.n	801a3f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a3f0:	68b8      	ldr	r0, [r7, #8]
 801a3f2:	f7fe ffd5 	bl	80193a0 <tcp_abort>
  }
}
 801a3f6:	bf00      	nop
 801a3f8:	3710      	adds	r7, #16
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	bd80      	pop	{r7, pc}
 801a3fe:	bf00      	nop
 801a400:	200238ec 	.word	0x200238ec
 801a404:	200238dc 	.word	0x200238dc

0801a408 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b082      	sub	sp, #8
 801a40c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801a40e:	4b10      	ldr	r3, [pc, #64]	; (801a450 <tcp_handle_closepend+0x48>)
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a414:	e014      	b.n	801a440 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	68db      	ldr	r3, [r3, #12]
 801a41a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a420:	f003 0308 	and.w	r3, r3, #8
 801a424:	2b00      	cmp	r3, #0
 801a426:	d009      	beq.n	801a43c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a42c:	f023 0308 	bic.w	r3, r3, #8
 801a430:	b29a      	uxth	r2, r3
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	845a      	strh	r2, [r3, #34]	; 0x22
      tcp_close_shutdown_fin(pcb);
 801a436:	6878      	ldr	r0, [r7, #4]
 801a438:	f7fe fe00 	bl	801903c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801a43c:	683b      	ldr	r3, [r7, #0]
 801a43e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d1e7      	bne.n	801a416 <tcp_handle_closepend+0xe>
  }
}
 801a446:	bf00      	nop
 801a448:	bf00      	nop
 801a44a:	3708      	adds	r7, #8
 801a44c:	46bd      	mov	sp, r7
 801a44e:	bd80      	pop	{r7, pc}
 801a450:	200238e8 	.word	0x200238e8

0801a454 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801a454:	b580      	push	{r7, lr}
 801a456:	b084      	sub	sp, #16
 801a458:	af00      	add	r7, sp, #0
 801a45a:	4603      	mov	r3, r0
 801a45c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a45e:	2001      	movs	r0, #1
 801a460:	f7fd f87e 	bl	8017560 <memp_malloc>
 801a464:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d126      	bne.n	801a4ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801a46c:	f7ff ffcc 	bl	801a408 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801a470:	f7ff ff9a 	bl	801a3a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a474:	2001      	movs	r0, #1
 801a476:	f7fd f873 	bl	8017560 <memp_malloc>
 801a47a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	2b00      	cmp	r3, #0
 801a480:	d11b      	bne.n	801a4ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801a482:	2009      	movs	r0, #9
 801a484:	f7ff ff46 	bl	801a314 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a488:	2001      	movs	r0, #1
 801a48a:	f7fd f869 	bl	8017560 <memp_malloc>
 801a48e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	2b00      	cmp	r3, #0
 801a494:	d111      	bne.n	801a4ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801a496:	2008      	movs	r0, #8
 801a498:	f7ff ff3c 	bl	801a314 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a49c:	2001      	movs	r0, #1
 801a49e:	f7fd f85f 	bl	8017560 <memp_malloc>
 801a4a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d107      	bne.n	801a4ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801a4aa:	79fb      	ldrb	r3, [r7, #7]
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	f7ff fee3 	bl	801a278 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a4b2:	2001      	movs	r0, #1
 801a4b4:	f7fd f854 	bl	8017560 <memp_malloc>
 801a4b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d049      	beq.n	801a554 <tcp_alloc+0x100>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a4c0:	22ac      	movs	r2, #172	; 0xac
 801a4c2:	2100      	movs	r1, #0
 801a4c4:	68f8      	ldr	r0, [r7, #12]
 801a4c6:	f008 fcd2 	bl	8022e6e <memset>
    pcb->prio = prio;
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	79fa      	ldrb	r2, [r7, #7]
 801a4ce:	775a      	strb	r2, [r3, #29]
    pcb->snd_buf = TCP_SND_BUF;
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a4d6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a4e0:	865a      	strh	r2, [r3, #50]	; 0x32
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->ttl = TCP_TTL;
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	22ff      	movs	r2, #255	; 0xff
 801a4ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801a4f0:	68fb      	ldr	r3, [r7, #12]
 801a4f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a4f6:	875a      	strh	r2, [r3, #58]	; 0x3a
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	2206      	movs	r2, #6
 801a4fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	2206      	movs	r2, #6
 801a504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    pcb->rtime = -1;
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a50e:	871a      	strh	r2, [r3, #56]	; 0x38
    pcb->cwnd = 1;
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	2201      	movs	r2, #1
 801a514:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    pcb->tmr = tcp_ticks;
 801a518:	4b11      	ldr	r3, [pc, #68]	; (801a560 <tcp_alloc+0x10c>)
 801a51a:	681a      	ldr	r2, [r3, #0]
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	629a      	str	r2, [r3, #40]	; 0x28
    pcb->last_timer = tcp_timer_ctr;
 801a520:	4b10      	ldr	r3, [pc, #64]	; (801a564 <tcp_alloc+0x110>)
 801a522:	781a      	ldrb	r2, [r3, #0]
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a530:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	4a0c      	ldr	r2, [pc, #48]	; (801a568 <tcp_alloc+0x114>)
 801a538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801a53c:	68fb      	ldr	r3, [r7, #12]
 801a53e:	4a0b      	ldr	r2, [pc, #44]	; (801a56c <tcp_alloc+0x118>)
 801a540:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	4a0a      	ldr	r2, [pc, #40]	; (801a570 <tcp_alloc+0x11c>)
 801a548:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	2209      	movs	r2, #9
 801a550:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801a554:	68fb      	ldr	r3, [r7, #12]
}
 801a556:	4618      	mov	r0, r3
 801a558:	3710      	adds	r7, #16
 801a55a:	46bd      	mov	sp, r7
 801a55c:	bd80      	pop	{r7, pc}
 801a55e:	bf00      	nop
 801a560:	200238dc 	.word	0x200238dc
 801a564:	200238f2 	.word	0x200238f2
 801a568:	0801a20d 	.word	0x0801a20d
 801a56c:	006ddd00 	.word	0x006ddd00
 801a570:	000124f8 	.word	0x000124f8

0801a574 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801a574:	b580      	push	{r7, lr}
 801a576:	b084      	sub	sp, #16
 801a578:	af00      	add	r7, sp, #0
 801a57a:	4603      	mov	r3, r0
 801a57c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801a57e:	2040      	movs	r0, #64	; 0x40
 801a580:	f7ff ff68 	bl	801a454 <tcp_alloc>
 801a584:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a586:	68fb      	ldr	r3, [r7, #12]
}
 801a588:	4618      	mov	r0, r3
 801a58a:	3710      	adds	r7, #16
 801a58c:	46bd      	mov	sp, r7
 801a58e:	bd80      	pop	{r7, pc}

0801a590 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801a590:	b480      	push	{r7}
 801a592:	b083      	sub	sp, #12
 801a594:	af00      	add	r7, sp, #0
 801a596:	6078      	str	r0, [r7, #4]
 801a598:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d002      	beq.n	801a5a6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	683a      	ldr	r2, [r7, #0]
 801a5a4:	611a      	str	r2, [r3, #16]
  }
}
 801a5a6:	bf00      	nop
 801a5a8:	370c      	adds	r7, #12
 801a5aa:	46bd      	mov	sp, r7
 801a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b0:	4770      	bx	lr
	...

0801a5b4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b082      	sub	sp, #8
 801a5b8:	af00      	add	r7, sp, #0
 801a5ba:	6078      	str	r0, [r7, #4]
 801a5bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	d00e      	beq.n	801a5e2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	7f1b      	ldrb	r3, [r3, #28]
 801a5c8:	2b01      	cmp	r3, #1
 801a5ca:	d106      	bne.n	801a5da <tcp_recv+0x26>
 801a5cc:	4b07      	ldr	r3, [pc, #28]	; (801a5ec <tcp_recv+0x38>)
 801a5ce:	f240 72df 	movw	r2, #2015	; 0x7df
 801a5d2:	4907      	ldr	r1, [pc, #28]	; (801a5f0 <tcp_recv+0x3c>)
 801a5d4:	4807      	ldr	r0, [pc, #28]	; (801a5f4 <tcp_recv+0x40>)
 801a5d6:	f008 fbab 	bl	8022d30 <iprintf>
    pcb->recv = recv;
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	683a      	ldr	r2, [r7, #0]
 801a5de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 801a5e2:	bf00      	nop
 801a5e4:	3708      	adds	r7, #8
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	bd80      	pop	{r7, pc}
 801a5ea:	bf00      	nop
 801a5ec:	08026490 	.word	0x08026490
 801a5f0:	08026a64 	.word	0x08026a64
 801a5f4:	0802650c 	.word	0x0802650c

0801a5f8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801a5f8:	b580      	push	{r7, lr}
 801a5fa:	b082      	sub	sp, #8
 801a5fc:	af00      	add	r7, sp, #0
 801a5fe:	6078      	str	r0, [r7, #4]
 801a600:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	2b00      	cmp	r3, #0
 801a606:	d00e      	beq.n	801a626 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	7f1b      	ldrb	r3, [r3, #28]
 801a60c:	2b01      	cmp	r3, #1
 801a60e:	d106      	bne.n	801a61e <tcp_sent+0x26>
 801a610:	4b07      	ldr	r3, [pc, #28]	; (801a630 <tcp_sent+0x38>)
 801a612:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801a616:	4907      	ldr	r1, [pc, #28]	; (801a634 <tcp_sent+0x3c>)
 801a618:	4807      	ldr	r0, [pc, #28]	; (801a638 <tcp_sent+0x40>)
 801a61a:	f008 fb89 	bl	8022d30 <iprintf>
    pcb->sent = sent;
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	683a      	ldr	r2, [r7, #0]
 801a622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
}
 801a626:	bf00      	nop
 801a628:	3708      	adds	r7, #8
 801a62a:	46bd      	mov	sp, r7
 801a62c:	bd80      	pop	{r7, pc}
 801a62e:	bf00      	nop
 801a630:	08026490 	.word	0x08026490
 801a634:	08026a8c 	.word	0x08026a8c
 801a638:	0802650c 	.word	0x0802650c

0801a63c <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801a63c:	b580      	push	{r7, lr}
 801a63e:	b082      	sub	sp, #8
 801a640:	af00      	add	r7, sp, #0
 801a642:	6078      	str	r0, [r7, #4]
 801a644:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d00e      	beq.n	801a66a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	7f1b      	ldrb	r3, [r3, #28]
 801a650:	2b01      	cmp	r3, #1
 801a652:	d106      	bne.n	801a662 <tcp_err+0x26>
 801a654:	4b07      	ldr	r3, [pc, #28]	; (801a674 <tcp_err+0x38>)
 801a656:	f640 020d 	movw	r2, #2061	; 0x80d
 801a65a:	4907      	ldr	r1, [pc, #28]	; (801a678 <tcp_err+0x3c>)
 801a65c:	4807      	ldr	r0, [pc, #28]	; (801a67c <tcp_err+0x40>)
 801a65e:	f008 fb67 	bl	8022d30 <iprintf>
    pcb->errf = err;
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	683a      	ldr	r2, [r7, #0]
 801a666:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  }
}
 801a66a:	bf00      	nop
 801a66c:	3708      	adds	r7, #8
 801a66e:	46bd      	mov	sp, r7
 801a670:	bd80      	pop	{r7, pc}
 801a672:	bf00      	nop
 801a674:	08026490 	.word	0x08026490
 801a678:	08026ab4 	.word	0x08026ab4
 801a67c:	0802650c 	.word	0x0802650c

0801a680 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801a680:	b480      	push	{r7}
 801a682:	b085      	sub	sp, #20
 801a684:	af00      	add	r7, sp, #0
 801a686:	6078      	str	r0, [r7, #4]
 801a688:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d008      	beq.n	801a6a2 <tcp_accept+0x22>
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	7f1b      	ldrb	r3, [r3, #28]
 801a694:	2b01      	cmp	r3, #1
 801a696:	d104      	bne.n	801a6a2 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	683a      	ldr	r2, [r7, #0]
 801a6a0:	621a      	str	r2, [r3, #32]
  }
}
 801a6a2:	bf00      	nop
 801a6a4:	3714      	adds	r7, #20
 801a6a6:	46bd      	mov	sp, r7
 801a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ac:	4770      	bx	lr
	...

0801a6b0 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801a6b0:	b580      	push	{r7, lr}
 801a6b2:	b084      	sub	sp, #16
 801a6b4:	af00      	add	r7, sp, #0
 801a6b6:	60f8      	str	r0, [r7, #12]
 801a6b8:	60b9      	str	r1, [r7, #8]
 801a6ba:	4613      	mov	r3, r2
 801a6bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d107      	bne.n	801a6d4 <tcp_poll+0x24>
 801a6c4:	4b0e      	ldr	r3, [pc, #56]	; (801a700 <tcp_poll+0x50>)
 801a6c6:	f640 023d 	movw	r2, #2109	; 0x83d
 801a6ca:	490e      	ldr	r1, [pc, #56]	; (801a704 <tcp_poll+0x54>)
 801a6cc:	480e      	ldr	r0, [pc, #56]	; (801a708 <tcp_poll+0x58>)
 801a6ce:	f008 fb2f 	bl	8022d30 <iprintf>
 801a6d2:	e012      	b.n	801a6fa <tcp_poll+0x4a>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	7f1b      	ldrb	r3, [r3, #28]
 801a6d8:	2b01      	cmp	r3, #1
 801a6da:	d106      	bne.n	801a6ea <tcp_poll+0x3a>
 801a6dc:	4b08      	ldr	r3, [pc, #32]	; (801a700 <tcp_poll+0x50>)
 801a6de:	f640 023e 	movw	r2, #2110	; 0x83e
 801a6e2:	490a      	ldr	r1, [pc, #40]	; (801a70c <tcp_poll+0x5c>)
 801a6e4:	4808      	ldr	r0, [pc, #32]	; (801a708 <tcp_poll+0x58>)
 801a6e6:	f008 fb23 	bl	8022d30 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801a6ea:	68fb      	ldr	r3, [r7, #12]
 801a6ec:	68ba      	ldr	r2, [r7, #8]
 801a6ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	79fa      	ldrb	r2, [r7, #7]
 801a6f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 801a6fa:	3710      	adds	r7, #16
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd80      	pop	{r7, pc}
 801a700:	08026490 	.word	0x08026490
 801a704:	08026adc 	.word	0x08026adc
 801a708:	0802650c 	.word	0x0802650c
 801a70c:	08026af4 	.word	0x08026af4

0801a710 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b082      	sub	sp, #8
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d107      	bne.n	801a72e <tcp_pcb_purge+0x1e>
 801a71e:	4b23      	ldr	r3, [pc, #140]	; (801a7ac <tcp_pcb_purge+0x9c>)
 801a720:	f640 0251 	movw	r2, #2129	; 0x851
 801a724:	4922      	ldr	r1, [pc, #136]	; (801a7b0 <tcp_pcb_purge+0xa0>)
 801a726:	4823      	ldr	r0, [pc, #140]	; (801a7b4 <tcp_pcb_purge+0xa4>)
 801a728:	f008 fb02 	bl	8022d30 <iprintf>
 801a72c:	e03a      	b.n	801a7a4 <tcp_pcb_purge+0x94>

  if (pcb->state != CLOSED &&
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	7f1b      	ldrb	r3, [r3, #28]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d036      	beq.n	801a7a4 <tcp_pcb_purge+0x94>
      pcb->state != TIME_WAIT &&
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	7f1b      	ldrb	r3, [r3, #28]
  if (pcb->state != CLOSED &&
 801a73a:	2b0a      	cmp	r3, #10
 801a73c:	d032      	beq.n	801a7a4 <tcp_pcb_purge+0x94>
      pcb->state != LISTEN) {
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	7f1b      	ldrb	r3, [r3, #28]
      pcb->state != TIME_WAIT &&
 801a742:	2b01      	cmp	r3, #1
 801a744:	d02e      	beq.n	801a7a4 <tcp_pcb_purge+0x94>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801a746:	687b      	ldr	r3, [r7, #4]
 801a748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d009      	beq.n	801a764 <tcp_pcb_purge+0x54>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801a756:	4618      	mov	r0, r3
 801a758:	f7fd fe6c 	bl	8018434 <pbuf_free>
      pcb->refused_data = NULL;
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	2200      	movs	r2, #0
 801a760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d002      	beq.n	801a772 <tcp_pcb_purge+0x62>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801a76c:	6878      	ldr	r0, [r7, #4]
 801a76e:	f000 f987 	bl	801aa80 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a778:	871a      	strh	r2, [r3, #56]	; 0x38

    tcp_segs_free(pcb->unsent);
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a77e:	4618      	mov	r0, r3
 801a780:	f7ff fcea 	bl	801a158 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a788:	4618      	mov	r0, r3
 801a78a:	f7ff fce5 	bl	801a158 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	2200      	movs	r2, #0
 801a792:	675a      	str	r2, [r3, #116]	; 0x74
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	679a      	str	r2, [r3, #120]	; 0x78
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	2200      	movs	r2, #0
 801a7a0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
#endif /* TCP_OVERSIZE */
  }
}
 801a7a4:	3708      	adds	r7, #8
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	bd80      	pop	{r7, pc}
 801a7aa:	bf00      	nop
 801a7ac:	08026490 	.word	0x08026490
 801a7b0:	08026b14 	.word	0x08026b14
 801a7b4:	0802650c 	.word	0x0802650c

0801a7b8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801a7b8:	b580      	push	{r7, lr}
 801a7ba:	b084      	sub	sp, #16
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
 801a7c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801a7c2:	683b      	ldr	r3, [r7, #0]
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d106      	bne.n	801a7d6 <tcp_pcb_remove+0x1e>
 801a7c8:	4b3e      	ldr	r3, [pc, #248]	; (801a8c4 <tcp_pcb_remove+0x10c>)
 801a7ca:	f640 0283 	movw	r2, #2179	; 0x883
 801a7ce:	493e      	ldr	r1, [pc, #248]	; (801a8c8 <tcp_pcb_remove+0x110>)
 801a7d0:	483e      	ldr	r0, [pc, #248]	; (801a8cc <tcp_pcb_remove+0x114>)
 801a7d2:	f008 faad 	bl	8022d30 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	d106      	bne.n	801a7ea <tcp_pcb_remove+0x32>
 801a7dc:	4b39      	ldr	r3, [pc, #228]	; (801a8c4 <tcp_pcb_remove+0x10c>)
 801a7de:	f640 0284 	movw	r2, #2180	; 0x884
 801a7e2:	493b      	ldr	r1, [pc, #236]	; (801a8d0 <tcp_pcb_remove+0x118>)
 801a7e4:	4839      	ldr	r0, [pc, #228]	; (801a8cc <tcp_pcb_remove+0x114>)
 801a7e6:	f008 faa3 	bl	8022d30 <iprintf>

  TCP_RMV(pcblist, pcb);
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	683a      	ldr	r2, [r7, #0]
 801a7f0:	429a      	cmp	r2, r3
 801a7f2:	d105      	bne.n	801a800 <tcp_pcb_remove+0x48>
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	68da      	ldr	r2, [r3, #12]
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	601a      	str	r2, [r3, #0]
 801a7fe:	e013      	b.n	801a828 <tcp_pcb_remove+0x70>
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	60fb      	str	r3, [r7, #12]
 801a806:	e00c      	b.n	801a822 <tcp_pcb_remove+0x6a>
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	68db      	ldr	r3, [r3, #12]
 801a80c:	683a      	ldr	r2, [r7, #0]
 801a80e:	429a      	cmp	r2, r3
 801a810:	d104      	bne.n	801a81c <tcp_pcb_remove+0x64>
 801a812:	683b      	ldr	r3, [r7, #0]
 801a814:	68da      	ldr	r2, [r3, #12]
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	60da      	str	r2, [r3, #12]
 801a81a:	e005      	b.n	801a828 <tcp_pcb_remove+0x70>
 801a81c:	68fb      	ldr	r3, [r7, #12]
 801a81e:	68db      	ldr	r3, [r3, #12]
 801a820:	60fb      	str	r3, [r7, #12]
 801a822:	68fb      	ldr	r3, [r7, #12]
 801a824:	2b00      	cmp	r3, #0
 801a826:	d1ef      	bne.n	801a808 <tcp_pcb_remove+0x50>
 801a828:	683b      	ldr	r3, [r7, #0]
 801a82a:	2200      	movs	r2, #0
 801a82c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801a82e:	6838      	ldr	r0, [r7, #0]
 801a830:	f7ff ff6e 	bl	801a710 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801a834:	683b      	ldr	r3, [r7, #0]
 801a836:	7f1b      	ldrb	r3, [r3, #28]
 801a838:	2b0a      	cmp	r3, #10
 801a83a:	d013      	beq.n	801a864 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801a83c:	683b      	ldr	r3, [r7, #0]
 801a83e:	7f1b      	ldrb	r3, [r3, #28]
  if ((pcb->state != TIME_WAIT) &&
 801a840:	2b01      	cmp	r3, #1
 801a842:	d00f      	beq.n	801a864 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801a844:	683b      	ldr	r3, [r7, #0]
 801a846:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a848:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801a84c:	2b00      	cmp	r3, #0
 801a84e:	d009      	beq.n	801a864 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801a850:	683b      	ldr	r3, [r7, #0]
 801a852:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801a854:	f043 0302 	orr.w	r3, r3, #2
 801a858:	b29a      	uxth	r2, r3
 801a85a:	683b      	ldr	r3, [r7, #0]
 801a85c:	845a      	strh	r2, [r3, #34]	; 0x22
    tcp_output(pcb);
 801a85e:	6838      	ldr	r0, [r7, #0]
 801a860:	f003 fc74 	bl	801e14c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801a864:	683b      	ldr	r3, [r7, #0]
 801a866:	7f1b      	ldrb	r3, [r3, #28]
 801a868:	2b01      	cmp	r3, #1
 801a86a:	d020      	beq.n	801a8ae <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a870:	2b00      	cmp	r3, #0
 801a872:	d006      	beq.n	801a882 <tcp_pcb_remove+0xca>
 801a874:	4b13      	ldr	r3, [pc, #76]	; (801a8c4 <tcp_pcb_remove+0x10c>)
 801a876:	f640 0293 	movw	r2, #2195	; 0x893
 801a87a:	4916      	ldr	r1, [pc, #88]	; (801a8d4 <tcp_pcb_remove+0x11c>)
 801a87c:	4813      	ldr	r0, [pc, #76]	; (801a8cc <tcp_pcb_remove+0x114>)
 801a87e:	f008 fa57 	bl	8022d30 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801a882:	683b      	ldr	r3, [r7, #0]
 801a884:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a886:	2b00      	cmp	r3, #0
 801a888:	d006      	beq.n	801a898 <tcp_pcb_remove+0xe0>
 801a88a:	4b0e      	ldr	r3, [pc, #56]	; (801a8c4 <tcp_pcb_remove+0x10c>)
 801a88c:	f640 0294 	movw	r2, #2196	; 0x894
 801a890:	4911      	ldr	r1, [pc, #68]	; (801a8d8 <tcp_pcb_remove+0x120>)
 801a892:	480e      	ldr	r0, [pc, #56]	; (801a8cc <tcp_pcb_remove+0x114>)
 801a894:	f008 fa4c 	bl	8022d30 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801a898:	683b      	ldr	r3, [r7, #0]
 801a89a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d006      	beq.n	801a8ae <tcp_pcb_remove+0xf6>
 801a8a0:	4b08      	ldr	r3, [pc, #32]	; (801a8c4 <tcp_pcb_remove+0x10c>)
 801a8a2:	f640 0296 	movw	r2, #2198	; 0x896
 801a8a6:	490d      	ldr	r1, [pc, #52]	; (801a8dc <tcp_pcb_remove+0x124>)
 801a8a8:	4808      	ldr	r0, [pc, #32]	; (801a8cc <tcp_pcb_remove+0x114>)
 801a8aa:	f008 fa41 	bl	8022d30 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801a8ae:	683b      	ldr	r3, [r7, #0]
 801a8b0:	2200      	movs	r2, #0
 801a8b2:	771a      	strb	r2, [r3, #28]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801a8b4:	683b      	ldr	r3, [r7, #0]
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	83da      	strh	r2, [r3, #30]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801a8ba:	bf00      	nop
 801a8bc:	3710      	adds	r7, #16
 801a8be:	46bd      	mov	sp, r7
 801a8c0:	bd80      	pop	{r7, pc}
 801a8c2:	bf00      	nop
 801a8c4:	08026490 	.word	0x08026490
 801a8c8:	08026b30 	.word	0x08026b30
 801a8cc:	0802650c 	.word	0x0802650c
 801a8d0:	08026b4c 	.word	0x08026b4c
 801a8d4:	08026b6c 	.word	0x08026b6c
 801a8d8:	08026b84 	.word	0x08026b84
 801a8dc:	08026ba0 	.word	0x08026ba0

0801a8e0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801a8e0:	b580      	push	{r7, lr}
 801a8e2:	b082      	sub	sp, #8
 801a8e4:	af00      	add	r7, sp, #0
 801a8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d106      	bne.n	801a8fc <tcp_next_iss+0x1c>
 801a8ee:	4b0a      	ldr	r3, [pc, #40]	; (801a918 <tcp_next_iss+0x38>)
 801a8f0:	f640 02af 	movw	r2, #2223	; 0x8af
 801a8f4:	4909      	ldr	r1, [pc, #36]	; (801a91c <tcp_next_iss+0x3c>)
 801a8f6:	480a      	ldr	r0, [pc, #40]	; (801a920 <tcp_next_iss+0x40>)
 801a8f8:	f008 fa1a 	bl	8022d30 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801a8fc:	4b09      	ldr	r3, [pc, #36]	; (801a924 <tcp_next_iss+0x44>)
 801a8fe:	681a      	ldr	r2, [r3, #0]
 801a900:	4b09      	ldr	r3, [pc, #36]	; (801a928 <tcp_next_iss+0x48>)
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	4413      	add	r3, r2
 801a906:	4a07      	ldr	r2, [pc, #28]	; (801a924 <tcp_next_iss+0x44>)
 801a908:	6013      	str	r3, [r2, #0]
  return iss;
 801a90a:	4b06      	ldr	r3, [pc, #24]	; (801a924 <tcp_next_iss+0x44>)
 801a90c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801a90e:	4618      	mov	r0, r3
 801a910:	3708      	adds	r7, #8
 801a912:	46bd      	mov	sp, r7
 801a914:	bd80      	pop	{r7, pc}
 801a916:	bf00      	nop
 801a918:	08026490 	.word	0x08026490
 801a91c:	08026bb8 	.word	0x08026bb8
 801a920:	0802650c 	.word	0x0802650c
 801a924:	20000030 	.word	0x20000030
 801a928:	200238dc 	.word	0x200238dc

0801a92c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801a92c:	b580      	push	{r7, lr}
 801a92e:	b086      	sub	sp, #24
 801a930:	af00      	add	r7, sp, #0
 801a932:	4603      	mov	r3, r0
 801a934:	60b9      	str	r1, [r7, #8]
 801a936:	607a      	str	r2, [r7, #4]
 801a938:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d106      	bne.n	801a94e <tcp_eff_send_mss_netif+0x22>
 801a940:	4b14      	ldr	r3, [pc, #80]	; (801a994 <tcp_eff_send_mss_netif+0x68>)
 801a942:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801a946:	4914      	ldr	r1, [pc, #80]	; (801a998 <tcp_eff_send_mss_netif+0x6c>)
 801a948:	4814      	ldr	r0, [pc, #80]	; (801a99c <tcp_eff_send_mss_netif+0x70>)
 801a94a:	f008 f9f1 	bl	8022d30 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801a94e:	68bb      	ldr	r3, [r7, #8]
 801a950:	2b00      	cmp	r3, #0
 801a952:	d101      	bne.n	801a958 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801a954:	89fb      	ldrh	r3, [r7, #14]
 801a956:	e019      	b.n	801a98c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801a958:	68bb      	ldr	r3, [r7, #8]
 801a95a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a95c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801a95e:	8afb      	ldrh	r3, [r7, #22]
 801a960:	2b00      	cmp	r3, #0
 801a962:	d012      	beq.n	801a98a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801a964:	2328      	movs	r3, #40	; 0x28
 801a966:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801a968:	8afa      	ldrh	r2, [r7, #22]
 801a96a:	8abb      	ldrh	r3, [r7, #20]
 801a96c:	429a      	cmp	r2, r3
 801a96e:	d904      	bls.n	801a97a <tcp_eff_send_mss_netif+0x4e>
 801a970:	8afa      	ldrh	r2, [r7, #22]
 801a972:	8abb      	ldrh	r3, [r7, #20]
 801a974:	1ad3      	subs	r3, r2, r3
 801a976:	b29b      	uxth	r3, r3
 801a978:	e000      	b.n	801a97c <tcp_eff_send_mss_netif+0x50>
 801a97a:	2300      	movs	r3, #0
 801a97c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801a97e:	8a7a      	ldrh	r2, [r7, #18]
 801a980:	89fb      	ldrh	r3, [r7, #14]
 801a982:	4293      	cmp	r3, r2
 801a984:	bf28      	it	cs
 801a986:	4613      	movcs	r3, r2
 801a988:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801a98a:	89fb      	ldrh	r3, [r7, #14]
}
 801a98c:	4618      	mov	r0, r3
 801a98e:	3718      	adds	r7, #24
 801a990:	46bd      	mov	sp, r7
 801a992:	bd80      	pop	{r7, pc}
 801a994:	08026490 	.word	0x08026490
 801a998:	08026bd4 	.word	0x08026bd4
 801a99c:	0802650c 	.word	0x0802650c

0801a9a0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801a9a0:	b580      	push	{r7, lr}
 801a9a2:	b084      	sub	sp, #16
 801a9a4:	af00      	add	r7, sp, #0
 801a9a6:	6078      	str	r0, [r7, #4]
 801a9a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801a9aa:	683b      	ldr	r3, [r7, #0]
 801a9ac:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	d119      	bne.n	801a9e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801a9b4:	4b10      	ldr	r3, [pc, #64]	; (801a9f8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801a9b6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801a9ba:	4910      	ldr	r1, [pc, #64]	; (801a9fc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801a9bc:	4810      	ldr	r0, [pc, #64]	; (801aa00 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801a9be:	f008 f9b7 	bl	8022d30 <iprintf>

  while (pcb != NULL) {
 801a9c2:	e011      	b.n	801a9e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	681a      	ldr	r2, [r3, #0]
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	429a      	cmp	r2, r3
 801a9ce:	d108      	bne.n	801a9e2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801a9d0:	68fb      	ldr	r3, [r7, #12]
 801a9d2:	68db      	ldr	r3, [r3, #12]
 801a9d4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801a9d6:	68f8      	ldr	r0, [r7, #12]
 801a9d8:	f7fe fce2 	bl	80193a0 <tcp_abort>
      pcb = next;
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	60fb      	str	r3, [r7, #12]
 801a9e0:	e002      	b.n	801a9e8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801a9e2:	68fb      	ldr	r3, [r7, #12]
 801a9e4:	68db      	ldr	r3, [r3, #12]
 801a9e6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801a9e8:	68fb      	ldr	r3, [r7, #12]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d1ea      	bne.n	801a9c4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801a9ee:	bf00      	nop
 801a9f0:	bf00      	nop
 801a9f2:	3710      	adds	r7, #16
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}
 801a9f8:	08026490 	.word	0x08026490
 801a9fc:	08026bfc 	.word	0x08026bfc
 801aa00:	0802650c 	.word	0x0802650c

0801aa04 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b084      	sub	sp, #16
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
 801aa0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d02a      	beq.n	801aa6a <tcp_netif_ip_addr_changed+0x66>
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	2b00      	cmp	r3, #0
 801aa1a:	d026      	beq.n	801aa6a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801aa1c:	4b15      	ldr	r3, [pc, #84]	; (801aa74 <tcp_netif_ip_addr_changed+0x70>)
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	4619      	mov	r1, r3
 801aa22:	6878      	ldr	r0, [r7, #4]
 801aa24:	f7ff ffbc 	bl	801a9a0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801aa28:	4b13      	ldr	r3, [pc, #76]	; (801aa78 <tcp_netif_ip_addr_changed+0x74>)
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	4619      	mov	r1, r3
 801aa2e:	6878      	ldr	r0, [r7, #4]
 801aa30:	f7ff ffb6 	bl	801a9a0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801aa34:	683b      	ldr	r3, [r7, #0]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d017      	beq.n	801aa6a <tcp_netif_ip_addr_changed+0x66>
 801aa3a:	683b      	ldr	r3, [r7, #0]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d013      	beq.n	801aa6a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801aa42:	4b0e      	ldr	r3, [pc, #56]	; (801aa7c <tcp_netif_ip_addr_changed+0x78>)
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	60fb      	str	r3, [r7, #12]
 801aa48:	e00c      	b.n	801aa64 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	681a      	ldr	r2, [r3, #0]
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	429a      	cmp	r2, r3
 801aa54:	d103      	bne.n	801aa5e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801aa56:	683b      	ldr	r3, [r7, #0]
 801aa58:	681a      	ldr	r2, [r3, #0]
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	68db      	ldr	r3, [r3, #12]
 801aa62:	60fb      	str	r3, [r7, #12]
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d1ef      	bne.n	801aa4a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801aa6a:	bf00      	nop
 801aa6c:	3710      	adds	r7, #16
 801aa6e:	46bd      	mov	sp, r7
 801aa70:	bd80      	pop	{r7, pc}
 801aa72:	bf00      	nop
 801aa74:	200238e8 	.word	0x200238e8
 801aa78:	200238e0 	.word	0x200238e0
 801aa7c:	200238e4 	.word	0x200238e4

0801aa80 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b082      	sub	sp, #8
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d007      	beq.n	801aaa0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801aa94:	4618      	mov	r0, r3
 801aa96:	f7ff fb5f 	bl	801a158 <tcp_segs_free>
    pcb->ooseq = NULL;
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	2200      	movs	r2, #0
 801aa9e:	67da      	str	r2, [r3, #124]	; 0x7c
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801aaa0:	bf00      	nop
 801aaa2:	3708      	adds	r7, #8
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	bd80      	pop	{r7, pc}

0801aaa8 <tcp_ext_arg_invoke_callbacks_destroyed>:
/** This function calls the "destroy" callback for all ext_args once a pcb is
 * freed.
 */
static void
tcp_ext_arg_invoke_callbacks_destroyed(struct tcp_pcb_ext_args *ext_args)
{
 801aaa8:	b580      	push	{r7, lr}
 801aaaa:	b084      	sub	sp, #16
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	6078      	str	r0, [r7, #4]
  int i;
  LWIP_ASSERT("ext_args != NULL", ext_args != NULL);
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	2b00      	cmp	r3, #0
 801aab4:	d106      	bne.n	801aac4 <tcp_ext_arg_invoke_callbacks_destroyed+0x1c>
 801aab6:	4b19      	ldr	r3, [pc, #100]	; (801ab1c <tcp_ext_arg_invoke_callbacks_destroyed+0x74>)
 801aab8:	f640 2258 	movw	r2, #2648	; 0xa58
 801aabc:	4918      	ldr	r1, [pc, #96]	; (801ab20 <tcp_ext_arg_invoke_callbacks_destroyed+0x78>)
 801aabe:	4819      	ldr	r0, [pc, #100]	; (801ab24 <tcp_ext_arg_invoke_callbacks_destroyed+0x7c>)
 801aac0:	f008 f936 	bl	8022d30 <iprintf>

  for (i = 0; i < LWIP_TCP_PCB_NUM_EXT_ARGS; i++) {
 801aac4:	2300      	movs	r3, #0
 801aac6:	60fb      	str	r3, [r7, #12]
 801aac8:	e020      	b.n	801ab0c <tcp_ext_arg_invoke_callbacks_destroyed+0x64>
    if (ext_args[i].callbacks != NULL) {
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	00db      	lsls	r3, r3, #3
 801aace:	687a      	ldr	r2, [r7, #4]
 801aad0:	4413      	add	r3, r2
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d016      	beq.n	801ab06 <tcp_ext_arg_invoke_callbacks_destroyed+0x5e>
      if (ext_args[i].callbacks->destroy != NULL) {
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	00db      	lsls	r3, r3, #3
 801aadc:	687a      	ldr	r2, [r7, #4]
 801aade:	4413      	add	r3, r2
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d00e      	beq.n	801ab06 <tcp_ext_arg_invoke_callbacks_destroyed+0x5e>
        ext_args[i].callbacks->destroy((u8_t)i, ext_args[i].data);
 801aae8:	68fb      	ldr	r3, [r7, #12]
 801aaea:	00db      	lsls	r3, r3, #3
 801aaec:	687a      	ldr	r2, [r7, #4]
 801aaee:	4413      	add	r3, r2
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	68fa      	ldr	r2, [r7, #12]
 801aaf6:	b2d0      	uxtb	r0, r2
 801aaf8:	68fa      	ldr	r2, [r7, #12]
 801aafa:	00d2      	lsls	r2, r2, #3
 801aafc:	6879      	ldr	r1, [r7, #4]
 801aafe:	440a      	add	r2, r1
 801ab00:	6852      	ldr	r2, [r2, #4]
 801ab02:	4611      	mov	r1, r2
 801ab04:	4798      	blx	r3
  for (i = 0; i < LWIP_TCP_PCB_NUM_EXT_ARGS; i++) {
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	3301      	adds	r3, #1
 801ab0a:	60fb      	str	r3, [r7, #12]
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	dddb      	ble.n	801aaca <tcp_ext_arg_invoke_callbacks_destroyed+0x22>
      }
    }
  }
}
 801ab12:	bf00      	nop
 801ab14:	bf00      	nop
 801ab16:	3710      	adds	r7, #16
 801ab18:	46bd      	mov	sp, r7
 801ab1a:	bd80      	pop	{r7, pc}
 801ab1c:	08026490 	.word	0x08026490
 801ab20:	08026c98 	.word	0x08026c98
 801ab24:	0802650c 	.word	0x0802650c

0801ab28 <tcp_ext_arg_invoke_callbacks_passive_open>:
 * segment sent even on passive open. Naturally, the "accepted" callback of the
 * pcb has not been called yet!
 */
err_t
tcp_ext_arg_invoke_callbacks_passive_open(struct tcp_pcb_listen *lpcb, struct tcp_pcb *cpcb)
{
 801ab28:	b580      	push	{r7, lr}
 801ab2a:	b084      	sub	sp, #16
 801ab2c:	af00      	add	r7, sp, #0
 801ab2e:	6078      	str	r0, [r7, #4]
 801ab30:	6039      	str	r1, [r7, #0]
  int i;
  LWIP_ASSERT("lpcb != NULL", lpcb != NULL);
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d106      	bne.n	801ab46 <tcp_ext_arg_invoke_callbacks_passive_open+0x1e>
 801ab38:	4b22      	ldr	r3, [pc, #136]	; (801abc4 <tcp_ext_arg_invoke_callbacks_passive_open+0x9c>)
 801ab3a:	f640 226d 	movw	r2, #2669	; 0xa6d
 801ab3e:	4922      	ldr	r1, [pc, #136]	; (801abc8 <tcp_ext_arg_invoke_callbacks_passive_open+0xa0>)
 801ab40:	4822      	ldr	r0, [pc, #136]	; (801abcc <tcp_ext_arg_invoke_callbacks_passive_open+0xa4>)
 801ab42:	f008 f8f5 	bl	8022d30 <iprintf>
  LWIP_ASSERT("cpcb != NULL", cpcb != NULL);
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d106      	bne.n	801ab5a <tcp_ext_arg_invoke_callbacks_passive_open+0x32>
 801ab4c:	4b1d      	ldr	r3, [pc, #116]	; (801abc4 <tcp_ext_arg_invoke_callbacks_passive_open+0x9c>)
 801ab4e:	f640 226e 	movw	r2, #2670	; 0xa6e
 801ab52:	491f      	ldr	r1, [pc, #124]	; (801abd0 <tcp_ext_arg_invoke_callbacks_passive_open+0xa8>)
 801ab54:	481d      	ldr	r0, [pc, #116]	; (801abcc <tcp_ext_arg_invoke_callbacks_passive_open+0xa4>)
 801ab56:	f008 f8eb 	bl	8022d30 <iprintf>

  for (i = 0; i < LWIP_TCP_PCB_NUM_EXT_ARGS; i++) {
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	60fb      	str	r3, [r7, #12]
 801ab5e:	e028      	b.n	801abb2 <tcp_ext_arg_invoke_callbacks_passive_open+0x8a>
    if (lpcb->ext_args[i].callbacks != NULL) {
 801ab60:	687a      	ldr	r2, [r7, #4]
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	3302      	adds	r3, #2
 801ab66:	00db      	lsls	r3, r3, #3
 801ab68:	4413      	add	r3, r2
 801ab6a:	685b      	ldr	r3, [r3, #4]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d01d      	beq.n	801abac <tcp_ext_arg_invoke_callbacks_passive_open+0x84>
      if (lpcb->ext_args[i].callbacks->passive_open != NULL) {
 801ab70:	687a      	ldr	r2, [r7, #4]
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	3302      	adds	r3, #2
 801ab76:	00db      	lsls	r3, r3, #3
 801ab78:	4413      	add	r3, r2
 801ab7a:	685b      	ldr	r3, [r3, #4]
 801ab7c:	685b      	ldr	r3, [r3, #4]
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d014      	beq.n	801abac <tcp_ext_arg_invoke_callbacks_passive_open+0x84>
        err_t err = lpcb->ext_args[i].callbacks->passive_open((u8_t)i, lpcb, cpcb);
 801ab82:	687a      	ldr	r2, [r7, #4]
 801ab84:	68fb      	ldr	r3, [r7, #12]
 801ab86:	3302      	adds	r3, #2
 801ab88:	00db      	lsls	r3, r3, #3
 801ab8a:	4413      	add	r3, r2
 801ab8c:	685b      	ldr	r3, [r3, #4]
 801ab8e:	685b      	ldr	r3, [r3, #4]
 801ab90:	68fa      	ldr	r2, [r7, #12]
 801ab92:	b2d0      	uxtb	r0, r2
 801ab94:	683a      	ldr	r2, [r7, #0]
 801ab96:	6879      	ldr	r1, [r7, #4]
 801ab98:	4798      	blx	r3
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
 801ab9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d002      	beq.n	801abac <tcp_ext_arg_invoke_callbacks_passive_open+0x84>
          return err;
 801aba6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801abaa:	e006      	b.n	801abba <tcp_ext_arg_invoke_callbacks_passive_open+0x92>
  for (i = 0; i < LWIP_TCP_PCB_NUM_EXT_ARGS; i++) {
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	3301      	adds	r3, #1
 801abb0:	60fb      	str	r3, [r7, #12]
 801abb2:	68fb      	ldr	r3, [r7, #12]
 801abb4:	2b00      	cmp	r3, #0
 801abb6:	ddd3      	ble.n	801ab60 <tcp_ext_arg_invoke_callbacks_passive_open+0x38>
        }
      }
    }
  }
  return ERR_OK;
 801abb8:	2300      	movs	r3, #0
}
 801abba:	4618      	mov	r0, r3
 801abbc:	3710      	adds	r7, #16
 801abbe:	46bd      	mov	sp, r7
 801abc0:	bd80      	pop	{r7, pc}
 801abc2:	bf00      	nop
 801abc4:	08026490 	.word	0x08026490
 801abc8:	08026cac 	.word	0x08026cac
 801abcc:	0802650c 	.word	0x0802650c
 801abd0:	08026cbc 	.word	0x08026cbc

0801abd4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801abd4:	b590      	push	{r4, r7, lr}
 801abd6:	b08d      	sub	sp, #52	; 0x34
 801abd8:	af04      	add	r7, sp, #16
 801abda:	6078      	str	r0, [r7, #4]
 801abdc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d105      	bne.n	801abf0 <tcp_input+0x1c>
 801abe4:	4b9b      	ldr	r3, [pc, #620]	; (801ae54 <tcp_input+0x280>)
 801abe6:	2283      	movs	r2, #131	; 0x83
 801abe8:	499b      	ldr	r1, [pc, #620]	; (801ae58 <tcp_input+0x284>)
 801abea:	489c      	ldr	r0, [pc, #624]	; (801ae5c <tcp_input+0x288>)
 801abec:	f008 f8a0 	bl	8022d30 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801abf0:	687b      	ldr	r3, [r7, #4]
 801abf2:	685b      	ldr	r3, [r3, #4]
 801abf4:	4a9a      	ldr	r2, [pc, #616]	; (801ae60 <tcp_input+0x28c>)
 801abf6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	895b      	ldrh	r3, [r3, #10]
 801abfc:	2b13      	cmp	r3, #19
 801abfe:	f240 83d7 	bls.w	801b3b0 <tcp_input+0x7dc>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ac02:	4b98      	ldr	r3, [pc, #608]	; (801ae64 <tcp_input+0x290>)
 801ac04:	695b      	ldr	r3, [r3, #20]
 801ac06:	4a97      	ldr	r2, [pc, #604]	; (801ae64 <tcp_input+0x290>)
 801ac08:	6812      	ldr	r2, [r2, #0]
 801ac0a:	4611      	mov	r1, r2
 801ac0c:	4618      	mov	r0, r3
 801ac0e:	f7fb f995 	bl	8015f3c <ip4_addr_isbroadcast_u32>
 801ac12:	4603      	mov	r3, r0
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	f040 83cd 	bne.w	801b3b4 <tcp_input+0x7e0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ac1a:	4b92      	ldr	r3, [pc, #584]	; (801ae64 <tcp_input+0x290>)
 801ac1c:	695b      	ldr	r3, [r3, #20]
 801ac1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ac22:	2be0      	cmp	r3, #224	; 0xe0
 801ac24:	f000 83c6 	beq.w	801b3b4 <tcp_input+0x7e0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801ac28:	4b8d      	ldr	r3, [pc, #564]	; (801ae60 <tcp_input+0x28c>)
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	899b      	ldrh	r3, [r3, #12]
 801ac2e:	b29b      	uxth	r3, r3
 801ac30:	4618      	mov	r0, r3
 801ac32:	f7f9 fcf7 	bl	8014624 <lwip_htons>
 801ac36:	4603      	mov	r3, r0
 801ac38:	0b1b      	lsrs	r3, r3, #12
 801ac3a:	b29b      	uxth	r3, r3
 801ac3c:	b2db      	uxtb	r3, r3
 801ac3e:	009b      	lsls	r3, r3, #2
 801ac40:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ac42:	7cbb      	ldrb	r3, [r7, #18]
 801ac44:	2b13      	cmp	r3, #19
 801ac46:	f240 83b7 	bls.w	801b3b8 <tcp_input+0x7e4>
 801ac4a:	7cbb      	ldrb	r3, [r7, #18]
 801ac4c:	b29a      	uxth	r2, r3
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	891b      	ldrh	r3, [r3, #8]
 801ac52:	429a      	cmp	r2, r3
 801ac54:	f200 83b0 	bhi.w	801b3b8 <tcp_input+0x7e4>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ac58:	7cbb      	ldrb	r3, [r7, #18]
 801ac5a:	b29b      	uxth	r3, r3
 801ac5c:	3b14      	subs	r3, #20
 801ac5e:	b29a      	uxth	r2, r3
 801ac60:	4b81      	ldr	r3, [pc, #516]	; (801ae68 <tcp_input+0x294>)
 801ac62:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801ac64:	4b81      	ldr	r3, [pc, #516]	; (801ae6c <tcp_input+0x298>)
 801ac66:	2200      	movs	r2, #0
 801ac68:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	895a      	ldrh	r2, [r3, #10]
 801ac6e:	7cbb      	ldrb	r3, [r7, #18]
 801ac70:	b29b      	uxth	r3, r3
 801ac72:	429a      	cmp	r2, r3
 801ac74:	d309      	bcc.n	801ac8a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801ac76:	4b7c      	ldr	r3, [pc, #496]	; (801ae68 <tcp_input+0x294>)
 801ac78:	881a      	ldrh	r2, [r3, #0]
 801ac7a:	4b7d      	ldr	r3, [pc, #500]	; (801ae70 <tcp_input+0x29c>)
 801ac7c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801ac7e:	7cbb      	ldrb	r3, [r7, #18]
 801ac80:	4619      	mov	r1, r3
 801ac82:	6878      	ldr	r0, [r7, #4]
 801ac84:	f7fd fb50 	bl	8018328 <pbuf_remove_header>
 801ac88:	e04e      	b.n	801ad28 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	d105      	bne.n	801ac9e <tcp_input+0xca>
 801ac92:	4b70      	ldr	r3, [pc, #448]	; (801ae54 <tcp_input+0x280>)
 801ac94:	22c2      	movs	r2, #194	; 0xc2
 801ac96:	4977      	ldr	r1, [pc, #476]	; (801ae74 <tcp_input+0x2a0>)
 801ac98:	4870      	ldr	r0, [pc, #448]	; (801ae5c <tcp_input+0x288>)
 801ac9a:	f008 f849 	bl	8022d30 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801ac9e:	2114      	movs	r1, #20
 801aca0:	6878      	ldr	r0, [r7, #4]
 801aca2:	f7fd fb41 	bl	8018328 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	895a      	ldrh	r2, [r3, #10]
 801acaa:	4b71      	ldr	r3, [pc, #452]	; (801ae70 <tcp_input+0x29c>)
 801acac:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801acae:	4b6e      	ldr	r3, [pc, #440]	; (801ae68 <tcp_input+0x294>)
 801acb0:	881a      	ldrh	r2, [r3, #0]
 801acb2:	4b6f      	ldr	r3, [pc, #444]	; (801ae70 <tcp_input+0x29c>)
 801acb4:	881b      	ldrh	r3, [r3, #0]
 801acb6:	1ad3      	subs	r3, r2, r3
 801acb8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801acba:	4b6d      	ldr	r3, [pc, #436]	; (801ae70 <tcp_input+0x29c>)
 801acbc:	881b      	ldrh	r3, [r3, #0]
 801acbe:	4619      	mov	r1, r3
 801acc0:	6878      	ldr	r0, [r7, #4]
 801acc2:	f7fd fb31 	bl	8018328 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	895b      	ldrh	r3, [r3, #10]
 801accc:	8a3a      	ldrh	r2, [r7, #16]
 801acce:	429a      	cmp	r2, r3
 801acd0:	f200 8374 	bhi.w	801b3bc <tcp_input+0x7e8>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801acd4:	687b      	ldr	r3, [r7, #4]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	685b      	ldr	r3, [r3, #4]
 801acda:	4a64      	ldr	r2, [pc, #400]	; (801ae6c <tcp_input+0x298>)
 801acdc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	8a3a      	ldrh	r2, [r7, #16]
 801ace4:	4611      	mov	r1, r2
 801ace6:	4618      	mov	r0, r3
 801ace8:	f7fd fb1e 	bl	8018328 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	891a      	ldrh	r2, [r3, #8]
 801acf0:	8a3b      	ldrh	r3, [r7, #16]
 801acf2:	1ad3      	subs	r3, r2, r3
 801acf4:	b29a      	uxth	r2, r3
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	895b      	ldrh	r3, [r3, #10]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d005      	beq.n	801ad0e <tcp_input+0x13a>
 801ad02:	4b54      	ldr	r3, [pc, #336]	; (801ae54 <tcp_input+0x280>)
 801ad04:	22df      	movs	r2, #223	; 0xdf
 801ad06:	495c      	ldr	r1, [pc, #368]	; (801ae78 <tcp_input+0x2a4>)
 801ad08:	4854      	ldr	r0, [pc, #336]	; (801ae5c <tcp_input+0x288>)
 801ad0a:	f008 f811 	bl	8022d30 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	891a      	ldrh	r2, [r3, #8]
 801ad12:	687b      	ldr	r3, [r7, #4]
 801ad14:	681b      	ldr	r3, [r3, #0]
 801ad16:	891b      	ldrh	r3, [r3, #8]
 801ad18:	429a      	cmp	r2, r3
 801ad1a:	d005      	beq.n	801ad28 <tcp_input+0x154>
 801ad1c:	4b4d      	ldr	r3, [pc, #308]	; (801ae54 <tcp_input+0x280>)
 801ad1e:	22e0      	movs	r2, #224	; 0xe0
 801ad20:	4956      	ldr	r1, [pc, #344]	; (801ae7c <tcp_input+0x2a8>)
 801ad22:	484e      	ldr	r0, [pc, #312]	; (801ae5c <tcp_input+0x288>)
 801ad24:	f008 f804 	bl	8022d30 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ad28:	4b4d      	ldr	r3, [pc, #308]	; (801ae60 <tcp_input+0x28c>)
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	881b      	ldrh	r3, [r3, #0]
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	4a4b      	ldr	r2, [pc, #300]	; (801ae60 <tcp_input+0x28c>)
 801ad32:	6814      	ldr	r4, [r2, #0]
 801ad34:	4618      	mov	r0, r3
 801ad36:	f7f9 fc75 	bl	8014624 <lwip_htons>
 801ad3a:	4603      	mov	r3, r0
 801ad3c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ad3e:	4b48      	ldr	r3, [pc, #288]	; (801ae60 <tcp_input+0x28c>)
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	885b      	ldrh	r3, [r3, #2]
 801ad44:	b29b      	uxth	r3, r3
 801ad46:	4a46      	ldr	r2, [pc, #280]	; (801ae60 <tcp_input+0x28c>)
 801ad48:	6814      	ldr	r4, [r2, #0]
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	f7f9 fc6a 	bl	8014624 <lwip_htons>
 801ad50:	4603      	mov	r3, r0
 801ad52:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ad54:	4b42      	ldr	r3, [pc, #264]	; (801ae60 <tcp_input+0x28c>)
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	685b      	ldr	r3, [r3, #4]
 801ad5a:	4a41      	ldr	r2, [pc, #260]	; (801ae60 <tcp_input+0x28c>)
 801ad5c:	6814      	ldr	r4, [r2, #0]
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f7f9 fc75 	bl	801464e <lwip_htonl>
 801ad64:	4603      	mov	r3, r0
 801ad66:	6063      	str	r3, [r4, #4]
 801ad68:	6863      	ldr	r3, [r4, #4]
 801ad6a:	4a45      	ldr	r2, [pc, #276]	; (801ae80 <tcp_input+0x2ac>)
 801ad6c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ad6e:	4b3c      	ldr	r3, [pc, #240]	; (801ae60 <tcp_input+0x28c>)
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	689b      	ldr	r3, [r3, #8]
 801ad74:	4a3a      	ldr	r2, [pc, #232]	; (801ae60 <tcp_input+0x28c>)
 801ad76:	6814      	ldr	r4, [r2, #0]
 801ad78:	4618      	mov	r0, r3
 801ad7a:	f7f9 fc68 	bl	801464e <lwip_htonl>
 801ad7e:	4603      	mov	r3, r0
 801ad80:	60a3      	str	r3, [r4, #8]
 801ad82:	68a3      	ldr	r3, [r4, #8]
 801ad84:	4a3f      	ldr	r2, [pc, #252]	; (801ae84 <tcp_input+0x2b0>)
 801ad86:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ad88:	4b35      	ldr	r3, [pc, #212]	; (801ae60 <tcp_input+0x28c>)
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	89db      	ldrh	r3, [r3, #14]
 801ad8e:	b29b      	uxth	r3, r3
 801ad90:	4a33      	ldr	r2, [pc, #204]	; (801ae60 <tcp_input+0x28c>)
 801ad92:	6814      	ldr	r4, [r2, #0]
 801ad94:	4618      	mov	r0, r3
 801ad96:	f7f9 fc45 	bl	8014624 <lwip_htons>
 801ad9a:	4603      	mov	r3, r0
 801ad9c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801ad9e:	4b30      	ldr	r3, [pc, #192]	; (801ae60 <tcp_input+0x28c>)
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	899b      	ldrh	r3, [r3, #12]
 801ada4:	b29b      	uxth	r3, r3
 801ada6:	4618      	mov	r0, r3
 801ada8:	f7f9 fc3c 	bl	8014624 <lwip_htons>
 801adac:	4603      	mov	r3, r0
 801adae:	b2db      	uxtb	r3, r3
 801adb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801adb4:	b2da      	uxtb	r2, r3
 801adb6:	4b34      	ldr	r3, [pc, #208]	; (801ae88 <tcp_input+0x2b4>)
 801adb8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801adba:	687b      	ldr	r3, [r7, #4]
 801adbc:	891a      	ldrh	r2, [r3, #8]
 801adbe:	4b33      	ldr	r3, [pc, #204]	; (801ae8c <tcp_input+0x2b8>)
 801adc0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801adc2:	4b31      	ldr	r3, [pc, #196]	; (801ae88 <tcp_input+0x2b4>)
 801adc4:	781b      	ldrb	r3, [r3, #0]
 801adc6:	f003 0303 	and.w	r3, r3, #3
 801adca:	2b00      	cmp	r3, #0
 801adcc:	d00c      	beq.n	801ade8 <tcp_input+0x214>
    tcplen++;
 801adce:	4b2f      	ldr	r3, [pc, #188]	; (801ae8c <tcp_input+0x2b8>)
 801add0:	881b      	ldrh	r3, [r3, #0]
 801add2:	3301      	adds	r3, #1
 801add4:	b29a      	uxth	r2, r3
 801add6:	4b2d      	ldr	r3, [pc, #180]	; (801ae8c <tcp_input+0x2b8>)
 801add8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	891a      	ldrh	r2, [r3, #8]
 801adde:	4b2b      	ldr	r3, [pc, #172]	; (801ae8c <tcp_input+0x2b8>)
 801ade0:	881b      	ldrh	r3, [r3, #0]
 801ade2:	429a      	cmp	r2, r3
 801ade4:	f200 82ec 	bhi.w	801b3c0 <tcp_input+0x7ec>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801ade8:	2300      	movs	r3, #0
 801adea:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801adec:	4b28      	ldr	r3, [pc, #160]	; (801ae90 <tcp_input+0x2bc>)
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	61fb      	str	r3, [r7, #28]
 801adf2:	e09d      	b.n	801af30 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801adf4:	69fb      	ldr	r3, [r7, #28]
 801adf6:	7f1b      	ldrb	r3, [r3, #28]
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d105      	bne.n	801ae08 <tcp_input+0x234>
 801adfc:	4b15      	ldr	r3, [pc, #84]	; (801ae54 <tcp_input+0x280>)
 801adfe:	22fb      	movs	r2, #251	; 0xfb
 801ae00:	4924      	ldr	r1, [pc, #144]	; (801ae94 <tcp_input+0x2c0>)
 801ae02:	4816      	ldr	r0, [pc, #88]	; (801ae5c <tcp_input+0x288>)
 801ae04:	f007 ff94 	bl	8022d30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ae08:	69fb      	ldr	r3, [r7, #28]
 801ae0a:	7f1b      	ldrb	r3, [r3, #28]
 801ae0c:	2b0a      	cmp	r3, #10
 801ae0e:	d105      	bne.n	801ae1c <tcp_input+0x248>
 801ae10:	4b10      	ldr	r3, [pc, #64]	; (801ae54 <tcp_input+0x280>)
 801ae12:	22fc      	movs	r2, #252	; 0xfc
 801ae14:	4920      	ldr	r1, [pc, #128]	; (801ae98 <tcp_input+0x2c4>)
 801ae16:	4811      	ldr	r0, [pc, #68]	; (801ae5c <tcp_input+0x288>)
 801ae18:	f007 ff8a 	bl	8022d30 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ae1c:	69fb      	ldr	r3, [r7, #28]
 801ae1e:	7f1b      	ldrb	r3, [r3, #28]
 801ae20:	2b01      	cmp	r3, #1
 801ae22:	d105      	bne.n	801ae30 <tcp_input+0x25c>
 801ae24:	4b0b      	ldr	r3, [pc, #44]	; (801ae54 <tcp_input+0x280>)
 801ae26:	22fd      	movs	r2, #253	; 0xfd
 801ae28:	491c      	ldr	r1, [pc, #112]	; (801ae9c <tcp_input+0x2c8>)
 801ae2a:	480c      	ldr	r0, [pc, #48]	; (801ae5c <tcp_input+0x288>)
 801ae2c:	f007 ff80 	bl	8022d30 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae30:	69fb      	ldr	r3, [r7, #28]
 801ae32:	7a1b      	ldrb	r3, [r3, #8]
 801ae34:	2b00      	cmp	r3, #0
 801ae36:	d033      	beq.n	801aea0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ae38:	69fb      	ldr	r3, [r7, #28]
 801ae3a:	7a1a      	ldrb	r2, [r3, #8]
 801ae3c:	4b09      	ldr	r3, [pc, #36]	; (801ae64 <tcp_input+0x290>)
 801ae3e:	685b      	ldr	r3, [r3, #4]
 801ae40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ae44:	3301      	adds	r3, #1
 801ae46:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae48:	429a      	cmp	r2, r3
 801ae4a:	d029      	beq.n	801aea0 <tcp_input+0x2cc>
      prev = pcb;
 801ae4c:	69fb      	ldr	r3, [r7, #28]
 801ae4e:	61bb      	str	r3, [r7, #24]
      continue;
 801ae50:	e06b      	b.n	801af2a <tcp_input+0x356>
 801ae52:	bf00      	nop
 801ae54:	08026ccc 	.word	0x08026ccc
 801ae58:	08026d38 	.word	0x08026d38
 801ae5c:	08026d50 	.word	0x08026d50
 801ae60:	20023904 	.word	0x20023904
 801ae64:	20018f08 	.word	0x20018f08
 801ae68:	20023908 	.word	0x20023908
 801ae6c:	2002390c 	.word	0x2002390c
 801ae70:	2002390a 	.word	0x2002390a
 801ae74:	08026d78 	.word	0x08026d78
 801ae78:	08026d88 	.word	0x08026d88
 801ae7c:	08026d94 	.word	0x08026d94
 801ae80:	20023914 	.word	0x20023914
 801ae84:	20023918 	.word	0x20023918
 801ae88:	20023920 	.word	0x20023920
 801ae8c:	2002391e 	.word	0x2002391e
 801ae90:	200238e8 	.word	0x200238e8
 801ae94:	08026db4 	.word	0x08026db4
 801ae98:	08026ddc 	.word	0x08026ddc
 801ae9c:	08026e08 	.word	0x08026e08
    }

    if (pcb->remote_port == tcphdr->src &&
 801aea0:	69fb      	ldr	r3, [r7, #28]
 801aea2:	8c1a      	ldrh	r2, [r3, #32]
 801aea4:	4b72      	ldr	r3, [pc, #456]	; (801b070 <tcp_input+0x49c>)
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	881b      	ldrh	r3, [r3, #0]
 801aeaa:	b29b      	uxth	r3, r3
 801aeac:	429a      	cmp	r2, r3
 801aeae:	d13a      	bne.n	801af26 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801aeb0:	69fb      	ldr	r3, [r7, #28]
 801aeb2:	8bda      	ldrh	r2, [r3, #30]
 801aeb4:	4b6e      	ldr	r3, [pc, #440]	; (801b070 <tcp_input+0x49c>)
 801aeb6:	681b      	ldr	r3, [r3, #0]
 801aeb8:	885b      	ldrh	r3, [r3, #2]
 801aeba:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801aebc:	429a      	cmp	r2, r3
 801aebe:	d132      	bne.n	801af26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801aec0:	69fb      	ldr	r3, [r7, #28]
 801aec2:	685a      	ldr	r2, [r3, #4]
 801aec4:	4b6b      	ldr	r3, [pc, #428]	; (801b074 <tcp_input+0x4a0>)
 801aec6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801aec8:	429a      	cmp	r2, r3
 801aeca:	d12c      	bne.n	801af26 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801aecc:	69fb      	ldr	r3, [r7, #28]
 801aece:	681a      	ldr	r2, [r3, #0]
 801aed0:	4b68      	ldr	r3, [pc, #416]	; (801b074 <tcp_input+0x4a0>)
 801aed2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801aed4:	429a      	cmp	r2, r3
 801aed6:	d126      	bne.n	801af26 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801aed8:	69fb      	ldr	r3, [r7, #28]
 801aeda:	68db      	ldr	r3, [r3, #12]
 801aedc:	69fa      	ldr	r2, [r7, #28]
 801aede:	429a      	cmp	r2, r3
 801aee0:	d106      	bne.n	801aef0 <tcp_input+0x31c>
 801aee2:	4b65      	ldr	r3, [pc, #404]	; (801b078 <tcp_input+0x4a4>)
 801aee4:	f240 120d 	movw	r2, #269	; 0x10d
 801aee8:	4964      	ldr	r1, [pc, #400]	; (801b07c <tcp_input+0x4a8>)
 801aeea:	4865      	ldr	r0, [pc, #404]	; (801b080 <tcp_input+0x4ac>)
 801aeec:	f007 ff20 	bl	8022d30 <iprintf>
      if (prev != NULL) {
 801aef0:	69bb      	ldr	r3, [r7, #24]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d00a      	beq.n	801af0c <tcp_input+0x338>
        prev->next = pcb->next;
 801aef6:	69fb      	ldr	r3, [r7, #28]
 801aef8:	68da      	ldr	r2, [r3, #12]
 801aefa:	69bb      	ldr	r3, [r7, #24]
 801aefc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801aefe:	4b61      	ldr	r3, [pc, #388]	; (801b084 <tcp_input+0x4b0>)
 801af00:	681a      	ldr	r2, [r3, #0]
 801af02:	69fb      	ldr	r3, [r7, #28]
 801af04:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801af06:	4a5f      	ldr	r2, [pc, #380]	; (801b084 <tcp_input+0x4b0>)
 801af08:	69fb      	ldr	r3, [r7, #28]
 801af0a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801af0c:	69fb      	ldr	r3, [r7, #28]
 801af0e:	68db      	ldr	r3, [r3, #12]
 801af10:	69fa      	ldr	r2, [r7, #28]
 801af12:	429a      	cmp	r2, r3
 801af14:	d111      	bne.n	801af3a <tcp_input+0x366>
 801af16:	4b58      	ldr	r3, [pc, #352]	; (801b078 <tcp_input+0x4a4>)
 801af18:	f240 1215 	movw	r2, #277	; 0x115
 801af1c:	495a      	ldr	r1, [pc, #360]	; (801b088 <tcp_input+0x4b4>)
 801af1e:	4858      	ldr	r0, [pc, #352]	; (801b080 <tcp_input+0x4ac>)
 801af20:	f007 ff06 	bl	8022d30 <iprintf>
      break;
 801af24:	e009      	b.n	801af3a <tcp_input+0x366>
    }
    prev = pcb;
 801af26:	69fb      	ldr	r3, [r7, #28]
 801af28:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801af2a:	69fb      	ldr	r3, [r7, #28]
 801af2c:	68db      	ldr	r3, [r3, #12]
 801af2e:	61fb      	str	r3, [r7, #28]
 801af30:	69fb      	ldr	r3, [r7, #28]
 801af32:	2b00      	cmp	r3, #0
 801af34:	f47f af5e 	bne.w	801adf4 <tcp_input+0x220>
 801af38:	e000      	b.n	801af3c <tcp_input+0x368>
      break;
 801af3a:	bf00      	nop
  }

  if (pcb == NULL) {
 801af3c:	69fb      	ldr	r3, [r7, #28]
 801af3e:	2b00      	cmp	r3, #0
 801af40:	f040 80aa 	bne.w	801b098 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801af44:	4b51      	ldr	r3, [pc, #324]	; (801b08c <tcp_input+0x4b8>)
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	61fb      	str	r3, [r7, #28]
 801af4a:	e03f      	b.n	801afcc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801af4c:	69fb      	ldr	r3, [r7, #28]
 801af4e:	7f1b      	ldrb	r3, [r3, #28]
 801af50:	2b0a      	cmp	r3, #10
 801af52:	d006      	beq.n	801af62 <tcp_input+0x38e>
 801af54:	4b48      	ldr	r3, [pc, #288]	; (801b078 <tcp_input+0x4a4>)
 801af56:	f240 121f 	movw	r2, #287	; 0x11f
 801af5a:	494d      	ldr	r1, [pc, #308]	; (801b090 <tcp_input+0x4bc>)
 801af5c:	4848      	ldr	r0, [pc, #288]	; (801b080 <tcp_input+0x4ac>)
 801af5e:	f007 fee7 	bl	8022d30 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801af62:	69fb      	ldr	r3, [r7, #28]
 801af64:	7a1b      	ldrb	r3, [r3, #8]
 801af66:	2b00      	cmp	r3, #0
 801af68:	d009      	beq.n	801af7e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801af6a:	69fb      	ldr	r3, [r7, #28]
 801af6c:	7a1a      	ldrb	r2, [r3, #8]
 801af6e:	4b41      	ldr	r3, [pc, #260]	; (801b074 <tcp_input+0x4a0>)
 801af70:	685b      	ldr	r3, [r3, #4]
 801af72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801af76:	3301      	adds	r3, #1
 801af78:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801af7a:	429a      	cmp	r2, r3
 801af7c:	d122      	bne.n	801afc4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801af7e:	69fb      	ldr	r3, [r7, #28]
 801af80:	8c1a      	ldrh	r2, [r3, #32]
 801af82:	4b3b      	ldr	r3, [pc, #236]	; (801b070 <tcp_input+0x49c>)
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	881b      	ldrh	r3, [r3, #0]
 801af88:	b29b      	uxth	r3, r3
 801af8a:	429a      	cmp	r2, r3
 801af8c:	d11b      	bne.n	801afc6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801af8e:	69fb      	ldr	r3, [r7, #28]
 801af90:	8bda      	ldrh	r2, [r3, #30]
 801af92:	4b37      	ldr	r3, [pc, #220]	; (801b070 <tcp_input+0x49c>)
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	885b      	ldrh	r3, [r3, #2]
 801af98:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801af9a:	429a      	cmp	r2, r3
 801af9c:	d113      	bne.n	801afc6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801af9e:	69fb      	ldr	r3, [r7, #28]
 801afa0:	685a      	ldr	r2, [r3, #4]
 801afa2:	4b34      	ldr	r3, [pc, #208]	; (801b074 <tcp_input+0x4a0>)
 801afa4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801afa6:	429a      	cmp	r2, r3
 801afa8:	d10d      	bne.n	801afc6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801afaa:	69fb      	ldr	r3, [r7, #28]
 801afac:	681a      	ldr	r2, [r3, #0]
 801afae:	4b31      	ldr	r3, [pc, #196]	; (801b074 <tcp_input+0x4a0>)
 801afb0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801afb2:	429a      	cmp	r2, r3
 801afb4:	d107      	bne.n	801afc6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801afb6:	69f8      	ldr	r0, [r7, #28]
 801afb8:	f000 fb68 	bl	801b68c <tcp_timewait_input>
        }
        pbuf_free(p);
 801afbc:	6878      	ldr	r0, [r7, #4]
 801afbe:	f7fd fa39 	bl	8018434 <pbuf_free>
        return;
 801afc2:	e203      	b.n	801b3cc <tcp_input+0x7f8>
        continue;
 801afc4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801afc6:	69fb      	ldr	r3, [r7, #28]
 801afc8:	68db      	ldr	r3, [r3, #12]
 801afca:	61fb      	str	r3, [r7, #28]
 801afcc:	69fb      	ldr	r3, [r7, #28]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d1bc      	bne.n	801af4c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801afd2:	2300      	movs	r3, #0
 801afd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801afd6:	4b2f      	ldr	r3, [pc, #188]	; (801b094 <tcp_input+0x4c0>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	617b      	str	r3, [r7, #20]
 801afdc:	e02a      	b.n	801b034 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801afde:	697b      	ldr	r3, [r7, #20]
 801afe0:	7a1b      	ldrb	r3, [r3, #8]
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	d00c      	beq.n	801b000 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801afe6:	697b      	ldr	r3, [r7, #20]
 801afe8:	7a1a      	ldrb	r2, [r3, #8]
 801afea:	4b22      	ldr	r3, [pc, #136]	; (801b074 <tcp_input+0x4a0>)
 801afec:	685b      	ldr	r3, [r3, #4]
 801afee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aff2:	3301      	adds	r3, #1
 801aff4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801aff6:	429a      	cmp	r2, r3
 801aff8:	d002      	beq.n	801b000 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801affa:	697b      	ldr	r3, [r7, #20]
 801affc:	61bb      	str	r3, [r7, #24]
        continue;
 801affe:	e016      	b.n	801b02e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b000:	697b      	ldr	r3, [r7, #20]
 801b002:	8bda      	ldrh	r2, [r3, #30]
 801b004:	4b1a      	ldr	r3, [pc, #104]	; (801b070 <tcp_input+0x49c>)
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	885b      	ldrh	r3, [r3, #2]
 801b00a:	b29b      	uxth	r3, r3
 801b00c:	429a      	cmp	r2, r3
 801b00e:	d10c      	bne.n	801b02a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b010:	697b      	ldr	r3, [r7, #20]
 801b012:	681a      	ldr	r2, [r3, #0]
 801b014:	4b17      	ldr	r3, [pc, #92]	; (801b074 <tcp_input+0x4a0>)
 801b016:	695b      	ldr	r3, [r3, #20]
 801b018:	429a      	cmp	r2, r3
 801b01a:	d00f      	beq.n	801b03c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b01c:	697b      	ldr	r3, [r7, #20]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d00d      	beq.n	801b03e <tcp_input+0x46a>
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d009      	beq.n	801b03e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b02a:	697b      	ldr	r3, [r7, #20]
 801b02c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b02e:	697b      	ldr	r3, [r7, #20]
 801b030:	68db      	ldr	r3, [r3, #12]
 801b032:	617b      	str	r3, [r7, #20]
 801b034:	697b      	ldr	r3, [r7, #20]
 801b036:	2b00      	cmp	r3, #0
 801b038:	d1d1      	bne.n	801afde <tcp_input+0x40a>
 801b03a:	e000      	b.n	801b03e <tcp_input+0x46a>
            break;
 801b03c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b03e:	697b      	ldr	r3, [r7, #20]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d029      	beq.n	801b098 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b044:	69bb      	ldr	r3, [r7, #24]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d00a      	beq.n	801b060 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b04a:	697b      	ldr	r3, [r7, #20]
 801b04c:	68da      	ldr	r2, [r3, #12]
 801b04e:	69bb      	ldr	r3, [r7, #24]
 801b050:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b052:	4b10      	ldr	r3, [pc, #64]	; (801b094 <tcp_input+0x4c0>)
 801b054:	681a      	ldr	r2, [r3, #0]
 801b056:	697b      	ldr	r3, [r7, #20]
 801b058:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b05a:	4a0e      	ldr	r2, [pc, #56]	; (801b094 <tcp_input+0x4c0>)
 801b05c:	697b      	ldr	r3, [r7, #20]
 801b05e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b060:	6978      	ldr	r0, [r7, #20]
 801b062:	f000 fa09 	bl	801b478 <tcp_listen_input>
      }
      pbuf_free(p);
 801b066:	6878      	ldr	r0, [r7, #4]
 801b068:	f7fd f9e4 	bl	8018434 <pbuf_free>
      return;
 801b06c:	e1ae      	b.n	801b3cc <tcp_input+0x7f8>
 801b06e:	bf00      	nop
 801b070:	20023904 	.word	0x20023904
 801b074:	20018f08 	.word	0x20018f08
 801b078:	08026ccc 	.word	0x08026ccc
 801b07c:	08026e30 	.word	0x08026e30
 801b080:	08026d50 	.word	0x08026d50
 801b084:	200238e8 	.word	0x200238e8
 801b088:	08026e5c 	.word	0x08026e5c
 801b08c:	200238ec 	.word	0x200238ec
 801b090:	08026e88 	.word	0x08026e88
 801b094:	200238e4 	.word	0x200238e4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b098:	69fb      	ldr	r3, [r7, #28]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	f000 815e 	beq.w	801b35c <tcp_input+0x788>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b0a0:	4b98      	ldr	r3, [pc, #608]	; (801b304 <tcp_input+0x730>)
 801b0a2:	2200      	movs	r2, #0
 801b0a4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	891a      	ldrh	r2, [r3, #8]
 801b0aa:	4b96      	ldr	r3, [pc, #600]	; (801b304 <tcp_input+0x730>)
 801b0ac:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b0ae:	4a95      	ldr	r2, [pc, #596]	; (801b304 <tcp_input+0x730>)
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b0b4:	4b94      	ldr	r3, [pc, #592]	; (801b308 <tcp_input+0x734>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	4a92      	ldr	r2, [pc, #584]	; (801b304 <tcp_input+0x730>)
 801b0ba:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b0bc:	4b93      	ldr	r3, [pc, #588]	; (801b30c <tcp_input+0x738>)
 801b0be:	2200      	movs	r2, #0
 801b0c0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b0c2:	4b93      	ldr	r3, [pc, #588]	; (801b310 <tcp_input+0x73c>)
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b0c8:	4b92      	ldr	r3, [pc, #584]	; (801b314 <tcp_input+0x740>)
 801b0ca:	2200      	movs	r2, #0
 801b0cc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b0ce:	4b92      	ldr	r3, [pc, #584]	; (801b318 <tcp_input+0x744>)
 801b0d0:	781b      	ldrb	r3, [r3, #0]
 801b0d2:	f003 0308 	and.w	r3, r3, #8
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d006      	beq.n	801b0e8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	7b5b      	ldrb	r3, [r3, #13]
 801b0de:	f043 0301 	orr.w	r3, r3, #1
 801b0e2:	b2da      	uxtb	r2, r3
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b0e8:	69fb      	ldr	r3, [r7, #28]
 801b0ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d018      	beq.n	801b124 <tcp_input+0x550>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b0f2:	69f8      	ldr	r0, [r7, #28]
 801b0f4:	f7fe ffb0 	bl	801a058 <tcp_process_refused_data>
 801b0f8:	4603      	mov	r3, r0
 801b0fa:	f113 0f0d 	cmn.w	r3, #13
 801b0fe:	d008      	beq.n	801b112 <tcp_input+0x53e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b100:	69fb      	ldr	r3, [r7, #28]
 801b102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b106:	2b00      	cmp	r3, #0
 801b108:	d00c      	beq.n	801b124 <tcp_input+0x550>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b10a:	4b84      	ldr	r3, [pc, #528]	; (801b31c <tcp_input+0x748>)
 801b10c:	881b      	ldrh	r3, [r3, #0]
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d008      	beq.n	801b124 <tcp_input+0x550>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b112:	69fb      	ldr	r3, [r7, #28]
 801b114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b116:	2b00      	cmp	r3, #0
 801b118:	f040 80e8 	bne.w	801b2ec <tcp_input+0x718>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b11c:	69f8      	ldr	r0, [r7, #28]
 801b11e:	f003 fe1b 	bl	801ed58 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b122:	e0e3      	b.n	801b2ec <tcp_input+0x718>
      }
    }
    tcp_input_pcb = pcb;
 801b124:	4a7e      	ldr	r2, [pc, #504]	; (801b320 <tcp_input+0x74c>)
 801b126:	69fb      	ldr	r3, [r7, #28]
 801b128:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b12a:	69f8      	ldr	r0, [r7, #28]
 801b12c:	f000 fb28 	bl	801b780 <tcp_process>
 801b130:	4603      	mov	r3, r0
 801b132:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b134:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b138:	f113 0f0d 	cmn.w	r3, #13
 801b13c:	f000 80d8 	beq.w	801b2f0 <tcp_input+0x71c>
      if (recv_flags & TF_RESET) {
 801b140:	4b73      	ldr	r3, [pc, #460]	; (801b310 <tcp_input+0x73c>)
 801b142:	781b      	ldrb	r3, [r3, #0]
 801b144:	f003 0308 	and.w	r3, r3, #8
 801b148:	2b00      	cmp	r3, #0
 801b14a:	d015      	beq.n	801b178 <tcp_input+0x5a4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b14c:	69fb      	ldr	r3, [r7, #28]
 801b14e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b152:	2b00      	cmp	r3, #0
 801b154:	d008      	beq.n	801b168 <tcp_input+0x594>
 801b156:	69fb      	ldr	r3, [r7, #28]
 801b158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b15c:	69fa      	ldr	r2, [r7, #28]
 801b15e:	6912      	ldr	r2, [r2, #16]
 801b160:	f06f 010d 	mvn.w	r1, #13
 801b164:	4610      	mov	r0, r2
 801b166:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b168:	69f9      	ldr	r1, [r7, #28]
 801b16a:	486e      	ldr	r0, [pc, #440]	; (801b324 <tcp_input+0x750>)
 801b16c:	f7ff fb24 	bl	801a7b8 <tcp_pcb_remove>
        tcp_free(pcb);
 801b170:	69f8      	ldr	r0, [r7, #28]
 801b172:	f7fd fdc1 	bl	8018cf8 <tcp_free>
 801b176:	e0de      	b.n	801b336 <tcp_input+0x762>
      } else {
        err = ERR_OK;
 801b178:	2300      	movs	r3, #0
 801b17a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b17c:	4b65      	ldr	r3, [pc, #404]	; (801b314 <tcp_input+0x740>)
 801b17e:	881b      	ldrh	r3, [r3, #0]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d01d      	beq.n	801b1c0 <tcp_input+0x5ec>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b184:	4b63      	ldr	r3, [pc, #396]	; (801b314 <tcp_input+0x740>)
 801b186:	881b      	ldrh	r3, [r3, #0]
 801b188:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b18a:	69fb      	ldr	r3, [r7, #28]
 801b18c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b190:	2b00      	cmp	r3, #0
 801b192:	d00a      	beq.n	801b1aa <tcp_input+0x5d6>
 801b194:	69fb      	ldr	r3, [r7, #28]
 801b196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b19a:	69fa      	ldr	r2, [r7, #28]
 801b19c:	6910      	ldr	r0, [r2, #16]
 801b19e:	89fa      	ldrh	r2, [r7, #14]
 801b1a0:	69f9      	ldr	r1, [r7, #28]
 801b1a2:	4798      	blx	r3
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	74fb      	strb	r3, [r7, #19]
 801b1a8:	e001      	b.n	801b1ae <tcp_input+0x5da>
 801b1aa:	2300      	movs	r3, #0
 801b1ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b1ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b1b2:	f113 0f0d 	cmn.w	r3, #13
 801b1b6:	f000 809d 	beq.w	801b2f4 <tcp_input+0x720>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b1ba:	4b56      	ldr	r3, [pc, #344]	; (801b314 <tcp_input+0x740>)
 801b1bc:	2200      	movs	r2, #0
 801b1be:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b1c0:	69f8      	ldr	r0, [r7, #28]
 801b1c2:	f000 f919 	bl	801b3f8 <tcp_input_delayed_close>
 801b1c6:	4603      	mov	r3, r0
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	f040 8095 	bne.w	801b2f8 <tcp_input+0x724>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b1ce:	4b4f      	ldr	r3, [pc, #316]	; (801b30c <tcp_input+0x738>)
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d043      	beq.n	801b25e <tcp_input+0x68a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b1d6:	69fb      	ldr	r3, [r7, #28]
 801b1d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b1dc:	2b00      	cmp	r3, #0
 801b1de:	d006      	beq.n	801b1ee <tcp_input+0x61a>
 801b1e0:	4b51      	ldr	r3, [pc, #324]	; (801b328 <tcp_input+0x754>)
 801b1e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b1e6:	4951      	ldr	r1, [pc, #324]	; (801b32c <tcp_input+0x758>)
 801b1e8:	4851      	ldr	r0, [pc, #324]	; (801b330 <tcp_input+0x75c>)
 801b1ea:	f007 fda1 	bl	8022d30 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b1ee:	69fb      	ldr	r3, [r7, #28]
 801b1f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b1f2:	f003 0310 	and.w	r3, r3, #16
 801b1f6:	2b00      	cmp	r3, #0
 801b1f8:	d008      	beq.n	801b20c <tcp_input+0x638>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b1fa:	4b44      	ldr	r3, [pc, #272]	; (801b30c <tcp_input+0x738>)
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	4618      	mov	r0, r3
 801b200:	f7fd f918 	bl	8018434 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b204:	69f8      	ldr	r0, [r7, #28]
 801b206:	f7fe f8cb 	bl	80193a0 <tcp_abort>
            goto aborted;
 801b20a:	e094      	b.n	801b336 <tcp_input+0x762>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b20c:	69fb      	ldr	r3, [r7, #28]
 801b20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b212:	2b00      	cmp	r3, #0
 801b214:	d00c      	beq.n	801b230 <tcp_input+0x65c>
 801b216:	69fb      	ldr	r3, [r7, #28]
 801b218:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801b21c:	69fb      	ldr	r3, [r7, #28]
 801b21e:	6918      	ldr	r0, [r3, #16]
 801b220:	4b3a      	ldr	r3, [pc, #232]	; (801b30c <tcp_input+0x738>)
 801b222:	681a      	ldr	r2, [r3, #0]
 801b224:	2300      	movs	r3, #0
 801b226:	69f9      	ldr	r1, [r7, #28]
 801b228:	47a0      	blx	r4
 801b22a:	4603      	mov	r3, r0
 801b22c:	74fb      	strb	r3, [r7, #19]
 801b22e:	e008      	b.n	801b242 <tcp_input+0x66e>
 801b230:	4b36      	ldr	r3, [pc, #216]	; (801b30c <tcp_input+0x738>)
 801b232:	681a      	ldr	r2, [r3, #0]
 801b234:	2300      	movs	r3, #0
 801b236:	69f9      	ldr	r1, [r7, #28]
 801b238:	2000      	movs	r0, #0
 801b23a:	f7fe ffe7 	bl	801a20c <tcp_recv_null>
 801b23e:	4603      	mov	r3, r0
 801b240:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b242:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b246:	f113 0f0d 	cmn.w	r3, #13
 801b24a:	d057      	beq.n	801b2fc <tcp_input+0x728>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b24c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b250:	2b00      	cmp	r3, #0
 801b252:	d004      	beq.n	801b25e <tcp_input+0x68a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b254:	4b2d      	ldr	r3, [pc, #180]	; (801b30c <tcp_input+0x738>)
 801b256:	681a      	ldr	r2, [r3, #0]
 801b258:	69fb      	ldr	r3, [r7, #28]
 801b25a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b25e:	4b2c      	ldr	r3, [pc, #176]	; (801b310 <tcp_input+0x73c>)
 801b260:	781b      	ldrb	r3, [r3, #0]
 801b262:	f003 0320 	and.w	r3, r3, #32
 801b266:	2b00      	cmp	r3, #0
 801b268:	d033      	beq.n	801b2d2 <tcp_input+0x6fe>
          if (pcb->refused_data != NULL) {
 801b26a:	69fb      	ldr	r3, [r7, #28]
 801b26c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b270:	2b00      	cmp	r3, #0
 801b272:	d00b      	beq.n	801b28c <tcp_input+0x6b8>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b274:	69fb      	ldr	r3, [r7, #28]
 801b276:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b27a:	7b5a      	ldrb	r2, [r3, #13]
 801b27c:	69fb      	ldr	r3, [r7, #28]
 801b27e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b282:	f042 0220 	orr.w	r2, r2, #32
 801b286:	b2d2      	uxtb	r2, r2
 801b288:	735a      	strb	r2, [r3, #13]
 801b28a:	e022      	b.n	801b2d2 <tcp_input+0x6fe>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b28c:	69fb      	ldr	r3, [r7, #28]
 801b28e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b290:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b294:	d005      	beq.n	801b2a2 <tcp_input+0x6ce>
              pcb->rcv_wnd++;
 801b296:	69fb      	ldr	r3, [r7, #28]
 801b298:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b29a:	3301      	adds	r3, #1
 801b29c:	b29a      	uxth	r2, r3
 801b29e:	69fb      	ldr	r3, [r7, #28]
 801b2a0:	861a      	strh	r2, [r3, #48]	; 0x30
            }
            TCP_EVENT_CLOSED(pcb, err);
 801b2a2:	69fb      	ldr	r3, [r7, #28]
 801b2a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d00b      	beq.n	801b2c4 <tcp_input+0x6f0>
 801b2ac:	69fb      	ldr	r3, [r7, #28]
 801b2ae:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 801b2b2:	69fb      	ldr	r3, [r7, #28]
 801b2b4:	6918      	ldr	r0, [r3, #16]
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	2200      	movs	r2, #0
 801b2ba:	69f9      	ldr	r1, [r7, #28]
 801b2bc:	47a0      	blx	r4
 801b2be:	4603      	mov	r3, r0
 801b2c0:	74fb      	strb	r3, [r7, #19]
 801b2c2:	e001      	b.n	801b2c8 <tcp_input+0x6f4>
 801b2c4:	2300      	movs	r3, #0
 801b2c6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b2c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b2cc:	f113 0f0d 	cmn.w	r3, #13
 801b2d0:	d016      	beq.n	801b300 <tcp_input+0x72c>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801b2d2:	4b13      	ldr	r3, [pc, #76]	; (801b320 <tcp_input+0x74c>)
 801b2d4:	2200      	movs	r2, #0
 801b2d6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b2d8:	69f8      	ldr	r0, [r7, #28]
 801b2da:	f000 f88d 	bl	801b3f8 <tcp_input_delayed_close>
 801b2de:	4603      	mov	r3, r0
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d127      	bne.n	801b334 <tcp_input+0x760>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801b2e4:	69f8      	ldr	r0, [r7, #28]
 801b2e6:	f002 ff31 	bl	801e14c <tcp_output>
 801b2ea:	e024      	b.n	801b336 <tcp_input+0x762>
        goto aborted;
 801b2ec:	bf00      	nop
 801b2ee:	e022      	b.n	801b336 <tcp_input+0x762>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801b2f0:	bf00      	nop
 801b2f2:	e020      	b.n	801b336 <tcp_input+0x762>
              goto aborted;
 801b2f4:	bf00      	nop
 801b2f6:	e01e      	b.n	801b336 <tcp_input+0x762>
          goto aborted;
 801b2f8:	bf00      	nop
 801b2fa:	e01c      	b.n	801b336 <tcp_input+0x762>
            goto aborted;
 801b2fc:	bf00      	nop
 801b2fe:	e01a      	b.n	801b336 <tcp_input+0x762>
              goto aborted;
 801b300:	bf00      	nop
 801b302:	e018      	b.n	801b336 <tcp_input+0x762>
 801b304:	200238f4 	.word	0x200238f4
 801b308:	20023904 	.word	0x20023904
 801b30c:	20023924 	.word	0x20023924
 801b310:	20023921 	.word	0x20023921
 801b314:	2002391c 	.word	0x2002391c
 801b318:	20023920 	.word	0x20023920
 801b31c:	2002391e 	.word	0x2002391e
 801b320:	20023928 	.word	0x20023928
 801b324:	200238e8 	.word	0x200238e8
 801b328:	08026ccc 	.word	0x08026ccc
 801b32c:	08026eb8 	.word	0x08026eb8
 801b330:	08026d50 	.word	0x08026d50
          goto aborted;
 801b334:	bf00      	nop
    tcp_input_pcb = NULL;
 801b336:	4b27      	ldr	r3, [pc, #156]	; (801b3d4 <tcp_input+0x800>)
 801b338:	2200      	movs	r2, #0
 801b33a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801b33c:	4b26      	ldr	r3, [pc, #152]	; (801b3d8 <tcp_input+0x804>)
 801b33e:	2200      	movs	r2, #0
 801b340:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801b342:	4b26      	ldr	r3, [pc, #152]	; (801b3dc <tcp_input+0x808>)
 801b344:	685b      	ldr	r3, [r3, #4]
 801b346:	2b00      	cmp	r3, #0
 801b348:	d03f      	beq.n	801b3ca <tcp_input+0x7f6>
      pbuf_free(inseg.p);
 801b34a:	4b24      	ldr	r3, [pc, #144]	; (801b3dc <tcp_input+0x808>)
 801b34c:	685b      	ldr	r3, [r3, #4]
 801b34e:	4618      	mov	r0, r3
 801b350:	f7fd f870 	bl	8018434 <pbuf_free>
      inseg.p = NULL;
 801b354:	4b21      	ldr	r3, [pc, #132]	; (801b3dc <tcp_input+0x808>)
 801b356:	2200      	movs	r2, #0
 801b358:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801b35a:	e036      	b.n	801b3ca <tcp_input+0x7f6>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b35c:	4b20      	ldr	r3, [pc, #128]	; (801b3e0 <tcp_input+0x80c>)
 801b35e:	681b      	ldr	r3, [r3, #0]
 801b360:	899b      	ldrh	r3, [r3, #12]
 801b362:	b29b      	uxth	r3, r3
 801b364:	4618      	mov	r0, r3
 801b366:	f7f9 f95d 	bl	8014624 <lwip_htons>
 801b36a:	4603      	mov	r3, r0
 801b36c:	b2db      	uxtb	r3, r3
 801b36e:	f003 0304 	and.w	r3, r3, #4
 801b372:	2b00      	cmp	r3, #0
 801b374:	d118      	bne.n	801b3a8 <tcp_input+0x7d4>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b376:	4b1b      	ldr	r3, [pc, #108]	; (801b3e4 <tcp_input+0x810>)
 801b378:	6819      	ldr	r1, [r3, #0]
 801b37a:	4b1b      	ldr	r3, [pc, #108]	; (801b3e8 <tcp_input+0x814>)
 801b37c:	881b      	ldrh	r3, [r3, #0]
 801b37e:	461a      	mov	r2, r3
 801b380:	4b1a      	ldr	r3, [pc, #104]	; (801b3ec <tcp_input+0x818>)
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b386:	4b16      	ldr	r3, [pc, #88]	; (801b3e0 <tcp_input+0x80c>)
 801b388:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b38a:	885b      	ldrh	r3, [r3, #2]
 801b38c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b38e:	4a14      	ldr	r2, [pc, #80]	; (801b3e0 <tcp_input+0x80c>)
 801b390:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b392:	8812      	ldrh	r2, [r2, #0]
 801b394:	b292      	uxth	r2, r2
 801b396:	9202      	str	r2, [sp, #8]
 801b398:	9301      	str	r3, [sp, #4]
 801b39a:	4b15      	ldr	r3, [pc, #84]	; (801b3f0 <tcp_input+0x81c>)
 801b39c:	9300      	str	r3, [sp, #0]
 801b39e:	4b15      	ldr	r3, [pc, #84]	; (801b3f4 <tcp_input+0x820>)
 801b3a0:	4602      	mov	r2, r0
 801b3a2:	2000      	movs	r0, #0
 801b3a4:	f003 fc86 	bl	801ecb4 <tcp_rst>
    pbuf_free(p);
 801b3a8:	6878      	ldr	r0, [r7, #4]
 801b3aa:	f7fd f843 	bl	8018434 <pbuf_free>
  return;
 801b3ae:	e00c      	b.n	801b3ca <tcp_input+0x7f6>
    goto dropped;
 801b3b0:	bf00      	nop
 801b3b2:	e006      	b.n	801b3c2 <tcp_input+0x7ee>
    goto dropped;
 801b3b4:	bf00      	nop
 801b3b6:	e004      	b.n	801b3c2 <tcp_input+0x7ee>
    goto dropped;
 801b3b8:	bf00      	nop
 801b3ba:	e002      	b.n	801b3c2 <tcp_input+0x7ee>
      goto dropped;
 801b3bc:	bf00      	nop
 801b3be:	e000      	b.n	801b3c2 <tcp_input+0x7ee>
      goto dropped;
 801b3c0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801b3c2:	6878      	ldr	r0, [r7, #4]
 801b3c4:	f7fd f836 	bl	8018434 <pbuf_free>
 801b3c8:	e000      	b.n	801b3cc <tcp_input+0x7f8>
  return;
 801b3ca:	bf00      	nop
}
 801b3cc:	3724      	adds	r7, #36	; 0x24
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	bd90      	pop	{r4, r7, pc}
 801b3d2:	bf00      	nop
 801b3d4:	20023928 	.word	0x20023928
 801b3d8:	20023924 	.word	0x20023924
 801b3dc:	200238f4 	.word	0x200238f4
 801b3e0:	20023904 	.word	0x20023904
 801b3e4:	20023918 	.word	0x20023918
 801b3e8:	2002391e 	.word	0x2002391e
 801b3ec:	20023914 	.word	0x20023914
 801b3f0:	20018f18 	.word	0x20018f18
 801b3f4:	20018f1c 	.word	0x20018f1c

0801b3f8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	b082      	sub	sp, #8
 801b3fc:	af00      	add	r7, sp, #0
 801b3fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	2b00      	cmp	r3, #0
 801b404:	d106      	bne.n	801b414 <tcp_input_delayed_close+0x1c>
 801b406:	4b17      	ldr	r3, [pc, #92]	; (801b464 <tcp_input_delayed_close+0x6c>)
 801b408:	f240 225a 	movw	r2, #602	; 0x25a
 801b40c:	4916      	ldr	r1, [pc, #88]	; (801b468 <tcp_input_delayed_close+0x70>)
 801b40e:	4817      	ldr	r0, [pc, #92]	; (801b46c <tcp_input_delayed_close+0x74>)
 801b410:	f007 fc8e 	bl	8022d30 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801b414:	4b16      	ldr	r3, [pc, #88]	; (801b470 <tcp_input_delayed_close+0x78>)
 801b416:	781b      	ldrb	r3, [r3, #0]
 801b418:	f003 0310 	and.w	r3, r3, #16
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d01c      	beq.n	801b45a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b424:	f003 0310 	and.w	r3, r3, #16
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d10d      	bne.n	801b448 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b432:	2b00      	cmp	r3, #0
 801b434:	d008      	beq.n	801b448 <tcp_input_delayed_close+0x50>
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b43c:	687a      	ldr	r2, [r7, #4]
 801b43e:	6912      	ldr	r2, [r2, #16]
 801b440:	f06f 010e 	mvn.w	r1, #14
 801b444:	4610      	mov	r0, r2
 801b446:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b448:	6879      	ldr	r1, [r7, #4]
 801b44a:	480a      	ldr	r0, [pc, #40]	; (801b474 <tcp_input_delayed_close+0x7c>)
 801b44c:	f7ff f9b4 	bl	801a7b8 <tcp_pcb_remove>
    tcp_free(pcb);
 801b450:	6878      	ldr	r0, [r7, #4]
 801b452:	f7fd fc51 	bl	8018cf8 <tcp_free>
    return 1;
 801b456:	2301      	movs	r3, #1
 801b458:	e000      	b.n	801b45c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801b45a:	2300      	movs	r3, #0
}
 801b45c:	4618      	mov	r0, r3
 801b45e:	3708      	adds	r7, #8
 801b460:	46bd      	mov	sp, r7
 801b462:	bd80      	pop	{r7, pc}
 801b464:	08026ccc 	.word	0x08026ccc
 801b468:	08026ed4 	.word	0x08026ed4
 801b46c:	08026d50 	.word	0x08026d50
 801b470:	20023921 	.word	0x20023921
 801b474:	200238e8 	.word	0x200238e8

0801b478 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801b478:	b590      	push	{r4, r7, lr}
 801b47a:	b08b      	sub	sp, #44	; 0x2c
 801b47c:	af04      	add	r7, sp, #16
 801b47e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801b480:	4b75      	ldr	r3, [pc, #468]	; (801b658 <tcp_listen_input+0x1e0>)
 801b482:	781b      	ldrb	r3, [r3, #0]
 801b484:	f003 0304 	and.w	r3, r3, #4
 801b488:	2b00      	cmp	r3, #0
 801b48a:	f040 80df 	bne.w	801b64c <tcp_listen_input+0x1d4>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	2b00      	cmp	r3, #0
 801b492:	d106      	bne.n	801b4a2 <tcp_listen_input+0x2a>
 801b494:	4b71      	ldr	r3, [pc, #452]	; (801b65c <tcp_listen_input+0x1e4>)
 801b496:	f240 2281 	movw	r2, #641	; 0x281
 801b49a:	4971      	ldr	r1, [pc, #452]	; (801b660 <tcp_listen_input+0x1e8>)
 801b49c:	4871      	ldr	r0, [pc, #452]	; (801b664 <tcp_listen_input+0x1ec>)
 801b49e:	f007 fc47 	bl	8022d30 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801b4a2:	4b6d      	ldr	r3, [pc, #436]	; (801b658 <tcp_listen_input+0x1e0>)
 801b4a4:	781b      	ldrb	r3, [r3, #0]
 801b4a6:	f003 0310 	and.w	r3, r3, #16
 801b4aa:	2b00      	cmp	r3, #0
 801b4ac:	d019      	beq.n	801b4e2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4ae:	4b6e      	ldr	r3, [pc, #440]	; (801b668 <tcp_listen_input+0x1f0>)
 801b4b0:	6819      	ldr	r1, [r3, #0]
 801b4b2:	4b6e      	ldr	r3, [pc, #440]	; (801b66c <tcp_listen_input+0x1f4>)
 801b4b4:	881b      	ldrh	r3, [r3, #0]
 801b4b6:	461a      	mov	r2, r3
 801b4b8:	4b6d      	ldr	r3, [pc, #436]	; (801b670 <tcp_listen_input+0x1f8>)
 801b4ba:	681b      	ldr	r3, [r3, #0]
 801b4bc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b4be:	4b6d      	ldr	r3, [pc, #436]	; (801b674 <tcp_listen_input+0x1fc>)
 801b4c0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4c2:	885b      	ldrh	r3, [r3, #2]
 801b4c4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b4c6:	4a6b      	ldr	r2, [pc, #428]	; (801b674 <tcp_listen_input+0x1fc>)
 801b4c8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b4ca:	8812      	ldrh	r2, [r2, #0]
 801b4cc:	b292      	uxth	r2, r2
 801b4ce:	9202      	str	r2, [sp, #8]
 801b4d0:	9301      	str	r3, [sp, #4]
 801b4d2:	4b69      	ldr	r3, [pc, #420]	; (801b678 <tcp_listen_input+0x200>)
 801b4d4:	9300      	str	r3, [sp, #0]
 801b4d6:	4b69      	ldr	r3, [pc, #420]	; (801b67c <tcp_listen_input+0x204>)
 801b4d8:	4602      	mov	r2, r0
 801b4da:	6878      	ldr	r0, [r7, #4]
 801b4dc:	f003 fbea 	bl	801ecb4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801b4e0:	e0b6      	b.n	801b650 <tcp_listen_input+0x1d8>
  } else if (flags & TCP_SYN) {
 801b4e2:	4b5d      	ldr	r3, [pc, #372]	; (801b658 <tcp_listen_input+0x1e0>)
 801b4e4:	781b      	ldrb	r3, [r3, #0]
 801b4e6:	f003 0302 	and.w	r3, r3, #2
 801b4ea:	2b00      	cmp	r3, #0
 801b4ec:	f000 80b0 	beq.w	801b650 <tcp_listen_input+0x1d8>
    npcb = tcp_alloc(pcb->prio);
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	7f5b      	ldrb	r3, [r3, #29]
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	f7fe ffad 	bl	801a454 <tcp_alloc>
 801b4fa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801b4fc:	697b      	ldr	r3, [r7, #20]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d111      	bne.n	801b526 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	6a1b      	ldr	r3, [r3, #32]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d00a      	beq.n	801b520 <tcp_listen_input+0xa8>
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	6a1b      	ldr	r3, [r3, #32]
 801b50e:	687a      	ldr	r2, [r7, #4]
 801b510:	6910      	ldr	r0, [r2, #16]
 801b512:	f04f 32ff 	mov.w	r2, #4294967295
 801b516:	2100      	movs	r1, #0
 801b518:	4798      	blx	r3
 801b51a:	4603      	mov	r3, r0
 801b51c:	73bb      	strb	r3, [r7, #14]
      return;
 801b51e:	e098      	b.n	801b652 <tcp_listen_input+0x1da>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b520:	23f0      	movs	r3, #240	; 0xf0
 801b522:	73bb      	strb	r3, [r7, #14]
      return;
 801b524:	e095      	b.n	801b652 <tcp_listen_input+0x1da>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801b526:	4b56      	ldr	r3, [pc, #344]	; (801b680 <tcp_listen_input+0x208>)
 801b528:	695a      	ldr	r2, [r3, #20]
 801b52a:	697b      	ldr	r3, [r7, #20]
 801b52c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801b52e:	4b54      	ldr	r3, [pc, #336]	; (801b680 <tcp_listen_input+0x208>)
 801b530:	691a      	ldr	r2, [r3, #16]
 801b532:	697b      	ldr	r3, [r7, #20]
 801b534:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	8bda      	ldrh	r2, [r3, #30]
 801b53a:	697b      	ldr	r3, [r7, #20]
 801b53c:	83da      	strh	r2, [r3, #30]
    npcb->remote_port = tcphdr->src;
 801b53e:	4b4d      	ldr	r3, [pc, #308]	; (801b674 <tcp_listen_input+0x1fc>)
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	881b      	ldrh	r3, [r3, #0]
 801b544:	b29a      	uxth	r2, r3
 801b546:	697b      	ldr	r3, [r7, #20]
 801b548:	841a      	strh	r2, [r3, #32]
    npcb->state = SYN_RCVD;
 801b54a:	697b      	ldr	r3, [r7, #20]
 801b54c:	2203      	movs	r2, #3
 801b54e:	771a      	strb	r2, [r3, #28]
    npcb->rcv_nxt = seqno + 1;
 801b550:	4b47      	ldr	r3, [pc, #284]	; (801b670 <tcp_listen_input+0x1f8>)
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	1c5a      	adds	r2, r3, #1
 801b556:	697b      	ldr	r3, [r7, #20]
 801b558:	62da      	str	r2, [r3, #44]	; 0x2c
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801b55a:	697b      	ldr	r3, [r7, #20]
 801b55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b55e:	697b      	ldr	r3, [r7, #20]
 801b560:	635a      	str	r2, [r3, #52]	; 0x34
    iss = tcp_next_iss(npcb);
 801b562:	6978      	ldr	r0, [r7, #20]
 801b564:	f7ff f9bc 	bl	801a8e0 <tcp_next_iss>
 801b568:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801b56a:	697b      	ldr	r3, [r7, #20]
 801b56c:	693a      	ldr	r2, [r7, #16]
 801b56e:	661a      	str	r2, [r3, #96]	; 0x60
    npcb->snd_nxt = iss;
 801b570:	697b      	ldr	r3, [r7, #20]
 801b572:	693a      	ldr	r2, [r7, #16]
 801b574:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->lastack = iss;
 801b576:	697b      	ldr	r3, [r7, #20]
 801b578:	693a      	ldr	r2, [r7, #16]
 801b57a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->snd_lbb = iss;
 801b57c:	697b      	ldr	r3, [r7, #20]
 801b57e:	693a      	ldr	r2, [r7, #16]
 801b580:	665a      	str	r2, [r3, #100]	; 0x64
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b582:	4b3b      	ldr	r3, [pc, #236]	; (801b670 <tcp_listen_input+0x1f8>)
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	1e5a      	subs	r2, r3, #1
 801b588:	697b      	ldr	r3, [r7, #20]
 801b58a:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	691a      	ldr	r2, [r3, #16]
 801b590:	697b      	ldr	r3, [r7, #20]
 801b592:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801b594:	697b      	ldr	r3, [r7, #20]
 801b596:	687a      	ldr	r2, [r7, #4]
 801b598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	7a5b      	ldrb	r3, [r3, #9]
 801b5a0:	f003 030c 	and.w	r3, r3, #12
 801b5a4:	b2da      	uxtb	r2, r3
 801b5a6:	697b      	ldr	r3, [r7, #20]
 801b5a8:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	7a1a      	ldrb	r2, [r3, #8]
 801b5ae:	697b      	ldr	r3, [r7, #20]
 801b5b0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801b5b2:	4b34      	ldr	r3, [pc, #208]	; (801b684 <tcp_listen_input+0x20c>)
 801b5b4:	681a      	ldr	r2, [r3, #0]
 801b5b6:	697b      	ldr	r3, [r7, #20]
 801b5b8:	60da      	str	r2, [r3, #12]
 801b5ba:	4a32      	ldr	r2, [pc, #200]	; (801b684 <tcp_listen_input+0x20c>)
 801b5bc:	697b      	ldr	r3, [r7, #20]
 801b5be:	6013      	str	r3, [r2, #0]
 801b5c0:	f003 ff14 	bl	801f3ec <tcp_timer_needed>
 801b5c4:	4b30      	ldr	r3, [pc, #192]	; (801b688 <tcp_listen_input+0x210>)
 801b5c6:	2201      	movs	r2, #1
 801b5c8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801b5ca:	6978      	ldr	r0, [r7, #20]
 801b5cc:	f001 fda0 	bl	801d110 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801b5d0:	4b28      	ldr	r3, [pc, #160]	; (801b674 <tcp_listen_input+0x1fc>)
 801b5d2:	681b      	ldr	r3, [r3, #0]
 801b5d4:	89db      	ldrh	r3, [r3, #14]
 801b5d6:	b29a      	uxth	r2, r3
 801b5d8:	697b      	ldr	r3, [r7, #20]
 801b5da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    npcb->snd_wnd_max = npcb->snd_wnd;
 801b5de:	697b      	ldr	r3, [r7, #20]
 801b5e0:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 801b5e4:	697b      	ldr	r3, [r7, #20]
 801b5e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b5ea:	697b      	ldr	r3, [r7, #20]
 801b5ec:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 801b5ee:	697b      	ldr	r3, [r7, #20]
 801b5f0:	3304      	adds	r3, #4
 801b5f2:	4618      	mov	r0, r3
 801b5f4:	f7fa fa0c 	bl	8015a10 <ip4_route>
 801b5f8:	4601      	mov	r1, r0
 801b5fa:	697b      	ldr	r3, [r7, #20]
 801b5fc:	3304      	adds	r3, #4
 801b5fe:	461a      	mov	r2, r3
 801b600:	4620      	mov	r0, r4
 801b602:	f7ff f993 	bl	801a92c <tcp_eff_send_mss_netif>
 801b606:	4603      	mov	r3, r0
 801b608:	461a      	mov	r2, r3
 801b60a:	697b      	ldr	r3, [r7, #20]
 801b60c:	875a      	strh	r2, [r3, #58]	; 0x3a
    if (tcp_ext_arg_invoke_callbacks_passive_open(pcb, npcb) != ERR_OK) {
 801b60e:	6979      	ldr	r1, [r7, #20]
 801b610:	6878      	ldr	r0, [r7, #4]
 801b612:	f7ff fa89 	bl	801ab28 <tcp_ext_arg_invoke_callbacks_passive_open>
 801b616:	4603      	mov	r3, r0
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d004      	beq.n	801b626 <tcp_listen_input+0x1ae>
      tcp_abandon(npcb, 0);
 801b61c:	2100      	movs	r1, #0
 801b61e:	6978      	ldr	r0, [r7, #20]
 801b620:	f7fd fe00 	bl	8019224 <tcp_abandon>
      return;
 801b624:	e015      	b.n	801b652 <tcp_listen_input+0x1da>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801b626:	2112      	movs	r1, #18
 801b628:	6978      	ldr	r0, [r7, #20]
 801b62a:	f002 fca1 	bl	801df70 <tcp_enqueue_flags>
 801b62e:	4603      	mov	r3, r0
 801b630:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801b632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b636:	2b00      	cmp	r3, #0
 801b638:	d004      	beq.n	801b644 <tcp_listen_input+0x1cc>
      tcp_abandon(npcb, 0);
 801b63a:	2100      	movs	r1, #0
 801b63c:	6978      	ldr	r0, [r7, #20]
 801b63e:	f7fd fdf1 	bl	8019224 <tcp_abandon>
      return;
 801b642:	e006      	b.n	801b652 <tcp_listen_input+0x1da>
    tcp_output(npcb);
 801b644:	6978      	ldr	r0, [r7, #20]
 801b646:	f002 fd81 	bl	801e14c <tcp_output>
  return;
 801b64a:	e001      	b.n	801b650 <tcp_listen_input+0x1d8>
    return;
 801b64c:	bf00      	nop
 801b64e:	e000      	b.n	801b652 <tcp_listen_input+0x1da>
  return;
 801b650:	bf00      	nop
}
 801b652:	371c      	adds	r7, #28
 801b654:	46bd      	mov	sp, r7
 801b656:	bd90      	pop	{r4, r7, pc}
 801b658:	20023920 	.word	0x20023920
 801b65c:	08026ccc 	.word	0x08026ccc
 801b660:	08026efc 	.word	0x08026efc
 801b664:	08026d50 	.word	0x08026d50
 801b668:	20023918 	.word	0x20023918
 801b66c:	2002391e 	.word	0x2002391e
 801b670:	20023914 	.word	0x20023914
 801b674:	20023904 	.word	0x20023904
 801b678:	20018f18 	.word	0x20018f18
 801b67c:	20018f1c 	.word	0x20018f1c
 801b680:	20018f08 	.word	0x20018f08
 801b684:	200238e8 	.word	0x200238e8
 801b688:	200238f0 	.word	0x200238f0

0801b68c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801b68c:	b580      	push	{r7, lr}
 801b68e:	b086      	sub	sp, #24
 801b690:	af04      	add	r7, sp, #16
 801b692:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801b694:	4b2f      	ldr	r3, [pc, #188]	; (801b754 <tcp_timewait_input+0xc8>)
 801b696:	781b      	ldrb	r3, [r3, #0]
 801b698:	f003 0304 	and.w	r3, r3, #4
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d153      	bne.n	801b748 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d106      	bne.n	801b6b4 <tcp_timewait_input+0x28>
 801b6a6:	4b2c      	ldr	r3, [pc, #176]	; (801b758 <tcp_timewait_input+0xcc>)
 801b6a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b6ac:	492b      	ldr	r1, [pc, #172]	; (801b75c <tcp_timewait_input+0xd0>)
 801b6ae:	482c      	ldr	r0, [pc, #176]	; (801b760 <tcp_timewait_input+0xd4>)
 801b6b0:	f007 fb3e 	bl	8022d30 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801b6b4:	4b27      	ldr	r3, [pc, #156]	; (801b754 <tcp_timewait_input+0xc8>)
 801b6b6:	781b      	ldrb	r3, [r3, #0]
 801b6b8:	f003 0302 	and.w	r3, r3, #2
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d02a      	beq.n	801b716 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801b6c0:	4b28      	ldr	r3, [pc, #160]	; (801b764 <tcp_timewait_input+0xd8>)
 801b6c2:	681a      	ldr	r2, [r3, #0]
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6c8:	1ad3      	subs	r3, r2, r3
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	db2d      	blt.n	801b72a <tcp_timewait_input+0x9e>
 801b6ce:	4b25      	ldr	r3, [pc, #148]	; (801b764 <tcp_timewait_input+0xd8>)
 801b6d0:	681a      	ldr	r2, [r3, #0]
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6d6:	6879      	ldr	r1, [r7, #4]
 801b6d8:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 801b6da:	440b      	add	r3, r1
 801b6dc:	1ad3      	subs	r3, r2, r3
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	dc23      	bgt.n	801b72a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6e2:	4b21      	ldr	r3, [pc, #132]	; (801b768 <tcp_timewait_input+0xdc>)
 801b6e4:	6819      	ldr	r1, [r3, #0]
 801b6e6:	4b21      	ldr	r3, [pc, #132]	; (801b76c <tcp_timewait_input+0xe0>)
 801b6e8:	881b      	ldrh	r3, [r3, #0]
 801b6ea:	461a      	mov	r2, r3
 801b6ec:	4b1d      	ldr	r3, [pc, #116]	; (801b764 <tcp_timewait_input+0xd8>)
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b6f2:	4b1f      	ldr	r3, [pc, #124]	; (801b770 <tcp_timewait_input+0xe4>)
 801b6f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6f6:	885b      	ldrh	r3, [r3, #2]
 801b6f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b6fa:	4a1d      	ldr	r2, [pc, #116]	; (801b770 <tcp_timewait_input+0xe4>)
 801b6fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6fe:	8812      	ldrh	r2, [r2, #0]
 801b700:	b292      	uxth	r2, r2
 801b702:	9202      	str	r2, [sp, #8]
 801b704:	9301      	str	r3, [sp, #4]
 801b706:	4b1b      	ldr	r3, [pc, #108]	; (801b774 <tcp_timewait_input+0xe8>)
 801b708:	9300      	str	r3, [sp, #0]
 801b70a:	4b1b      	ldr	r3, [pc, #108]	; (801b778 <tcp_timewait_input+0xec>)
 801b70c:	4602      	mov	r2, r0
 801b70e:	6878      	ldr	r0, [r7, #4]
 801b710:	f003 fad0 	bl	801ecb4 <tcp_rst>
      return;
 801b714:	e01b      	b.n	801b74e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801b716:	4b0f      	ldr	r3, [pc, #60]	; (801b754 <tcp_timewait_input+0xc8>)
 801b718:	781b      	ldrb	r3, [r3, #0]
 801b71a:	f003 0301 	and.w	r3, r3, #1
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d003      	beq.n	801b72a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801b722:	4b16      	ldr	r3, [pc, #88]	; (801b77c <tcp_timewait_input+0xf0>)
 801b724:	681a      	ldr	r2, [r3, #0]
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	629a      	str	r2, [r3, #40]	; 0x28
  }

  if ((tcplen > 0)) {
 801b72a:	4b10      	ldr	r3, [pc, #64]	; (801b76c <tcp_timewait_input+0xe0>)
 801b72c:	881b      	ldrh	r3, [r3, #0]
 801b72e:	2b00      	cmp	r3, #0
 801b730:	d00c      	beq.n	801b74c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b736:	f043 0302 	orr.w	r3, r3, #2
 801b73a:	b29a      	uxth	r2, r3
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	845a      	strh	r2, [r3, #34]	; 0x22
    tcp_output(pcb);
 801b740:	6878      	ldr	r0, [r7, #4]
 801b742:	f002 fd03 	bl	801e14c <tcp_output>
  }
  return;
 801b746:	e001      	b.n	801b74c <tcp_timewait_input+0xc0>
    return;
 801b748:	bf00      	nop
 801b74a:	e000      	b.n	801b74e <tcp_timewait_input+0xc2>
  return;
 801b74c:	bf00      	nop
}
 801b74e:	3708      	adds	r7, #8
 801b750:	46bd      	mov	sp, r7
 801b752:	bd80      	pop	{r7, pc}
 801b754:	20023920 	.word	0x20023920
 801b758:	08026ccc 	.word	0x08026ccc
 801b75c:	08026f1c 	.word	0x08026f1c
 801b760:	08026d50 	.word	0x08026d50
 801b764:	20023914 	.word	0x20023914
 801b768:	20023918 	.word	0x20023918
 801b76c:	2002391e 	.word	0x2002391e
 801b770:	20023904 	.word	0x20023904
 801b774:	20018f18 	.word	0x20018f18
 801b778:	20018f1c 	.word	0x20018f1c
 801b77c:	200238dc 	.word	0x200238dc

0801b780 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801b780:	b590      	push	{r4, r7, lr}
 801b782:	b08d      	sub	sp, #52	; 0x34
 801b784:	af04      	add	r7, sp, #16
 801b786:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801b788:	2300      	movs	r3, #0
 801b78a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801b78c:	2300      	movs	r3, #0
 801b78e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801b790:	687b      	ldr	r3, [r7, #4]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d106      	bne.n	801b7a4 <tcp_process+0x24>
 801b796:	4b9d      	ldr	r3, [pc, #628]	; (801ba0c <tcp_process+0x28c>)
 801b798:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801b79c:	499c      	ldr	r1, [pc, #624]	; (801ba10 <tcp_process+0x290>)
 801b79e:	489d      	ldr	r0, [pc, #628]	; (801ba14 <tcp_process+0x294>)
 801b7a0:	f007 fac6 	bl	8022d30 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801b7a4:	4b9c      	ldr	r3, [pc, #624]	; (801ba18 <tcp_process+0x298>)
 801b7a6:	781b      	ldrb	r3, [r3, #0]
 801b7a8:	f003 0304 	and.w	r3, r3, #4
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d04e      	beq.n	801b84e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	7f1b      	ldrb	r3, [r3, #28]
 801b7b4:	2b02      	cmp	r3, #2
 801b7b6:	d108      	bne.n	801b7ca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801b7bc:	4b97      	ldr	r3, [pc, #604]	; (801ba1c <tcp_process+0x29c>)
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	429a      	cmp	r2, r3
 801b7c2:	d123      	bne.n	801b80c <tcp_process+0x8c>
        acceptable = 1;
 801b7c4:	2301      	movs	r3, #1
 801b7c6:	76fb      	strb	r3, [r7, #27]
 801b7c8:	e020      	b.n	801b80c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b7ce:	4b94      	ldr	r3, [pc, #592]	; (801ba20 <tcp_process+0x2a0>)
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	429a      	cmp	r2, r3
 801b7d4:	d102      	bne.n	801b7dc <tcp_process+0x5c>
        acceptable = 1;
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	76fb      	strb	r3, [r7, #27]
 801b7da:	e017      	b.n	801b80c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b7dc:	4b90      	ldr	r3, [pc, #576]	; (801ba20 <tcp_process+0x2a0>)
 801b7de:	681a      	ldr	r2, [r3, #0]
 801b7e0:	687b      	ldr	r3, [r7, #4]
 801b7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7e4:	1ad3      	subs	r3, r2, r3
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	db10      	blt.n	801b80c <tcp_process+0x8c>
 801b7ea:	4b8d      	ldr	r3, [pc, #564]	; (801ba20 <tcp_process+0x2a0>)
 801b7ec:	681a      	ldr	r2, [r3, #0]
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b7f2:	6879      	ldr	r1, [r7, #4]
 801b7f4:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 801b7f6:	440b      	add	r3, r1
 801b7f8:	1ad3      	subs	r3, r2, r3
 801b7fa:	2b00      	cmp	r3, #0
 801b7fc:	dc06      	bgt.n	801b80c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b802:	f043 0302 	orr.w	r3, r3, #2
 801b806:	b29a      	uxth	r2, r3
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	845a      	strh	r2, [r3, #34]	; 0x22
      }
    }

    if (acceptable) {
 801b80c:	7efb      	ldrb	r3, [r7, #27]
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d01b      	beq.n	801b84a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	7f1b      	ldrb	r3, [r3, #28]
 801b816:	2b00      	cmp	r3, #0
 801b818:	d106      	bne.n	801b828 <tcp_process+0xa8>
 801b81a:	4b7c      	ldr	r3, [pc, #496]	; (801ba0c <tcp_process+0x28c>)
 801b81c:	f44f 724e 	mov.w	r2, #824	; 0x338
 801b820:	4980      	ldr	r1, [pc, #512]	; (801ba24 <tcp_process+0x2a4>)
 801b822:	487c      	ldr	r0, [pc, #496]	; (801ba14 <tcp_process+0x294>)
 801b824:	f007 fa84 	bl	8022d30 <iprintf>
      recv_flags |= TF_RESET;
 801b828:	4b7f      	ldr	r3, [pc, #508]	; (801ba28 <tcp_process+0x2a8>)
 801b82a:	781b      	ldrb	r3, [r3, #0]
 801b82c:	f043 0308 	orr.w	r3, r3, #8
 801b830:	b2da      	uxtb	r2, r3
 801b832:	4b7d      	ldr	r3, [pc, #500]	; (801ba28 <tcp_process+0x2a8>)
 801b834:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b83a:	f023 0301 	bic.w	r3, r3, #1
 801b83e:	b29a      	uxth	r2, r3
 801b840:	687b      	ldr	r3, [r7, #4]
 801b842:	845a      	strh	r2, [r3, #34]	; 0x22
      return ERR_RST;
 801b844:	f06f 030d 	mvn.w	r3, #13
 801b848:	e37e      	b.n	801bf48 <tcp_process+0x7c8>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801b84a:	2300      	movs	r3, #0
 801b84c:	e37c      	b.n	801bf48 <tcp_process+0x7c8>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801b84e:	4b72      	ldr	r3, [pc, #456]	; (801ba18 <tcp_process+0x298>)
 801b850:	781b      	ldrb	r3, [r3, #0]
 801b852:	f003 0302 	and.w	r3, r3, #2
 801b856:	2b00      	cmp	r3, #0
 801b858:	d010      	beq.n	801b87c <tcp_process+0xfc>
 801b85a:	687b      	ldr	r3, [r7, #4]
 801b85c:	7f1b      	ldrb	r3, [r3, #28]
 801b85e:	2b02      	cmp	r3, #2
 801b860:	d00c      	beq.n	801b87c <tcp_process+0xfc>
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	7f1b      	ldrb	r3, [r3, #28]
 801b866:	2b03      	cmp	r3, #3
 801b868:	d008      	beq.n	801b87c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b86e:	f043 0302 	orr.w	r3, r3, #2
 801b872:	b29a      	uxth	r2, r3
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	845a      	strh	r2, [r3, #34]	; 0x22
    return ERR_OK;
 801b878:	2300      	movs	r3, #0
 801b87a:	e365      	b.n	801bf48 <tcp_process+0x7c8>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801b880:	f003 0310 	and.w	r3, r3, #16
 801b884:	2b00      	cmp	r3, #0
 801b886:	d103      	bne.n	801b890 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801b888:	4b68      	ldr	r3, [pc, #416]	; (801ba2c <tcp_process+0x2ac>)
 801b88a:	681a      	ldr	r2, [r3, #0]
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  pcb->keep_cnt_sent = 0;
 801b890:	687b      	ldr	r3, [r7, #4]
 801b892:	2200      	movs	r2, #0
 801b894:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
  pcb->persist_probe = 0;
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	2200      	movs	r2, #0
 801b89c:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa

  tcp_parseopt(pcb);
 801b8a0:	6878      	ldr	r0, [r7, #4]
 801b8a2:	f001 fc35 	bl	801d110 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801b8a6:	687b      	ldr	r3, [r7, #4]
 801b8a8:	7f1b      	ldrb	r3, [r3, #28]
 801b8aa:	3b02      	subs	r3, #2
 801b8ac:	2b07      	cmp	r3, #7
 801b8ae:	f200 833b 	bhi.w	801bf28 <tcp_process+0x7a8>
 801b8b2:	a201      	add	r2, pc, #4	; (adr r2, 801b8b8 <tcp_process+0x138>)
 801b8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8b8:	0801b8d9 	.word	0x0801b8d9
 801b8bc:	0801bb09 	.word	0x0801bb09
 801b8c0:	0801bc8b 	.word	0x0801bc8b
 801b8c4:	0801bcb5 	.word	0x0801bcb5
 801b8c8:	0801bdd7 	.word	0x0801bdd7
 801b8cc:	0801bc8b 	.word	0x0801bc8b
 801b8d0:	0801be63 	.word	0x0801be63
 801b8d4:	0801bef3 	.word	0x0801bef3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801b8d8:	4b4f      	ldr	r3, [pc, #316]	; (801ba18 <tcp_process+0x298>)
 801b8da:	781b      	ldrb	r3, [r3, #0]
 801b8dc:	f003 0310 	and.w	r3, r3, #16
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	f000 80e4 	beq.w	801baae <tcp_process+0x32e>
 801b8e6:	4b4c      	ldr	r3, [pc, #304]	; (801ba18 <tcp_process+0x298>)
 801b8e8:	781b      	ldrb	r3, [r3, #0]
 801b8ea:	f003 0302 	and.w	r3, r3, #2
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	f000 80dd 	beq.w	801baae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801b8f4:	687b      	ldr	r3, [r7, #4]
 801b8f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b8f8:	1c5a      	adds	r2, r3, #1
 801b8fa:	4b48      	ldr	r3, [pc, #288]	; (801ba1c <tcp_process+0x29c>)
 801b8fc:	681b      	ldr	r3, [r3, #0]
 801b8fe:	429a      	cmp	r2, r3
 801b900:	f040 80d5 	bne.w	801baae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801b904:	4b46      	ldr	r3, [pc, #280]	; (801ba20 <tcp_process+0x2a0>)
 801b906:	681b      	ldr	r3, [r3, #0]
 801b908:	1c5a      	adds	r2, r3, #1
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	635a      	str	r2, [r3, #52]	; 0x34
        pcb->lastack = ackno;
 801b916:	4b41      	ldr	r3, [pc, #260]	; (801ba1c <tcp_process+0x29c>)
 801b918:	681a      	ldr	r2, [r3, #0]
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	64da      	str	r2, [r3, #76]	; 0x4c
        pcb->snd_wnd = tcphdr->wnd;
 801b91e:	4b44      	ldr	r3, [pc, #272]	; (801ba30 <tcp_process+0x2b0>)
 801b920:	681b      	ldr	r3, [r3, #0]
 801b922:	89db      	ldrh	r3, [r3, #14]
 801b924:	b29a      	uxth	r2, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 801b932:	687b      	ldr	r3, [r7, #4]
 801b934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801b938:	4b39      	ldr	r3, [pc, #228]	; (801ba20 <tcp_process+0x2a0>)
 801b93a:	681b      	ldr	r3, [r3, #0]
 801b93c:	1e5a      	subs	r2, r3, #1
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	65da      	str	r2, [r3, #92]	; 0x5c
        pcb->state = ESTABLISHED;
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	2204      	movs	r2, #4
 801b946:	771a      	strb	r2, [r3, #28]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	8f5c      	ldrh	r4, [r3, #58]	; 0x3a
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	3304      	adds	r3, #4
 801b950:	4618      	mov	r0, r3
 801b952:	f7fa f85d 	bl	8015a10 <ip4_route>
 801b956:	4601      	mov	r1, r0
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	3304      	adds	r3, #4
 801b95c:	461a      	mov	r2, r3
 801b95e:	4620      	mov	r0, r4
 801b960:	f7fe ffe4 	bl	801a92c <tcp_eff_send_mss_netif>
 801b964:	4603      	mov	r3, r0
 801b966:	461a      	mov	r2, r3
 801b968:	687b      	ldr	r3, [r7, #4]
 801b96a:	875a      	strh	r2, [r3, #58]	; 0x3a
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801b96c:	687b      	ldr	r3, [r7, #4]
 801b96e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b970:	009a      	lsls	r2, r3, #2
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b976:	005b      	lsls	r3, r3, #1
 801b978:	f241 111c 	movw	r1, #4380	; 0x111c
 801b97c:	428b      	cmp	r3, r1
 801b97e:	bf38      	it	cc
 801b980:	460b      	movcc	r3, r1
 801b982:	429a      	cmp	r2, r3
 801b984:	d204      	bcs.n	801b990 <tcp_process+0x210>
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b98a:	009b      	lsls	r3, r3, #2
 801b98c:	b29b      	uxth	r3, r3
 801b98e:	e00d      	b.n	801b9ac <tcp_process+0x22c>
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b994:	005b      	lsls	r3, r3, #1
 801b996:	f241 121c 	movw	r2, #4380	; 0x111c
 801b99a:	4293      	cmp	r3, r2
 801b99c:	d904      	bls.n	801b9a8 <tcp_process+0x228>
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801b9a2:	005b      	lsls	r3, r3, #1
 801b9a4:	b29b      	uxth	r3, r3
 801b9a6:	e001      	b.n	801b9ac <tcp_process+0x22c>
 801b9a8:	f241 131c 	movw	r3, #4380	; 0x111c
 801b9ac:	687a      	ldr	r2, [r7, #4]
 801b9ae:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801b9b2:	687b      	ldr	r3, [r7, #4]
 801b9b4:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d106      	bne.n	801b9ca <tcp_process+0x24a>
 801b9bc:	4b13      	ldr	r3, [pc, #76]	; (801ba0c <tcp_process+0x28c>)
 801b9be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801b9c2:	491c      	ldr	r1, [pc, #112]	; (801ba34 <tcp_process+0x2b4>)
 801b9c4:	4813      	ldr	r0, [pc, #76]	; (801ba14 <tcp_process+0x294>)
 801b9c6:	f007 f9b3 	bl	8022d30 <iprintf>
        --pcb->snd_queuelen;
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801b9d0:	3b01      	subs	r3, #1
 801b9d2:	b29a      	uxth	r2, r3
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b9de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801b9e0:	69fb      	ldr	r3, [r7, #28]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d12a      	bne.n	801ba3c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b9ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801b9ec:	69fb      	ldr	r3, [r7, #28]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d106      	bne.n	801ba00 <tcp_process+0x280>
 801b9f2:	4b06      	ldr	r3, [pc, #24]	; (801ba0c <tcp_process+0x28c>)
 801b9f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 801b9f8:	490f      	ldr	r1, [pc, #60]	; (801ba38 <tcp_process+0x2b8>)
 801b9fa:	4806      	ldr	r0, [pc, #24]	; (801ba14 <tcp_process+0x294>)
 801b9fc:	f007 f998 	bl	8022d30 <iprintf>
          pcb->unsent = rseg->next;
 801ba00:	69fb      	ldr	r3, [r7, #28]
 801ba02:	681a      	ldr	r2, [r3, #0]
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	675a      	str	r2, [r3, #116]	; 0x74
 801ba08:	e01c      	b.n	801ba44 <tcp_process+0x2c4>
 801ba0a:	bf00      	nop
 801ba0c:	08026ccc 	.word	0x08026ccc
 801ba10:	08026f3c 	.word	0x08026f3c
 801ba14:	08026d50 	.word	0x08026d50
 801ba18:	20023920 	.word	0x20023920
 801ba1c:	20023918 	.word	0x20023918
 801ba20:	20023914 	.word	0x20023914
 801ba24:	08026f58 	.word	0x08026f58
 801ba28:	20023921 	.word	0x20023921
 801ba2c:	200238dc 	.word	0x200238dc
 801ba30:	20023904 	.word	0x20023904
 801ba34:	08026f78 	.word	0x08026f78
 801ba38:	08026f90 	.word	0x08026f90
        } else {
          pcb->unacked = rseg->next;
 801ba3c:	69fb      	ldr	r3, [r7, #28]
 801ba3e:	681a      	ldr	r2, [r3, #0]
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	679a      	str	r2, [r3, #120]	; 0x78
        }
        tcp_seg_free(rseg);
 801ba44:	69f8      	ldr	r0, [r7, #28]
 801ba46:	f7fe fb9c 	bl	801a182 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d104      	bne.n	801ba5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba58:	871a      	strh	r2, [r3, #56]	; 0x38
 801ba5a:	e006      	b.n	801ba6a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	2200      	movs	r2, #0
 801ba60:	871a      	strh	r2, [r3, #56]	; 0x38
          pcb->nrtx = 0;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	2200      	movs	r2, #0
 801ba66:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d00a      	beq.n	801ba8a <tcp_process+0x30a>
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ba7a:	687a      	ldr	r2, [r7, #4]
 801ba7c:	6910      	ldr	r0, [r2, #16]
 801ba7e:	2200      	movs	r2, #0
 801ba80:	6879      	ldr	r1, [r7, #4]
 801ba82:	4798      	blx	r3
 801ba84:	4603      	mov	r3, r0
 801ba86:	76bb      	strb	r3, [r7, #26]
 801ba88:	e001      	b.n	801ba8e <tcp_process+0x30e>
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801ba8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801ba92:	f113 0f0d 	cmn.w	r3, #13
 801ba96:	d102      	bne.n	801ba9e <tcp_process+0x31e>
          return ERR_ABRT;
 801ba98:	f06f 030c 	mvn.w	r3, #12
 801ba9c:	e254      	b.n	801bf48 <tcp_process+0x7c8>
        }
        tcp_ack_now(pcb);
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801baa2:	f043 0302 	orr.w	r3, r3, #2
 801baa6:	b29a      	uxth	r2, r3
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	845a      	strh	r2, [r3, #34]	; 0x22
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801baac:	e23e      	b.n	801bf2c <tcp_process+0x7ac>
      else if (flags & TCP_ACK) {
 801baae:	4b9a      	ldr	r3, [pc, #616]	; (801bd18 <tcp_process+0x598>)
 801bab0:	781b      	ldrb	r3, [r3, #0]
 801bab2:	f003 0310 	and.w	r3, r3, #16
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	f000 8238 	beq.w	801bf2c <tcp_process+0x7ac>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801babc:	4b97      	ldr	r3, [pc, #604]	; (801bd1c <tcp_process+0x59c>)
 801babe:	6819      	ldr	r1, [r3, #0]
 801bac0:	4b97      	ldr	r3, [pc, #604]	; (801bd20 <tcp_process+0x5a0>)
 801bac2:	881b      	ldrh	r3, [r3, #0]
 801bac4:	461a      	mov	r2, r3
 801bac6:	4b97      	ldr	r3, [pc, #604]	; (801bd24 <tcp_process+0x5a4>)
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bacc:	4b96      	ldr	r3, [pc, #600]	; (801bd28 <tcp_process+0x5a8>)
 801bace:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bad0:	885b      	ldrh	r3, [r3, #2]
 801bad2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bad4:	4a94      	ldr	r2, [pc, #592]	; (801bd28 <tcp_process+0x5a8>)
 801bad6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bad8:	8812      	ldrh	r2, [r2, #0]
 801bada:	b292      	uxth	r2, r2
 801badc:	9202      	str	r2, [sp, #8]
 801bade:	9301      	str	r3, [sp, #4]
 801bae0:	4b92      	ldr	r3, [pc, #584]	; (801bd2c <tcp_process+0x5ac>)
 801bae2:	9300      	str	r3, [sp, #0]
 801bae4:	4b92      	ldr	r3, [pc, #584]	; (801bd30 <tcp_process+0x5b0>)
 801bae6:	4602      	mov	r2, r0
 801bae8:	6878      	ldr	r0, [r7, #4]
 801baea:	f003 f8e3 	bl	801ecb4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801baf4:	2b01      	cmp	r3, #1
 801baf6:	f200 8219 	bhi.w	801bf2c <tcp_process+0x7ac>
          pcb->rtime = 0;
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	2200      	movs	r2, #0
 801bafe:	871a      	strh	r2, [r3, #56]	; 0x38
          tcp_rexmit_rto(pcb);
 801bb00:	6878      	ldr	r0, [r7, #4]
 801bb02:	f002 feaf 	bl	801e864 <tcp_rexmit_rto>
      break;
 801bb06:	e211      	b.n	801bf2c <tcp_process+0x7ac>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801bb08:	4b83      	ldr	r3, [pc, #524]	; (801bd18 <tcp_process+0x598>)
 801bb0a:	781b      	ldrb	r3, [r3, #0]
 801bb0c:	f003 0310 	and.w	r3, r3, #16
 801bb10:	2b00      	cmp	r3, #0
 801bb12:	f000 80a6 	beq.w	801bc62 <tcp_process+0x4e2>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bb16:	4b81      	ldr	r3, [pc, #516]	; (801bd1c <tcp_process+0x59c>)
 801bb18:	681a      	ldr	r2, [r3, #0]
 801bb1a:	687b      	ldr	r3, [r7, #4]
 801bb1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bb1e:	1ad3      	subs	r3, r2, r3
 801bb20:	3b01      	subs	r3, #1
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	f2c0 8083 	blt.w	801bc2e <tcp_process+0x4ae>
 801bb28:	4b7c      	ldr	r3, [pc, #496]	; (801bd1c <tcp_process+0x59c>)
 801bb2a:	681a      	ldr	r2, [r3, #0]
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bb30:	1ad3      	subs	r3, r2, r3
 801bb32:	2b00      	cmp	r3, #0
 801bb34:	dc7b      	bgt.n	801bc2e <tcp_process+0x4ae>
          pcb->state = ESTABLISHED;
 801bb36:	687b      	ldr	r3, [r7, #4]
 801bb38:	2204      	movs	r2, #4
 801bb3a:	771a      	strb	r2, [r3, #28]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bb42:	2b00      	cmp	r3, #0
 801bb44:	d102      	bne.n	801bb4c <tcp_process+0x3cc>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801bb46:	23fa      	movs	r3, #250	; 0xfa
 801bb48:	76bb      	strb	r3, [r7, #26]
 801bb4a:	e020      	b.n	801bb8e <tcp_process+0x40e>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bb52:	6a1b      	ldr	r3, [r3, #32]
 801bb54:	2b00      	cmp	r3, #0
 801bb56:	d106      	bne.n	801bb66 <tcp_process+0x3e6>
 801bb58:	4b76      	ldr	r3, [pc, #472]	; (801bd34 <tcp_process+0x5b4>)
 801bb5a:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801bb5e:	4976      	ldr	r1, [pc, #472]	; (801bd38 <tcp_process+0x5b8>)
 801bb60:	4876      	ldr	r0, [pc, #472]	; (801bd3c <tcp_process+0x5bc>)
 801bb62:	f007 f8e5 	bl	8022d30 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bb6c:	6a1b      	ldr	r3, [r3, #32]
 801bb6e:	2b00      	cmp	r3, #0
 801bb70:	d00b      	beq.n	801bb8a <tcp_process+0x40a>
 801bb72:	687b      	ldr	r3, [r7, #4]
 801bb74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801bb78:	6a1b      	ldr	r3, [r3, #32]
 801bb7a:	687a      	ldr	r2, [r7, #4]
 801bb7c:	6910      	ldr	r0, [r2, #16]
 801bb7e:	2200      	movs	r2, #0
 801bb80:	6879      	ldr	r1, [r7, #4]
 801bb82:	4798      	blx	r3
 801bb84:	4603      	mov	r3, r0
 801bb86:	76bb      	strb	r3, [r7, #26]
 801bb88:	e001      	b.n	801bb8e <tcp_process+0x40e>
 801bb8a:	23f0      	movs	r3, #240	; 0xf0
 801bb8c:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801bb8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d00a      	beq.n	801bbac <tcp_process+0x42c>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801bb96:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bb9a:	f113 0f0d 	cmn.w	r3, #13
 801bb9e:	d002      	beq.n	801bba6 <tcp_process+0x426>
              tcp_abort(pcb);
 801bba0:	6878      	ldr	r0, [r7, #4]
 801bba2:	f7fd fbfd 	bl	80193a0 <tcp_abort>
            }
            return ERR_ABRT;
 801bba6:	f06f 030c 	mvn.w	r3, #12
 801bbaa:	e1cd      	b.n	801bf48 <tcp_process+0x7c8>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801bbac:	6878      	ldr	r0, [r7, #4]
 801bbae:	f000 fadf 	bl	801c170 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801bbb2:	4b63      	ldr	r3, [pc, #396]	; (801bd40 <tcp_process+0x5c0>)
 801bbb4:	881b      	ldrh	r3, [r3, #0]
 801bbb6:	2b00      	cmp	r3, #0
 801bbb8:	d005      	beq.n	801bbc6 <tcp_process+0x446>
            recv_acked--;
 801bbba:	4b61      	ldr	r3, [pc, #388]	; (801bd40 <tcp_process+0x5c0>)
 801bbbc:	881b      	ldrh	r3, [r3, #0]
 801bbbe:	3b01      	subs	r3, #1
 801bbc0:	b29a      	uxth	r2, r3
 801bbc2:	4b5f      	ldr	r3, [pc, #380]	; (801bd40 <tcp_process+0x5c0>)
 801bbc4:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bbca:	009a      	lsls	r2, r3, #2
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bbd0:	005b      	lsls	r3, r3, #1
 801bbd2:	f241 111c 	movw	r1, #4380	; 0x111c
 801bbd6:	428b      	cmp	r3, r1
 801bbd8:	bf38      	it	cc
 801bbda:	460b      	movcc	r3, r1
 801bbdc:	429a      	cmp	r2, r3
 801bbde:	d204      	bcs.n	801bbea <tcp_process+0x46a>
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bbe4:	009b      	lsls	r3, r3, #2
 801bbe6:	b29b      	uxth	r3, r3
 801bbe8:	e00d      	b.n	801bc06 <tcp_process+0x486>
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bbee:	005b      	lsls	r3, r3, #1
 801bbf0:	f241 121c 	movw	r2, #4380	; 0x111c
 801bbf4:	4293      	cmp	r3, r2
 801bbf6:	d904      	bls.n	801bc02 <tcp_process+0x482>
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801bbfc:	005b      	lsls	r3, r3, #1
 801bbfe:	b29b      	uxth	r3, r3
 801bc00:	e001      	b.n	801bc06 <tcp_process+0x486>
 801bc02:	f241 131c 	movw	r3, #4380	; 0x111c
 801bc06:	687a      	ldr	r2, [r7, #4]
 801bc08:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801bc0c:	4b4d      	ldr	r3, [pc, #308]	; (801bd44 <tcp_process+0x5c4>)
 801bc0e:	781b      	ldrb	r3, [r3, #0]
 801bc10:	f003 0320 	and.w	r3, r3, #32
 801bc14:	2b00      	cmp	r3, #0
 801bc16:	d037      	beq.n	801bc88 <tcp_process+0x508>
            tcp_ack_now(pcb);
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801bc1c:	f043 0302 	orr.w	r3, r3, #2
 801bc20:	b29a      	uxth	r2, r3
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	845a      	strh	r2, [r3, #34]	; 0x22
            pcb->state = CLOSE_WAIT;
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	2207      	movs	r2, #7
 801bc2a:	771a      	strb	r2, [r3, #28]
          if (recv_flags & TF_GOT_FIN) {
 801bc2c:	e02c      	b.n	801bc88 <tcp_process+0x508>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc2e:	4b3b      	ldr	r3, [pc, #236]	; (801bd1c <tcp_process+0x59c>)
 801bc30:	6819      	ldr	r1, [r3, #0]
 801bc32:	4b3b      	ldr	r3, [pc, #236]	; (801bd20 <tcp_process+0x5a0>)
 801bc34:	881b      	ldrh	r3, [r3, #0]
 801bc36:	461a      	mov	r2, r3
 801bc38:	4b3a      	ldr	r3, [pc, #232]	; (801bd24 <tcp_process+0x5a4>)
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc3e:	4b3a      	ldr	r3, [pc, #232]	; (801bd28 <tcp_process+0x5a8>)
 801bc40:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc42:	885b      	ldrh	r3, [r3, #2]
 801bc44:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bc46:	4a38      	ldr	r2, [pc, #224]	; (801bd28 <tcp_process+0x5a8>)
 801bc48:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc4a:	8812      	ldrh	r2, [r2, #0]
 801bc4c:	b292      	uxth	r2, r2
 801bc4e:	9202      	str	r2, [sp, #8]
 801bc50:	9301      	str	r3, [sp, #4]
 801bc52:	4b36      	ldr	r3, [pc, #216]	; (801bd2c <tcp_process+0x5ac>)
 801bc54:	9300      	str	r3, [sp, #0]
 801bc56:	4b36      	ldr	r3, [pc, #216]	; (801bd30 <tcp_process+0x5b0>)
 801bc58:	4602      	mov	r2, r0
 801bc5a:	6878      	ldr	r0, [r7, #4]
 801bc5c:	f003 f82a 	bl	801ecb4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801bc60:	e166      	b.n	801bf30 <tcp_process+0x7b0>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801bc62:	4b2d      	ldr	r3, [pc, #180]	; (801bd18 <tcp_process+0x598>)
 801bc64:	781b      	ldrb	r3, [r3, #0]
 801bc66:	f003 0302 	and.w	r3, r3, #2
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	f000 8160 	beq.w	801bf30 <tcp_process+0x7b0>
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bc74:	1e5a      	subs	r2, r3, #1
 801bc76:	4b2b      	ldr	r3, [pc, #172]	; (801bd24 <tcp_process+0x5a4>)
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	429a      	cmp	r2, r3
 801bc7c:	f040 8158 	bne.w	801bf30 <tcp_process+0x7b0>
        tcp_rexmit(pcb);
 801bc80:	6878      	ldr	r0, [r7, #4]
 801bc82:	f002 fe11 	bl	801e8a8 <tcp_rexmit>
      break;
 801bc86:	e153      	b.n	801bf30 <tcp_process+0x7b0>
 801bc88:	e152      	b.n	801bf30 <tcp_process+0x7b0>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801bc8a:	6878      	ldr	r0, [r7, #4]
 801bc8c:	f000 fa70 	bl	801c170 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801bc90:	4b2c      	ldr	r3, [pc, #176]	; (801bd44 <tcp_process+0x5c4>)
 801bc92:	781b      	ldrb	r3, [r3, #0]
 801bc94:	f003 0320 	and.w	r3, r3, #32
 801bc98:	2b00      	cmp	r3, #0
 801bc9a:	f000 814b 	beq.w	801bf34 <tcp_process+0x7b4>
        tcp_ack_now(pcb);
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801bca2:	f043 0302 	orr.w	r3, r3, #2
 801bca6:	b29a      	uxth	r2, r3
 801bca8:	687b      	ldr	r3, [r7, #4]
 801bcaa:	845a      	strh	r2, [r3, #34]	; 0x22
        pcb->state = CLOSE_WAIT;
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	2207      	movs	r2, #7
 801bcb0:	771a      	strb	r2, [r3, #28]
      }
      break;
 801bcb2:	e13f      	b.n	801bf34 <tcp_process+0x7b4>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801bcb4:	6878      	ldr	r0, [r7, #4]
 801bcb6:	f000 fa5b 	bl	801c170 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bcba:	4b22      	ldr	r3, [pc, #136]	; (801bd44 <tcp_process+0x5c4>)
 801bcbc:	781b      	ldrb	r3, [r3, #0]
 801bcbe:	f003 0320 	and.w	r3, r3, #32
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d070      	beq.n	801bda8 <tcp_process+0x628>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bcc6:	4b14      	ldr	r3, [pc, #80]	; (801bd18 <tcp_process+0x598>)
 801bcc8:	781b      	ldrb	r3, [r3, #0]
 801bcca:	f003 0310 	and.w	r3, r3, #16
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d05f      	beq.n	801bd92 <tcp_process+0x612>
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801bcd6:	4b11      	ldr	r3, [pc, #68]	; (801bd1c <tcp_process+0x59c>)
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	429a      	cmp	r2, r3
 801bcdc:	d159      	bne.n	801bd92 <tcp_process+0x612>
            pcb->unsent == NULL) {
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d155      	bne.n	801bd92 <tcp_process+0x612>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801bcea:	f043 0302 	orr.w	r3, r3, #2
 801bcee:	b29a      	uxth	r2, r3
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	845a      	strh	r2, [r3, #34]	; 0x22
          tcp_pcb_purge(pcb);
 801bcf4:	6878      	ldr	r0, [r7, #4]
 801bcf6:	f7fe fd0b 	bl	801a710 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801bcfa:	4b13      	ldr	r3, [pc, #76]	; (801bd48 <tcp_process+0x5c8>)
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	687a      	ldr	r2, [r7, #4]
 801bd00:	429a      	cmp	r2, r3
 801bd02:	d105      	bne.n	801bd10 <tcp_process+0x590>
 801bd04:	4b10      	ldr	r3, [pc, #64]	; (801bd48 <tcp_process+0x5c8>)
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	68db      	ldr	r3, [r3, #12]
 801bd0a:	4a0f      	ldr	r2, [pc, #60]	; (801bd48 <tcp_process+0x5c8>)
 801bd0c:	6013      	str	r3, [r2, #0]
 801bd0e:	e02d      	b.n	801bd6c <tcp_process+0x5ec>
 801bd10:	4b0d      	ldr	r3, [pc, #52]	; (801bd48 <tcp_process+0x5c8>)
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	617b      	str	r3, [r7, #20]
 801bd16:	e026      	b.n	801bd66 <tcp_process+0x5e6>
 801bd18:	20023920 	.word	0x20023920
 801bd1c:	20023918 	.word	0x20023918
 801bd20:	2002391e 	.word	0x2002391e
 801bd24:	20023914 	.word	0x20023914
 801bd28:	20023904 	.word	0x20023904
 801bd2c:	20018f18 	.word	0x20018f18
 801bd30:	20018f1c 	.word	0x20018f1c
 801bd34:	08026ccc 	.word	0x08026ccc
 801bd38:	08026fa4 	.word	0x08026fa4
 801bd3c:	08026d50 	.word	0x08026d50
 801bd40:	2002391c 	.word	0x2002391c
 801bd44:	20023921 	.word	0x20023921
 801bd48:	200238e8 	.word	0x200238e8
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	68db      	ldr	r3, [r3, #12]
 801bd50:	687a      	ldr	r2, [r7, #4]
 801bd52:	429a      	cmp	r2, r3
 801bd54:	d104      	bne.n	801bd60 <tcp_process+0x5e0>
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	68da      	ldr	r2, [r3, #12]
 801bd5a:	697b      	ldr	r3, [r7, #20]
 801bd5c:	60da      	str	r2, [r3, #12]
 801bd5e:	e005      	b.n	801bd6c <tcp_process+0x5ec>
 801bd60:	697b      	ldr	r3, [r7, #20]
 801bd62:	68db      	ldr	r3, [r3, #12]
 801bd64:	617b      	str	r3, [r7, #20]
 801bd66:	697b      	ldr	r3, [r7, #20]
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d1ef      	bne.n	801bd4c <tcp_process+0x5cc>
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	2200      	movs	r2, #0
 801bd70:	60da      	str	r2, [r3, #12]
 801bd72:	4b77      	ldr	r3, [pc, #476]	; (801bf50 <tcp_process+0x7d0>)
 801bd74:	2201      	movs	r2, #1
 801bd76:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801bd78:	687b      	ldr	r3, [r7, #4]
 801bd7a:	220a      	movs	r2, #10
 801bd7c:	771a      	strb	r2, [r3, #28]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801bd7e:	4b75      	ldr	r3, [pc, #468]	; (801bf54 <tcp_process+0x7d4>)
 801bd80:	681a      	ldr	r2, [r3, #0]
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	60da      	str	r2, [r3, #12]
 801bd86:	4a73      	ldr	r2, [pc, #460]	; (801bf54 <tcp_process+0x7d4>)
 801bd88:	687b      	ldr	r3, [r7, #4]
 801bd8a:	6013      	str	r3, [r2, #0]
 801bd8c:	f003 fb2e 	bl	801f3ec <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801bd90:	e0d2      	b.n	801bf38 <tcp_process+0x7b8>
          tcp_ack_now(pcb);
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801bd96:	f043 0302 	orr.w	r3, r3, #2
 801bd9a:	b29a      	uxth	r2, r3
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	845a      	strh	r2, [r3, #34]	; 0x22
          pcb->state = CLOSING;
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	2208      	movs	r2, #8
 801bda4:	771a      	strb	r2, [r3, #28]
      break;
 801bda6:	e0c7      	b.n	801bf38 <tcp_process+0x7b8>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bda8:	4b6b      	ldr	r3, [pc, #428]	; (801bf58 <tcp_process+0x7d8>)
 801bdaa:	781b      	ldrb	r3, [r3, #0]
 801bdac:	f003 0310 	and.w	r3, r3, #16
 801bdb0:	2b00      	cmp	r3, #0
 801bdb2:	f000 80c1 	beq.w	801bf38 <tcp_process+0x7b8>
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801bdba:	4b68      	ldr	r3, [pc, #416]	; (801bf5c <tcp_process+0x7dc>)
 801bdbc:	681b      	ldr	r3, [r3, #0]
 801bdbe:	429a      	cmp	r2, r3
 801bdc0:	f040 80ba 	bne.w	801bf38 <tcp_process+0x7b8>
                 pcb->unsent == NULL) {
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	f040 80b5 	bne.w	801bf38 <tcp_process+0x7b8>
        pcb->state = FIN_WAIT_2;
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	2206      	movs	r2, #6
 801bdd2:	771a      	strb	r2, [r3, #28]
      break;
 801bdd4:	e0b0      	b.n	801bf38 <tcp_process+0x7b8>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801bdd6:	6878      	ldr	r0, [r7, #4]
 801bdd8:	f000 f9ca 	bl	801c170 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bddc:	4b60      	ldr	r3, [pc, #384]	; (801bf60 <tcp_process+0x7e0>)
 801bdde:	781b      	ldrb	r3, [r3, #0]
 801bde0:	f003 0320 	and.w	r3, r3, #32
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	f000 80a9 	beq.w	801bf3c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801bdee:	f043 0302 	orr.w	r3, r3, #2
 801bdf2:	b29a      	uxth	r2, r3
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	845a      	strh	r2, [r3, #34]	; 0x22
        tcp_pcb_purge(pcb);
 801bdf8:	6878      	ldr	r0, [r7, #4]
 801bdfa:	f7fe fc89 	bl	801a710 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801bdfe:	4b59      	ldr	r3, [pc, #356]	; (801bf64 <tcp_process+0x7e4>)
 801be00:	681b      	ldr	r3, [r3, #0]
 801be02:	687a      	ldr	r2, [r7, #4]
 801be04:	429a      	cmp	r2, r3
 801be06:	d105      	bne.n	801be14 <tcp_process+0x694>
 801be08:	4b56      	ldr	r3, [pc, #344]	; (801bf64 <tcp_process+0x7e4>)
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	68db      	ldr	r3, [r3, #12]
 801be0e:	4a55      	ldr	r2, [pc, #340]	; (801bf64 <tcp_process+0x7e4>)
 801be10:	6013      	str	r3, [r2, #0]
 801be12:	e013      	b.n	801be3c <tcp_process+0x6bc>
 801be14:	4b53      	ldr	r3, [pc, #332]	; (801bf64 <tcp_process+0x7e4>)
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	613b      	str	r3, [r7, #16]
 801be1a:	e00c      	b.n	801be36 <tcp_process+0x6b6>
 801be1c:	693b      	ldr	r3, [r7, #16]
 801be1e:	68db      	ldr	r3, [r3, #12]
 801be20:	687a      	ldr	r2, [r7, #4]
 801be22:	429a      	cmp	r2, r3
 801be24:	d104      	bne.n	801be30 <tcp_process+0x6b0>
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	68da      	ldr	r2, [r3, #12]
 801be2a:	693b      	ldr	r3, [r7, #16]
 801be2c:	60da      	str	r2, [r3, #12]
 801be2e:	e005      	b.n	801be3c <tcp_process+0x6bc>
 801be30:	693b      	ldr	r3, [r7, #16]
 801be32:	68db      	ldr	r3, [r3, #12]
 801be34:	613b      	str	r3, [r7, #16]
 801be36:	693b      	ldr	r3, [r7, #16]
 801be38:	2b00      	cmp	r3, #0
 801be3a:	d1ef      	bne.n	801be1c <tcp_process+0x69c>
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	2200      	movs	r2, #0
 801be40:	60da      	str	r2, [r3, #12]
 801be42:	4b43      	ldr	r3, [pc, #268]	; (801bf50 <tcp_process+0x7d0>)
 801be44:	2201      	movs	r2, #1
 801be46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	220a      	movs	r2, #10
 801be4c:	771a      	strb	r2, [r3, #28]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801be4e:	4b41      	ldr	r3, [pc, #260]	; (801bf54 <tcp_process+0x7d4>)
 801be50:	681a      	ldr	r2, [r3, #0]
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	60da      	str	r2, [r3, #12]
 801be56:	4a3f      	ldr	r2, [pc, #252]	; (801bf54 <tcp_process+0x7d4>)
 801be58:	687b      	ldr	r3, [r7, #4]
 801be5a:	6013      	str	r3, [r2, #0]
 801be5c:	f003 fac6 	bl	801f3ec <tcp_timer_needed>
      }
      break;
 801be60:	e06c      	b.n	801bf3c <tcp_process+0x7bc>
    case CLOSING:
      tcp_receive(pcb);
 801be62:	6878      	ldr	r0, [r7, #4]
 801be64:	f000 f984 	bl	801c170 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801be68:	4b3b      	ldr	r3, [pc, #236]	; (801bf58 <tcp_process+0x7d8>)
 801be6a:	781b      	ldrb	r3, [r3, #0]
 801be6c:	f003 0310 	and.w	r3, r3, #16
 801be70:	2b00      	cmp	r3, #0
 801be72:	d065      	beq.n	801bf40 <tcp_process+0x7c0>
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801be78:	4b38      	ldr	r3, [pc, #224]	; (801bf5c <tcp_process+0x7dc>)
 801be7a:	681b      	ldr	r3, [r3, #0]
 801be7c:	429a      	cmp	r2, r3
 801be7e:	d15f      	bne.n	801bf40 <tcp_process+0x7c0>
 801be80:	687b      	ldr	r3, [r7, #4]
 801be82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801be84:	2b00      	cmp	r3, #0
 801be86:	d15b      	bne.n	801bf40 <tcp_process+0x7c0>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801be88:	6878      	ldr	r0, [r7, #4]
 801be8a:	f7fe fc41 	bl	801a710 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801be8e:	4b35      	ldr	r3, [pc, #212]	; (801bf64 <tcp_process+0x7e4>)
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	687a      	ldr	r2, [r7, #4]
 801be94:	429a      	cmp	r2, r3
 801be96:	d105      	bne.n	801bea4 <tcp_process+0x724>
 801be98:	4b32      	ldr	r3, [pc, #200]	; (801bf64 <tcp_process+0x7e4>)
 801be9a:	681b      	ldr	r3, [r3, #0]
 801be9c:	68db      	ldr	r3, [r3, #12]
 801be9e:	4a31      	ldr	r2, [pc, #196]	; (801bf64 <tcp_process+0x7e4>)
 801bea0:	6013      	str	r3, [r2, #0]
 801bea2:	e013      	b.n	801becc <tcp_process+0x74c>
 801bea4:	4b2f      	ldr	r3, [pc, #188]	; (801bf64 <tcp_process+0x7e4>)
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	60fb      	str	r3, [r7, #12]
 801beaa:	e00c      	b.n	801bec6 <tcp_process+0x746>
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	68db      	ldr	r3, [r3, #12]
 801beb0:	687a      	ldr	r2, [r7, #4]
 801beb2:	429a      	cmp	r2, r3
 801beb4:	d104      	bne.n	801bec0 <tcp_process+0x740>
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	68da      	ldr	r2, [r3, #12]
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	60da      	str	r2, [r3, #12]
 801bebe:	e005      	b.n	801becc <tcp_process+0x74c>
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	68db      	ldr	r3, [r3, #12]
 801bec4:	60fb      	str	r3, [r7, #12]
 801bec6:	68fb      	ldr	r3, [r7, #12]
 801bec8:	2b00      	cmp	r3, #0
 801beca:	d1ef      	bne.n	801beac <tcp_process+0x72c>
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	2200      	movs	r2, #0
 801bed0:	60da      	str	r2, [r3, #12]
 801bed2:	4b1f      	ldr	r3, [pc, #124]	; (801bf50 <tcp_process+0x7d0>)
 801bed4:	2201      	movs	r2, #1
 801bed6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	220a      	movs	r2, #10
 801bedc:	771a      	strb	r2, [r3, #28]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801bede:	4b1d      	ldr	r3, [pc, #116]	; (801bf54 <tcp_process+0x7d4>)
 801bee0:	681a      	ldr	r2, [r3, #0]
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	60da      	str	r2, [r3, #12]
 801bee6:	4a1b      	ldr	r2, [pc, #108]	; (801bf54 <tcp_process+0x7d4>)
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	6013      	str	r3, [r2, #0]
 801beec:	f003 fa7e 	bl	801f3ec <tcp_timer_needed>
      }
      break;
 801bef0:	e026      	b.n	801bf40 <tcp_process+0x7c0>
    case LAST_ACK:
      tcp_receive(pcb);
 801bef2:	6878      	ldr	r0, [r7, #4]
 801bef4:	f000 f93c 	bl	801c170 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801bef8:	4b17      	ldr	r3, [pc, #92]	; (801bf58 <tcp_process+0x7d8>)
 801befa:	781b      	ldrb	r3, [r3, #0]
 801befc:	f003 0310 	and.w	r3, r3, #16
 801bf00:	2b00      	cmp	r3, #0
 801bf02:	d01f      	beq.n	801bf44 <tcp_process+0x7c4>
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801bf08:	4b14      	ldr	r3, [pc, #80]	; (801bf5c <tcp_process+0x7dc>)
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	429a      	cmp	r2, r3
 801bf0e:	d119      	bne.n	801bf44 <tcp_process+0x7c4>
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	d115      	bne.n	801bf44 <tcp_process+0x7c4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801bf18:	4b11      	ldr	r3, [pc, #68]	; (801bf60 <tcp_process+0x7e0>)
 801bf1a:	781b      	ldrb	r3, [r3, #0]
 801bf1c:	f043 0310 	orr.w	r3, r3, #16
 801bf20:	b2da      	uxtb	r2, r3
 801bf22:	4b0f      	ldr	r3, [pc, #60]	; (801bf60 <tcp_process+0x7e0>)
 801bf24:	701a      	strb	r2, [r3, #0]
      }
      break;
 801bf26:	e00d      	b.n	801bf44 <tcp_process+0x7c4>
    default:
      break;
 801bf28:	bf00      	nop
 801bf2a:	e00c      	b.n	801bf46 <tcp_process+0x7c6>
      break;
 801bf2c:	bf00      	nop
 801bf2e:	e00a      	b.n	801bf46 <tcp_process+0x7c6>
      break;
 801bf30:	bf00      	nop
 801bf32:	e008      	b.n	801bf46 <tcp_process+0x7c6>
      break;
 801bf34:	bf00      	nop
 801bf36:	e006      	b.n	801bf46 <tcp_process+0x7c6>
      break;
 801bf38:	bf00      	nop
 801bf3a:	e004      	b.n	801bf46 <tcp_process+0x7c6>
      break;
 801bf3c:	bf00      	nop
 801bf3e:	e002      	b.n	801bf46 <tcp_process+0x7c6>
      break;
 801bf40:	bf00      	nop
 801bf42:	e000      	b.n	801bf46 <tcp_process+0x7c6>
      break;
 801bf44:	bf00      	nop
  }
  return ERR_OK;
 801bf46:	2300      	movs	r3, #0
}
 801bf48:	4618      	mov	r0, r3
 801bf4a:	3724      	adds	r7, #36	; 0x24
 801bf4c:	46bd      	mov	sp, r7
 801bf4e:	bd90      	pop	{r4, r7, pc}
 801bf50:	200238f0 	.word	0x200238f0
 801bf54:	200238ec 	.word	0x200238ec
 801bf58:	20023920 	.word	0x20023920
 801bf5c:	20023918 	.word	0x20023918
 801bf60:	20023921 	.word	0x20023921
 801bf64:	200238e8 	.word	0x200238e8

0801bf68 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801bf68:	b590      	push	{r4, r7, lr}
 801bf6a:	b085      	sub	sp, #20
 801bf6c:	af00      	add	r7, sp, #0
 801bf6e:	6078      	str	r0, [r7, #4]
 801bf70:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801bf72:	687b      	ldr	r3, [r7, #4]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	d106      	bne.n	801bf86 <tcp_oos_insert_segment+0x1e>
 801bf78:	4b3b      	ldr	r3, [pc, #236]	; (801c068 <tcp_oos_insert_segment+0x100>)
 801bf7a:	f240 421f 	movw	r2, #1055	; 0x41f
 801bf7e:	493b      	ldr	r1, [pc, #236]	; (801c06c <tcp_oos_insert_segment+0x104>)
 801bf80:	483b      	ldr	r0, [pc, #236]	; (801c070 <tcp_oos_insert_segment+0x108>)
 801bf82:	f006 fed5 	bl	8022d30 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801bf86:	687b      	ldr	r3, [r7, #4]
 801bf88:	68db      	ldr	r3, [r3, #12]
 801bf8a:	899b      	ldrh	r3, [r3, #12]
 801bf8c:	b29b      	uxth	r3, r3
 801bf8e:	4618      	mov	r0, r3
 801bf90:	f7f8 fb48 	bl	8014624 <lwip_htons>
 801bf94:	4603      	mov	r3, r0
 801bf96:	b2db      	uxtb	r3, r3
 801bf98:	f003 0301 	and.w	r3, r3, #1
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d028      	beq.n	801bff2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801bfa0:	6838      	ldr	r0, [r7, #0]
 801bfa2:	f7fe f8d9 	bl	801a158 <tcp_segs_free>
    next = NULL;
 801bfa6:	2300      	movs	r3, #0
 801bfa8:	603b      	str	r3, [r7, #0]
 801bfaa:	e056      	b.n	801c05a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801bfac:	683b      	ldr	r3, [r7, #0]
 801bfae:	68db      	ldr	r3, [r3, #12]
 801bfb0:	899b      	ldrh	r3, [r3, #12]
 801bfb2:	b29b      	uxth	r3, r3
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	f7f8 fb35 	bl	8014624 <lwip_htons>
 801bfba:	4603      	mov	r3, r0
 801bfbc:	b2db      	uxtb	r3, r3
 801bfbe:	f003 0301 	and.w	r3, r3, #1
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d00d      	beq.n	801bfe2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	68db      	ldr	r3, [r3, #12]
 801bfca:	899b      	ldrh	r3, [r3, #12]
 801bfcc:	b29c      	uxth	r4, r3
 801bfce:	2001      	movs	r0, #1
 801bfd0:	f7f8 fb28 	bl	8014624 <lwip_htons>
 801bfd4:	4603      	mov	r3, r0
 801bfd6:	461a      	mov	r2, r3
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	68db      	ldr	r3, [r3, #12]
 801bfdc:	4322      	orrs	r2, r4
 801bfde:	b292      	uxth	r2, r2
 801bfe0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801bfe2:	683b      	ldr	r3, [r7, #0]
 801bfe4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801bfe6:	683b      	ldr	r3, [r7, #0]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801bfec:	68f8      	ldr	r0, [r7, #12]
 801bfee:	f7fe f8c8 	bl	801a182 <tcp_seg_free>
    while (next &&
 801bff2:	683b      	ldr	r3, [r7, #0]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d00e      	beq.n	801c016 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	891b      	ldrh	r3, [r3, #8]
 801bffc:	461a      	mov	r2, r3
 801bffe:	4b1d      	ldr	r3, [pc, #116]	; (801c074 <tcp_oos_insert_segment+0x10c>)
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	441a      	add	r2, r3
 801c004:	683b      	ldr	r3, [r7, #0]
 801c006:	68db      	ldr	r3, [r3, #12]
 801c008:	685b      	ldr	r3, [r3, #4]
 801c00a:	6839      	ldr	r1, [r7, #0]
 801c00c:	8909      	ldrh	r1, [r1, #8]
 801c00e:	440b      	add	r3, r1
 801c010:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c012:	2b00      	cmp	r3, #0
 801c014:	daca      	bge.n	801bfac <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c016:	683b      	ldr	r3, [r7, #0]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d01e      	beq.n	801c05a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	891b      	ldrh	r3, [r3, #8]
 801c020:	461a      	mov	r2, r3
 801c022:	4b14      	ldr	r3, [pc, #80]	; (801c074 <tcp_oos_insert_segment+0x10c>)
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	441a      	add	r2, r3
 801c028:	683b      	ldr	r3, [r7, #0]
 801c02a:	68db      	ldr	r3, [r3, #12]
 801c02c:	685b      	ldr	r3, [r3, #4]
 801c02e:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c030:	2b00      	cmp	r3, #0
 801c032:	dd12      	ble.n	801c05a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c034:	683b      	ldr	r3, [r7, #0]
 801c036:	68db      	ldr	r3, [r3, #12]
 801c038:	685b      	ldr	r3, [r3, #4]
 801c03a:	b29a      	uxth	r2, r3
 801c03c:	4b0d      	ldr	r3, [pc, #52]	; (801c074 <tcp_oos_insert_segment+0x10c>)
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	b29b      	uxth	r3, r3
 801c042:	1ad3      	subs	r3, r2, r3
 801c044:	b29a      	uxth	r2, r3
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	685a      	ldr	r2, [r3, #4]
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	891b      	ldrh	r3, [r3, #8]
 801c052:	4619      	mov	r1, r3
 801c054:	4610      	mov	r0, r2
 801c056:	f7fc f867 	bl	8018128 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c05a:	687b      	ldr	r3, [r7, #4]
 801c05c:	683a      	ldr	r2, [r7, #0]
 801c05e:	601a      	str	r2, [r3, #0]
}
 801c060:	bf00      	nop
 801c062:	3714      	adds	r7, #20
 801c064:	46bd      	mov	sp, r7
 801c066:	bd90      	pop	{r4, r7, pc}
 801c068:	08026ccc 	.word	0x08026ccc
 801c06c:	08026fc4 	.word	0x08026fc4
 801c070:	08026d50 	.word	0x08026d50
 801c074:	20023914 	.word	0x20023914

0801c078 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c078:	b5b0      	push	{r4, r5, r7, lr}
 801c07a:	b086      	sub	sp, #24
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	60f8      	str	r0, [r7, #12]
 801c080:	60b9      	str	r1, [r7, #8]
 801c082:	607a      	str	r2, [r7, #4]
 801c084:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c086:	e03e      	b.n	801c106 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c088:	68bb      	ldr	r3, [r7, #8]
 801c08a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c08c:	68bb      	ldr	r3, [r7, #8]
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c092:	697b      	ldr	r3, [r7, #20]
 801c094:	685b      	ldr	r3, [r3, #4]
 801c096:	4618      	mov	r0, r3
 801c098:	f7fc fa5a 	bl	8018550 <pbuf_clen>
 801c09c:	4603      	mov	r3, r0
 801c09e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c0a0:	68fb      	ldr	r3, [r7, #12]
 801c0a2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801c0a6:	8a7a      	ldrh	r2, [r7, #18]
 801c0a8:	429a      	cmp	r2, r3
 801c0aa:	d906      	bls.n	801c0ba <tcp_free_acked_segments+0x42>
 801c0ac:	4b2a      	ldr	r3, [pc, #168]	; (801c158 <tcp_free_acked_segments+0xe0>)
 801c0ae:	f240 4257 	movw	r2, #1111	; 0x457
 801c0b2:	492a      	ldr	r1, [pc, #168]	; (801c15c <tcp_free_acked_segments+0xe4>)
 801c0b4:	482a      	ldr	r0, [pc, #168]	; (801c160 <tcp_free_acked_segments+0xe8>)
 801c0b6:	f006 fe3b 	bl	8022d30 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c0ba:	68fb      	ldr	r3, [r7, #12]
 801c0bc:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 801c0c0:	8a7b      	ldrh	r3, [r7, #18]
 801c0c2:	1ad3      	subs	r3, r2, r3
 801c0c4:	b29a      	uxth	r2, r3
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c0cc:	697b      	ldr	r3, [r7, #20]
 801c0ce:	891a      	ldrh	r2, [r3, #8]
 801c0d0:	4b24      	ldr	r3, [pc, #144]	; (801c164 <tcp_free_acked_segments+0xec>)
 801c0d2:	881b      	ldrh	r3, [r3, #0]
 801c0d4:	4413      	add	r3, r2
 801c0d6:	b29a      	uxth	r2, r3
 801c0d8:	4b22      	ldr	r3, [pc, #136]	; (801c164 <tcp_free_acked_segments+0xec>)
 801c0da:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c0dc:	6978      	ldr	r0, [r7, #20]
 801c0de:	f7fe f850 	bl	801a182 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c0e2:	68fb      	ldr	r3, [r7, #12]
 801c0e4:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d00c      	beq.n	801c106 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c0ec:	68bb      	ldr	r3, [r7, #8]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d109      	bne.n	801c106 <tcp_free_acked_segments+0x8e>
 801c0f2:	683b      	ldr	r3, [r7, #0]
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d106      	bne.n	801c106 <tcp_free_acked_segments+0x8e>
 801c0f8:	4b17      	ldr	r3, [pc, #92]	; (801c158 <tcp_free_acked_segments+0xe0>)
 801c0fa:	f240 4261 	movw	r2, #1121	; 0x461
 801c0fe:	491a      	ldr	r1, [pc, #104]	; (801c168 <tcp_free_acked_segments+0xf0>)
 801c100:	4817      	ldr	r0, [pc, #92]	; (801c160 <tcp_free_acked_segments+0xe8>)
 801c102:	f006 fe15 	bl	8022d30 <iprintf>
  while (seg_list != NULL &&
 801c106:	68bb      	ldr	r3, [r7, #8]
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d020      	beq.n	801c14e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c10c:	68bb      	ldr	r3, [r7, #8]
 801c10e:	68db      	ldr	r3, [r3, #12]
 801c110:	685b      	ldr	r3, [r3, #4]
 801c112:	4618      	mov	r0, r3
 801c114:	f7f8 fa9b 	bl	801464e <lwip_htonl>
 801c118:	4604      	mov	r4, r0
 801c11a:	68bb      	ldr	r3, [r7, #8]
 801c11c:	891b      	ldrh	r3, [r3, #8]
 801c11e:	461d      	mov	r5, r3
 801c120:	68bb      	ldr	r3, [r7, #8]
 801c122:	68db      	ldr	r3, [r3, #12]
 801c124:	899b      	ldrh	r3, [r3, #12]
 801c126:	b29b      	uxth	r3, r3
 801c128:	4618      	mov	r0, r3
 801c12a:	f7f8 fa7b 	bl	8014624 <lwip_htons>
 801c12e:	4603      	mov	r3, r0
 801c130:	b2db      	uxtb	r3, r3
 801c132:	f003 0303 	and.w	r3, r3, #3
 801c136:	2b00      	cmp	r3, #0
 801c138:	d001      	beq.n	801c13e <tcp_free_acked_segments+0xc6>
 801c13a:	2301      	movs	r3, #1
 801c13c:	e000      	b.n	801c140 <tcp_free_acked_segments+0xc8>
 801c13e:	2300      	movs	r3, #0
 801c140:	442b      	add	r3, r5
 801c142:	18e2      	adds	r2, r4, r3
 801c144:	4b09      	ldr	r3, [pc, #36]	; (801c16c <tcp_free_acked_segments+0xf4>)
 801c146:	681b      	ldr	r3, [r3, #0]
 801c148:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	dd9c      	ble.n	801c088 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c14e:	68bb      	ldr	r3, [r7, #8]
}
 801c150:	4618      	mov	r0, r3
 801c152:	3718      	adds	r7, #24
 801c154:	46bd      	mov	sp, r7
 801c156:	bdb0      	pop	{r4, r5, r7, pc}
 801c158:	08026ccc 	.word	0x08026ccc
 801c15c:	08026fec 	.word	0x08026fec
 801c160:	08026d50 	.word	0x08026d50
 801c164:	2002391c 	.word	0x2002391c
 801c168:	08027014 	.word	0x08027014
 801c16c:	20023918 	.word	0x20023918

0801c170 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c170:	b5b0      	push	{r4, r5, r7, lr}
 801c172:	b094      	sub	sp, #80	; 0x50
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c178:	2300      	movs	r3, #0
 801c17a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	2b00      	cmp	r3, #0
 801c180:	d106      	bne.n	801c190 <tcp_receive+0x20>
 801c182:	4b91      	ldr	r3, [pc, #580]	; (801c3c8 <tcp_receive+0x258>)
 801c184:	f240 427b 	movw	r2, #1147	; 0x47b
 801c188:	4990      	ldr	r1, [pc, #576]	; (801c3cc <tcp_receive+0x25c>)
 801c18a:	4891      	ldr	r0, [pc, #580]	; (801c3d0 <tcp_receive+0x260>)
 801c18c:	f006 fdd0 	bl	8022d30 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	7f1b      	ldrb	r3, [r3, #28]
 801c194:	2b03      	cmp	r3, #3
 801c196:	d806      	bhi.n	801c1a6 <tcp_receive+0x36>
 801c198:	4b8b      	ldr	r3, [pc, #556]	; (801c3c8 <tcp_receive+0x258>)
 801c19a:	f240 427c 	movw	r2, #1148	; 0x47c
 801c19e:	498d      	ldr	r1, [pc, #564]	; (801c3d4 <tcp_receive+0x264>)
 801c1a0:	488b      	ldr	r0, [pc, #556]	; (801c3d0 <tcp_receive+0x260>)
 801c1a2:	f006 fdc5 	bl	8022d30 <iprintf>

  if (flags & TCP_ACK) {
 801c1a6:	4b8c      	ldr	r3, [pc, #560]	; (801c3d8 <tcp_receive+0x268>)
 801c1a8:	781b      	ldrb	r3, [r3, #0]
 801c1aa:	f003 0310 	and.w	r3, r3, #16
 801c1ae:	2b00      	cmp	r3, #0
 801c1b0:	f000 8267 	beq.w	801c682 <tcp_receive+0x512>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c1ba:	461a      	mov	r2, r3
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c1c0:	4413      	add	r3, r2
 801c1c2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c1c8:	4b84      	ldr	r3, [pc, #528]	; (801c3dc <tcp_receive+0x26c>)
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	1ad3      	subs	r3, r2, r3
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	db1b      	blt.n	801c20a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c1d6:	4b81      	ldr	r3, [pc, #516]	; (801c3dc <tcp_receive+0x26c>)
 801c1d8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c1da:	429a      	cmp	r2, r3
 801c1dc:	d106      	bne.n	801c1ec <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801c1e2:	4b7f      	ldr	r3, [pc, #508]	; (801c3e0 <tcp_receive+0x270>)
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	1ad3      	subs	r3, r2, r3
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	db0e      	blt.n	801c20a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801c1f0:	4b7b      	ldr	r3, [pc, #492]	; (801c3e0 <tcp_receive+0x270>)
 801c1f2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c1f4:	429a      	cmp	r2, r3
 801c1f6:	d125      	bne.n	801c244 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c1f8:	4b7a      	ldr	r3, [pc, #488]	; (801c3e4 <tcp_receive+0x274>)
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	89db      	ldrh	r3, [r3, #14]
 801c1fe:	b29a      	uxth	r2, r3
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c206:	429a      	cmp	r2, r3
 801c208:	d91c      	bls.n	801c244 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c20a:	4b76      	ldr	r3, [pc, #472]	; (801c3e4 <tcp_receive+0x274>)
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	89db      	ldrh	r3, [r3, #14]
 801c210:	b29a      	uxth	r2, r3
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c224:	429a      	cmp	r2, r3
 801c226:	d205      	bcs.n	801c234 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }
      pcb->snd_wl1 = seqno;
 801c234:	4b69      	ldr	r3, [pc, #420]	; (801c3dc <tcp_receive+0x26c>)
 801c236:	681a      	ldr	r2, [r3, #0]
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	65da      	str	r2, [r3, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 801c23c:	4b68      	ldr	r3, [pc, #416]	; (801c3e0 <tcp_receive+0x270>)
 801c23e:	681a      	ldr	r2, [r3, #0]
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	661a      	str	r2, [r3, #96]	; 0x60
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c244:	4b66      	ldr	r3, [pc, #408]	; (801c3e0 <tcp_receive+0x270>)
 801c246:	681a      	ldr	r2, [r3, #0]
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c24c:	1ad3      	subs	r3, r2, r3
 801c24e:	2b00      	cmp	r3, #0
 801c250:	dc58      	bgt.n	801c304 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c252:	4b65      	ldr	r3, [pc, #404]	; (801c3e8 <tcp_receive+0x278>)
 801c254:	881b      	ldrh	r3, [r3, #0]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d14b      	bne.n	801c2f2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c25e:	687a      	ldr	r2, [r7, #4]
 801c260:	f8b2 2068 	ldrh.w	r2, [r2, #104]	; 0x68
 801c264:	4413      	add	r3, r2
 801c266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c268:	429a      	cmp	r2, r3
 801c26a:	d142      	bne.n	801c2f2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 801c272:	2b00      	cmp	r3, #0
 801c274:	db3d      	blt.n	801c2f2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801c27a:	4b59      	ldr	r3, [pc, #356]	; (801c3e0 <tcp_receive+0x270>)
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	429a      	cmp	r2, r3
 801c280:	d137      	bne.n	801c2f2 <tcp_receive+0x182>
              found_dupack = 1;
 801c282:	2301      	movs	r3, #1
 801c284:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c286:	687b      	ldr	r3, [r7, #4]
 801c288:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801c28c:	2bff      	cmp	r3, #255	; 0xff
 801c28e:	d007      	beq.n	801c2a0 <tcp_receive+0x130>
                ++pcb->dupacks;
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801c296:	3301      	adds	r3, #1
 801c298:	b2da      	uxtb	r2, r3
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
              }
              if (pcb->dupacks > 3) {
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801c2a6:	2b03      	cmp	r3, #3
 801c2a8:	d91b      	bls.n	801c2e2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801c2b0:	687b      	ldr	r3, [r7, #4]
 801c2b2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c2b4:	4413      	add	r3, r2
 801c2b6:	b29a      	uxth	r2, r3
 801c2b8:	687b      	ldr	r3, [r7, #4]
 801c2ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801c2be:	429a      	cmp	r2, r3
 801c2c0:	d30a      	bcc.n	801c2d8 <tcp_receive+0x168>
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c2cc:	4413      	add	r3, r2
 801c2ce:	b29a      	uxth	r2, r3
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 801c2d6:	e004      	b.n	801c2e2 <tcp_receive+0x172>
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c2de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
              }
              if (pcb->dupacks >= 3) {
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 801c2e8:	2b02      	cmp	r3, #2
 801c2ea:	d902      	bls.n	801c2f2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801c2ec:	6878      	ldr	r0, [r7, #4]
 801c2ee:	f002 fb47 	bl	801e980 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801c2f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c2f4:	2b00      	cmp	r3, #0
 801c2f6:	f040 8162 	bne.w	801c5be <tcp_receive+0x44e>
        pcb->dupacks = 0;
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	2200      	movs	r2, #0
 801c2fe:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801c302:	e15c      	b.n	801c5be <tcp_receive+0x44e>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c304:	4b36      	ldr	r3, [pc, #216]	; (801c3e0 <tcp_receive+0x270>)
 801c306:	681a      	ldr	r2, [r3, #0]
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c30c:	1ad3      	subs	r3, r2, r3
 801c30e:	3b01      	subs	r3, #1
 801c310:	2b00      	cmp	r3, #0
 801c312:	f2c0 814f 	blt.w	801c5b4 <tcp_receive+0x444>
 801c316:	4b32      	ldr	r3, [pc, #200]	; (801c3e0 <tcp_receive+0x270>)
 801c318:	681a      	ldr	r2, [r3, #0]
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c31e:	1ad3      	subs	r3, r2, r3
 801c320:	2b00      	cmp	r3, #0
 801c322:	f300 8147 	bgt.w	801c5b4 <tcp_receive+0x444>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801c32a:	f003 0304 	and.w	r3, r3, #4
 801c32e:	2b00      	cmp	r3, #0
 801c330:	d010      	beq.n	801c354 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801c336:	f023 0304 	bic.w	r3, r3, #4
 801c33a:	b29a      	uxth	r2, r3
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	845a      	strh	r2, [r3, #34]	; 0x22
        pcb->cwnd = pcb->ssthresh;
 801c340:	687b      	ldr	r3, [r7, #4]
 801c342:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        pcb->bytes_acked = 0;
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	2200      	movs	r2, #0
 801c350:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	2200      	movs	r2, #0
 801c358:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801c362:	10db      	asrs	r3, r3, #3
 801c364:	b21b      	sxth	r3, r3
 801c366:	b29a      	uxth	r2, r3
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 801c36e:	b29b      	uxth	r3, r3
 801c370:	4413      	add	r3, r2
 801c372:	b29b      	uxth	r3, r3
 801c374:	b21a      	sxth	r2, r3
 801c376:	687b      	ldr	r3, [r7, #4]
 801c378:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c37c:	4b18      	ldr	r3, [pc, #96]	; (801c3e0 <tcp_receive+0x270>)
 801c37e:	681b      	ldr	r3, [r3, #0]
 801c380:	b29a      	uxth	r2, r3
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c386:	b29b      	uxth	r3, r3
 801c388:	1ad3      	subs	r3, r2, r3
 801c38a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	2200      	movs	r2, #0
 801c390:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
      pcb->lastack = ackno;
 801c394:	4b12      	ldr	r3, [pc, #72]	; (801c3e0 <tcp_receive+0x270>)
 801c396:	681a      	ldr	r2, [r3, #0]
 801c398:	687b      	ldr	r3, [r7, #4]
 801c39a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	7f1b      	ldrb	r3, [r3, #28]
 801c3a0:	2b03      	cmp	r3, #3
 801c3a2:	f240 8097 	bls.w	801c4d4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801c3b2:	429a      	cmp	r2, r3
 801c3b4:	d245      	bcs.n	801c442 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801c3ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d014      	beq.n	801c3ec <tcp_receive+0x27c>
 801c3c2:	2301      	movs	r3, #1
 801c3c4:	e013      	b.n	801c3ee <tcp_receive+0x27e>
 801c3c6:	bf00      	nop
 801c3c8:	08026ccc 	.word	0x08026ccc
 801c3cc:	08027034 	.word	0x08027034
 801c3d0:	08026d50 	.word	0x08026d50
 801c3d4:	08027050 	.word	0x08027050
 801c3d8:	20023920 	.word	0x20023920
 801c3dc:	20023914 	.word	0x20023914
 801c3e0:	20023918 	.word	0x20023918
 801c3e4:	20023904 	.word	0x20023904
 801c3e8:	2002391e 	.word	0x2002391e
 801c3ec:	2302      	movs	r3, #2
 801c3ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c3f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801c3f6:	b29a      	uxth	r2, r3
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c3fc:	fb12 f303 	smulbb	r3, r2, r3
 801c400:	b29b      	uxth	r3, r3
 801c402:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c404:	4293      	cmp	r3, r2
 801c406:	bf28      	it	cs
 801c408:	4613      	movcs	r3, r2
 801c40a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801c412:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c414:	4413      	add	r3, r2
 801c416:	b29a      	uxth	r2, r3
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801c41e:	429a      	cmp	r2, r3
 801c420:	d309      	bcc.n	801c436 <tcp_receive+0x2c6>
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801c428:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c42a:	4413      	add	r3, r2
 801c42c:	b29a      	uxth	r2, r3
 801c42e:	687b      	ldr	r3, [r7, #4]
 801c430:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 801c434:	e04e      	b.n	801c4d4 <tcp_receive+0x364>
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c43c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 801c440:	e048      	b.n	801c4d4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c442:	687b      	ldr	r3, [r7, #4]
 801c444:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 801c448:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c44a:	4413      	add	r3, r2
 801c44c:	b29a      	uxth	r2, r3
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	f8b3 3072 	ldrh.w	r3, [r3, #114]	; 0x72
 801c454:	429a      	cmp	r2, r3
 801c456:	d309      	bcc.n	801c46c <tcp_receive+0x2fc>
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 801c45e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c460:	4413      	add	r3, r2
 801c462:	b29a      	uxth	r2, r3
 801c464:	687b      	ldr	r3, [r7, #4]
 801c466:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 801c46a:	e004      	b.n	801c476 <tcp_receive+0x306>
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c472:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
          if (pcb->bytes_acked >= pcb->cwnd) {
 801c476:	687b      	ldr	r3, [r7, #4]
 801c478:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801c482:	429a      	cmp	r2, r3
 801c484:	d326      	bcc.n	801c4d4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c486:	687b      	ldr	r3, [r7, #4]
 801c488:	f8b3 2072 	ldrh.w	r2, [r3, #114]	; 0x72
 801c48c:	687b      	ldr	r3, [r7, #4]
 801c48e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801c492:	1ad3      	subs	r3, r2, r3
 801c494:	b29a      	uxth	r2, r3
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c4a6:	4413      	add	r3, r2
 801c4a8:	b29a      	uxth	r2, r3
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801c4b0:	429a      	cmp	r2, r3
 801c4b2:	d30a      	bcc.n	801c4ca <tcp_receive+0x35a>
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801c4be:	4413      	add	r3, r2
 801c4c0:	b29a      	uxth	r2, r3
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 801c4c8:	e004      	b.n	801c4d4 <tcp_receive+0x364>
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c4d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	6f99      	ldr	r1, [r3, #120]	; 0x78
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c4dc:	4a99      	ldr	r2, [pc, #612]	; (801c744 <tcp_receive+0x5d4>)
 801c4de:	6878      	ldr	r0, [r7, #4]
 801c4e0:	f7ff fdca 	bl	801c078 <tcp_free_acked_segments>
 801c4e4:	4602      	mov	r2, r0
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	679a      	str	r2, [r3, #120]	; 0x78
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c4ea:	687b      	ldr	r3, [r7, #4]
 801c4ec:	6f59      	ldr	r1, [r3, #116]	; 0x74
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c4f2:	4a95      	ldr	r2, [pc, #596]	; (801c748 <tcp_receive+0x5d8>)
 801c4f4:	6878      	ldr	r0, [r7, #4]
 801c4f6:	f7ff fdbf 	bl	801c078 <tcp_free_acked_segments>
 801c4fa:	4602      	mov	r2, r0
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c504:	2b00      	cmp	r3, #0
 801c506:	d104      	bne.n	801c512 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c50e:	871a      	strh	r2, [r3, #56]	; 0x38
 801c510:	e002      	b.n	801c518 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	2200      	movs	r2, #0
 801c516:	871a      	strh	r2, [r3, #56]	; 0x38
      }

      pcb->polltmr = 0;
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	2200      	movs	r2, #0
 801c51c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c524:	2b00      	cmp	r3, #0
 801c526:	d103      	bne.n	801c530 <tcp_receive+0x3c0>
        pcb->unsent_oversize = 0;
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	2200      	movs	r2, #0
 801c52c:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 801c536:	4b85      	ldr	r3, [pc, #532]	; (801c74c <tcp_receive+0x5dc>)
 801c538:	881b      	ldrh	r3, [r3, #0]
 801c53a:	4413      	add	r3, r2
 801c53c:	b29a      	uxth	r2, r3
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801c548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d035      	beq.n	801c5bc <tcp_receive+0x44c>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c554:	2b00      	cmp	r3, #0
 801c556:	d118      	bne.n	801c58a <tcp_receive+0x41a>
          if ((pcb->unsent == NULL) ||
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c55c:	2b00      	cmp	r3, #0
 801c55e:	d00c      	beq.n	801c57a <tcp_receive+0x40a>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c568:	68db      	ldr	r3, [r3, #12]
 801c56a:	685b      	ldr	r3, [r3, #4]
 801c56c:	4618      	mov	r0, r3
 801c56e:	f7f8 f86e 	bl	801464e <lwip_htonl>
 801c572:	4603      	mov	r3, r0
 801c574:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801c576:	2b00      	cmp	r3, #0
 801c578:	dc20      	bgt.n	801c5bc <tcp_receive+0x44c>
            tcp_clear_flags(pcb, TF_RTO);
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801c57e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c582:	b29a      	uxth	r2, r3
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	845a      	strh	r2, [r3, #34]	; 0x22
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c588:	e018      	b.n	801c5bc <tcp_receive+0x44c>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c592:	68db      	ldr	r3, [r3, #12]
 801c594:	685b      	ldr	r3, [r3, #4]
 801c596:	4618      	mov	r0, r3
 801c598:	f7f8 f859 	bl	801464e <lwip_htonl>
 801c59c:	4603      	mov	r3, r0
 801c59e:	1ae3      	subs	r3, r4, r3
 801c5a0:	2b00      	cmp	r3, #0
 801c5a2:	dc0b      	bgt.n	801c5bc <tcp_receive+0x44c>
          tcp_clear_flags(pcb, TF_RTO);
 801c5a4:	687b      	ldr	r3, [r7, #4]
 801c5a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801c5a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c5ac:	b29a      	uxth	r2, r3
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	845a      	strh	r2, [r3, #34]	; 0x22
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c5b2:	e003      	b.n	801c5bc <tcp_receive+0x44c>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801c5b4:	6878      	ldr	r0, [r7, #4]
 801c5b6:	f002 fbcf 	bl	801ed58 <tcp_send_empty_ack>
 801c5ba:	e000      	b.n	801c5be <tcp_receive+0x44e>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c5bc:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c5c2:	2b00      	cmp	r3, #0
 801c5c4:	d05d      	beq.n	801c682 <tcp_receive+0x512>
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c5ca:	4b61      	ldr	r3, [pc, #388]	; (801c750 <tcp_receive+0x5e0>)
 801c5cc:	681b      	ldr	r3, [r3, #0]
 801c5ce:	1ad3      	subs	r3, r2, r3
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	da56      	bge.n	801c682 <tcp_receive+0x512>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c5d4:	4b5f      	ldr	r3, [pc, #380]	; (801c754 <tcp_receive+0x5e4>)
 801c5d6:	681b      	ldr	r3, [r3, #0]
 801c5d8:	b29a      	uxth	r2, r3
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c5de:	b29b      	uxth	r3, r3
 801c5e0:	1ad3      	subs	r3, r2, r3
 801c5e2:	b29b      	uxth	r3, r3
 801c5e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801c5e8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801c5f2:	10db      	asrs	r3, r3, #3
 801c5f4:	b21b      	sxth	r3, r3
 801c5f6:	b29b      	uxth	r3, r3
 801c5f8:	1ad3      	subs	r3, r2, r3
 801c5fa:	b29b      	uxth	r3, r3
 801c5fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801c606:	b29a      	uxth	r2, r3
 801c608:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c60c:	4413      	add	r3, r2
 801c60e:	b29b      	uxth	r3, r3
 801c610:	b21a      	sxth	r2, r3
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      if (m < 0) {
 801c618:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	da05      	bge.n	801c62c <tcp_receive+0x4bc>
        m = (s16_t) - m;
 801c620:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c624:	425b      	negs	r3, r3
 801c626:	b29b      	uxth	r3, r3
 801c628:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801c62c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 801c636:	109b      	asrs	r3, r3, #2
 801c638:	b21b      	sxth	r3, r3
 801c63a:	b29b      	uxth	r3, r3
 801c63c:	1ad3      	subs	r3, r2, r3
 801c63e:	b29b      	uxth	r3, r3
 801c640:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 801c64a:	b29a      	uxth	r2, r3
 801c64c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c650:	4413      	add	r3, r2
 801c652:	b29b      	uxth	r3, r3
 801c654:	b21a      	sxth	r2, r3
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 801c662:	10db      	asrs	r3, r3, #3
 801c664:	b21b      	sxth	r3, r3
 801c666:	b29a      	uxth	r2, r3
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 801c66e:	b29b      	uxth	r3, r3
 801c670:	4413      	add	r3, r2
 801c672:	b29b      	uxth	r3, r3
 801c674:	b21a      	sxth	r2, r3
 801c676:	687b      	ldr	r3, [r7, #4]
 801c678:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	2200      	movs	r2, #0
 801c680:	63da      	str	r2, [r3, #60]	; 0x3c

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c682:	4b35      	ldr	r3, [pc, #212]	; (801c758 <tcp_receive+0x5e8>)
 801c684:	881b      	ldrh	r3, [r3, #0]
 801c686:	2b00      	cmp	r3, #0
 801c688:	f000 84e1 	beq.w	801d04e <tcp_receive+0xede>
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	7f1b      	ldrb	r3, [r3, #28]
 801c690:	2b06      	cmp	r3, #6
 801c692:	f200 84dc 	bhi.w	801d04e <tcp_receive+0xede>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c696:	687b      	ldr	r3, [r7, #4]
 801c698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c69a:	4b30      	ldr	r3, [pc, #192]	; (801c75c <tcp_receive+0x5ec>)
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	1ad3      	subs	r3, r2, r3
 801c6a0:	3b01      	subs	r3, #1
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	f2c0 808e 	blt.w	801c7c4 <tcp_receive+0x654>
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c6ac:	4b2a      	ldr	r3, [pc, #168]	; (801c758 <tcp_receive+0x5e8>)
 801c6ae:	881b      	ldrh	r3, [r3, #0]
 801c6b0:	4619      	mov	r1, r3
 801c6b2:	4b2a      	ldr	r3, [pc, #168]	; (801c75c <tcp_receive+0x5ec>)
 801c6b4:	681b      	ldr	r3, [r3, #0]
 801c6b6:	440b      	add	r3, r1
 801c6b8:	1ad3      	subs	r3, r2, r3
 801c6ba:	3301      	adds	r3, #1
 801c6bc:	2b00      	cmp	r3, #0
 801c6be:	f300 8081 	bgt.w	801c7c4 <tcp_receive+0x654>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801c6c2:	4b27      	ldr	r3, [pc, #156]	; (801c760 <tcp_receive+0x5f0>)
 801c6c4:	685b      	ldr	r3, [r3, #4]
 801c6c6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c6cc:	4b23      	ldr	r3, [pc, #140]	; (801c75c <tcp_receive+0x5ec>)
 801c6ce:	681b      	ldr	r3, [r3, #0]
 801c6d0:	1ad3      	subs	r3, r2, r3
 801c6d2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c6d4:	4b22      	ldr	r3, [pc, #136]	; (801c760 <tcp_receive+0x5f0>)
 801c6d6:	685b      	ldr	r3, [r3, #4]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d106      	bne.n	801c6ea <tcp_receive+0x57a>
 801c6dc:	4b21      	ldr	r3, [pc, #132]	; (801c764 <tcp_receive+0x5f4>)
 801c6de:	f240 5294 	movw	r2, #1428	; 0x594
 801c6e2:	4921      	ldr	r1, [pc, #132]	; (801c768 <tcp_receive+0x5f8>)
 801c6e4:	4821      	ldr	r0, [pc, #132]	; (801c76c <tcp_receive+0x5fc>)
 801c6e6:	f006 fb23 	bl	8022d30 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c6ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c6f0:	4293      	cmp	r3, r2
 801c6f2:	d906      	bls.n	801c702 <tcp_receive+0x592>
 801c6f4:	4b1b      	ldr	r3, [pc, #108]	; (801c764 <tcp_receive+0x5f4>)
 801c6f6:	f240 5295 	movw	r2, #1429	; 0x595
 801c6fa:	491d      	ldr	r1, [pc, #116]	; (801c770 <tcp_receive+0x600>)
 801c6fc:	481b      	ldr	r0, [pc, #108]	; (801c76c <tcp_receive+0x5fc>)
 801c6fe:	f006 fb17 	bl	8022d30 <iprintf>
      off = (u16_t)off32;
 801c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c704:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c708:	4b15      	ldr	r3, [pc, #84]	; (801c760 <tcp_receive+0x5f0>)
 801c70a:	685b      	ldr	r3, [r3, #4]
 801c70c:	891b      	ldrh	r3, [r3, #8]
 801c70e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c712:	429a      	cmp	r2, r3
 801c714:	d906      	bls.n	801c724 <tcp_receive+0x5b4>
 801c716:	4b13      	ldr	r3, [pc, #76]	; (801c764 <tcp_receive+0x5f4>)
 801c718:	f240 5297 	movw	r2, #1431	; 0x597
 801c71c:	4915      	ldr	r1, [pc, #84]	; (801c774 <tcp_receive+0x604>)
 801c71e:	4813      	ldr	r0, [pc, #76]	; (801c76c <tcp_receive+0x5fc>)
 801c720:	f006 fb06 	bl	8022d30 <iprintf>
      inseg.len -= off;
 801c724:	4b0e      	ldr	r3, [pc, #56]	; (801c760 <tcp_receive+0x5f0>)
 801c726:	891a      	ldrh	r2, [r3, #8]
 801c728:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c72c:	1ad3      	subs	r3, r2, r3
 801c72e:	b29a      	uxth	r2, r3
 801c730:	4b0b      	ldr	r3, [pc, #44]	; (801c760 <tcp_receive+0x5f0>)
 801c732:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c734:	4b0a      	ldr	r3, [pc, #40]	; (801c760 <tcp_receive+0x5f0>)
 801c736:	685b      	ldr	r3, [r3, #4]
 801c738:	891a      	ldrh	r2, [r3, #8]
 801c73a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c73e:	1ad3      	subs	r3, r2, r3
 801c740:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801c742:	e029      	b.n	801c798 <tcp_receive+0x628>
 801c744:	0802706c 	.word	0x0802706c
 801c748:	08027074 	.word	0x08027074
 801c74c:	2002391c 	.word	0x2002391c
 801c750:	20023918 	.word	0x20023918
 801c754:	200238dc 	.word	0x200238dc
 801c758:	2002391e 	.word	0x2002391e
 801c75c:	20023914 	.word	0x20023914
 801c760:	200238f4 	.word	0x200238f4
 801c764:	08026ccc 	.word	0x08026ccc
 801c768:	0802707c 	.word	0x0802707c
 801c76c:	08026d50 	.word	0x08026d50
 801c770:	0802708c 	.word	0x0802708c
 801c774:	0802709c 	.word	0x0802709c
        off -= p->len;
 801c778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c77a:	895b      	ldrh	r3, [r3, #10]
 801c77c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c780:	1ad3      	subs	r3, r2, r3
 801c782:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801c786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c788:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c78a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801c78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c78e:	2200      	movs	r2, #0
 801c790:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801c792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801c798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c79a:	895b      	ldrh	r3, [r3, #10]
 801c79c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c7a0:	429a      	cmp	r2, r3
 801c7a2:	d8e9      	bhi.n	801c778 <tcp_receive+0x608>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801c7a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c7a8:	4619      	mov	r1, r3
 801c7aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c7ac:	f7fb fdbc 	bl	8018328 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7b4:	4a91      	ldr	r2, [pc, #580]	; (801c9fc <tcp_receive+0x88c>)
 801c7b6:	6013      	str	r3, [r2, #0]
 801c7b8:	4b91      	ldr	r3, [pc, #580]	; (801ca00 <tcp_receive+0x890>)
 801c7ba:	68db      	ldr	r3, [r3, #12]
 801c7bc:	4a8f      	ldr	r2, [pc, #572]	; (801c9fc <tcp_receive+0x88c>)
 801c7be:	6812      	ldr	r2, [r2, #0]
 801c7c0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c7c2:	e00d      	b.n	801c7e0 <tcp_receive+0x670>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801c7c4:	4b8d      	ldr	r3, [pc, #564]	; (801c9fc <tcp_receive+0x88c>)
 801c7c6:	681a      	ldr	r2, [r3, #0]
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7cc:	1ad3      	subs	r3, r2, r3
 801c7ce:	2b00      	cmp	r3, #0
 801c7d0:	da06      	bge.n	801c7e0 <tcp_receive+0x670>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801c7d6:	f043 0302 	orr.w	r3, r3, #2
 801c7da:	b29a      	uxth	r2, r3
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	845a      	strh	r2, [r3, #34]	; 0x22
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c7e0:	4b86      	ldr	r3, [pc, #536]	; (801c9fc <tcp_receive+0x88c>)
 801c7e2:	681a      	ldr	r2, [r3, #0]
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7e8:	1ad3      	subs	r3, r2, r3
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	f2c0 842a 	blt.w	801d044 <tcp_receive+0xed4>
 801c7f0:	4b82      	ldr	r3, [pc, #520]	; (801c9fc <tcp_receive+0x88c>)
 801c7f2:	681a      	ldr	r2, [r3, #0]
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c7f8:	6879      	ldr	r1, [r7, #4]
 801c7fa:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 801c7fc:	440b      	add	r3, r1
 801c7fe:	1ad3      	subs	r3, r2, r3
 801c800:	3301      	adds	r3, #1
 801c802:	2b00      	cmp	r3, #0
 801c804:	f300 841e 	bgt.w	801d044 <tcp_receive+0xed4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c80c:	4b7b      	ldr	r3, [pc, #492]	; (801c9fc <tcp_receive+0x88c>)
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	429a      	cmp	r2, r3
 801c812:	f040 829a 	bne.w	801cd4a <tcp_receive+0xbda>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801c816:	4b7a      	ldr	r3, [pc, #488]	; (801ca00 <tcp_receive+0x890>)
 801c818:	891c      	ldrh	r4, [r3, #8]
 801c81a:	4b79      	ldr	r3, [pc, #484]	; (801ca00 <tcp_receive+0x890>)
 801c81c:	68db      	ldr	r3, [r3, #12]
 801c81e:	899b      	ldrh	r3, [r3, #12]
 801c820:	b29b      	uxth	r3, r3
 801c822:	4618      	mov	r0, r3
 801c824:	f7f7 fefe 	bl	8014624 <lwip_htons>
 801c828:	4603      	mov	r3, r0
 801c82a:	b2db      	uxtb	r3, r3
 801c82c:	f003 0303 	and.w	r3, r3, #3
 801c830:	2b00      	cmp	r3, #0
 801c832:	d001      	beq.n	801c838 <tcp_receive+0x6c8>
 801c834:	2301      	movs	r3, #1
 801c836:	e000      	b.n	801c83a <tcp_receive+0x6ca>
 801c838:	2300      	movs	r3, #0
 801c83a:	4423      	add	r3, r4
 801c83c:	b29a      	uxth	r2, r3
 801c83e:	4b71      	ldr	r3, [pc, #452]	; (801ca04 <tcp_receive+0x894>)
 801c840:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801c842:	687b      	ldr	r3, [r7, #4]
 801c844:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801c846:	4b6f      	ldr	r3, [pc, #444]	; (801ca04 <tcp_receive+0x894>)
 801c848:	881b      	ldrh	r3, [r3, #0]
 801c84a:	429a      	cmp	r2, r3
 801c84c:	d275      	bcs.n	801c93a <tcp_receive+0x7ca>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c84e:	4b6c      	ldr	r3, [pc, #432]	; (801ca00 <tcp_receive+0x890>)
 801c850:	68db      	ldr	r3, [r3, #12]
 801c852:	899b      	ldrh	r3, [r3, #12]
 801c854:	b29b      	uxth	r3, r3
 801c856:	4618      	mov	r0, r3
 801c858:	f7f7 fee4 	bl	8014624 <lwip_htons>
 801c85c:	4603      	mov	r3, r0
 801c85e:	b2db      	uxtb	r3, r3
 801c860:	f003 0301 	and.w	r3, r3, #1
 801c864:	2b00      	cmp	r3, #0
 801c866:	d01f      	beq.n	801c8a8 <tcp_receive+0x738>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801c868:	4b65      	ldr	r3, [pc, #404]	; (801ca00 <tcp_receive+0x890>)
 801c86a:	68db      	ldr	r3, [r3, #12]
 801c86c:	899b      	ldrh	r3, [r3, #12]
 801c86e:	b29b      	uxth	r3, r3
 801c870:	b21b      	sxth	r3, r3
 801c872:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c876:	b21c      	sxth	r4, r3
 801c878:	4b61      	ldr	r3, [pc, #388]	; (801ca00 <tcp_receive+0x890>)
 801c87a:	68db      	ldr	r3, [r3, #12]
 801c87c:	899b      	ldrh	r3, [r3, #12]
 801c87e:	b29b      	uxth	r3, r3
 801c880:	4618      	mov	r0, r3
 801c882:	f7f7 fecf 	bl	8014624 <lwip_htons>
 801c886:	4603      	mov	r3, r0
 801c888:	b2db      	uxtb	r3, r3
 801c88a:	b29b      	uxth	r3, r3
 801c88c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801c890:	b29b      	uxth	r3, r3
 801c892:	4618      	mov	r0, r3
 801c894:	f7f7 fec6 	bl	8014624 <lwip_htons>
 801c898:	4603      	mov	r3, r0
 801c89a:	b21b      	sxth	r3, r3
 801c89c:	4323      	orrs	r3, r4
 801c89e:	b21a      	sxth	r2, r3
 801c8a0:	4b57      	ldr	r3, [pc, #348]	; (801ca00 <tcp_receive+0x890>)
 801c8a2:	68db      	ldr	r3, [r3, #12]
 801c8a4:	b292      	uxth	r2, r2
 801c8a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801c8ac:	4b54      	ldr	r3, [pc, #336]	; (801ca00 <tcp_receive+0x890>)
 801c8ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801c8b0:	4b53      	ldr	r3, [pc, #332]	; (801ca00 <tcp_receive+0x890>)
 801c8b2:	68db      	ldr	r3, [r3, #12]
 801c8b4:	899b      	ldrh	r3, [r3, #12]
 801c8b6:	b29b      	uxth	r3, r3
 801c8b8:	4618      	mov	r0, r3
 801c8ba:	f7f7 feb3 	bl	8014624 <lwip_htons>
 801c8be:	4603      	mov	r3, r0
 801c8c0:	b2db      	uxtb	r3, r3
 801c8c2:	f003 0302 	and.w	r3, r3, #2
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d005      	beq.n	801c8d6 <tcp_receive+0x766>
            inseg.len -= 1;
 801c8ca:	4b4d      	ldr	r3, [pc, #308]	; (801ca00 <tcp_receive+0x890>)
 801c8cc:	891b      	ldrh	r3, [r3, #8]
 801c8ce:	3b01      	subs	r3, #1
 801c8d0:	b29a      	uxth	r2, r3
 801c8d2:	4b4b      	ldr	r3, [pc, #300]	; (801ca00 <tcp_receive+0x890>)
 801c8d4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801c8d6:	4b4a      	ldr	r3, [pc, #296]	; (801ca00 <tcp_receive+0x890>)
 801c8d8:	685b      	ldr	r3, [r3, #4]
 801c8da:	4a49      	ldr	r2, [pc, #292]	; (801ca00 <tcp_receive+0x890>)
 801c8dc:	8912      	ldrh	r2, [r2, #8]
 801c8de:	4611      	mov	r1, r2
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	f7fb fc21 	bl	8018128 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801c8e6:	4b46      	ldr	r3, [pc, #280]	; (801ca00 <tcp_receive+0x890>)
 801c8e8:	891c      	ldrh	r4, [r3, #8]
 801c8ea:	4b45      	ldr	r3, [pc, #276]	; (801ca00 <tcp_receive+0x890>)
 801c8ec:	68db      	ldr	r3, [r3, #12]
 801c8ee:	899b      	ldrh	r3, [r3, #12]
 801c8f0:	b29b      	uxth	r3, r3
 801c8f2:	4618      	mov	r0, r3
 801c8f4:	f7f7 fe96 	bl	8014624 <lwip_htons>
 801c8f8:	4603      	mov	r3, r0
 801c8fa:	b2db      	uxtb	r3, r3
 801c8fc:	f003 0303 	and.w	r3, r3, #3
 801c900:	2b00      	cmp	r3, #0
 801c902:	d001      	beq.n	801c908 <tcp_receive+0x798>
 801c904:	2301      	movs	r3, #1
 801c906:	e000      	b.n	801c90a <tcp_receive+0x79a>
 801c908:	2300      	movs	r3, #0
 801c90a:	4423      	add	r3, r4
 801c90c:	b29a      	uxth	r2, r3
 801c90e:	4b3d      	ldr	r3, [pc, #244]	; (801ca04 <tcp_receive+0x894>)
 801c910:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801c912:	4b3c      	ldr	r3, [pc, #240]	; (801ca04 <tcp_receive+0x894>)
 801c914:	881b      	ldrh	r3, [r3, #0]
 801c916:	461a      	mov	r2, r3
 801c918:	4b38      	ldr	r3, [pc, #224]	; (801c9fc <tcp_receive+0x88c>)
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	441a      	add	r2, r3
 801c91e:	687b      	ldr	r3, [r7, #4]
 801c920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c922:	6879      	ldr	r1, [r7, #4]
 801c924:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 801c926:	440b      	add	r3, r1
 801c928:	429a      	cmp	r2, r3
 801c92a:	d006      	beq.n	801c93a <tcp_receive+0x7ca>
 801c92c:	4b36      	ldr	r3, [pc, #216]	; (801ca08 <tcp_receive+0x898>)
 801c92e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801c932:	4936      	ldr	r1, [pc, #216]	; (801ca0c <tcp_receive+0x89c>)
 801c934:	4836      	ldr	r0, [pc, #216]	; (801ca10 <tcp_receive+0x8a0>)
 801c936:	f006 f9fb 	bl	8022d30 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801c93a:	687b      	ldr	r3, [r7, #4]
 801c93c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c93e:	2b00      	cmp	r3, #0
 801c940:	f000 80e7 	beq.w	801cb12 <tcp_receive+0x9a2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801c944:	4b2e      	ldr	r3, [pc, #184]	; (801ca00 <tcp_receive+0x890>)
 801c946:	68db      	ldr	r3, [r3, #12]
 801c948:	899b      	ldrh	r3, [r3, #12]
 801c94a:	b29b      	uxth	r3, r3
 801c94c:	4618      	mov	r0, r3
 801c94e:	f7f7 fe69 	bl	8014624 <lwip_htons>
 801c952:	4603      	mov	r3, r0
 801c954:	b2db      	uxtb	r3, r3
 801c956:	f003 0301 	and.w	r3, r3, #1
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	d010      	beq.n	801c980 <tcp_receive+0x810>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801c95e:	e00a      	b.n	801c976 <tcp_receive+0x806>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c964:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c96a:	681a      	ldr	r2, [r3, #0]
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	67da      	str	r2, [r3, #124]	; 0x7c
              tcp_seg_free(old_ooseq);
 801c970:	68f8      	ldr	r0, [r7, #12]
 801c972:	f7fd fc06 	bl	801a182 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d1f0      	bne.n	801c960 <tcp_receive+0x7f0>
 801c97e:	e0c8      	b.n	801cb12 <tcp_receive+0x9a2>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801c980:	687b      	ldr	r3, [r7, #4]
 801c982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c984:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801c986:	e052      	b.n	801ca2e <tcp_receive+0x8be>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c98a:	68db      	ldr	r3, [r3, #12]
 801c98c:	899b      	ldrh	r3, [r3, #12]
 801c98e:	b29b      	uxth	r3, r3
 801c990:	4618      	mov	r0, r3
 801c992:	f7f7 fe47 	bl	8014624 <lwip_htons>
 801c996:	4603      	mov	r3, r0
 801c998:	b2db      	uxtb	r3, r3
 801c99a:	f003 0301 	and.w	r3, r3, #1
 801c99e:	2b00      	cmp	r3, #0
 801c9a0:	d03d      	beq.n	801ca1e <tcp_receive+0x8ae>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801c9a2:	4b17      	ldr	r3, [pc, #92]	; (801ca00 <tcp_receive+0x890>)
 801c9a4:	68db      	ldr	r3, [r3, #12]
 801c9a6:	899b      	ldrh	r3, [r3, #12]
 801c9a8:	b29b      	uxth	r3, r3
 801c9aa:	4618      	mov	r0, r3
 801c9ac:	f7f7 fe3a 	bl	8014624 <lwip_htons>
 801c9b0:	4603      	mov	r3, r0
 801c9b2:	b2db      	uxtb	r3, r3
 801c9b4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801c9b8:	2b00      	cmp	r3, #0
 801c9ba:	d130      	bne.n	801ca1e <tcp_receive+0x8ae>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801c9bc:	4b10      	ldr	r3, [pc, #64]	; (801ca00 <tcp_receive+0x890>)
 801c9be:	68db      	ldr	r3, [r3, #12]
 801c9c0:	899b      	ldrh	r3, [r3, #12]
 801c9c2:	b29c      	uxth	r4, r3
 801c9c4:	2001      	movs	r0, #1
 801c9c6:	f7f7 fe2d 	bl	8014624 <lwip_htons>
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	461a      	mov	r2, r3
 801c9ce:	4b0c      	ldr	r3, [pc, #48]	; (801ca00 <tcp_receive+0x890>)
 801c9d0:	68db      	ldr	r3, [r3, #12]
 801c9d2:	4322      	orrs	r2, r4
 801c9d4:	b292      	uxth	r2, r2
 801c9d6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801c9d8:	4b09      	ldr	r3, [pc, #36]	; (801ca00 <tcp_receive+0x890>)
 801c9da:	891c      	ldrh	r4, [r3, #8]
 801c9dc:	4b08      	ldr	r3, [pc, #32]	; (801ca00 <tcp_receive+0x890>)
 801c9de:	68db      	ldr	r3, [r3, #12]
 801c9e0:	899b      	ldrh	r3, [r3, #12]
 801c9e2:	b29b      	uxth	r3, r3
 801c9e4:	4618      	mov	r0, r3
 801c9e6:	f7f7 fe1d 	bl	8014624 <lwip_htons>
 801c9ea:	4603      	mov	r3, r0
 801c9ec:	b2db      	uxtb	r3, r3
 801c9ee:	f003 0303 	and.w	r3, r3, #3
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	d00e      	beq.n	801ca14 <tcp_receive+0x8a4>
 801c9f6:	2301      	movs	r3, #1
 801c9f8:	e00d      	b.n	801ca16 <tcp_receive+0x8a6>
 801c9fa:	bf00      	nop
 801c9fc:	20023914 	.word	0x20023914
 801ca00:	200238f4 	.word	0x200238f4
 801ca04:	2002391e 	.word	0x2002391e
 801ca08:	08026ccc 	.word	0x08026ccc
 801ca0c:	080270ac 	.word	0x080270ac
 801ca10:	08026d50 	.word	0x08026d50
 801ca14:	2300      	movs	r3, #0
 801ca16:	4423      	add	r3, r4
 801ca18:	b29a      	uxth	r2, r3
 801ca1a:	4b98      	ldr	r3, [pc, #608]	; (801cc7c <tcp_receive+0xb0c>)
 801ca1c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801ca1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca20:	613b      	str	r3, [r7, #16]
              next = next->next;
 801ca22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca24:	681b      	ldr	r3, [r3, #0]
 801ca26:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801ca28:	6938      	ldr	r0, [r7, #16]
 801ca2a:	f7fd fbaa 	bl	801a182 <tcp_seg_free>
            while (next &&
 801ca2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d00e      	beq.n	801ca52 <tcp_receive+0x8e2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801ca34:	4b91      	ldr	r3, [pc, #580]	; (801cc7c <tcp_receive+0xb0c>)
 801ca36:	881b      	ldrh	r3, [r3, #0]
 801ca38:	461a      	mov	r2, r3
 801ca3a:	4b91      	ldr	r3, [pc, #580]	; (801cc80 <tcp_receive+0xb10>)
 801ca3c:	681b      	ldr	r3, [r3, #0]
 801ca3e:	441a      	add	r2, r3
 801ca40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca42:	68db      	ldr	r3, [r3, #12]
 801ca44:	685b      	ldr	r3, [r3, #4]
 801ca46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801ca48:	8909      	ldrh	r1, [r1, #8]
 801ca4a:	440b      	add	r3, r1
 801ca4c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801ca4e:	2b00      	cmp	r3, #0
 801ca50:	da9a      	bge.n	801c988 <tcp_receive+0x818>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801ca52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d059      	beq.n	801cb0c <tcp_receive+0x99c>
                TCP_SEQ_GT(seqno + tcplen,
 801ca58:	4b88      	ldr	r3, [pc, #544]	; (801cc7c <tcp_receive+0xb0c>)
 801ca5a:	881b      	ldrh	r3, [r3, #0]
 801ca5c:	461a      	mov	r2, r3
 801ca5e:	4b88      	ldr	r3, [pc, #544]	; (801cc80 <tcp_receive+0xb10>)
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	441a      	add	r2, r3
 801ca64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca66:	68db      	ldr	r3, [r3, #12]
 801ca68:	685b      	ldr	r3, [r3, #4]
 801ca6a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	dd4d      	ble.n	801cb0c <tcp_receive+0x99c>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801ca70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ca72:	68db      	ldr	r3, [r3, #12]
 801ca74:	685b      	ldr	r3, [r3, #4]
 801ca76:	b29a      	uxth	r2, r3
 801ca78:	4b81      	ldr	r3, [pc, #516]	; (801cc80 <tcp_receive+0xb10>)
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	b29b      	uxth	r3, r3
 801ca7e:	1ad3      	subs	r3, r2, r3
 801ca80:	b29a      	uxth	r2, r3
 801ca82:	4b80      	ldr	r3, [pc, #512]	; (801cc84 <tcp_receive+0xb14>)
 801ca84:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ca86:	4b7f      	ldr	r3, [pc, #508]	; (801cc84 <tcp_receive+0xb14>)
 801ca88:	68db      	ldr	r3, [r3, #12]
 801ca8a:	899b      	ldrh	r3, [r3, #12]
 801ca8c:	b29b      	uxth	r3, r3
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f7f7 fdc8 	bl	8014624 <lwip_htons>
 801ca94:	4603      	mov	r3, r0
 801ca96:	b2db      	uxtb	r3, r3
 801ca98:	f003 0302 	and.w	r3, r3, #2
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d005      	beq.n	801caac <tcp_receive+0x93c>
                inseg.len -= 1;
 801caa0:	4b78      	ldr	r3, [pc, #480]	; (801cc84 <tcp_receive+0xb14>)
 801caa2:	891b      	ldrh	r3, [r3, #8]
 801caa4:	3b01      	subs	r3, #1
 801caa6:	b29a      	uxth	r2, r3
 801caa8:	4b76      	ldr	r3, [pc, #472]	; (801cc84 <tcp_receive+0xb14>)
 801caaa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801caac:	4b75      	ldr	r3, [pc, #468]	; (801cc84 <tcp_receive+0xb14>)
 801caae:	685b      	ldr	r3, [r3, #4]
 801cab0:	4a74      	ldr	r2, [pc, #464]	; (801cc84 <tcp_receive+0xb14>)
 801cab2:	8912      	ldrh	r2, [r2, #8]
 801cab4:	4611      	mov	r1, r2
 801cab6:	4618      	mov	r0, r3
 801cab8:	f7fb fb36 	bl	8018128 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801cabc:	4b71      	ldr	r3, [pc, #452]	; (801cc84 <tcp_receive+0xb14>)
 801cabe:	891c      	ldrh	r4, [r3, #8]
 801cac0:	4b70      	ldr	r3, [pc, #448]	; (801cc84 <tcp_receive+0xb14>)
 801cac2:	68db      	ldr	r3, [r3, #12]
 801cac4:	899b      	ldrh	r3, [r3, #12]
 801cac6:	b29b      	uxth	r3, r3
 801cac8:	4618      	mov	r0, r3
 801caca:	f7f7 fdab 	bl	8014624 <lwip_htons>
 801cace:	4603      	mov	r3, r0
 801cad0:	b2db      	uxtb	r3, r3
 801cad2:	f003 0303 	and.w	r3, r3, #3
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d001      	beq.n	801cade <tcp_receive+0x96e>
 801cada:	2301      	movs	r3, #1
 801cadc:	e000      	b.n	801cae0 <tcp_receive+0x970>
 801cade:	2300      	movs	r3, #0
 801cae0:	4423      	add	r3, r4
 801cae2:	b29a      	uxth	r2, r3
 801cae4:	4b65      	ldr	r3, [pc, #404]	; (801cc7c <tcp_receive+0xb0c>)
 801cae6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801cae8:	4b64      	ldr	r3, [pc, #400]	; (801cc7c <tcp_receive+0xb0c>)
 801caea:	881b      	ldrh	r3, [r3, #0]
 801caec:	461a      	mov	r2, r3
 801caee:	4b64      	ldr	r3, [pc, #400]	; (801cc80 <tcp_receive+0xb10>)
 801caf0:	681b      	ldr	r3, [r3, #0]
 801caf2:	441a      	add	r2, r3
 801caf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801caf6:	68db      	ldr	r3, [r3, #12]
 801caf8:	685b      	ldr	r3, [r3, #4]
 801cafa:	429a      	cmp	r2, r3
 801cafc:	d006      	beq.n	801cb0c <tcp_receive+0x99c>
 801cafe:	4b62      	ldr	r3, [pc, #392]	; (801cc88 <tcp_receive+0xb18>)
 801cb00:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801cb04:	4961      	ldr	r1, [pc, #388]	; (801cc8c <tcp_receive+0xb1c>)
 801cb06:	4862      	ldr	r0, [pc, #392]	; (801cc90 <tcp_receive+0xb20>)
 801cb08:	f006 f912 	bl	8022d30 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cb10:	67da      	str	r2, [r3, #124]	; 0x7c
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801cb12:	4b5a      	ldr	r3, [pc, #360]	; (801cc7c <tcp_receive+0xb0c>)
 801cb14:	881b      	ldrh	r3, [r3, #0]
 801cb16:	461a      	mov	r2, r3
 801cb18:	4b59      	ldr	r3, [pc, #356]	; (801cc80 <tcp_receive+0xb10>)
 801cb1a:	681b      	ldr	r3, [r3, #0]
 801cb1c:	441a      	add	r2, r3
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801cb26:	4b55      	ldr	r3, [pc, #340]	; (801cc7c <tcp_receive+0xb0c>)
 801cb28:	881b      	ldrh	r3, [r3, #0]
 801cb2a:	429a      	cmp	r2, r3
 801cb2c:	d206      	bcs.n	801cb3c <tcp_receive+0x9cc>
 801cb2e:	4b56      	ldr	r3, [pc, #344]	; (801cc88 <tcp_receive+0xb18>)
 801cb30:	f240 6207 	movw	r2, #1543	; 0x607
 801cb34:	4957      	ldr	r1, [pc, #348]	; (801cc94 <tcp_receive+0xb24>)
 801cb36:	4856      	ldr	r0, [pc, #344]	; (801cc90 <tcp_receive+0xb20>)
 801cb38:	f006 f8fa 	bl	8022d30 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801cb40:	4b4e      	ldr	r3, [pc, #312]	; (801cc7c <tcp_receive+0xb0c>)
 801cb42:	881b      	ldrh	r3, [r3, #0]
 801cb44:	1ad3      	subs	r3, r2, r3
 801cb46:	b29a      	uxth	r2, r3
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	861a      	strh	r2, [r3, #48]	; 0x30

        tcp_update_rcv_ann_wnd(pcb);
 801cb4c:	6878      	ldr	r0, [r7, #4]
 801cb4e:	f7fc fccb 	bl	80194e8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801cb52:	4b4c      	ldr	r3, [pc, #304]	; (801cc84 <tcp_receive+0xb14>)
 801cb54:	685b      	ldr	r3, [r3, #4]
 801cb56:	891b      	ldrh	r3, [r3, #8]
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d006      	beq.n	801cb6a <tcp_receive+0x9fa>
          recv_data = inseg.p;
 801cb5c:	4b49      	ldr	r3, [pc, #292]	; (801cc84 <tcp_receive+0xb14>)
 801cb5e:	685b      	ldr	r3, [r3, #4]
 801cb60:	4a4d      	ldr	r2, [pc, #308]	; (801cc98 <tcp_receive+0xb28>)
 801cb62:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801cb64:	4b47      	ldr	r3, [pc, #284]	; (801cc84 <tcp_receive+0xb14>)
 801cb66:	2200      	movs	r2, #0
 801cb68:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cb6a:	4b46      	ldr	r3, [pc, #280]	; (801cc84 <tcp_receive+0xb14>)
 801cb6c:	68db      	ldr	r3, [r3, #12]
 801cb6e:	899b      	ldrh	r3, [r3, #12]
 801cb70:	b29b      	uxth	r3, r3
 801cb72:	4618      	mov	r0, r3
 801cb74:	f7f7 fd56 	bl	8014624 <lwip_htons>
 801cb78:	4603      	mov	r3, r0
 801cb7a:	b2db      	uxtb	r3, r3
 801cb7c:	f003 0301 	and.w	r3, r3, #1
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	f000 80b8 	beq.w	801ccf6 <tcp_receive+0xb86>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801cb86:	4b45      	ldr	r3, [pc, #276]	; (801cc9c <tcp_receive+0xb2c>)
 801cb88:	781b      	ldrb	r3, [r3, #0]
 801cb8a:	f043 0320 	orr.w	r3, r3, #32
 801cb8e:	b2da      	uxtb	r2, r3
 801cb90:	4b42      	ldr	r3, [pc, #264]	; (801cc9c <tcp_receive+0xb2c>)
 801cb92:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801cb94:	e0af      	b.n	801ccf6 <tcp_receive+0xb86>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cb9a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cba0:	68db      	ldr	r3, [r3, #12]
 801cba2:	685b      	ldr	r3, [r3, #4]
 801cba4:	4a36      	ldr	r2, [pc, #216]	; (801cc80 <tcp_receive+0xb10>)
 801cba6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801cba8:	68bb      	ldr	r3, [r7, #8]
 801cbaa:	891b      	ldrh	r3, [r3, #8]
 801cbac:	461c      	mov	r4, r3
 801cbae:	68bb      	ldr	r3, [r7, #8]
 801cbb0:	68db      	ldr	r3, [r3, #12]
 801cbb2:	899b      	ldrh	r3, [r3, #12]
 801cbb4:	b29b      	uxth	r3, r3
 801cbb6:	4618      	mov	r0, r3
 801cbb8:	f7f7 fd34 	bl	8014624 <lwip_htons>
 801cbbc:	4603      	mov	r3, r0
 801cbbe:	b2db      	uxtb	r3, r3
 801cbc0:	f003 0303 	and.w	r3, r3, #3
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d001      	beq.n	801cbcc <tcp_receive+0xa5c>
 801cbc8:	2301      	movs	r3, #1
 801cbca:	e000      	b.n	801cbce <tcp_receive+0xa5e>
 801cbcc:	2300      	movs	r3, #0
 801cbce:	191a      	adds	r2, r3, r4
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbd4:	441a      	add	r2, r3
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	62da      	str	r2, [r3, #44]	; 0x2c
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801cbde:	461c      	mov	r4, r3
 801cbe0:	68bb      	ldr	r3, [r7, #8]
 801cbe2:	891b      	ldrh	r3, [r3, #8]
 801cbe4:	461d      	mov	r5, r3
 801cbe6:	68bb      	ldr	r3, [r7, #8]
 801cbe8:	68db      	ldr	r3, [r3, #12]
 801cbea:	899b      	ldrh	r3, [r3, #12]
 801cbec:	b29b      	uxth	r3, r3
 801cbee:	4618      	mov	r0, r3
 801cbf0:	f7f7 fd18 	bl	8014624 <lwip_htons>
 801cbf4:	4603      	mov	r3, r0
 801cbf6:	b2db      	uxtb	r3, r3
 801cbf8:	f003 0303 	and.w	r3, r3, #3
 801cbfc:	2b00      	cmp	r3, #0
 801cbfe:	d001      	beq.n	801cc04 <tcp_receive+0xa94>
 801cc00:	2301      	movs	r3, #1
 801cc02:	e000      	b.n	801cc06 <tcp_receive+0xa96>
 801cc04:	2300      	movs	r3, #0
 801cc06:	442b      	add	r3, r5
 801cc08:	429c      	cmp	r4, r3
 801cc0a:	d206      	bcs.n	801cc1a <tcp_receive+0xaaa>
 801cc0c:	4b1e      	ldr	r3, [pc, #120]	; (801cc88 <tcp_receive+0xb18>)
 801cc0e:	f240 622b 	movw	r2, #1579	; 0x62b
 801cc12:	4923      	ldr	r1, [pc, #140]	; (801cca0 <tcp_receive+0xb30>)
 801cc14:	481e      	ldr	r0, [pc, #120]	; (801cc90 <tcp_receive+0xb20>)
 801cc16:	f006 f88b 	bl	8022d30 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801cc1a:	68bb      	ldr	r3, [r7, #8]
 801cc1c:	891b      	ldrh	r3, [r3, #8]
 801cc1e:	461c      	mov	r4, r3
 801cc20:	68bb      	ldr	r3, [r7, #8]
 801cc22:	68db      	ldr	r3, [r3, #12]
 801cc24:	899b      	ldrh	r3, [r3, #12]
 801cc26:	b29b      	uxth	r3, r3
 801cc28:	4618      	mov	r0, r3
 801cc2a:	f7f7 fcfb 	bl	8014624 <lwip_htons>
 801cc2e:	4603      	mov	r3, r0
 801cc30:	b2db      	uxtb	r3, r3
 801cc32:	f003 0303 	and.w	r3, r3, #3
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	d001      	beq.n	801cc3e <tcp_receive+0xace>
 801cc3a:	2301      	movs	r3, #1
 801cc3c:	e000      	b.n	801cc40 <tcp_receive+0xad0>
 801cc3e:	2300      	movs	r3, #0
 801cc40:	1919      	adds	r1, r3, r4
 801cc42:	687b      	ldr	r3, [r7, #4]
 801cc44:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801cc46:	b28b      	uxth	r3, r1
 801cc48:	1ad3      	subs	r3, r2, r3
 801cc4a:	b29a      	uxth	r2, r3
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	861a      	strh	r2, [r3, #48]	; 0x30

          tcp_update_rcv_ann_wnd(pcb);
 801cc50:	6878      	ldr	r0, [r7, #4]
 801cc52:	f7fc fc49 	bl	80194e8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801cc56:	68bb      	ldr	r3, [r7, #8]
 801cc58:	685b      	ldr	r3, [r3, #4]
 801cc5a:	891b      	ldrh	r3, [r3, #8]
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d028      	beq.n	801ccb2 <tcp_receive+0xb42>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801cc60:	4b0d      	ldr	r3, [pc, #52]	; (801cc98 <tcp_receive+0xb28>)
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	d01d      	beq.n	801cca4 <tcp_receive+0xb34>
              pbuf_cat(recv_data, cseg->p);
 801cc68:	4b0b      	ldr	r3, [pc, #44]	; (801cc98 <tcp_receive+0xb28>)
 801cc6a:	681a      	ldr	r2, [r3, #0]
 801cc6c:	68bb      	ldr	r3, [r7, #8]
 801cc6e:	685b      	ldr	r3, [r3, #4]
 801cc70:	4619      	mov	r1, r3
 801cc72:	4610      	mov	r0, r2
 801cc74:	f7fb fcac 	bl	80185d0 <pbuf_cat>
 801cc78:	e018      	b.n	801ccac <tcp_receive+0xb3c>
 801cc7a:	bf00      	nop
 801cc7c:	2002391e 	.word	0x2002391e
 801cc80:	20023914 	.word	0x20023914
 801cc84:	200238f4 	.word	0x200238f4
 801cc88:	08026ccc 	.word	0x08026ccc
 801cc8c:	080270e4 	.word	0x080270e4
 801cc90:	08026d50 	.word	0x08026d50
 801cc94:	08027120 	.word	0x08027120
 801cc98:	20023924 	.word	0x20023924
 801cc9c:	20023921 	.word	0x20023921
 801cca0:	08027140 	.word	0x08027140
            } else {
              recv_data = cseg->p;
 801cca4:	68bb      	ldr	r3, [r7, #8]
 801cca6:	685b      	ldr	r3, [r3, #4]
 801cca8:	4a70      	ldr	r2, [pc, #448]	; (801ce6c <tcp_receive+0xcfc>)
 801ccaa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801ccac:	68bb      	ldr	r3, [r7, #8]
 801ccae:	2200      	movs	r2, #0
 801ccb0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ccb2:	68bb      	ldr	r3, [r7, #8]
 801ccb4:	68db      	ldr	r3, [r3, #12]
 801ccb6:	899b      	ldrh	r3, [r3, #12]
 801ccb8:	b29b      	uxth	r3, r3
 801ccba:	4618      	mov	r0, r3
 801ccbc:	f7f7 fcb2 	bl	8014624 <lwip_htons>
 801ccc0:	4603      	mov	r3, r0
 801ccc2:	b2db      	uxtb	r3, r3
 801ccc4:	f003 0301 	and.w	r3, r3, #1
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d00d      	beq.n	801cce8 <tcp_receive+0xb78>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801cccc:	4b68      	ldr	r3, [pc, #416]	; (801ce70 <tcp_receive+0xd00>)
 801ccce:	781b      	ldrb	r3, [r3, #0]
 801ccd0:	f043 0320 	orr.w	r3, r3, #32
 801ccd4:	b2da      	uxtb	r2, r3
 801ccd6:	4b66      	ldr	r3, [pc, #408]	; (801ce70 <tcp_receive+0xd00>)
 801ccd8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	7f1b      	ldrb	r3, [r3, #28]
 801ccde:	2b04      	cmp	r3, #4
 801cce0:	d102      	bne.n	801cce8 <tcp_receive+0xb78>
              pcb->state = CLOSE_WAIT;
 801cce2:	687b      	ldr	r3, [r7, #4]
 801cce4:	2207      	movs	r2, #7
 801cce6:	771a      	strb	r2, [r3, #28]
            }
          }

          pcb->ooseq = cseg->next;
 801cce8:	68bb      	ldr	r3, [r7, #8]
 801ccea:	681a      	ldr	r2, [r3, #0]
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	67da      	str	r2, [r3, #124]	; 0x7c
          tcp_seg_free(cseg);
 801ccf0:	68b8      	ldr	r0, [r7, #8]
 801ccf2:	f7fd fa46 	bl	801a182 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ccfa:	2b00      	cmp	r3, #0
 801ccfc:	d008      	beq.n	801cd10 <tcp_receive+0xba0>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ccfe:	687b      	ldr	r3, [r7, #4]
 801cd00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cd02:	68db      	ldr	r3, [r3, #12]
 801cd04:	685a      	ldr	r2, [r3, #4]
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        while (pcb->ooseq != NULL &&
 801cd0a:	429a      	cmp	r2, r3
 801cd0c:	f43f af43 	beq.w	801cb96 <tcp_receive+0xa26>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801cd14:	f003 0301 	and.w	r3, r3, #1
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d00e      	beq.n	801cd3a <tcp_receive+0xbca>
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801cd20:	f023 0301 	bic.w	r3, r3, #1
 801cd24:	b29a      	uxth	r2, r3
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	845a      	strh	r2, [r3, #34]	; 0x22
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801cd2e:	f043 0302 	orr.w	r3, r3, #2
 801cd32:	b29a      	uxth	r2, r3
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	845a      	strh	r2, [r3, #34]	; 0x22
      if (pcb->rcv_nxt == seqno) {
 801cd38:	e188      	b.n	801d04c <tcp_receive+0xedc>
        tcp_ack(pcb);
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801cd3e:	f043 0301 	orr.w	r3, r3, #1
 801cd42:	b29a      	uxth	r2, r3
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	845a      	strh	r2, [r3, #34]	; 0x22
      if (pcb->rcv_nxt == seqno) {
 801cd48:	e180      	b.n	801d04c <tcp_receive+0xedc>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d106      	bne.n	801cd60 <tcp_receive+0xbf0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801cd52:	4848      	ldr	r0, [pc, #288]	; (801ce74 <tcp_receive+0xd04>)
 801cd54:	f7fd fa2e 	bl	801a1b4 <tcp_seg_copy>
 801cd58:	4602      	mov	r2, r0
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	67da      	str	r2, [r3, #124]	; 0x7c
 801cd5e:	e16d      	b.n	801d03c <tcp_receive+0xecc>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801cd60:	2300      	movs	r3, #0
 801cd62:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cd68:	63bb      	str	r3, [r7, #56]	; 0x38
 801cd6a:	e157      	b.n	801d01c <tcp_receive+0xeac>
            if (seqno == next->tcphdr->seqno) {
 801cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd6e:	68db      	ldr	r3, [r3, #12]
 801cd70:	685a      	ldr	r2, [r3, #4]
 801cd72:	4b41      	ldr	r3, [pc, #260]	; (801ce78 <tcp_receive+0xd08>)
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	429a      	cmp	r2, r3
 801cd78:	d11d      	bne.n	801cdb6 <tcp_receive+0xc46>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801cd7a:	4b3e      	ldr	r3, [pc, #248]	; (801ce74 <tcp_receive+0xd04>)
 801cd7c:	891a      	ldrh	r2, [r3, #8]
 801cd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cd80:	891b      	ldrh	r3, [r3, #8]
 801cd82:	429a      	cmp	r2, r3
 801cd84:	f240 814f 	bls.w	801d026 <tcp_receive+0xeb6>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cd88:	483a      	ldr	r0, [pc, #232]	; (801ce74 <tcp_receive+0xd04>)
 801cd8a:	f7fd fa13 	bl	801a1b4 <tcp_seg_copy>
 801cd8e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801cd90:	697b      	ldr	r3, [r7, #20]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	f000 8149 	beq.w	801d02a <tcp_receive+0xeba>
                  if (prev != NULL) {
 801cd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	d003      	beq.n	801cda6 <tcp_receive+0xc36>
                    prev->next = cseg;
 801cd9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cda0:	697a      	ldr	r2, [r7, #20]
 801cda2:	601a      	str	r2, [r3, #0]
 801cda4:	e002      	b.n	801cdac <tcp_receive+0xc3c>
                  } else {
                    pcb->ooseq = cseg;
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	697a      	ldr	r2, [r7, #20]
 801cdaa:	67da      	str	r2, [r3, #124]	; 0x7c
                  }
                  tcp_oos_insert_segment(cseg, next);
 801cdac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cdae:	6978      	ldr	r0, [r7, #20]
 801cdb0:	f7ff f8da 	bl	801bf68 <tcp_oos_insert_segment>
                }
                break;
 801cdb4:	e139      	b.n	801d02a <tcp_receive+0xeba>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801cdb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d117      	bne.n	801cdec <tcp_receive+0xc7c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801cdbc:	4b2e      	ldr	r3, [pc, #184]	; (801ce78 <tcp_receive+0xd08>)
 801cdbe:	681a      	ldr	r2, [r3, #0]
 801cdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cdc2:	68db      	ldr	r3, [r3, #12]
 801cdc4:	685b      	ldr	r3, [r3, #4]
 801cdc6:	1ad3      	subs	r3, r2, r3
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	da57      	bge.n	801ce7c <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cdcc:	4829      	ldr	r0, [pc, #164]	; (801ce74 <tcp_receive+0xd04>)
 801cdce:	f7fd f9f1 	bl	801a1b4 <tcp_seg_copy>
 801cdd2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801cdd4:	69bb      	ldr	r3, [r7, #24]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	f000 8129 	beq.w	801d02e <tcp_receive+0xebe>
                    pcb->ooseq = cseg;
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	69ba      	ldr	r2, [r7, #24]
 801cde0:	67da      	str	r2, [r3, #124]	; 0x7c
                    tcp_oos_insert_segment(cseg, next);
 801cde2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cde4:	69b8      	ldr	r0, [r7, #24]
 801cde6:	f7ff f8bf 	bl	801bf68 <tcp_oos_insert_segment>
                  }
                  break;
 801cdea:	e120      	b.n	801d02e <tcp_receive+0xebe>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801cdec:	4b22      	ldr	r3, [pc, #136]	; (801ce78 <tcp_receive+0xd08>)
 801cdee:	681a      	ldr	r2, [r3, #0]
 801cdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cdf2:	68db      	ldr	r3, [r3, #12]
 801cdf4:	685b      	ldr	r3, [r3, #4]
 801cdf6:	1ad3      	subs	r3, r2, r3
 801cdf8:	3b01      	subs	r3, #1
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	db3e      	blt.n	801ce7c <tcp_receive+0xd0c>
 801cdfe:	4b1e      	ldr	r3, [pc, #120]	; (801ce78 <tcp_receive+0xd08>)
 801ce00:	681a      	ldr	r2, [r3, #0]
 801ce02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce04:	68db      	ldr	r3, [r3, #12]
 801ce06:	685b      	ldr	r3, [r3, #4]
 801ce08:	1ad3      	subs	r3, r2, r3
 801ce0a:	3301      	adds	r3, #1
 801ce0c:	2b00      	cmp	r3, #0
 801ce0e:	dc35      	bgt.n	801ce7c <tcp_receive+0xd0c>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ce10:	4818      	ldr	r0, [pc, #96]	; (801ce74 <tcp_receive+0xd04>)
 801ce12:	f7fd f9cf 	bl	801a1b4 <tcp_seg_copy>
 801ce16:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801ce18:	69fb      	ldr	r3, [r7, #28]
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	f000 8109 	beq.w	801d032 <tcp_receive+0xec2>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801ce20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce22:	68db      	ldr	r3, [r3, #12]
 801ce24:	685b      	ldr	r3, [r3, #4]
 801ce26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ce28:	8912      	ldrh	r2, [r2, #8]
 801ce2a:	441a      	add	r2, r3
 801ce2c:	4b12      	ldr	r3, [pc, #72]	; (801ce78 <tcp_receive+0xd08>)
 801ce2e:	681b      	ldr	r3, [r3, #0]
 801ce30:	1ad3      	subs	r3, r2, r3
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	dd12      	ble.n	801ce5c <tcp_receive+0xcec>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ce36:	4b10      	ldr	r3, [pc, #64]	; (801ce78 <tcp_receive+0xd08>)
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	b29a      	uxth	r2, r3
 801ce3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce3e:	68db      	ldr	r3, [r3, #12]
 801ce40:	685b      	ldr	r3, [r3, #4]
 801ce42:	b29b      	uxth	r3, r3
 801ce44:	1ad3      	subs	r3, r2, r3
 801ce46:	b29a      	uxth	r2, r3
 801ce48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801ce4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce4e:	685a      	ldr	r2, [r3, #4]
 801ce50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce52:	891b      	ldrh	r3, [r3, #8]
 801ce54:	4619      	mov	r1, r3
 801ce56:	4610      	mov	r0, r2
 801ce58:	f7fb f966 	bl	8018128 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801ce5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce5e:	69fa      	ldr	r2, [r7, #28]
 801ce60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801ce62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ce64:	69f8      	ldr	r0, [r7, #28]
 801ce66:	f7ff f87f 	bl	801bf68 <tcp_oos_insert_segment>
                  }
                  break;
 801ce6a:	e0e2      	b.n	801d032 <tcp_receive+0xec2>
 801ce6c:	20023924 	.word	0x20023924
 801ce70:	20023921 	.word	0x20023921
 801ce74:	200238f4 	.word	0x200238f4
 801ce78:	20023914 	.word	0x20023914
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce7e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801ce80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce82:	681b      	ldr	r3, [r3, #0]
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	f040 80c6 	bne.w	801d016 <tcp_receive+0xea6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801ce8a:	4b80      	ldr	r3, [pc, #512]	; (801d08c <tcp_receive+0xf1c>)
 801ce8c:	681a      	ldr	r2, [r3, #0]
 801ce8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce90:	68db      	ldr	r3, [r3, #12]
 801ce92:	685b      	ldr	r3, [r3, #4]
 801ce94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	f340 80bd 	ble.w	801d016 <tcp_receive+0xea6>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ce9e:	68db      	ldr	r3, [r3, #12]
 801cea0:	899b      	ldrh	r3, [r3, #12]
 801cea2:	b29b      	uxth	r3, r3
 801cea4:	4618      	mov	r0, r3
 801cea6:	f7f7 fbbd 	bl	8014624 <lwip_htons>
 801ceaa:	4603      	mov	r3, r0
 801ceac:	b2db      	uxtb	r3, r3
 801ceae:	f003 0301 	and.w	r3, r3, #1
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	f040 80bf 	bne.w	801d036 <tcp_receive+0xec6>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801ceb8:	4875      	ldr	r0, [pc, #468]	; (801d090 <tcp_receive+0xf20>)
 801ceba:	f7fd f97b 	bl	801a1b4 <tcp_seg_copy>
 801cebe:	4602      	mov	r2, r0
 801cec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cec2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801cec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	f000 80b6 	beq.w	801d03a <tcp_receive+0xeca>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ced0:	68db      	ldr	r3, [r3, #12]
 801ced2:	685b      	ldr	r3, [r3, #4]
 801ced4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ced6:	8912      	ldrh	r2, [r2, #8]
 801ced8:	441a      	add	r2, r3
 801ceda:	4b6c      	ldr	r3, [pc, #432]	; (801d08c <tcp_receive+0xf1c>)
 801cedc:	681b      	ldr	r3, [r3, #0]
 801cede:	1ad3      	subs	r3, r2, r3
 801cee0:	2b00      	cmp	r3, #0
 801cee2:	dd12      	ble.n	801cf0a <tcp_receive+0xd9a>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801cee4:	4b69      	ldr	r3, [pc, #420]	; (801d08c <tcp_receive+0xf1c>)
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	b29a      	uxth	r2, r3
 801ceea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ceec:	68db      	ldr	r3, [r3, #12]
 801ceee:	685b      	ldr	r3, [r3, #4]
 801cef0:	b29b      	uxth	r3, r3
 801cef2:	1ad3      	subs	r3, r2, r3
 801cef4:	b29a      	uxth	r2, r3
 801cef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cef8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cefc:	685a      	ldr	r2, [r3, #4]
 801cefe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf00:	891b      	ldrh	r3, [r3, #8]
 801cf02:	4619      	mov	r1, r3
 801cf04:	4610      	mov	r0, r2
 801cf06:	f7fb f90f 	bl	8018128 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801cf0a:	4b62      	ldr	r3, [pc, #392]	; (801d094 <tcp_receive+0xf24>)
 801cf0c:	881b      	ldrh	r3, [r3, #0]
 801cf0e:	461a      	mov	r2, r3
 801cf10:	4b5e      	ldr	r3, [pc, #376]	; (801d08c <tcp_receive+0xf1c>)
 801cf12:	681b      	ldr	r3, [r3, #0]
 801cf14:	441a      	add	r2, r3
 801cf16:	687b      	ldr	r3, [r7, #4]
 801cf18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf1a:	6879      	ldr	r1, [r7, #4]
 801cf1c:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 801cf1e:	440b      	add	r3, r1
 801cf20:	1ad3      	subs	r3, r2, r3
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	f340 8089 	ble.w	801d03a <tcp_receive+0xeca>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801cf28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	68db      	ldr	r3, [r3, #12]
 801cf2e:	899b      	ldrh	r3, [r3, #12]
 801cf30:	b29b      	uxth	r3, r3
 801cf32:	4618      	mov	r0, r3
 801cf34:	f7f7 fb76 	bl	8014624 <lwip_htons>
 801cf38:	4603      	mov	r3, r0
 801cf3a:	b2db      	uxtb	r3, r3
 801cf3c:	f003 0301 	and.w	r3, r3, #1
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d022      	beq.n	801cf8a <tcp_receive+0xe1a>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801cf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	68db      	ldr	r3, [r3, #12]
 801cf4a:	899b      	ldrh	r3, [r3, #12]
 801cf4c:	b29b      	uxth	r3, r3
 801cf4e:	b21b      	sxth	r3, r3
 801cf50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801cf54:	b21c      	sxth	r4, r3
 801cf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf58:	681b      	ldr	r3, [r3, #0]
 801cf5a:	68db      	ldr	r3, [r3, #12]
 801cf5c:	899b      	ldrh	r3, [r3, #12]
 801cf5e:	b29b      	uxth	r3, r3
 801cf60:	4618      	mov	r0, r3
 801cf62:	f7f7 fb5f 	bl	8014624 <lwip_htons>
 801cf66:	4603      	mov	r3, r0
 801cf68:	b2db      	uxtb	r3, r3
 801cf6a:	b29b      	uxth	r3, r3
 801cf6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801cf70:	b29b      	uxth	r3, r3
 801cf72:	4618      	mov	r0, r3
 801cf74:	f7f7 fb56 	bl	8014624 <lwip_htons>
 801cf78:	4603      	mov	r3, r0
 801cf7a:	b21b      	sxth	r3, r3
 801cf7c:	4323      	orrs	r3, r4
 801cf7e:	b21a      	sxth	r2, r3
 801cf80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf82:	681b      	ldr	r3, [r3, #0]
 801cf84:	68db      	ldr	r3, [r3, #12]
 801cf86:	b292      	uxth	r2, r2
 801cf88:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cf8e:	b29a      	uxth	r2, r3
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801cf94:	4413      	add	r3, r2
 801cf96:	b299      	uxth	r1, r3
 801cf98:	4b3c      	ldr	r3, [pc, #240]	; (801d08c <tcp_receive+0xf1c>)
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	b29a      	uxth	r2, r3
 801cf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfa0:	681b      	ldr	r3, [r3, #0]
 801cfa2:	1a8a      	subs	r2, r1, r2
 801cfa4:	b292      	uxth	r2, r2
 801cfa6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801cfa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfaa:	681b      	ldr	r3, [r3, #0]
 801cfac:	685a      	ldr	r2, [r3, #4]
 801cfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfb0:	681b      	ldr	r3, [r3, #0]
 801cfb2:	891b      	ldrh	r3, [r3, #8]
 801cfb4:	4619      	mov	r1, r3
 801cfb6:	4610      	mov	r0, r2
 801cfb8:	f7fb f8b6 	bl	8018128 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801cfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfbe:	681b      	ldr	r3, [r3, #0]
 801cfc0:	891c      	ldrh	r4, [r3, #8]
 801cfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	68db      	ldr	r3, [r3, #12]
 801cfc8:	899b      	ldrh	r3, [r3, #12]
 801cfca:	b29b      	uxth	r3, r3
 801cfcc:	4618      	mov	r0, r3
 801cfce:	f7f7 fb29 	bl	8014624 <lwip_htons>
 801cfd2:	4603      	mov	r3, r0
 801cfd4:	b2db      	uxtb	r3, r3
 801cfd6:	f003 0303 	and.w	r3, r3, #3
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d001      	beq.n	801cfe2 <tcp_receive+0xe72>
 801cfde:	2301      	movs	r3, #1
 801cfe0:	e000      	b.n	801cfe4 <tcp_receive+0xe74>
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	4423      	add	r3, r4
 801cfe6:	b29a      	uxth	r2, r3
 801cfe8:	4b2a      	ldr	r3, [pc, #168]	; (801d094 <tcp_receive+0xf24>)
 801cfea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cfec:	4b29      	ldr	r3, [pc, #164]	; (801d094 <tcp_receive+0xf24>)
 801cfee:	881b      	ldrh	r3, [r3, #0]
 801cff0:	461a      	mov	r2, r3
 801cff2:	4b26      	ldr	r3, [pc, #152]	; (801d08c <tcp_receive+0xf1c>)
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	441a      	add	r2, r3
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cffc:	6879      	ldr	r1, [r7, #4]
 801cffe:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 801d000:	440b      	add	r3, r1
 801d002:	429a      	cmp	r2, r3
 801d004:	d019      	beq.n	801d03a <tcp_receive+0xeca>
 801d006:	4b24      	ldr	r3, [pc, #144]	; (801d098 <tcp_receive+0xf28>)
 801d008:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d00c:	4923      	ldr	r1, [pc, #140]	; (801d09c <tcp_receive+0xf2c>)
 801d00e:	4824      	ldr	r0, [pc, #144]	; (801d0a0 <tcp_receive+0xf30>)
 801d010:	f005 fe8e 	bl	8022d30 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d014:	e011      	b.n	801d03a <tcp_receive+0xeca>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	63bb      	str	r3, [r7, #56]	; 0x38
 801d01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d01e:	2b00      	cmp	r3, #0
 801d020:	f47f aea4 	bne.w	801cd6c <tcp_receive+0xbfc>
 801d024:	e00a      	b.n	801d03c <tcp_receive+0xecc>
                break;
 801d026:	bf00      	nop
 801d028:	e008      	b.n	801d03c <tcp_receive+0xecc>
                break;
 801d02a:	bf00      	nop
 801d02c:	e006      	b.n	801d03c <tcp_receive+0xecc>
                  break;
 801d02e:	bf00      	nop
 801d030:	e004      	b.n	801d03c <tcp_receive+0xecc>
                  break;
 801d032:	bf00      	nop
 801d034:	e002      	b.n	801d03c <tcp_receive+0xecc>
                  break;
 801d036:	bf00      	nop
 801d038:	e000      	b.n	801d03c <tcp_receive+0xecc>
                break;
 801d03a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d03c:	6878      	ldr	r0, [r7, #4]
 801d03e:	f001 fe8b 	bl	801ed58 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d042:	e003      	b.n	801d04c <tcp_receive+0xedc>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d044:	6878      	ldr	r0, [r7, #4]
 801d046:	f001 fe87 	bl	801ed58 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d04a:	e01a      	b.n	801d082 <tcp_receive+0xf12>
 801d04c:	e019      	b.n	801d082 <tcp_receive+0xf12>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d04e:	4b0f      	ldr	r3, [pc, #60]	; (801d08c <tcp_receive+0xf1c>)
 801d050:	681a      	ldr	r2, [r3, #0]
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d056:	1ad3      	subs	r3, r2, r3
 801d058:	2b00      	cmp	r3, #0
 801d05a:	db0a      	blt.n	801d072 <tcp_receive+0xf02>
 801d05c:	4b0b      	ldr	r3, [pc, #44]	; (801d08c <tcp_receive+0xf1c>)
 801d05e:	681a      	ldr	r2, [r3, #0]
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d064:	6879      	ldr	r1, [r7, #4]
 801d066:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 801d068:	440b      	add	r3, r1
 801d06a:	1ad3      	subs	r3, r2, r3
 801d06c:	3301      	adds	r3, #1
 801d06e:	2b00      	cmp	r3, #0
 801d070:	dd07      	ble.n	801d082 <tcp_receive+0xf12>
      tcp_ack_now(pcb);
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801d076:	f043 0302 	orr.w	r3, r3, #2
 801d07a:	b29a      	uxth	r2, r3
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
  }
}
 801d080:	e7ff      	b.n	801d082 <tcp_receive+0xf12>
 801d082:	bf00      	nop
 801d084:	3750      	adds	r7, #80	; 0x50
 801d086:	46bd      	mov	sp, r7
 801d088:	bdb0      	pop	{r4, r5, r7, pc}
 801d08a:	bf00      	nop
 801d08c:	20023914 	.word	0x20023914
 801d090:	200238f4 	.word	0x200238f4
 801d094:	2002391e 	.word	0x2002391e
 801d098:	08026ccc 	.word	0x08026ccc
 801d09c:	080270ac 	.word	0x080270ac
 801d0a0:	08026d50 	.word	0x08026d50

0801d0a4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d0a4:	b480      	push	{r7}
 801d0a6:	b083      	sub	sp, #12
 801d0a8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d0aa:	4b15      	ldr	r3, [pc, #84]	; (801d100 <tcp_get_next_optbyte+0x5c>)
 801d0ac:	881b      	ldrh	r3, [r3, #0]
 801d0ae:	1c5a      	adds	r2, r3, #1
 801d0b0:	b291      	uxth	r1, r2
 801d0b2:	4a13      	ldr	r2, [pc, #76]	; (801d100 <tcp_get_next_optbyte+0x5c>)
 801d0b4:	8011      	strh	r1, [r2, #0]
 801d0b6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d0b8:	4b12      	ldr	r3, [pc, #72]	; (801d104 <tcp_get_next_optbyte+0x60>)
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d004      	beq.n	801d0ca <tcp_get_next_optbyte+0x26>
 801d0c0:	4b11      	ldr	r3, [pc, #68]	; (801d108 <tcp_get_next_optbyte+0x64>)
 801d0c2:	881b      	ldrh	r3, [r3, #0]
 801d0c4:	88fa      	ldrh	r2, [r7, #6]
 801d0c6:	429a      	cmp	r2, r3
 801d0c8:	d208      	bcs.n	801d0dc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d0ca:	4b10      	ldr	r3, [pc, #64]	; (801d10c <tcp_get_next_optbyte+0x68>)
 801d0cc:	681b      	ldr	r3, [r3, #0]
 801d0ce:	3314      	adds	r3, #20
 801d0d0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d0d2:	88fb      	ldrh	r3, [r7, #6]
 801d0d4:	683a      	ldr	r2, [r7, #0]
 801d0d6:	4413      	add	r3, r2
 801d0d8:	781b      	ldrb	r3, [r3, #0]
 801d0da:	e00b      	b.n	801d0f4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d0dc:	88fb      	ldrh	r3, [r7, #6]
 801d0de:	b2da      	uxtb	r2, r3
 801d0e0:	4b09      	ldr	r3, [pc, #36]	; (801d108 <tcp_get_next_optbyte+0x64>)
 801d0e2:	881b      	ldrh	r3, [r3, #0]
 801d0e4:	b2db      	uxtb	r3, r3
 801d0e6:	1ad3      	subs	r3, r2, r3
 801d0e8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d0ea:	4b06      	ldr	r3, [pc, #24]	; (801d104 <tcp_get_next_optbyte+0x60>)
 801d0ec:	681a      	ldr	r2, [r3, #0]
 801d0ee:	797b      	ldrb	r3, [r7, #5]
 801d0f0:	4413      	add	r3, r2
 801d0f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	370c      	adds	r7, #12
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0fe:	4770      	bx	lr
 801d100:	20023910 	.word	0x20023910
 801d104:	2002390c 	.word	0x2002390c
 801d108:	2002390a 	.word	0x2002390a
 801d10c:	20023904 	.word	0x20023904

0801d110 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d110:	b580      	push	{r7, lr}
 801d112:	b084      	sub	sp, #16
 801d114:	af00      	add	r7, sp, #0
 801d116:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d106      	bne.n	801d12c <tcp_parseopt+0x1c>
 801d11e:	4b32      	ldr	r3, [pc, #200]	; (801d1e8 <tcp_parseopt+0xd8>)
 801d120:	f240 727d 	movw	r2, #1917	; 0x77d
 801d124:	4931      	ldr	r1, [pc, #196]	; (801d1ec <tcp_parseopt+0xdc>)
 801d126:	4832      	ldr	r0, [pc, #200]	; (801d1f0 <tcp_parseopt+0xe0>)
 801d128:	f005 fe02 	bl	8022d30 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d12c:	4b31      	ldr	r3, [pc, #196]	; (801d1f4 <tcp_parseopt+0xe4>)
 801d12e:	881b      	ldrh	r3, [r3, #0]
 801d130:	2b00      	cmp	r3, #0
 801d132:	d055      	beq.n	801d1e0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d134:	4b30      	ldr	r3, [pc, #192]	; (801d1f8 <tcp_parseopt+0xe8>)
 801d136:	2200      	movs	r2, #0
 801d138:	801a      	strh	r2, [r3, #0]
 801d13a:	e045      	b.n	801d1c8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801d13c:	f7ff ffb2 	bl	801d0a4 <tcp_get_next_optbyte>
 801d140:	4603      	mov	r3, r0
 801d142:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d144:	7bfb      	ldrb	r3, [r7, #15]
 801d146:	2b02      	cmp	r3, #2
 801d148:	d006      	beq.n	801d158 <tcp_parseopt+0x48>
 801d14a:	2b02      	cmp	r3, #2
 801d14c:	dc2b      	bgt.n	801d1a6 <tcp_parseopt+0x96>
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d041      	beq.n	801d1d6 <tcp_parseopt+0xc6>
 801d152:	2b01      	cmp	r3, #1
 801d154:	d127      	bne.n	801d1a6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801d156:	e037      	b.n	801d1c8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d158:	f7ff ffa4 	bl	801d0a4 <tcp_get_next_optbyte>
 801d15c:	4603      	mov	r3, r0
 801d15e:	2b04      	cmp	r3, #4
 801d160:	d13b      	bne.n	801d1da <tcp_parseopt+0xca>
 801d162:	4b25      	ldr	r3, [pc, #148]	; (801d1f8 <tcp_parseopt+0xe8>)
 801d164:	881b      	ldrh	r3, [r3, #0]
 801d166:	3301      	adds	r3, #1
 801d168:	4a22      	ldr	r2, [pc, #136]	; (801d1f4 <tcp_parseopt+0xe4>)
 801d16a:	8812      	ldrh	r2, [r2, #0]
 801d16c:	4293      	cmp	r3, r2
 801d16e:	da34      	bge.n	801d1da <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d170:	f7ff ff98 	bl	801d0a4 <tcp_get_next_optbyte>
 801d174:	4603      	mov	r3, r0
 801d176:	b29b      	uxth	r3, r3
 801d178:	021b      	lsls	r3, r3, #8
 801d17a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d17c:	f7ff ff92 	bl	801d0a4 <tcp_get_next_optbyte>
 801d180:	4603      	mov	r3, r0
 801d182:	b29a      	uxth	r2, r3
 801d184:	89bb      	ldrh	r3, [r7, #12]
 801d186:	4313      	orrs	r3, r2
 801d188:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d18a:	89bb      	ldrh	r3, [r7, #12]
 801d18c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d190:	d804      	bhi.n	801d19c <tcp_parseopt+0x8c>
 801d192:	89bb      	ldrh	r3, [r7, #12]
 801d194:	2b00      	cmp	r3, #0
 801d196:	d001      	beq.n	801d19c <tcp_parseopt+0x8c>
 801d198:	89ba      	ldrh	r2, [r7, #12]
 801d19a:	e001      	b.n	801d1a0 <tcp_parseopt+0x90>
 801d19c:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	875a      	strh	r2, [r3, #58]	; 0x3a
          break;
 801d1a4:	e010      	b.n	801d1c8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d1a6:	f7ff ff7d 	bl	801d0a4 <tcp_get_next_optbyte>
 801d1aa:	4603      	mov	r3, r0
 801d1ac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d1ae:	7afb      	ldrb	r3, [r7, #11]
 801d1b0:	2b01      	cmp	r3, #1
 801d1b2:	d914      	bls.n	801d1de <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d1b4:	7afb      	ldrb	r3, [r7, #11]
 801d1b6:	b29a      	uxth	r2, r3
 801d1b8:	4b0f      	ldr	r3, [pc, #60]	; (801d1f8 <tcp_parseopt+0xe8>)
 801d1ba:	881b      	ldrh	r3, [r3, #0]
 801d1bc:	4413      	add	r3, r2
 801d1be:	b29b      	uxth	r3, r3
 801d1c0:	3b02      	subs	r3, #2
 801d1c2:	b29a      	uxth	r2, r3
 801d1c4:	4b0c      	ldr	r3, [pc, #48]	; (801d1f8 <tcp_parseopt+0xe8>)
 801d1c6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d1c8:	4b0b      	ldr	r3, [pc, #44]	; (801d1f8 <tcp_parseopt+0xe8>)
 801d1ca:	881a      	ldrh	r2, [r3, #0]
 801d1cc:	4b09      	ldr	r3, [pc, #36]	; (801d1f4 <tcp_parseopt+0xe4>)
 801d1ce:	881b      	ldrh	r3, [r3, #0]
 801d1d0:	429a      	cmp	r2, r3
 801d1d2:	d3b3      	bcc.n	801d13c <tcp_parseopt+0x2c>
 801d1d4:	e004      	b.n	801d1e0 <tcp_parseopt+0xd0>
          return;
 801d1d6:	bf00      	nop
 801d1d8:	e002      	b.n	801d1e0 <tcp_parseopt+0xd0>
            return;
 801d1da:	bf00      	nop
 801d1dc:	e000      	b.n	801d1e0 <tcp_parseopt+0xd0>
            return;
 801d1de:	bf00      	nop
      }
    }
  }
}
 801d1e0:	3710      	adds	r7, #16
 801d1e2:	46bd      	mov	sp, r7
 801d1e4:	bd80      	pop	{r7, pc}
 801d1e6:	bf00      	nop
 801d1e8:	08026ccc 	.word	0x08026ccc
 801d1ec:	08027168 	.word	0x08027168
 801d1f0:	08026d50 	.word	0x08026d50
 801d1f4:	20023908 	.word	0x20023908
 801d1f8:	20023910 	.word	0x20023910

0801d1fc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d1fc:	b480      	push	{r7}
 801d1fe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d200:	4b05      	ldr	r3, [pc, #20]	; (801d218 <tcp_trigger_input_pcb_close+0x1c>)
 801d202:	781b      	ldrb	r3, [r3, #0]
 801d204:	f043 0310 	orr.w	r3, r3, #16
 801d208:	b2da      	uxtb	r2, r3
 801d20a:	4b03      	ldr	r3, [pc, #12]	; (801d218 <tcp_trigger_input_pcb_close+0x1c>)
 801d20c:	701a      	strb	r2, [r3, #0]
}
 801d20e:	bf00      	nop
 801d210:	46bd      	mov	sp, r7
 801d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d216:	4770      	bx	lr
 801d218:	20023921 	.word	0x20023921

0801d21c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d21c:	b580      	push	{r7, lr}
 801d21e:	b084      	sub	sp, #16
 801d220:	af00      	add	r7, sp, #0
 801d222:	60f8      	str	r0, [r7, #12]
 801d224:	60b9      	str	r1, [r7, #8]
 801d226:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	2b00      	cmp	r3, #0
 801d22c:	d00a      	beq.n	801d244 <tcp_route+0x28>
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	7a1b      	ldrb	r3, [r3, #8]
 801d232:	2b00      	cmp	r3, #0
 801d234:	d006      	beq.n	801d244 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d236:	68fb      	ldr	r3, [r7, #12]
 801d238:	7a1b      	ldrb	r3, [r3, #8]
 801d23a:	4618      	mov	r0, r3
 801d23c:	f7fa fd6c 	bl	8017d18 <netif_get_by_index>
 801d240:	4603      	mov	r3, r0
 801d242:	e003      	b.n	801d24c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d244:	6878      	ldr	r0, [r7, #4]
 801d246:	f7f8 fbe3 	bl	8015a10 <ip4_route>
 801d24a:	4603      	mov	r3, r0
  }
}
 801d24c:	4618      	mov	r0, r3
 801d24e:	3710      	adds	r7, #16
 801d250:	46bd      	mov	sp, r7
 801d252:	bd80      	pop	{r7, pc}

0801d254 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d254:	b590      	push	{r4, r7, lr}
 801d256:	b087      	sub	sp, #28
 801d258:	af00      	add	r7, sp, #0
 801d25a:	60f8      	str	r0, [r7, #12]
 801d25c:	60b9      	str	r1, [r7, #8]
 801d25e:	603b      	str	r3, [r7, #0]
 801d260:	4613      	mov	r3, r2
 801d262:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d264:	68fb      	ldr	r3, [r7, #12]
 801d266:	2b00      	cmp	r3, #0
 801d268:	d105      	bne.n	801d276 <tcp_create_segment+0x22>
 801d26a:	4b44      	ldr	r3, [pc, #272]	; (801d37c <tcp_create_segment+0x128>)
 801d26c:	22a3      	movs	r2, #163	; 0xa3
 801d26e:	4944      	ldr	r1, [pc, #272]	; (801d380 <tcp_create_segment+0x12c>)
 801d270:	4844      	ldr	r0, [pc, #272]	; (801d384 <tcp_create_segment+0x130>)
 801d272:	f005 fd5d 	bl	8022d30 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d276:	68bb      	ldr	r3, [r7, #8]
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d105      	bne.n	801d288 <tcp_create_segment+0x34>
 801d27c:	4b3f      	ldr	r3, [pc, #252]	; (801d37c <tcp_create_segment+0x128>)
 801d27e:	22a4      	movs	r2, #164	; 0xa4
 801d280:	4941      	ldr	r1, [pc, #260]	; (801d388 <tcp_create_segment+0x134>)
 801d282:	4840      	ldr	r0, [pc, #256]	; (801d384 <tcp_create_segment+0x130>)
 801d284:	f005 fd54 	bl	8022d30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d288:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d28c:	009b      	lsls	r3, r3, #2
 801d28e:	b2db      	uxtb	r3, r3
 801d290:	f003 0304 	and.w	r3, r3, #4
 801d294:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d296:	2003      	movs	r0, #3
 801d298:	f7fa f962 	bl	8017560 <memp_malloc>
 801d29c:	6138      	str	r0, [r7, #16]
 801d29e:	693b      	ldr	r3, [r7, #16]
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d104      	bne.n	801d2ae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801d2a4:	68b8      	ldr	r0, [r7, #8]
 801d2a6:	f7fb f8c5 	bl	8018434 <pbuf_free>
    return NULL;
 801d2aa:	2300      	movs	r3, #0
 801d2ac:	e061      	b.n	801d372 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801d2ae:	693b      	ldr	r3, [r7, #16]
 801d2b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d2b4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801d2b6:	693b      	ldr	r3, [r7, #16]
 801d2b8:	2200      	movs	r2, #0
 801d2ba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801d2bc:	693b      	ldr	r3, [r7, #16]
 801d2be:	68ba      	ldr	r2, [r7, #8]
 801d2c0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d2c2:	68bb      	ldr	r3, [r7, #8]
 801d2c4:	891a      	ldrh	r2, [r3, #8]
 801d2c6:	7dfb      	ldrb	r3, [r7, #23]
 801d2c8:	b29b      	uxth	r3, r3
 801d2ca:	429a      	cmp	r2, r3
 801d2cc:	d205      	bcs.n	801d2da <tcp_create_segment+0x86>
 801d2ce:	4b2b      	ldr	r3, [pc, #172]	; (801d37c <tcp_create_segment+0x128>)
 801d2d0:	22b0      	movs	r2, #176	; 0xb0
 801d2d2:	492e      	ldr	r1, [pc, #184]	; (801d38c <tcp_create_segment+0x138>)
 801d2d4:	482b      	ldr	r0, [pc, #172]	; (801d384 <tcp_create_segment+0x130>)
 801d2d6:	f005 fd2b 	bl	8022d30 <iprintf>
  seg->len = p->tot_len - optlen;
 801d2da:	68bb      	ldr	r3, [r7, #8]
 801d2dc:	891a      	ldrh	r2, [r3, #8]
 801d2de:	7dfb      	ldrb	r3, [r7, #23]
 801d2e0:	b29b      	uxth	r3, r3
 801d2e2:	1ad3      	subs	r3, r2, r3
 801d2e4:	b29a      	uxth	r2, r3
 801d2e6:	693b      	ldr	r3, [r7, #16]
 801d2e8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d2ea:	2114      	movs	r1, #20
 801d2ec:	68b8      	ldr	r0, [r7, #8]
 801d2ee:	f7fb f80b 	bl	8018308 <pbuf_add_header>
 801d2f2:	4603      	mov	r3, r0
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d004      	beq.n	801d302 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801d2f8:	6938      	ldr	r0, [r7, #16]
 801d2fa:	f7fc ff42 	bl	801a182 <tcp_seg_free>
    return NULL;
 801d2fe:	2300      	movs	r3, #0
 801d300:	e037      	b.n	801d372 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d302:	693b      	ldr	r3, [r7, #16]
 801d304:	685b      	ldr	r3, [r3, #4]
 801d306:	685a      	ldr	r2, [r3, #4]
 801d308:	693b      	ldr	r3, [r7, #16]
 801d30a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	8bda      	ldrh	r2, [r3, #30]
 801d310:	693b      	ldr	r3, [r7, #16]
 801d312:	68dc      	ldr	r4, [r3, #12]
 801d314:	4610      	mov	r0, r2
 801d316:	f7f7 f985 	bl	8014624 <lwip_htons>
 801d31a:	4603      	mov	r3, r0
 801d31c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	8c1a      	ldrh	r2, [r3, #32]
 801d322:	693b      	ldr	r3, [r7, #16]
 801d324:	68dc      	ldr	r4, [r3, #12]
 801d326:	4610      	mov	r0, r2
 801d328:	f7f7 f97c 	bl	8014624 <lwip_htons>
 801d32c:	4603      	mov	r3, r0
 801d32e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d330:	693b      	ldr	r3, [r7, #16]
 801d332:	68dc      	ldr	r4, [r3, #12]
 801d334:	6838      	ldr	r0, [r7, #0]
 801d336:	f7f7 f98a 	bl	801464e <lwip_htonl>
 801d33a:	4603      	mov	r3, r0
 801d33c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d33e:	7dfb      	ldrb	r3, [r7, #23]
 801d340:	089b      	lsrs	r3, r3, #2
 801d342:	b2db      	uxtb	r3, r3
 801d344:	b29b      	uxth	r3, r3
 801d346:	3305      	adds	r3, #5
 801d348:	b29b      	uxth	r3, r3
 801d34a:	031b      	lsls	r3, r3, #12
 801d34c:	b29a      	uxth	r2, r3
 801d34e:	79fb      	ldrb	r3, [r7, #7]
 801d350:	b29b      	uxth	r3, r3
 801d352:	4313      	orrs	r3, r2
 801d354:	b29a      	uxth	r2, r3
 801d356:	693b      	ldr	r3, [r7, #16]
 801d358:	68dc      	ldr	r4, [r3, #12]
 801d35a:	4610      	mov	r0, r2
 801d35c:	f7f7 f962 	bl	8014624 <lwip_htons>
 801d360:	4603      	mov	r3, r0
 801d362:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801d364:	693b      	ldr	r3, [r7, #16]
 801d366:	68db      	ldr	r3, [r3, #12]
 801d368:	2200      	movs	r2, #0
 801d36a:	749a      	strb	r2, [r3, #18]
 801d36c:	2200      	movs	r2, #0
 801d36e:	74da      	strb	r2, [r3, #19]
  return seg;
 801d370:	693b      	ldr	r3, [r7, #16]
}
 801d372:	4618      	mov	r0, r3
 801d374:	371c      	adds	r7, #28
 801d376:	46bd      	mov	sp, r7
 801d378:	bd90      	pop	{r4, r7, pc}
 801d37a:	bf00      	nop
 801d37c:	08027184 	.word	0x08027184
 801d380:	080271f0 	.word	0x080271f0
 801d384:	08027210 	.word	0x08027210
 801d388:	08027238 	.word	0x08027238
 801d38c:	0802725c 	.word	0x0802725c

0801d390 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801d390:	b580      	push	{r7, lr}
 801d392:	b086      	sub	sp, #24
 801d394:	af00      	add	r7, sp, #0
 801d396:	607b      	str	r3, [r7, #4]
 801d398:	4603      	mov	r3, r0
 801d39a:	73fb      	strb	r3, [r7, #15]
 801d39c:	460b      	mov	r3, r1
 801d39e:	81bb      	strh	r3, [r7, #12]
 801d3a0:	4613      	mov	r3, r2
 801d3a2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801d3a4:	89bb      	ldrh	r3, [r7, #12]
 801d3a6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d105      	bne.n	801d3ba <tcp_pbuf_prealloc+0x2a>
 801d3ae:	4b30      	ldr	r3, [pc, #192]	; (801d470 <tcp_pbuf_prealloc+0xe0>)
 801d3b0:	22e8      	movs	r2, #232	; 0xe8
 801d3b2:	4930      	ldr	r1, [pc, #192]	; (801d474 <tcp_pbuf_prealloc+0xe4>)
 801d3b4:	4830      	ldr	r0, [pc, #192]	; (801d478 <tcp_pbuf_prealloc+0xe8>)
 801d3b6:	f005 fcbb 	bl	8022d30 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d3ba:	6a3b      	ldr	r3, [r7, #32]
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d105      	bne.n	801d3cc <tcp_pbuf_prealloc+0x3c>
 801d3c0:	4b2b      	ldr	r3, [pc, #172]	; (801d470 <tcp_pbuf_prealloc+0xe0>)
 801d3c2:	22e9      	movs	r2, #233	; 0xe9
 801d3c4:	492d      	ldr	r1, [pc, #180]	; (801d47c <tcp_pbuf_prealloc+0xec>)
 801d3c6:	482c      	ldr	r0, [pc, #176]	; (801d478 <tcp_pbuf_prealloc+0xe8>)
 801d3c8:	f005 fcb2 	bl	8022d30 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801d3cc:	89ba      	ldrh	r2, [r7, #12]
 801d3ce:	897b      	ldrh	r3, [r7, #10]
 801d3d0:	429a      	cmp	r2, r3
 801d3d2:	d221      	bcs.n	801d418 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d3d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d3d8:	f003 0302 	and.w	r3, r3, #2
 801d3dc:	2b00      	cmp	r3, #0
 801d3de:	d111      	bne.n	801d404 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801d3e0:	6a3b      	ldr	r3, [r7, #32]
 801d3e2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801d3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d115      	bne.n	801d418 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801d3ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d007      	beq.n	801d404 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801d3f4:	6a3b      	ldr	r3, [r7, #32]
 801d3f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
         (!first_seg ||
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d103      	bne.n	801d404 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801d3fc:	6a3b      	ldr	r3, [r7, #32]
 801d3fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
          pcb->unsent != NULL ||
 801d400:	2b00      	cmp	r3, #0
 801d402:	d009      	beq.n	801d418 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801d404:	89bb      	ldrh	r3, [r7, #12]
 801d406:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801d40a:	f023 0203 	bic.w	r2, r3, #3
 801d40e:	897b      	ldrh	r3, [r7, #10]
 801d410:	4293      	cmp	r3, r2
 801d412:	bf28      	it	cs
 801d414:	4613      	movcs	r3, r2
 801d416:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801d418:	8af9      	ldrh	r1, [r7, #22]
 801d41a:	7bfb      	ldrb	r3, [r7, #15]
 801d41c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d420:	4618      	mov	r0, r3
 801d422:	f7fa fd23 	bl	8017e6c <pbuf_alloc>
 801d426:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d428:	693b      	ldr	r3, [r7, #16]
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d101      	bne.n	801d432 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801d42e:	2300      	movs	r3, #0
 801d430:	e019      	b.n	801d466 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801d432:	693b      	ldr	r3, [r7, #16]
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	2b00      	cmp	r3, #0
 801d438:	d006      	beq.n	801d448 <tcp_pbuf_prealloc+0xb8>
 801d43a:	4b0d      	ldr	r3, [pc, #52]	; (801d470 <tcp_pbuf_prealloc+0xe0>)
 801d43c:	f240 120b 	movw	r2, #267	; 0x10b
 801d440:	490f      	ldr	r1, [pc, #60]	; (801d480 <tcp_pbuf_prealloc+0xf0>)
 801d442:	480d      	ldr	r0, [pc, #52]	; (801d478 <tcp_pbuf_prealloc+0xe8>)
 801d444:	f005 fc74 	bl	8022d30 <iprintf>
  *oversize = p->len - length;
 801d448:	693b      	ldr	r3, [r7, #16]
 801d44a:	895a      	ldrh	r2, [r3, #10]
 801d44c:	89bb      	ldrh	r3, [r7, #12]
 801d44e:	1ad3      	subs	r3, r2, r3
 801d450:	b29a      	uxth	r2, r3
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801d456:	693b      	ldr	r3, [r7, #16]
 801d458:	89ba      	ldrh	r2, [r7, #12]
 801d45a:	811a      	strh	r2, [r3, #8]
 801d45c:	693b      	ldr	r3, [r7, #16]
 801d45e:	891a      	ldrh	r2, [r3, #8]
 801d460:	693b      	ldr	r3, [r7, #16]
 801d462:	815a      	strh	r2, [r3, #10]
  return p;
 801d464:	693b      	ldr	r3, [r7, #16]
}
 801d466:	4618      	mov	r0, r3
 801d468:	3718      	adds	r7, #24
 801d46a:	46bd      	mov	sp, r7
 801d46c:	bd80      	pop	{r7, pc}
 801d46e:	bf00      	nop
 801d470:	08027184 	.word	0x08027184
 801d474:	08027274 	.word	0x08027274
 801d478:	08027210 	.word	0x08027210
 801d47c:	08027298 	.word	0x08027298
 801d480:	080272b8 	.word	0x080272b8

0801d484 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801d484:	b580      	push	{r7, lr}
 801d486:	b082      	sub	sp, #8
 801d488:	af00      	add	r7, sp, #0
 801d48a:	6078      	str	r0, [r7, #4]
 801d48c:	460b      	mov	r3, r1
 801d48e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	2b00      	cmp	r3, #0
 801d494:	d106      	bne.n	801d4a4 <tcp_write_checks+0x20>
 801d496:	4b33      	ldr	r3, [pc, #204]	; (801d564 <tcp_write_checks+0xe0>)
 801d498:	f240 1233 	movw	r2, #307	; 0x133
 801d49c:	4932      	ldr	r1, [pc, #200]	; (801d568 <tcp_write_checks+0xe4>)
 801d49e:	4833      	ldr	r0, [pc, #204]	; (801d56c <tcp_write_checks+0xe8>)
 801d4a0:	f005 fc46 	bl	8022d30 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801d4a4:	687b      	ldr	r3, [r7, #4]
 801d4a6:	7f1b      	ldrb	r3, [r3, #28]
 801d4a8:	2b04      	cmp	r3, #4
 801d4aa:	d00e      	beq.n	801d4ca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	7f1b      	ldrb	r3, [r3, #28]
  if ((pcb->state != ESTABLISHED) &&
 801d4b0:	2b07      	cmp	r3, #7
 801d4b2:	d00a      	beq.n	801d4ca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	7f1b      	ldrb	r3, [r3, #28]
      (pcb->state != CLOSE_WAIT) &&
 801d4b8:	2b02      	cmp	r3, #2
 801d4ba:	d006      	beq.n	801d4ca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	7f1b      	ldrb	r3, [r3, #28]
      (pcb->state != SYN_SENT) &&
 801d4c0:	2b03      	cmp	r3, #3
 801d4c2:	d002      	beq.n	801d4ca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801d4c4:	f06f 030a 	mvn.w	r3, #10
 801d4c8:	e048      	b.n	801d55c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801d4ca:	887b      	ldrh	r3, [r7, #2]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d101      	bne.n	801d4d4 <tcp_write_checks+0x50>
    return ERR_OK;
 801d4d0:	2300      	movs	r3, #0
 801d4d2:	e043      	b.n	801d55c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801d4da:	887a      	ldrh	r2, [r7, #2]
 801d4dc:	429a      	cmp	r2, r3
 801d4de:	d909      	bls.n	801d4f4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801d4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d4e8:	b29a      	uxth	r2, r3
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	845a      	strh	r2, [r3, #34]	; 0x22
    return ERR_MEM;
 801d4ee:	f04f 33ff 	mov.w	r3, #4294967295
 801d4f2:	e033      	b.n	801d55c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801d4fa:	2b08      	cmp	r3, #8
 801d4fc:	d909      	bls.n	801d512 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801d502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d506:	b29a      	uxth	r2, r3
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	845a      	strh	r2, [r3, #34]	; 0x22
    return ERR_MEM;
 801d50c:	f04f 33ff 	mov.w	r3, #4294967295
 801d510:	e024      	b.n	801d55c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d00f      	beq.n	801d53c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d520:	2b00      	cmp	r3, #0
 801d522:	d11a      	bne.n	801d55a <tcp_write_checks+0xd6>
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d116      	bne.n	801d55a <tcp_write_checks+0xd6>
 801d52c:	4b0d      	ldr	r3, [pc, #52]	; (801d564 <tcp_write_checks+0xe0>)
 801d52e:	f240 1255 	movw	r2, #341	; 0x155
 801d532:	490f      	ldr	r1, [pc, #60]	; (801d570 <tcp_write_checks+0xec>)
 801d534:	480d      	ldr	r0, [pc, #52]	; (801d56c <tcp_write_checks+0xe8>)
 801d536:	f005 fbfb 	bl	8022d30 <iprintf>
 801d53a:	e00e      	b.n	801d55a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d540:	2b00      	cmp	r3, #0
 801d542:	d103      	bne.n	801d54c <tcp_write_checks+0xc8>
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d006      	beq.n	801d55a <tcp_write_checks+0xd6>
 801d54c:	4b05      	ldr	r3, [pc, #20]	; (801d564 <tcp_write_checks+0xe0>)
 801d54e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801d552:	4908      	ldr	r1, [pc, #32]	; (801d574 <tcp_write_checks+0xf0>)
 801d554:	4805      	ldr	r0, [pc, #20]	; (801d56c <tcp_write_checks+0xe8>)
 801d556:	f005 fbeb 	bl	8022d30 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801d55a:	2300      	movs	r3, #0
}
 801d55c:	4618      	mov	r0, r3
 801d55e:	3708      	adds	r7, #8
 801d560:	46bd      	mov	sp, r7
 801d562:	bd80      	pop	{r7, pc}
 801d564:	08027184 	.word	0x08027184
 801d568:	080272cc 	.word	0x080272cc
 801d56c:	08027210 	.word	0x08027210
 801d570:	080272ec 	.word	0x080272ec
 801d574:	08027328 	.word	0x08027328

0801d578 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801d578:	b590      	push	{r4, r7, lr}
 801d57a:	b09b      	sub	sp, #108	; 0x6c
 801d57c:	af04      	add	r7, sp, #16
 801d57e:	60f8      	str	r0, [r7, #12]
 801d580:	60b9      	str	r1, [r7, #8]
 801d582:	4611      	mov	r1, r2
 801d584:	461a      	mov	r2, r3
 801d586:	460b      	mov	r3, r1
 801d588:	80fb      	strh	r3, [r7, #6]
 801d58a:	4613      	mov	r3, r2
 801d58c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801d58e:	2300      	movs	r3, #0
 801d590:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801d592:	2300      	movs	r3, #0
 801d594:	653b      	str	r3, [r7, #80]	; 0x50
 801d596:	2300      	movs	r3, #0
 801d598:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d59a:	2300      	movs	r3, #0
 801d59c:	64bb      	str	r3, [r7, #72]	; 0x48
 801d59e:	2300      	movs	r3, #0
 801d5a0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801d5a2:	2300      	movs	r3, #0
 801d5a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801d5a8:	2300      	movs	r3, #0
 801d5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801d5b2:	2300      	movs	r3, #0
 801d5b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	d109      	bne.n	801d5d4 <tcp_write+0x5c>
 801d5c0:	4ba4      	ldr	r3, [pc, #656]	; (801d854 <tcp_write+0x2dc>)
 801d5c2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801d5c6:	49a4      	ldr	r1, [pc, #656]	; (801d858 <tcp_write+0x2e0>)
 801d5c8:	48a4      	ldr	r0, [pc, #656]	; (801d85c <tcp_write+0x2e4>)
 801d5ca:	f005 fbb1 	bl	8022d30 <iprintf>
 801d5ce:	f06f 030f 	mvn.w	r3, #15
 801d5d2:	e32a      	b.n	801dc2a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801d5da:	085b      	lsrs	r3, r3, #1
 801d5dc:	b29a      	uxth	r2, r3
 801d5de:	68fb      	ldr	r3, [r7, #12]
 801d5e0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801d5e2:	4293      	cmp	r3, r2
 801d5e4:	bf28      	it	cs
 801d5e6:	4613      	movcs	r3, r2
 801d5e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801d5ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	d102      	bne.n	801d5f6 <tcp_write+0x7e>
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801d5f4:	e000      	b.n	801d5f8 <tcp_write+0x80>
 801d5f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d5f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d5fa:	68bb      	ldr	r3, [r7, #8]
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d109      	bne.n	801d614 <tcp_write+0x9c>
 801d600:	4b94      	ldr	r3, [pc, #592]	; (801d854 <tcp_write+0x2dc>)
 801d602:	f240 12ad 	movw	r2, #429	; 0x1ad
 801d606:	4996      	ldr	r1, [pc, #600]	; (801d860 <tcp_write+0x2e8>)
 801d608:	4894      	ldr	r0, [pc, #592]	; (801d85c <tcp_write+0x2e4>)
 801d60a:	f005 fb91 	bl	8022d30 <iprintf>
 801d60e:	f06f 030f 	mvn.w	r3, #15
 801d612:	e30a      	b.n	801dc2a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801d614:	88fb      	ldrh	r3, [r7, #6]
 801d616:	4619      	mov	r1, r3
 801d618:	68f8      	ldr	r0, [r7, #12]
 801d61a:	f7ff ff33 	bl	801d484 <tcp_write_checks>
 801d61e:	4603      	mov	r3, r0
 801d620:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801d624:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d002      	beq.n	801d632 <tcp_write+0xba>
    return err;
 801d62c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d630:	e2fb      	b.n	801dc2a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801d638:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d63c:	2300      	movs	r3, #0
 801d63e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801d642:	68fb      	ldr	r3, [r7, #12]
 801d644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d646:	2b00      	cmp	r3, #0
 801d648:	f000 80f6 	beq.w	801d838 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d650:	653b      	str	r3, [r7, #80]	; 0x50
 801d652:	e002      	b.n	801d65a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801d654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d656:	681b      	ldr	r3, [r3, #0]
 801d658:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d1f8      	bne.n	801d654 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d664:	7a9b      	ldrb	r3, [r3, #10]
 801d666:	009b      	lsls	r3, r3, #2
 801d668:	b29b      	uxth	r3, r3
 801d66a:	f003 0304 	and.w	r3, r3, #4
 801d66e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d670:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d674:	891b      	ldrh	r3, [r3, #8]
 801d676:	4619      	mov	r1, r3
 801d678:	8c3b      	ldrh	r3, [r7, #32]
 801d67a:	440b      	add	r3, r1
 801d67c:	429a      	cmp	r2, r3
 801d67e:	da06      	bge.n	801d68e <tcp_write+0x116>
 801d680:	4b74      	ldr	r3, [pc, #464]	; (801d854 <tcp_write+0x2dc>)
 801d682:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d686:	4977      	ldr	r1, [pc, #476]	; (801d864 <tcp_write+0x2ec>)
 801d688:	4874      	ldr	r0, [pc, #464]	; (801d85c <tcp_write+0x2e4>)
 801d68a:	f005 fb51 	bl	8022d30 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d68e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d690:	891a      	ldrh	r2, [r3, #8]
 801d692:	8c3b      	ldrh	r3, [r7, #32]
 801d694:	4413      	add	r3, r2
 801d696:	b29b      	uxth	r3, r3
 801d698:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d69a:	1ad3      	subs	r3, r2, r3
 801d69c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 801d6a4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801d6a6:	8a7b      	ldrh	r3, [r7, #18]
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d026      	beq.n	801d6fa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801d6ac:	8a7b      	ldrh	r3, [r7, #18]
 801d6ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d6b0:	429a      	cmp	r2, r3
 801d6b2:	d206      	bcs.n	801d6c2 <tcp_write+0x14a>
 801d6b4:	4b67      	ldr	r3, [pc, #412]	; (801d854 <tcp_write+0x2dc>)
 801d6b6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801d6ba:	496b      	ldr	r1, [pc, #428]	; (801d868 <tcp_write+0x2f0>)
 801d6bc:	4867      	ldr	r0, [pc, #412]	; (801d85c <tcp_write+0x2e4>)
 801d6be:	f005 fb37 	bl	8022d30 <iprintf>
      seg = last_unsent;
 801d6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d6c4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801d6c6:	8a7b      	ldrh	r3, [r7, #18]
 801d6c8:	88fa      	ldrh	r2, [r7, #6]
 801d6ca:	4293      	cmp	r3, r2
 801d6cc:	bf28      	it	cs
 801d6ce:	4613      	movcs	r3, r2
 801d6d0:	b29b      	uxth	r3, r3
 801d6d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d6d4:	4293      	cmp	r3, r2
 801d6d6:	bf28      	it	cs
 801d6d8:	4613      	movcs	r3, r2
 801d6da:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801d6dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d6e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d6e2:	4413      	add	r3, r2
 801d6e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801d6e8:	8a7a      	ldrh	r2, [r7, #18]
 801d6ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d6ec:	1ad3      	subs	r3, r2, r3
 801d6ee:	b29b      	uxth	r3, r3
 801d6f0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801d6f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d6f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d6f6:	1ad3      	subs	r3, r2, r3
 801d6f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d6fa:	8a7b      	ldrh	r3, [r7, #18]
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	d00b      	beq.n	801d718 <tcp_write+0x1a0>
 801d700:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d704:	88fb      	ldrh	r3, [r7, #6]
 801d706:	429a      	cmp	r2, r3
 801d708:	d006      	beq.n	801d718 <tcp_write+0x1a0>
 801d70a:	4b52      	ldr	r3, [pc, #328]	; (801d854 <tcp_write+0x2dc>)
 801d70c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d710:	4956      	ldr	r1, [pc, #344]	; (801d86c <tcp_write+0x2f4>)
 801d712:	4852      	ldr	r0, [pc, #328]	; (801d85c <tcp_write+0x2e4>)
 801d714:	f005 fb0c 	bl	8022d30 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d718:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d71c:	88fb      	ldrh	r3, [r7, #6]
 801d71e:	429a      	cmp	r2, r3
 801d720:	f080 8167 	bcs.w	801d9f2 <tcp_write+0x47a>
 801d724:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d726:	2b00      	cmp	r3, #0
 801d728:	f000 8163 	beq.w	801d9f2 <tcp_write+0x47a>
 801d72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d72e:	891b      	ldrh	r3, [r3, #8]
 801d730:	2b00      	cmp	r3, #0
 801d732:	f000 815e 	beq.w	801d9f2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801d736:	88fa      	ldrh	r2, [r7, #6]
 801d738:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d73c:	1ad2      	subs	r2, r2, r3
 801d73e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d740:	4293      	cmp	r3, r2
 801d742:	bfa8      	it	ge
 801d744:	4613      	movge	r3, r2
 801d746:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801d748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d74a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d74c:	797b      	ldrb	r3, [r7, #5]
 801d74e:	f003 0301 	and.w	r3, r3, #1
 801d752:	2b00      	cmp	r3, #0
 801d754:	d027      	beq.n	801d7a6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801d756:	f107 0012 	add.w	r0, r7, #18
 801d75a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d75c:	8bf9      	ldrh	r1, [r7, #30]
 801d75e:	2301      	movs	r3, #1
 801d760:	9302      	str	r3, [sp, #8]
 801d762:	797b      	ldrb	r3, [r7, #5]
 801d764:	9301      	str	r3, [sp, #4]
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	9300      	str	r3, [sp, #0]
 801d76a:	4603      	mov	r3, r0
 801d76c:	2000      	movs	r0, #0
 801d76e:	f7ff fe0f 	bl	801d390 <tcp_pbuf_prealloc>
 801d772:	6578      	str	r0, [r7, #84]	; 0x54
 801d774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d776:	2b00      	cmp	r3, #0
 801d778:	f000 8225 	beq.w	801dbc6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801d77c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d77e:	6858      	ldr	r0, [r3, #4]
 801d780:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d784:	68ba      	ldr	r2, [r7, #8]
 801d786:	4413      	add	r3, r2
 801d788:	8bfa      	ldrh	r2, [r7, #30]
 801d78a:	4619      	mov	r1, r3
 801d78c:	f005 fcc0 	bl	8023110 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801d790:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d792:	f7fa fedd 	bl	8018550 <pbuf_clen>
 801d796:	4603      	mov	r3, r0
 801d798:	461a      	mov	r2, r3
 801d79a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d79e:	4413      	add	r3, r2
 801d7a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801d7a4:	e041      	b.n	801d82a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801d7a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d7a8:	685b      	ldr	r3, [r3, #4]
 801d7aa:	637b      	str	r3, [r7, #52]	; 0x34
 801d7ac:	e002      	b.n	801d7b4 <tcp_write+0x23c>
 801d7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	637b      	str	r3, [r7, #52]	; 0x34
 801d7b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	d1f8      	bne.n	801d7ae <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7be:	7b1b      	ldrb	r3, [r3, #12]
 801d7c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d115      	bne.n	801d7f4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801d7c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7ca:	685b      	ldr	r3, [r3, #4]
 801d7cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d7ce:	8952      	ldrh	r2, [r2, #10]
 801d7d0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d7d2:	68ba      	ldr	r2, [r7, #8]
 801d7d4:	429a      	cmp	r2, r3
 801d7d6:	d10d      	bne.n	801d7f4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801d7d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	d006      	beq.n	801d7ee <tcp_write+0x276>
 801d7e0:	4b1c      	ldr	r3, [pc, #112]	; (801d854 <tcp_write+0x2dc>)
 801d7e2:	f240 2231 	movw	r2, #561	; 0x231
 801d7e6:	4922      	ldr	r1, [pc, #136]	; (801d870 <tcp_write+0x2f8>)
 801d7e8:	481c      	ldr	r0, [pc, #112]	; (801d85c <tcp_write+0x2e4>)
 801d7ea:	f005 faa1 	bl	8022d30 <iprintf>
          extendlen = seglen;
 801d7ee:	8bfb      	ldrh	r3, [r7, #30]
 801d7f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801d7f2:	e01a      	b.n	801d82a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801d7f4:	8bfb      	ldrh	r3, [r7, #30]
 801d7f6:	2201      	movs	r2, #1
 801d7f8:	4619      	mov	r1, r3
 801d7fa:	2000      	movs	r0, #0
 801d7fc:	f7fa fb36 	bl	8017e6c <pbuf_alloc>
 801d800:	6578      	str	r0, [r7, #84]	; 0x54
 801d802:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d804:	2b00      	cmp	r3, #0
 801d806:	f000 81e0 	beq.w	801dbca <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801d80a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d80e:	68ba      	ldr	r2, [r7, #8]
 801d810:	441a      	add	r2, r3
 801d812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d814:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801d816:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d818:	f7fa fe9a 	bl	8018550 <pbuf_clen>
 801d81c:	4603      	mov	r3, r0
 801d81e:	461a      	mov	r2, r3
 801d820:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d824:	4413      	add	r3, r2
 801d826:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801d82a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d82e:	8bfb      	ldrh	r3, [r7, #30]
 801d830:	4413      	add	r3, r2
 801d832:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801d836:	e0dc      	b.n	801d9f2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 801d83e:	2b00      	cmp	r3, #0
 801d840:	f000 80d7 	beq.w	801d9f2 <tcp_write+0x47a>
 801d844:	4b03      	ldr	r3, [pc, #12]	; (801d854 <tcp_write+0x2dc>)
 801d846:	f240 224a 	movw	r2, #586	; 0x24a
 801d84a:	490a      	ldr	r1, [pc, #40]	; (801d874 <tcp_write+0x2fc>)
 801d84c:	4803      	ldr	r0, [pc, #12]	; (801d85c <tcp_write+0x2e4>)
 801d84e:	f005 fa6f 	bl	8022d30 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801d852:	e0ce      	b.n	801d9f2 <tcp_write+0x47a>
 801d854:	08027184 	.word	0x08027184
 801d858:	0802735c 	.word	0x0802735c
 801d85c:	08027210 	.word	0x08027210
 801d860:	08027374 	.word	0x08027374
 801d864:	080273a8 	.word	0x080273a8
 801d868:	080273c0 	.word	0x080273c0
 801d86c:	080273e0 	.word	0x080273e0
 801d870:	08027400 	.word	0x08027400
 801d874:	0802742c 	.word	0x0802742c
    struct pbuf *p;
    u16_t left = len - pos;
 801d878:	88fa      	ldrh	r2, [r7, #6]
 801d87a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d87e:	1ad3      	subs	r3, r2, r3
 801d880:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801d882:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d886:	b29b      	uxth	r3, r3
 801d888:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d88a:	1ad3      	subs	r3, r2, r3
 801d88c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801d88e:	8b7a      	ldrh	r2, [r7, #26]
 801d890:	8bbb      	ldrh	r3, [r7, #28]
 801d892:	4293      	cmp	r3, r2
 801d894:	bf28      	it	cs
 801d896:	4613      	movcs	r3, r2
 801d898:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d89a:	797b      	ldrb	r3, [r7, #5]
 801d89c:	f003 0301 	and.w	r3, r3, #1
 801d8a0:	2b00      	cmp	r3, #0
 801d8a2:	d036      	beq.n	801d912 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801d8a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d8a8:	b29a      	uxth	r2, r3
 801d8aa:	8b3b      	ldrh	r3, [r7, #24]
 801d8ac:	4413      	add	r3, r2
 801d8ae:	b299      	uxth	r1, r3
 801d8b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	bf0c      	ite	eq
 801d8b6:	2301      	moveq	r3, #1
 801d8b8:	2300      	movne	r3, #0
 801d8ba:	b2db      	uxtb	r3, r3
 801d8bc:	f107 0012 	add.w	r0, r7, #18
 801d8c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d8c2:	9302      	str	r3, [sp, #8]
 801d8c4:	797b      	ldrb	r3, [r7, #5]
 801d8c6:	9301      	str	r3, [sp, #4]
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	9300      	str	r3, [sp, #0]
 801d8cc:	4603      	mov	r3, r0
 801d8ce:	2036      	movs	r0, #54	; 0x36
 801d8d0:	f7ff fd5e 	bl	801d390 <tcp_pbuf_prealloc>
 801d8d4:	6338      	str	r0, [r7, #48]	; 0x30
 801d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	f000 8178 	beq.w	801dbce <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801d8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8e0:	895b      	ldrh	r3, [r3, #10]
 801d8e2:	8b3a      	ldrh	r2, [r7, #24]
 801d8e4:	429a      	cmp	r2, r3
 801d8e6:	d906      	bls.n	801d8f6 <tcp_write+0x37e>
 801d8e8:	4b8c      	ldr	r3, [pc, #560]	; (801db1c <tcp_write+0x5a4>)
 801d8ea:	f240 2266 	movw	r2, #614	; 0x266
 801d8ee:	498c      	ldr	r1, [pc, #560]	; (801db20 <tcp_write+0x5a8>)
 801d8f0:	488c      	ldr	r0, [pc, #560]	; (801db24 <tcp_write+0x5ac>)
 801d8f2:	f005 fa1d 	bl	8022d30 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801d8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8f8:	685a      	ldr	r2, [r3, #4]
 801d8fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d8fe:	18d0      	adds	r0, r2, r3
 801d900:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d904:	68ba      	ldr	r2, [r7, #8]
 801d906:	4413      	add	r3, r2
 801d908:	8b3a      	ldrh	r2, [r7, #24]
 801d90a:	4619      	mov	r1, r3
 801d90c:	f005 fc00 	bl	8023110 <memcpy>
 801d910:	e02f      	b.n	801d972 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801d912:	8a7b      	ldrh	r3, [r7, #18]
 801d914:	2b00      	cmp	r3, #0
 801d916:	d006      	beq.n	801d926 <tcp_write+0x3ae>
 801d918:	4b80      	ldr	r3, [pc, #512]	; (801db1c <tcp_write+0x5a4>)
 801d91a:	f240 2271 	movw	r2, #625	; 0x271
 801d91e:	4982      	ldr	r1, [pc, #520]	; (801db28 <tcp_write+0x5b0>)
 801d920:	4880      	ldr	r0, [pc, #512]	; (801db24 <tcp_write+0x5ac>)
 801d922:	f005 fa05 	bl	8022d30 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801d926:	8b3b      	ldrh	r3, [r7, #24]
 801d928:	2201      	movs	r2, #1
 801d92a:	4619      	mov	r1, r3
 801d92c:	2036      	movs	r0, #54	; 0x36
 801d92e:	f7fa fa9d 	bl	8017e6c <pbuf_alloc>
 801d932:	6178      	str	r0, [r7, #20]
 801d934:	697b      	ldr	r3, [r7, #20]
 801d936:	2b00      	cmp	r3, #0
 801d938:	f000 814b 	beq.w	801dbd2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801d93c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d940:	68ba      	ldr	r2, [r7, #8]
 801d942:	441a      	add	r2, r3
 801d944:	697b      	ldr	r3, [r7, #20]
 801d946:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d948:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801d94c:	b29b      	uxth	r3, r3
 801d94e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d952:	4619      	mov	r1, r3
 801d954:	2036      	movs	r0, #54	; 0x36
 801d956:	f7fa fa89 	bl	8017e6c <pbuf_alloc>
 801d95a:	6338      	str	r0, [r7, #48]	; 0x30
 801d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d103      	bne.n	801d96a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801d962:	6978      	ldr	r0, [r7, #20]
 801d964:	f7fa fd66 	bl	8018434 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801d968:	e136      	b.n	801dbd8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801d96a:	6979      	ldr	r1, [r7, #20]
 801d96c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d96e:	f7fa fe2f 	bl	80185d0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801d972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d974:	f7fa fdec 	bl	8018550 <pbuf_clen>
 801d978:	4603      	mov	r3, r0
 801d97a:	461a      	mov	r2, r3
 801d97c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d980:	4413      	add	r3, r2
 801d982:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801d986:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d98a:	2b09      	cmp	r3, #9
 801d98c:	d903      	bls.n	801d996 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801d98e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d990:	f7fa fd50 	bl	8018434 <pbuf_free>
      goto memerr;
 801d994:	e120      	b.n	801dbd8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801d99a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d99e:	441a      	add	r2, r3
 801d9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d9a4:	9300      	str	r3, [sp, #0]
 801d9a6:	4613      	mov	r3, r2
 801d9a8:	2200      	movs	r2, #0
 801d9aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d9ac:	68f8      	ldr	r0, [r7, #12]
 801d9ae:	f7ff fc51 	bl	801d254 <tcp_create_segment>
 801d9b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 801d9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9b6:	2b00      	cmp	r3, #0
 801d9b8:	f000 810d 	beq.w	801dbd6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801d9bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d102      	bne.n	801d9c8 <tcp_write+0x450>
      queue = seg;
 801d9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9c4:	647b      	str	r3, [r7, #68]	; 0x44
 801d9c6:	e00c      	b.n	801d9e2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801d9c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d106      	bne.n	801d9dc <tcp_write+0x464>
 801d9ce:	4b53      	ldr	r3, [pc, #332]	; (801db1c <tcp_write+0x5a4>)
 801d9d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d9d4:	4955      	ldr	r1, [pc, #340]	; (801db2c <tcp_write+0x5b4>)
 801d9d6:	4853      	ldr	r0, [pc, #332]	; (801db24 <tcp_write+0x5ac>)
 801d9d8:	f005 f9aa 	bl	8022d30 <iprintf>
      prev_seg->next = seg;
 801d9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d9de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801d9e0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801d9e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d9e4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801d9e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d9ea:	8b3b      	ldrh	r3, [r7, #24]
 801d9ec:	4413      	add	r3, r2
 801d9ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801d9f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d9f6:	88fb      	ldrh	r3, [r7, #6]
 801d9f8:	429a      	cmp	r2, r3
 801d9fa:	f4ff af3d 	bcc.w	801d878 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801d9fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da00:	2b00      	cmp	r3, #0
 801da02:	d02c      	beq.n	801da5e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801da04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da06:	685b      	ldr	r3, [r3, #4]
 801da08:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da0a:	e01e      	b.n	801da4a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801da0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da0e:	891a      	ldrh	r2, [r3, #8]
 801da10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da12:	4413      	add	r3, r2
 801da14:	b29a      	uxth	r2, r3
 801da16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da18:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801da1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da1c:	681b      	ldr	r3, [r3, #0]
 801da1e:	2b00      	cmp	r3, #0
 801da20:	d110      	bne.n	801da44 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801da22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da24:	685b      	ldr	r3, [r3, #4]
 801da26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801da28:	8952      	ldrh	r2, [r2, #10]
 801da2a:	4413      	add	r3, r2
 801da2c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801da2e:	68b9      	ldr	r1, [r7, #8]
 801da30:	4618      	mov	r0, r3
 801da32:	f005 fb6d 	bl	8023110 <memcpy>
        p->len += oversize_used;
 801da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da38:	895a      	ldrh	r2, [r3, #10]
 801da3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da3c:	4413      	add	r3, r2
 801da3e:	b29a      	uxth	r2, r3
 801da40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da42:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801da44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da46:	681b      	ldr	r3, [r3, #0]
 801da48:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da4c:	2b00      	cmp	r3, #0
 801da4e:	d1dd      	bne.n	801da0c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801da50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da52:	891a      	ldrh	r2, [r3, #8]
 801da54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801da56:	4413      	add	r3, r2
 801da58:	b29a      	uxth	r2, r3
 801da5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da5c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801da5e:	8a7a      	ldrh	r2, [r7, #18]
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801da66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d018      	beq.n	801da9e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801da6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d106      	bne.n	801da80 <tcp_write+0x508>
 801da72:	4b2a      	ldr	r3, [pc, #168]	; (801db1c <tcp_write+0x5a4>)
 801da74:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801da78:	492d      	ldr	r1, [pc, #180]	; (801db30 <tcp_write+0x5b8>)
 801da7a:	482a      	ldr	r0, [pc, #168]	; (801db24 <tcp_write+0x5ac>)
 801da7c:	f005 f958 	bl	8022d30 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801da80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da82:	685b      	ldr	r3, [r3, #4]
 801da84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801da86:	4618      	mov	r0, r3
 801da88:	f7fa fda2 	bl	80185d0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801da8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da8e:	891a      	ldrh	r2, [r3, #8]
 801da90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801da92:	891b      	ldrh	r3, [r3, #8]
 801da94:	4413      	add	r3, r2
 801da96:	b29a      	uxth	r2, r3
 801da98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801da9a:	811a      	strh	r2, [r3, #8]
 801da9c:	e037      	b.n	801db0e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801da9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d034      	beq.n	801db0e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801daa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d003      	beq.n	801dab2 <tcp_write+0x53a>
 801daaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801daac:	685b      	ldr	r3, [r3, #4]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d106      	bne.n	801dac0 <tcp_write+0x548>
 801dab2:	4b1a      	ldr	r3, [pc, #104]	; (801db1c <tcp_write+0x5a4>)
 801dab4:	f240 22e6 	movw	r2, #742	; 0x2e6
 801dab8:	491e      	ldr	r1, [pc, #120]	; (801db34 <tcp_write+0x5bc>)
 801daba:	481a      	ldr	r0, [pc, #104]	; (801db24 <tcp_write+0x5ac>)
 801dabc:	f005 f938 	bl	8022d30 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dac2:	685b      	ldr	r3, [r3, #4]
 801dac4:	62bb      	str	r3, [r7, #40]	; 0x28
 801dac6:	e009      	b.n	801dadc <tcp_write+0x564>
      p->tot_len += extendlen;
 801dac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daca:	891a      	ldrh	r2, [r3, #8]
 801dacc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dace:	4413      	add	r3, r2
 801dad0:	b29a      	uxth	r2, r3
 801dad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dad4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dad8:	681b      	ldr	r3, [r3, #0]
 801dada:	62bb      	str	r3, [r7, #40]	; 0x28
 801dadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dade:	681b      	ldr	r3, [r3, #0]
 801dae0:	2b00      	cmp	r3, #0
 801dae2:	d1f1      	bne.n	801dac8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801dae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dae6:	891a      	ldrh	r2, [r3, #8]
 801dae8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801daea:	4413      	add	r3, r2
 801daec:	b29a      	uxth	r2, r3
 801daee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daf0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801daf4:	895a      	ldrh	r2, [r3, #10]
 801daf6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801daf8:	4413      	add	r3, r2
 801dafa:	b29a      	uxth	r2, r3
 801dafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dafe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801db00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db02:	891a      	ldrh	r2, [r3, #8]
 801db04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801db06:	4413      	add	r3, r2
 801db08:	b29a      	uxth	r2, r3
 801db0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db0c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801db0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db10:	2b00      	cmp	r3, #0
 801db12:	d111      	bne.n	801db38 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801db18:	675a      	str	r2, [r3, #116]	; 0x74
 801db1a:	e010      	b.n	801db3e <tcp_write+0x5c6>
 801db1c:	08027184 	.word	0x08027184
 801db20:	0802745c 	.word	0x0802745c
 801db24:	08027210 	.word	0x08027210
 801db28:	0802749c 	.word	0x0802749c
 801db2c:	080274ac 	.word	0x080274ac
 801db30:	080274c0 	.word	0x080274c0
 801db34:	080274f8 	.word	0x080274f8
  } else {
    last_unsent->next = queue;
 801db38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801db3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801db3c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801db42:	88fb      	ldrh	r3, [r7, #6]
 801db44:	441a      	add	r2, r3
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	665a      	str	r2, [r3, #100]	; 0x64
  pcb->snd_buf -= len;
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	f8b3 206c 	ldrh.w	r2, [r3, #108]	; 0x6c
 801db50:	88fb      	ldrh	r3, [r7, #6]
 801db52:	1ad3      	subs	r3, r2, r3
 801db54:	b29a      	uxth	r2, r3
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
  pcb->snd_queuelen = queuelen;
 801db5c:	68fb      	ldr	r3, [r7, #12]
 801db5e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801db62:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d00e      	beq.n	801db8e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801db70:	68fb      	ldr	r3, [r7, #12]
 801db72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801db74:	2b00      	cmp	r3, #0
 801db76:	d10a      	bne.n	801db8e <tcp_write+0x616>
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801db7c:	2b00      	cmp	r3, #0
 801db7e:	d106      	bne.n	801db8e <tcp_write+0x616>
 801db80:	4b2c      	ldr	r3, [pc, #176]	; (801dc34 <tcp_write+0x6bc>)
 801db82:	f240 3212 	movw	r2, #786	; 0x312
 801db86:	492c      	ldr	r1, [pc, #176]	; (801dc38 <tcp_write+0x6c0>)
 801db88:	482c      	ldr	r0, [pc, #176]	; (801dc3c <tcp_write+0x6c4>)
 801db8a:	f005 f8d1 	bl	8022d30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801db8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db90:	2b00      	cmp	r3, #0
 801db92:	d016      	beq.n	801dbc2 <tcp_write+0x64a>
 801db94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db96:	68db      	ldr	r3, [r3, #12]
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d012      	beq.n	801dbc2 <tcp_write+0x64a>
 801db9c:	797b      	ldrb	r3, [r7, #5]
 801db9e:	f003 0302 	and.w	r3, r3, #2
 801dba2:	2b00      	cmp	r3, #0
 801dba4:	d10d      	bne.n	801dbc2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801dba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dba8:	68db      	ldr	r3, [r3, #12]
 801dbaa:	899b      	ldrh	r3, [r3, #12]
 801dbac:	b29c      	uxth	r4, r3
 801dbae:	2008      	movs	r0, #8
 801dbb0:	f7f6 fd38 	bl	8014624 <lwip_htons>
 801dbb4:	4603      	mov	r3, r0
 801dbb6:	461a      	mov	r2, r3
 801dbb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbba:	68db      	ldr	r3, [r3, #12]
 801dbbc:	4322      	orrs	r2, r4
 801dbbe:	b292      	uxth	r2, r2
 801dbc0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801dbc2:	2300      	movs	r3, #0
 801dbc4:	e031      	b.n	801dc2a <tcp_write+0x6b2>
          goto memerr;
 801dbc6:	bf00      	nop
 801dbc8:	e006      	b.n	801dbd8 <tcp_write+0x660>
            goto memerr;
 801dbca:	bf00      	nop
 801dbcc:	e004      	b.n	801dbd8 <tcp_write+0x660>
        goto memerr;
 801dbce:	bf00      	nop
 801dbd0:	e002      	b.n	801dbd8 <tcp_write+0x660>
        goto memerr;
 801dbd2:	bf00      	nop
 801dbd4:	e000      	b.n	801dbd8 <tcp_write+0x660>
      goto memerr;
 801dbd6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dbd8:	68fb      	ldr	r3, [r7, #12]
 801dbda:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801dbdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dbe0:	b29a      	uxth	r2, r3
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	845a      	strh	r2, [r3, #34]	; 0x22
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801dbe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d002      	beq.n	801dbf2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801dbec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801dbee:	f7fa fc21 	bl	8018434 <pbuf_free>
  }
  if (queue != NULL) {
 801dbf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d002      	beq.n	801dbfe <tcp_write+0x686>
    tcp_segs_free(queue);
 801dbf8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801dbfa:	f7fc faad 	bl	801a158 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801dbfe:	68fb      	ldr	r3, [r7, #12]
 801dc00:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d00e      	beq.n	801dc26 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d10a      	bne.n	801dc26 <tcp_write+0x6ae>
 801dc10:	68fb      	ldr	r3, [r7, #12]
 801dc12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801dc14:	2b00      	cmp	r3, #0
 801dc16:	d106      	bne.n	801dc26 <tcp_write+0x6ae>
 801dc18:	4b06      	ldr	r3, [pc, #24]	; (801dc34 <tcp_write+0x6bc>)
 801dc1a:	f240 3227 	movw	r2, #807	; 0x327
 801dc1e:	4906      	ldr	r1, [pc, #24]	; (801dc38 <tcp_write+0x6c0>)
 801dc20:	4806      	ldr	r0, [pc, #24]	; (801dc3c <tcp_write+0x6c4>)
 801dc22:	f005 f885 	bl	8022d30 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801dc26:	f04f 33ff 	mov.w	r3, #4294967295
}
 801dc2a:	4618      	mov	r0, r3
 801dc2c:	375c      	adds	r7, #92	; 0x5c
 801dc2e:	46bd      	mov	sp, r7
 801dc30:	bd90      	pop	{r4, r7, pc}
 801dc32:	bf00      	nop
 801dc34:	08027184 	.word	0x08027184
 801dc38:	08027530 	.word	0x08027530
 801dc3c:	08027210 	.word	0x08027210

0801dc40 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801dc40:	b590      	push	{r4, r7, lr}
 801dc42:	b08b      	sub	sp, #44	; 0x2c
 801dc44:	af02      	add	r7, sp, #8
 801dc46:	6078      	str	r0, [r7, #4]
 801dc48:	460b      	mov	r3, r1
 801dc4a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801dc4c:	2300      	movs	r3, #0
 801dc4e:	61fb      	str	r3, [r7, #28]
 801dc50:	2300      	movs	r3, #0
 801dc52:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801dc54:	2300      	movs	r3, #0
 801dc56:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801dc58:	687b      	ldr	r3, [r7, #4]
 801dc5a:	2b00      	cmp	r3, #0
 801dc5c:	d106      	bne.n	801dc6c <tcp_split_unsent_seg+0x2c>
 801dc5e:	4b95      	ldr	r3, [pc, #596]	; (801deb4 <tcp_split_unsent_seg+0x274>)
 801dc60:	f240 324b 	movw	r2, #843	; 0x34b
 801dc64:	4994      	ldr	r1, [pc, #592]	; (801deb8 <tcp_split_unsent_seg+0x278>)
 801dc66:	4895      	ldr	r0, [pc, #596]	; (801debc <tcp_split_unsent_seg+0x27c>)
 801dc68:	f005 f862 	bl	8022d30 <iprintf>

  useg = pcb->unsent;
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801dc70:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801dc72:	697b      	ldr	r3, [r7, #20]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d102      	bne.n	801dc7e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801dc78:	f04f 33ff 	mov.w	r3, #4294967295
 801dc7c:	e116      	b.n	801deac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801dc7e:	887b      	ldrh	r3, [r7, #2]
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d109      	bne.n	801dc98 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801dc84:	4b8b      	ldr	r3, [pc, #556]	; (801deb4 <tcp_split_unsent_seg+0x274>)
 801dc86:	f240 3253 	movw	r2, #851	; 0x353
 801dc8a:	498d      	ldr	r1, [pc, #564]	; (801dec0 <tcp_split_unsent_seg+0x280>)
 801dc8c:	488b      	ldr	r0, [pc, #556]	; (801debc <tcp_split_unsent_seg+0x27c>)
 801dc8e:	f005 f84f 	bl	8022d30 <iprintf>
    return ERR_VAL;
 801dc92:	f06f 0305 	mvn.w	r3, #5
 801dc96:	e109      	b.n	801deac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801dc98:	697b      	ldr	r3, [r7, #20]
 801dc9a:	891b      	ldrh	r3, [r3, #8]
 801dc9c:	887a      	ldrh	r2, [r7, #2]
 801dc9e:	429a      	cmp	r2, r3
 801dca0:	d301      	bcc.n	801dca6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801dca2:	2300      	movs	r3, #0
 801dca4:	e102      	b.n	801deac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801dcaa:	887a      	ldrh	r2, [r7, #2]
 801dcac:	429a      	cmp	r2, r3
 801dcae:	d906      	bls.n	801dcbe <tcp_split_unsent_seg+0x7e>
 801dcb0:	4b80      	ldr	r3, [pc, #512]	; (801deb4 <tcp_split_unsent_seg+0x274>)
 801dcb2:	f240 325b 	movw	r2, #859	; 0x35b
 801dcb6:	4983      	ldr	r1, [pc, #524]	; (801dec4 <tcp_split_unsent_seg+0x284>)
 801dcb8:	4880      	ldr	r0, [pc, #512]	; (801debc <tcp_split_unsent_seg+0x27c>)
 801dcba:	f005 f839 	bl	8022d30 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801dcbe:	697b      	ldr	r3, [r7, #20]
 801dcc0:	891b      	ldrh	r3, [r3, #8]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d106      	bne.n	801dcd4 <tcp_split_unsent_seg+0x94>
 801dcc6:	4b7b      	ldr	r3, [pc, #492]	; (801deb4 <tcp_split_unsent_seg+0x274>)
 801dcc8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801dccc:	497e      	ldr	r1, [pc, #504]	; (801dec8 <tcp_split_unsent_seg+0x288>)
 801dcce:	487b      	ldr	r0, [pc, #492]	; (801debc <tcp_split_unsent_seg+0x27c>)
 801dcd0:	f005 f82e 	bl	8022d30 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801dcd4:	697b      	ldr	r3, [r7, #20]
 801dcd6:	7a9b      	ldrb	r3, [r3, #10]
 801dcd8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801dcda:	7bfb      	ldrb	r3, [r7, #15]
 801dcdc:	009b      	lsls	r3, r3, #2
 801dcde:	b2db      	uxtb	r3, r3
 801dce0:	f003 0304 	and.w	r3, r3, #4
 801dce4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801dce6:	697b      	ldr	r3, [r7, #20]
 801dce8:	891a      	ldrh	r2, [r3, #8]
 801dcea:	887b      	ldrh	r3, [r7, #2]
 801dcec:	1ad3      	subs	r3, r2, r3
 801dcee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801dcf0:	7bbb      	ldrb	r3, [r7, #14]
 801dcf2:	b29a      	uxth	r2, r3
 801dcf4:	89bb      	ldrh	r3, [r7, #12]
 801dcf6:	4413      	add	r3, r2
 801dcf8:	b29b      	uxth	r3, r3
 801dcfa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dcfe:	4619      	mov	r1, r3
 801dd00:	2036      	movs	r0, #54	; 0x36
 801dd02:	f7fa f8b3 	bl	8017e6c <pbuf_alloc>
 801dd06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801dd08:	693b      	ldr	r3, [r7, #16]
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	f000 80b7 	beq.w	801de7e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801dd10:	697b      	ldr	r3, [r7, #20]
 801dd12:	685b      	ldr	r3, [r3, #4]
 801dd14:	891a      	ldrh	r2, [r3, #8]
 801dd16:	697b      	ldr	r3, [r7, #20]
 801dd18:	891b      	ldrh	r3, [r3, #8]
 801dd1a:	1ad3      	subs	r3, r2, r3
 801dd1c:	b29a      	uxth	r2, r3
 801dd1e:	887b      	ldrh	r3, [r7, #2]
 801dd20:	4413      	add	r3, r2
 801dd22:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801dd24:	697b      	ldr	r3, [r7, #20]
 801dd26:	6858      	ldr	r0, [r3, #4]
 801dd28:	693b      	ldr	r3, [r7, #16]
 801dd2a:	685a      	ldr	r2, [r3, #4]
 801dd2c:	7bbb      	ldrb	r3, [r7, #14]
 801dd2e:	18d1      	adds	r1, r2, r3
 801dd30:	897b      	ldrh	r3, [r7, #10]
 801dd32:	89ba      	ldrh	r2, [r7, #12]
 801dd34:	f7fa fd74 	bl	8018820 <pbuf_copy_partial>
 801dd38:	4603      	mov	r3, r0
 801dd3a:	461a      	mov	r2, r3
 801dd3c:	89bb      	ldrh	r3, [r7, #12]
 801dd3e:	4293      	cmp	r3, r2
 801dd40:	f040 809f 	bne.w	801de82 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801dd44:	697b      	ldr	r3, [r7, #20]
 801dd46:	68db      	ldr	r3, [r3, #12]
 801dd48:	899b      	ldrh	r3, [r3, #12]
 801dd4a:	b29b      	uxth	r3, r3
 801dd4c:	4618      	mov	r0, r3
 801dd4e:	f7f6 fc69 	bl	8014624 <lwip_htons>
 801dd52:	4603      	mov	r3, r0
 801dd54:	b2db      	uxtb	r3, r3
 801dd56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dd5a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801dd5c:	2300      	movs	r3, #0
 801dd5e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801dd60:	7efb      	ldrb	r3, [r7, #27]
 801dd62:	f003 0308 	and.w	r3, r3, #8
 801dd66:	2b00      	cmp	r3, #0
 801dd68:	d007      	beq.n	801dd7a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801dd6a:	7efb      	ldrb	r3, [r7, #27]
 801dd6c:	f023 0308 	bic.w	r3, r3, #8
 801dd70:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801dd72:	7ebb      	ldrb	r3, [r7, #26]
 801dd74:	f043 0308 	orr.w	r3, r3, #8
 801dd78:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801dd7a:	7efb      	ldrb	r3, [r7, #27]
 801dd7c:	f003 0301 	and.w	r3, r3, #1
 801dd80:	2b00      	cmp	r3, #0
 801dd82:	d007      	beq.n	801dd94 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801dd84:	7efb      	ldrb	r3, [r7, #27]
 801dd86:	f023 0301 	bic.w	r3, r3, #1
 801dd8a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801dd8c:	7ebb      	ldrb	r3, [r7, #26]
 801dd8e:	f043 0301 	orr.w	r3, r3, #1
 801dd92:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801dd94:	697b      	ldr	r3, [r7, #20]
 801dd96:	68db      	ldr	r3, [r3, #12]
 801dd98:	685b      	ldr	r3, [r3, #4]
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	f7f6 fc57 	bl	801464e <lwip_htonl>
 801dda0:	4602      	mov	r2, r0
 801dda2:	887b      	ldrh	r3, [r7, #2]
 801dda4:	18d1      	adds	r1, r2, r3
 801dda6:	7eba      	ldrb	r2, [r7, #26]
 801dda8:	7bfb      	ldrb	r3, [r7, #15]
 801ddaa:	9300      	str	r3, [sp, #0]
 801ddac:	460b      	mov	r3, r1
 801ddae:	6939      	ldr	r1, [r7, #16]
 801ddb0:	6878      	ldr	r0, [r7, #4]
 801ddb2:	f7ff fa4f 	bl	801d254 <tcp_create_segment>
 801ddb6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801ddb8:	69fb      	ldr	r3, [r7, #28]
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	d063      	beq.n	801de86 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801ddbe:	697b      	ldr	r3, [r7, #20]
 801ddc0:	685b      	ldr	r3, [r3, #4]
 801ddc2:	4618      	mov	r0, r3
 801ddc4:	f7fa fbc4 	bl	8018550 <pbuf_clen>
 801ddc8:	4603      	mov	r3, r0
 801ddca:	461a      	mov	r2, r3
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801ddd2:	1a9b      	subs	r3, r3, r2
 801ddd4:	b29a      	uxth	r2, r3
 801ddd6:	687b      	ldr	r3, [r7, #4]
 801ddd8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801dddc:	697b      	ldr	r3, [r7, #20]
 801ddde:	6858      	ldr	r0, [r3, #4]
 801dde0:	697b      	ldr	r3, [r7, #20]
 801dde2:	685b      	ldr	r3, [r3, #4]
 801dde4:	891a      	ldrh	r2, [r3, #8]
 801dde6:	89bb      	ldrh	r3, [r7, #12]
 801dde8:	1ad3      	subs	r3, r2, r3
 801ddea:	b29b      	uxth	r3, r3
 801ddec:	4619      	mov	r1, r3
 801ddee:	f7fa f99b 	bl	8018128 <pbuf_realloc>
  useg->len -= remainder;
 801ddf2:	697b      	ldr	r3, [r7, #20]
 801ddf4:	891a      	ldrh	r2, [r3, #8]
 801ddf6:	89bb      	ldrh	r3, [r7, #12]
 801ddf8:	1ad3      	subs	r3, r2, r3
 801ddfa:	b29a      	uxth	r2, r3
 801ddfc:	697b      	ldr	r3, [r7, #20]
 801ddfe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801de00:	697b      	ldr	r3, [r7, #20]
 801de02:	68db      	ldr	r3, [r3, #12]
 801de04:	899b      	ldrh	r3, [r3, #12]
 801de06:	b29c      	uxth	r4, r3
 801de08:	7efb      	ldrb	r3, [r7, #27]
 801de0a:	b29b      	uxth	r3, r3
 801de0c:	4618      	mov	r0, r3
 801de0e:	f7f6 fc09 	bl	8014624 <lwip_htons>
 801de12:	4603      	mov	r3, r0
 801de14:	461a      	mov	r2, r3
 801de16:	697b      	ldr	r3, [r7, #20]
 801de18:	68db      	ldr	r3, [r3, #12]
 801de1a:	4322      	orrs	r2, r4
 801de1c:	b292      	uxth	r2, r2
 801de1e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801de20:	697b      	ldr	r3, [r7, #20]
 801de22:	685b      	ldr	r3, [r3, #4]
 801de24:	4618      	mov	r0, r3
 801de26:	f7fa fb93 	bl	8018550 <pbuf_clen>
 801de2a:	4603      	mov	r3, r0
 801de2c:	461a      	mov	r2, r3
 801de2e:	687b      	ldr	r3, [r7, #4]
 801de30:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801de34:	4413      	add	r3, r2
 801de36:	b29a      	uxth	r2, r3
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801de3e:	69fb      	ldr	r3, [r7, #28]
 801de40:	685b      	ldr	r3, [r3, #4]
 801de42:	4618      	mov	r0, r3
 801de44:	f7fa fb84 	bl	8018550 <pbuf_clen>
 801de48:	4603      	mov	r3, r0
 801de4a:	461a      	mov	r2, r3
 801de4c:	687b      	ldr	r3, [r7, #4]
 801de4e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801de52:	4413      	add	r3, r2
 801de54:	b29a      	uxth	r2, r3
 801de56:	687b      	ldr	r3, [r7, #4]
 801de58:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801de5c:	697b      	ldr	r3, [r7, #20]
 801de5e:	681a      	ldr	r2, [r3, #0]
 801de60:	69fb      	ldr	r3, [r7, #28]
 801de62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801de64:	697b      	ldr	r3, [r7, #20]
 801de66:	69fa      	ldr	r2, [r7, #28]
 801de68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801de6a:	69fb      	ldr	r3, [r7, #28]
 801de6c:	681b      	ldr	r3, [r3, #0]
 801de6e:	2b00      	cmp	r3, #0
 801de70:	d103      	bne.n	801de7a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801de72:	687b      	ldr	r3, [r7, #4]
 801de74:	2200      	movs	r2, #0
 801de76:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801de7a:	2300      	movs	r3, #0
 801de7c:	e016      	b.n	801deac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801de7e:	bf00      	nop
 801de80:	e002      	b.n	801de88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801de82:	bf00      	nop
 801de84:	e000      	b.n	801de88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801de86:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801de88:	69fb      	ldr	r3, [r7, #28]
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d006      	beq.n	801de9c <tcp_split_unsent_seg+0x25c>
 801de8e:	4b09      	ldr	r3, [pc, #36]	; (801deb4 <tcp_split_unsent_seg+0x274>)
 801de90:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801de94:	490d      	ldr	r1, [pc, #52]	; (801decc <tcp_split_unsent_seg+0x28c>)
 801de96:	4809      	ldr	r0, [pc, #36]	; (801debc <tcp_split_unsent_seg+0x27c>)
 801de98:	f004 ff4a 	bl	8022d30 <iprintf>
  if (p != NULL) {
 801de9c:	693b      	ldr	r3, [r7, #16]
 801de9e:	2b00      	cmp	r3, #0
 801dea0:	d002      	beq.n	801dea8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801dea2:	6938      	ldr	r0, [r7, #16]
 801dea4:	f7fa fac6 	bl	8018434 <pbuf_free>
  }

  return ERR_MEM;
 801dea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801deac:	4618      	mov	r0, r3
 801deae:	3724      	adds	r7, #36	; 0x24
 801deb0:	46bd      	mov	sp, r7
 801deb2:	bd90      	pop	{r4, r7, pc}
 801deb4:	08027184 	.word	0x08027184
 801deb8:	08027550 	.word	0x08027550
 801debc:	08027210 	.word	0x08027210
 801dec0:	08027574 	.word	0x08027574
 801dec4:	08027598 	.word	0x08027598
 801dec8:	080275a8 	.word	0x080275a8
 801decc:	080275b8 	.word	0x080275b8

0801ded0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801ded0:	b590      	push	{r4, r7, lr}
 801ded2:	b085      	sub	sp, #20
 801ded4:	af00      	add	r7, sp, #0
 801ded6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	2b00      	cmp	r3, #0
 801dedc:	d106      	bne.n	801deec <tcp_send_fin+0x1c>
 801dede:	4b21      	ldr	r3, [pc, #132]	; (801df64 <tcp_send_fin+0x94>)
 801dee0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801dee4:	4920      	ldr	r1, [pc, #128]	; (801df68 <tcp_send_fin+0x98>)
 801dee6:	4821      	ldr	r0, [pc, #132]	; (801df6c <tcp_send_fin+0x9c>)
 801dee8:	f004 ff22 	bl	8022d30 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801def0:	2b00      	cmp	r3, #0
 801def2:	d02e      	beq.n	801df52 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801def8:	60fb      	str	r3, [r7, #12]
 801defa:	e002      	b.n	801df02 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801defc:	68fb      	ldr	r3, [r7, #12]
 801defe:	681b      	ldr	r3, [r3, #0]
 801df00:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801df02:	68fb      	ldr	r3, [r7, #12]
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	2b00      	cmp	r3, #0
 801df08:	d1f8      	bne.n	801defc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	68db      	ldr	r3, [r3, #12]
 801df0e:	899b      	ldrh	r3, [r3, #12]
 801df10:	b29b      	uxth	r3, r3
 801df12:	4618      	mov	r0, r3
 801df14:	f7f6 fb86 	bl	8014624 <lwip_htons>
 801df18:	4603      	mov	r3, r0
 801df1a:	b2db      	uxtb	r3, r3
 801df1c:	f003 0307 	and.w	r3, r3, #7
 801df20:	2b00      	cmp	r3, #0
 801df22:	d116      	bne.n	801df52 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	68db      	ldr	r3, [r3, #12]
 801df28:	899b      	ldrh	r3, [r3, #12]
 801df2a:	b29c      	uxth	r4, r3
 801df2c:	2001      	movs	r0, #1
 801df2e:	f7f6 fb79 	bl	8014624 <lwip_htons>
 801df32:	4603      	mov	r3, r0
 801df34:	461a      	mov	r2, r3
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	68db      	ldr	r3, [r3, #12]
 801df3a:	4322      	orrs	r2, r4
 801df3c:	b292      	uxth	r2, r2
 801df3e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801df44:	f043 0320 	orr.w	r3, r3, #32
 801df48:	b29a      	uxth	r2, r3
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	845a      	strh	r2, [r3, #34]	; 0x22
      return ERR_OK;
 801df4e:	2300      	movs	r3, #0
 801df50:	e004      	b.n	801df5c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801df52:	2101      	movs	r1, #1
 801df54:	6878      	ldr	r0, [r7, #4]
 801df56:	f000 f80b 	bl	801df70 <tcp_enqueue_flags>
 801df5a:	4603      	mov	r3, r0
}
 801df5c:	4618      	mov	r0, r3
 801df5e:	3714      	adds	r7, #20
 801df60:	46bd      	mov	sp, r7
 801df62:	bd90      	pop	{r4, r7, pc}
 801df64:	08027184 	.word	0x08027184
 801df68:	080275c4 	.word	0x080275c4
 801df6c:	08027210 	.word	0x08027210

0801df70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801df70:	b580      	push	{r7, lr}
 801df72:	b08a      	sub	sp, #40	; 0x28
 801df74:	af02      	add	r7, sp, #8
 801df76:	6078      	str	r0, [r7, #4]
 801df78:	460b      	mov	r3, r1
 801df7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801df7c:	2300      	movs	r3, #0
 801df7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801df80:	2300      	movs	r3, #0
 801df82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801df84:	78fb      	ldrb	r3, [r7, #3]
 801df86:	f003 0303 	and.w	r3, r3, #3
 801df8a:	2b00      	cmp	r3, #0
 801df8c:	d106      	bne.n	801df9c <tcp_enqueue_flags+0x2c>
 801df8e:	4b67      	ldr	r3, [pc, #412]	; (801e12c <tcp_enqueue_flags+0x1bc>)
 801df90:	f240 4211 	movw	r2, #1041	; 0x411
 801df94:	4966      	ldr	r1, [pc, #408]	; (801e130 <tcp_enqueue_flags+0x1c0>)
 801df96:	4867      	ldr	r0, [pc, #412]	; (801e134 <tcp_enqueue_flags+0x1c4>)
 801df98:	f004 feca 	bl	8022d30 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d106      	bne.n	801dfb0 <tcp_enqueue_flags+0x40>
 801dfa2:	4b62      	ldr	r3, [pc, #392]	; (801e12c <tcp_enqueue_flags+0x1bc>)
 801dfa4:	f240 4213 	movw	r2, #1043	; 0x413
 801dfa8:	4963      	ldr	r1, [pc, #396]	; (801e138 <tcp_enqueue_flags+0x1c8>)
 801dfaa:	4862      	ldr	r0, [pc, #392]	; (801e134 <tcp_enqueue_flags+0x1c4>)
 801dfac:	f004 fec0 	bl	8022d30 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801dfb0:	78fb      	ldrb	r3, [r7, #3]
 801dfb2:	f003 0302 	and.w	r3, r3, #2
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	d001      	beq.n	801dfbe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801dfba:	2301      	movs	r3, #1
 801dfbc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801dfbe:	7ffb      	ldrb	r3, [r7, #31]
 801dfc0:	009b      	lsls	r3, r3, #2
 801dfc2:	b2db      	uxtb	r3, r3
 801dfc4:	f003 0304 	and.w	r3, r3, #4
 801dfc8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801dfca:	7dfb      	ldrb	r3, [r7, #23]
 801dfcc:	b29b      	uxth	r3, r3
 801dfce:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dfd2:	4619      	mov	r1, r3
 801dfd4:	2036      	movs	r0, #54	; 0x36
 801dfd6:	f7f9 ff49 	bl	8017e6c <pbuf_alloc>
 801dfda:	6138      	str	r0, [r7, #16]
 801dfdc:	693b      	ldr	r3, [r7, #16]
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d109      	bne.n	801dff6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801dfe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dfea:	b29a      	uxth	r2, r3
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	845a      	strh	r2, [r3, #34]	; 0x22
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801dff0:	f04f 33ff 	mov.w	r3, #4294967295
 801dff4:	e095      	b.n	801e122 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801dff6:	693b      	ldr	r3, [r7, #16]
 801dff8:	895a      	ldrh	r2, [r3, #10]
 801dffa:	7dfb      	ldrb	r3, [r7, #23]
 801dffc:	b29b      	uxth	r3, r3
 801dffe:	429a      	cmp	r2, r3
 801e000:	d206      	bcs.n	801e010 <tcp_enqueue_flags+0xa0>
 801e002:	4b4a      	ldr	r3, [pc, #296]	; (801e12c <tcp_enqueue_flags+0x1bc>)
 801e004:	f240 4239 	movw	r2, #1081	; 0x439
 801e008:	494c      	ldr	r1, [pc, #304]	; (801e13c <tcp_enqueue_flags+0x1cc>)
 801e00a:	484a      	ldr	r0, [pc, #296]	; (801e134 <tcp_enqueue_flags+0x1c4>)
 801e00c:	f004 fe90 	bl	8022d30 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	6e59      	ldr	r1, [r3, #100]	; 0x64
 801e014:	78fa      	ldrb	r2, [r7, #3]
 801e016:	7ffb      	ldrb	r3, [r7, #31]
 801e018:	9300      	str	r3, [sp, #0]
 801e01a:	460b      	mov	r3, r1
 801e01c:	6939      	ldr	r1, [r7, #16]
 801e01e:	6878      	ldr	r0, [r7, #4]
 801e020:	f7ff f918 	bl	801d254 <tcp_create_segment>
 801e024:	60f8      	str	r0, [r7, #12]
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d109      	bne.n	801e040 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e02c:	687b      	ldr	r3, [r7, #4]
 801e02e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e034:	b29a      	uxth	r2, r3
 801e036:	687b      	ldr	r3, [r7, #4]
 801e038:	845a      	strh	r2, [r3, #34]	; 0x22
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e03a:	f04f 33ff 	mov.w	r3, #4294967295
 801e03e:	e070      	b.n	801e122 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	68db      	ldr	r3, [r3, #12]
 801e044:	f003 0303 	and.w	r3, r3, #3
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d006      	beq.n	801e05a <tcp_enqueue_flags+0xea>
 801e04c:	4b37      	ldr	r3, [pc, #220]	; (801e12c <tcp_enqueue_flags+0x1bc>)
 801e04e:	f240 4242 	movw	r2, #1090	; 0x442
 801e052:	493b      	ldr	r1, [pc, #236]	; (801e140 <tcp_enqueue_flags+0x1d0>)
 801e054:	4837      	ldr	r0, [pc, #220]	; (801e134 <tcp_enqueue_flags+0x1c4>)
 801e056:	f004 fe6b 	bl	8022d30 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e05a:	68fb      	ldr	r3, [r7, #12]
 801e05c:	891b      	ldrh	r3, [r3, #8]
 801e05e:	2b00      	cmp	r3, #0
 801e060:	d006      	beq.n	801e070 <tcp_enqueue_flags+0x100>
 801e062:	4b32      	ldr	r3, [pc, #200]	; (801e12c <tcp_enqueue_flags+0x1bc>)
 801e064:	f240 4243 	movw	r2, #1091	; 0x443
 801e068:	4936      	ldr	r1, [pc, #216]	; (801e144 <tcp_enqueue_flags+0x1d4>)
 801e06a:	4832      	ldr	r0, [pc, #200]	; (801e134 <tcp_enqueue_flags+0x1c4>)
 801e06c:	f004 fe60 	bl	8022d30 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e074:	2b00      	cmp	r3, #0
 801e076:	d103      	bne.n	801e080 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e078:	687b      	ldr	r3, [r7, #4]
 801e07a:	68fa      	ldr	r2, [r7, #12]
 801e07c:	675a      	str	r2, [r3, #116]	; 0x74
 801e07e:	e00d      	b.n	801e09c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e084:	61bb      	str	r3, [r7, #24]
 801e086:	e002      	b.n	801e08e <tcp_enqueue_flags+0x11e>
 801e088:	69bb      	ldr	r3, [r7, #24]
 801e08a:	681b      	ldr	r3, [r3, #0]
 801e08c:	61bb      	str	r3, [r7, #24]
 801e08e:	69bb      	ldr	r3, [r7, #24]
 801e090:	681b      	ldr	r3, [r3, #0]
 801e092:	2b00      	cmp	r3, #0
 801e094:	d1f8      	bne.n	801e088 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e096:	69bb      	ldr	r3, [r7, #24]
 801e098:	68fa      	ldr	r2, [r7, #12]
 801e09a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	2200      	movs	r2, #0
 801e0a0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e0a4:	78fb      	ldrb	r3, [r7, #3]
 801e0a6:	f003 0302 	and.w	r3, r3, #2
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d104      	bne.n	801e0b8 <tcp_enqueue_flags+0x148>
 801e0ae:	78fb      	ldrb	r3, [r7, #3]
 801e0b0:	f003 0301 	and.w	r3, r3, #1
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d004      	beq.n	801e0c2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801e0bc:	1c5a      	adds	r2, r3, #1
 801e0be:	687b      	ldr	r3, [r7, #4]
 801e0c0:	665a      	str	r2, [r3, #100]	; 0x64
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e0c2:	78fb      	ldrb	r3, [r7, #3]
 801e0c4:	f003 0301 	and.w	r3, r3, #1
 801e0c8:	2b00      	cmp	r3, #0
 801e0ca:	d006      	beq.n	801e0da <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e0d0:	f043 0320 	orr.w	r3, r3, #32
 801e0d4:	b29a      	uxth	r2, r3
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e0da:	68fb      	ldr	r3, [r7, #12]
 801e0dc:	685b      	ldr	r3, [r3, #4]
 801e0de:	4618      	mov	r0, r3
 801e0e0:	f7fa fa36 	bl	8018550 <pbuf_clen>
 801e0e4:	4603      	mov	r3, r0
 801e0e6:	461a      	mov	r2, r3
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801e0ee:	4413      	add	r3, r2
 801e0f0:	b29a      	uxth	r2, r3
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	d00e      	beq.n	801e120 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e102:	687b      	ldr	r3, [r7, #4]
 801e104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e106:	2b00      	cmp	r3, #0
 801e108:	d10a      	bne.n	801e120 <tcp_enqueue_flags+0x1b0>
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e10e:	2b00      	cmp	r3, #0
 801e110:	d106      	bne.n	801e120 <tcp_enqueue_flags+0x1b0>
 801e112:	4b06      	ldr	r3, [pc, #24]	; (801e12c <tcp_enqueue_flags+0x1bc>)
 801e114:	f240 4265 	movw	r2, #1125	; 0x465
 801e118:	490b      	ldr	r1, [pc, #44]	; (801e148 <tcp_enqueue_flags+0x1d8>)
 801e11a:	4806      	ldr	r0, [pc, #24]	; (801e134 <tcp_enqueue_flags+0x1c4>)
 801e11c:	f004 fe08 	bl	8022d30 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e120:	2300      	movs	r3, #0
}
 801e122:	4618      	mov	r0, r3
 801e124:	3720      	adds	r7, #32
 801e126:	46bd      	mov	sp, r7
 801e128:	bd80      	pop	{r7, pc}
 801e12a:	bf00      	nop
 801e12c:	08027184 	.word	0x08027184
 801e130:	080275e0 	.word	0x080275e0
 801e134:	08027210 	.word	0x08027210
 801e138:	08027638 	.word	0x08027638
 801e13c:	08027658 	.word	0x08027658
 801e140:	08027694 	.word	0x08027694
 801e144:	080276ac 	.word	0x080276ac
 801e148:	080276d8 	.word	0x080276d8

0801e14c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e14c:	b5b0      	push	{r4, r5, r7, lr}
 801e14e:	b08a      	sub	sp, #40	; 0x28
 801e150:	af00      	add	r7, sp, #0
 801e152:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	2b00      	cmp	r3, #0
 801e158:	d106      	bne.n	801e168 <tcp_output+0x1c>
 801e15a:	4b8a      	ldr	r3, [pc, #552]	; (801e384 <tcp_output+0x238>)
 801e15c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e160:	4989      	ldr	r1, [pc, #548]	; (801e388 <tcp_output+0x23c>)
 801e162:	488a      	ldr	r0, [pc, #552]	; (801e38c <tcp_output+0x240>)
 801e164:	f004 fde4 	bl	8022d30 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	7f1b      	ldrb	r3, [r3, #28]
 801e16c:	2b01      	cmp	r3, #1
 801e16e:	d106      	bne.n	801e17e <tcp_output+0x32>
 801e170:	4b84      	ldr	r3, [pc, #528]	; (801e384 <tcp_output+0x238>)
 801e172:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e176:	4986      	ldr	r1, [pc, #536]	; (801e390 <tcp_output+0x244>)
 801e178:	4884      	ldr	r0, [pc, #528]	; (801e38c <tcp_output+0x240>)
 801e17a:	f004 fdd9 	bl	8022d30 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e17e:	4b85      	ldr	r3, [pc, #532]	; (801e394 <tcp_output+0x248>)
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	687a      	ldr	r2, [r7, #4]
 801e184:	429a      	cmp	r2, r3
 801e186:	d101      	bne.n	801e18c <tcp_output+0x40>
    return ERR_OK;
 801e188:	2300      	movs	r3, #0
 801e18a:	e1ce      	b.n	801e52a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 801e192:	687b      	ldr	r3, [r7, #4]
 801e194:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801e198:	4293      	cmp	r3, r2
 801e19a:	bf28      	it	cs
 801e19c:	4613      	movcs	r3, r2
 801e19e:	b29b      	uxth	r3, r3
 801e1a0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e1a2:	687b      	ldr	r3, [r7, #4]
 801e1a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e1a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801e1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1aa:	2b00      	cmp	r3, #0
 801e1ac:	d10b      	bne.n	801e1c6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e1b2:	f003 0302 	and.w	r3, r3, #2
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	f000 81aa 	beq.w	801e510 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801e1bc:	6878      	ldr	r0, [r7, #4]
 801e1be:	f000 fdcb 	bl	801ed58 <tcp_send_empty_ack>
 801e1c2:	4603      	mov	r3, r0
 801e1c4:	e1b1      	b.n	801e52a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e1c6:	6879      	ldr	r1, [r7, #4]
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	3304      	adds	r3, #4
 801e1cc:	461a      	mov	r2, r3
 801e1ce:	6878      	ldr	r0, [r7, #4]
 801e1d0:	f7ff f824 	bl	801d21c <tcp_route>
 801e1d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801e1d6:	697b      	ldr	r3, [r7, #20]
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d102      	bne.n	801e1e2 <tcp_output+0x96>
    return ERR_RTE;
 801e1dc:	f06f 0303 	mvn.w	r3, #3
 801e1e0:	e1a3      	b.n	801e52a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801e1e2:	687b      	ldr	r3, [r7, #4]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d003      	beq.n	801e1f0 <tcp_output+0xa4>
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d111      	bne.n	801e214 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801e1f0:	697b      	ldr	r3, [r7, #20]
 801e1f2:	2b00      	cmp	r3, #0
 801e1f4:	d002      	beq.n	801e1fc <tcp_output+0xb0>
 801e1f6:	697b      	ldr	r3, [r7, #20]
 801e1f8:	3304      	adds	r3, #4
 801e1fa:	e000      	b.n	801e1fe <tcp_output+0xb2>
 801e1fc:	2300      	movs	r3, #0
 801e1fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801e200:	693b      	ldr	r3, [r7, #16]
 801e202:	2b00      	cmp	r3, #0
 801e204:	d102      	bne.n	801e20c <tcp_output+0xc0>
      return ERR_RTE;
 801e206:	f06f 0303 	mvn.w	r3, #3
 801e20a:	e18e      	b.n	801e52a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e20c:	693b      	ldr	r3, [r7, #16]
 801e20e:	681a      	ldr	r2, [r3, #0]
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e216:	68db      	ldr	r3, [r3, #12]
 801e218:	685b      	ldr	r3, [r3, #4]
 801e21a:	4618      	mov	r0, r3
 801e21c:	f7f6 fa17 	bl	801464e <lwip_htonl>
 801e220:	4602      	mov	r2, r0
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e226:	1ad3      	subs	r3, r2, r3
 801e228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e22a:	8912      	ldrh	r2, [r2, #8]
 801e22c:	4413      	add	r3, r2
 801e22e:	69ba      	ldr	r2, [r7, #24]
 801e230:	429a      	cmp	r2, r3
 801e232:	d227      	bcs.n	801e284 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e234:	687b      	ldr	r3, [r7, #4]
 801e236:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801e23a:	461a      	mov	r2, r3
 801e23c:	69bb      	ldr	r3, [r7, #24]
 801e23e:	4293      	cmp	r3, r2
 801e240:	d114      	bne.n	801e26c <tcp_output+0x120>
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e246:	2b00      	cmp	r3, #0
 801e248:	d110      	bne.n	801e26c <tcp_output+0x120>
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 801e250:	2b00      	cmp	r3, #0
 801e252:	d10b      	bne.n	801e26c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	2200      	movs	r2, #0
 801e258:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
      pcb->persist_backoff = 1;
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	2201      	movs	r2, #1
 801e260:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
      pcb->persist_probe = 0;
 801e264:	687b      	ldr	r3, [r7, #4]
 801e266:	2200      	movs	r2, #0
 801e268:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e270:	f003 0302 	and.w	r3, r3, #2
 801e274:	2b00      	cmp	r3, #0
 801e276:	f000 814d 	beq.w	801e514 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801e27a:	6878      	ldr	r0, [r7, #4]
 801e27c:	f000 fd6c 	bl	801ed58 <tcp_send_empty_ack>
 801e280:	4603      	mov	r3, r0
 801e282:	e152      	b.n	801e52a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	2200      	movs	r2, #0
 801e288:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e290:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e292:	6a3b      	ldr	r3, [r7, #32]
 801e294:	2b00      	cmp	r3, #0
 801e296:	f000 811c 	beq.w	801e4d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801e29a:	e002      	b.n	801e2a2 <tcp_output+0x156>
 801e29c:	6a3b      	ldr	r3, [r7, #32]
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	623b      	str	r3, [r7, #32]
 801e2a2:	6a3b      	ldr	r3, [r7, #32]
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	2b00      	cmp	r3, #0
 801e2a8:	d1f8      	bne.n	801e29c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801e2aa:	e112      	b.n	801e4d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2ae:	68db      	ldr	r3, [r3, #12]
 801e2b0:	899b      	ldrh	r3, [r3, #12]
 801e2b2:	b29b      	uxth	r3, r3
 801e2b4:	4618      	mov	r0, r3
 801e2b6:	f7f6 f9b5 	bl	8014624 <lwip_htons>
 801e2ba:	4603      	mov	r3, r0
 801e2bc:	b2db      	uxtb	r3, r3
 801e2be:	f003 0304 	and.w	r3, r3, #4
 801e2c2:	2b00      	cmp	r3, #0
 801e2c4:	d006      	beq.n	801e2d4 <tcp_output+0x188>
 801e2c6:	4b2f      	ldr	r3, [pc, #188]	; (801e384 <tcp_output+0x238>)
 801e2c8:	f240 5236 	movw	r2, #1334	; 0x536
 801e2cc:	4932      	ldr	r1, [pc, #200]	; (801e398 <tcp_output+0x24c>)
 801e2ce:	482f      	ldr	r0, [pc, #188]	; (801e38c <tcp_output+0x240>)
 801e2d0:	f004 fd2e 	bl	8022d30 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d01f      	beq.n	801e31c <tcp_output+0x1d0>
 801e2dc:	687b      	ldr	r3, [r7, #4]
 801e2de:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e2e0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e2e4:	2b00      	cmp	r3, #0
 801e2e6:	d119      	bne.n	801e31c <tcp_output+0x1d0>
 801e2e8:	687b      	ldr	r3, [r7, #4]
 801e2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d00b      	beq.n	801e308 <tcp_output+0x1bc>
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	d110      	bne.n	801e31c <tcp_output+0x1d0>
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e2fe:	891a      	ldrh	r2, [r3, #8]
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801e304:	429a      	cmp	r2, r3
 801e306:	d209      	bcs.n	801e31c <tcp_output+0x1d0>
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801e30e:	2b00      	cmp	r3, #0
 801e310:	d004      	beq.n	801e31c <tcp_output+0x1d0>
 801e312:	687b      	ldr	r3, [r7, #4]
 801e314:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 801e318:	2b08      	cmp	r3, #8
 801e31a:	d901      	bls.n	801e320 <tcp_output+0x1d4>
 801e31c:	2301      	movs	r3, #1
 801e31e:	e000      	b.n	801e322 <tcp_output+0x1d6>
 801e320:	2300      	movs	r3, #0
 801e322:	2b00      	cmp	r3, #0
 801e324:	d106      	bne.n	801e334 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e32a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e32e:	2b00      	cmp	r3, #0
 801e330:	f000 80e4 	beq.w	801e4fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	7f1b      	ldrb	r3, [r3, #28]
 801e338:	2b02      	cmp	r3, #2
 801e33a:	d00d      	beq.n	801e358 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e33e:	68db      	ldr	r3, [r3, #12]
 801e340:	899b      	ldrh	r3, [r3, #12]
 801e342:	b29c      	uxth	r4, r3
 801e344:	2010      	movs	r0, #16
 801e346:	f7f6 f96d 	bl	8014624 <lwip_htons>
 801e34a:	4603      	mov	r3, r0
 801e34c:	461a      	mov	r2, r3
 801e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e350:	68db      	ldr	r3, [r3, #12]
 801e352:	4322      	orrs	r2, r4
 801e354:	b292      	uxth	r2, r2
 801e356:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801e358:	697a      	ldr	r2, [r7, #20]
 801e35a:	6879      	ldr	r1, [r7, #4]
 801e35c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e35e:	f000 f909 	bl	801e574 <tcp_output_segment>
 801e362:	4603      	mov	r3, r0
 801e364:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801e366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d016      	beq.n	801e39c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e376:	b29a      	uxth	r2, r3
 801e378:	687b      	ldr	r3, [r7, #4]
 801e37a:	845a      	strh	r2, [r3, #34]	; 0x22
      return err;
 801e37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e380:	e0d3      	b.n	801e52a <tcp_output+0x3de>
 801e382:	bf00      	nop
 801e384:	08027184 	.word	0x08027184
 801e388:	08027700 	.word	0x08027700
 801e38c:	08027210 	.word	0x08027210
 801e390:	08027718 	.word	0x08027718
 801e394:	20023928 	.word	0x20023928
 801e398:	08027740 	.word	0x08027740
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e39e:	681a      	ldr	r2, [r3, #0]
 801e3a0:	687b      	ldr	r3, [r7, #4]
 801e3a2:	675a      	str	r2, [r3, #116]	; 0x74
    if (pcb->state != SYN_SENT) {
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	7f1b      	ldrb	r3, [r3, #28]
 801e3a8:	2b02      	cmp	r3, #2
 801e3aa:	d006      	beq.n	801e3ba <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e3b0:	f023 0303 	bic.w	r3, r3, #3
 801e3b4:	b29a      	uxth	r2, r3
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	845a      	strh	r2, [r3, #34]	; 0x22
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3bc:	68db      	ldr	r3, [r3, #12]
 801e3be:	685b      	ldr	r3, [r3, #4]
 801e3c0:	4618      	mov	r0, r3
 801e3c2:	f7f6 f944 	bl	801464e <lwip_htonl>
 801e3c6:	4604      	mov	r4, r0
 801e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3ca:	891b      	ldrh	r3, [r3, #8]
 801e3cc:	461d      	mov	r5, r3
 801e3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3d0:	68db      	ldr	r3, [r3, #12]
 801e3d2:	899b      	ldrh	r3, [r3, #12]
 801e3d4:	b29b      	uxth	r3, r3
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	f7f6 f924 	bl	8014624 <lwip_htons>
 801e3dc:	4603      	mov	r3, r0
 801e3de:	b2db      	uxtb	r3, r3
 801e3e0:	f003 0303 	and.w	r3, r3, #3
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d001      	beq.n	801e3ec <tcp_output+0x2a0>
 801e3e8:	2301      	movs	r3, #1
 801e3ea:	e000      	b.n	801e3ee <tcp_output+0x2a2>
 801e3ec:	2300      	movs	r3, #0
 801e3ee:	442b      	add	r3, r5
 801e3f0:	4423      	add	r3, r4
 801e3f2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e3f4:	687b      	ldr	r3, [r7, #4]
 801e3f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801e3f8:	68bb      	ldr	r3, [r7, #8]
 801e3fa:	1ad3      	subs	r3, r2, r3
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	da02      	bge.n	801e406 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801e400:	687b      	ldr	r3, [r7, #4]
 801e402:	68ba      	ldr	r2, [r7, #8]
 801e404:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801e406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e408:	891b      	ldrh	r3, [r3, #8]
 801e40a:	461c      	mov	r4, r3
 801e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e40e:	68db      	ldr	r3, [r3, #12]
 801e410:	899b      	ldrh	r3, [r3, #12]
 801e412:	b29b      	uxth	r3, r3
 801e414:	4618      	mov	r0, r3
 801e416:	f7f6 f905 	bl	8014624 <lwip_htons>
 801e41a:	4603      	mov	r3, r0
 801e41c:	b2db      	uxtb	r3, r3
 801e41e:	f003 0303 	and.w	r3, r3, #3
 801e422:	2b00      	cmp	r3, #0
 801e424:	d001      	beq.n	801e42a <tcp_output+0x2de>
 801e426:	2301      	movs	r3, #1
 801e428:	e000      	b.n	801e42c <tcp_output+0x2e0>
 801e42a:	2300      	movs	r3, #0
 801e42c:	4423      	add	r3, r4
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d049      	beq.n	801e4c6 <tcp_output+0x37a>
      seg->next = NULL;
 801e432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e434:	2200      	movs	r2, #0
 801e436:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d105      	bne.n	801e44c <tcp_output+0x300>
        pcb->unacked = seg;
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e444:	679a      	str	r2, [r3, #120]	; 0x78
        useg = seg;
 801e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e448:	623b      	str	r3, [r7, #32]
 801e44a:	e03f      	b.n	801e4cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e44e:	68db      	ldr	r3, [r3, #12]
 801e450:	685b      	ldr	r3, [r3, #4]
 801e452:	4618      	mov	r0, r3
 801e454:	f7f6 f8fb 	bl	801464e <lwip_htonl>
 801e458:	4604      	mov	r4, r0
 801e45a:	6a3b      	ldr	r3, [r7, #32]
 801e45c:	68db      	ldr	r3, [r3, #12]
 801e45e:	685b      	ldr	r3, [r3, #4]
 801e460:	4618      	mov	r0, r3
 801e462:	f7f6 f8f4 	bl	801464e <lwip_htonl>
 801e466:	4603      	mov	r3, r0
 801e468:	1ae3      	subs	r3, r4, r3
 801e46a:	2b00      	cmp	r3, #0
 801e46c:	da24      	bge.n	801e4b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e46e:	687b      	ldr	r3, [r7, #4]
 801e470:	3378      	adds	r3, #120	; 0x78
 801e472:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e474:	e002      	b.n	801e47c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801e476:	69fb      	ldr	r3, [r7, #28]
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e47c:	69fb      	ldr	r3, [r7, #28]
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	2b00      	cmp	r3, #0
 801e482:	d011      	beq.n	801e4a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e484:	69fb      	ldr	r3, [r7, #28]
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	68db      	ldr	r3, [r3, #12]
 801e48a:	685b      	ldr	r3, [r3, #4]
 801e48c:	4618      	mov	r0, r3
 801e48e:	f7f6 f8de 	bl	801464e <lwip_htonl>
 801e492:	4604      	mov	r4, r0
 801e494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e496:	68db      	ldr	r3, [r3, #12]
 801e498:	685b      	ldr	r3, [r3, #4]
 801e49a:	4618      	mov	r0, r3
 801e49c:	f7f6 f8d7 	bl	801464e <lwip_htonl>
 801e4a0:	4603      	mov	r3, r0
 801e4a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801e4a4:	2b00      	cmp	r3, #0
 801e4a6:	dbe6      	blt.n	801e476 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801e4a8:	69fb      	ldr	r3, [r7, #28]
 801e4aa:	681a      	ldr	r2, [r3, #0]
 801e4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801e4b0:	69fb      	ldr	r3, [r7, #28]
 801e4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e4b4:	601a      	str	r2, [r3, #0]
 801e4b6:	e009      	b.n	801e4cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801e4b8:	6a3b      	ldr	r3, [r7, #32]
 801e4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e4bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801e4be:	6a3b      	ldr	r3, [r7, #32]
 801e4c0:	681b      	ldr	r3, [r3, #0]
 801e4c2:	623b      	str	r3, [r7, #32]
 801e4c4:	e002      	b.n	801e4cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801e4c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e4c8:	f7fb fe5b 	bl	801a182 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e4d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801e4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d012      	beq.n	801e4fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e4da:	68db      	ldr	r3, [r3, #12]
 801e4dc:	685b      	ldr	r3, [r3, #4]
 801e4de:	4618      	mov	r0, r3
 801e4e0:	f7f6 f8b5 	bl	801464e <lwip_htonl>
 801e4e4:	4602      	mov	r2, r0
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801e4ea:	1ad3      	subs	r3, r2, r3
 801e4ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e4ee:	8912      	ldrh	r2, [r2, #8]
 801e4f0:	4413      	add	r3, r2
  while (seg != NULL &&
 801e4f2:	69ba      	ldr	r2, [r7, #24]
 801e4f4:	429a      	cmp	r2, r3
 801e4f6:	f4bf aed9 	bcs.w	801e2ac <tcp_output+0x160>
 801e4fa:	e000      	b.n	801e4fe <tcp_output+0x3b2>
      break;
 801e4fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e502:	2b00      	cmp	r3, #0
 801e504:	d108      	bne.n	801e518 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e506:	687b      	ldr	r3, [r7, #4]
 801e508:	2200      	movs	r2, #0
 801e50a:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 801e50e:	e004      	b.n	801e51a <tcp_output+0x3ce>
    goto output_done;
 801e510:	bf00      	nop
 801e512:	e002      	b.n	801e51a <tcp_output+0x3ce>
    goto output_done;
 801e514:	bf00      	nop
 801e516:	e000      	b.n	801e51a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801e518:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e51e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e522:	b29a      	uxth	r2, r3
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	845a      	strh	r2, [r3, #34]	; 0x22
  return ERR_OK;
 801e528:	2300      	movs	r3, #0
}
 801e52a:	4618      	mov	r0, r3
 801e52c:	3728      	adds	r7, #40	; 0x28
 801e52e:	46bd      	mov	sp, r7
 801e530:	bdb0      	pop	{r4, r5, r7, pc}
 801e532:	bf00      	nop

0801e534 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801e534:	b580      	push	{r7, lr}
 801e536:	b082      	sub	sp, #8
 801e538:	af00      	add	r7, sp, #0
 801e53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d106      	bne.n	801e550 <tcp_output_segment_busy+0x1c>
 801e542:	4b09      	ldr	r3, [pc, #36]	; (801e568 <tcp_output_segment_busy+0x34>)
 801e544:	f240 529a 	movw	r2, #1434	; 0x59a
 801e548:	4908      	ldr	r1, [pc, #32]	; (801e56c <tcp_output_segment_busy+0x38>)
 801e54a:	4809      	ldr	r0, [pc, #36]	; (801e570 <tcp_output_segment_busy+0x3c>)
 801e54c:	f004 fbf0 	bl	8022d30 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	685b      	ldr	r3, [r3, #4]
 801e554:	7b9b      	ldrb	r3, [r3, #14]
 801e556:	2b01      	cmp	r3, #1
 801e558:	d001      	beq.n	801e55e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801e55a:	2301      	movs	r3, #1
 801e55c:	e000      	b.n	801e560 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801e55e:	2300      	movs	r3, #0
}
 801e560:	4618      	mov	r0, r3
 801e562:	3708      	adds	r7, #8
 801e564:	46bd      	mov	sp, r7
 801e566:	bd80      	pop	{r7, pc}
 801e568:	08027184 	.word	0x08027184
 801e56c:	08027758 	.word	0x08027758
 801e570:	08027210 	.word	0x08027210

0801e574 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801e574:	b5b0      	push	{r4, r5, r7, lr}
 801e576:	b08c      	sub	sp, #48	; 0x30
 801e578:	af04      	add	r7, sp, #16
 801e57a:	60f8      	str	r0, [r7, #12]
 801e57c:	60b9      	str	r1, [r7, #8]
 801e57e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	2b00      	cmp	r3, #0
 801e584:	d106      	bne.n	801e594 <tcp_output_segment+0x20>
 801e586:	4b64      	ldr	r3, [pc, #400]	; (801e718 <tcp_output_segment+0x1a4>)
 801e588:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801e58c:	4963      	ldr	r1, [pc, #396]	; (801e71c <tcp_output_segment+0x1a8>)
 801e58e:	4864      	ldr	r0, [pc, #400]	; (801e720 <tcp_output_segment+0x1ac>)
 801e590:	f004 fbce 	bl	8022d30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801e594:	68bb      	ldr	r3, [r7, #8]
 801e596:	2b00      	cmp	r3, #0
 801e598:	d106      	bne.n	801e5a8 <tcp_output_segment+0x34>
 801e59a:	4b5f      	ldr	r3, [pc, #380]	; (801e718 <tcp_output_segment+0x1a4>)
 801e59c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801e5a0:	4960      	ldr	r1, [pc, #384]	; (801e724 <tcp_output_segment+0x1b0>)
 801e5a2:	485f      	ldr	r0, [pc, #380]	; (801e720 <tcp_output_segment+0x1ac>)
 801e5a4:	f004 fbc4 	bl	8022d30 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d106      	bne.n	801e5bc <tcp_output_segment+0x48>
 801e5ae:	4b5a      	ldr	r3, [pc, #360]	; (801e718 <tcp_output_segment+0x1a4>)
 801e5b0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801e5b4:	495c      	ldr	r1, [pc, #368]	; (801e728 <tcp_output_segment+0x1b4>)
 801e5b6:	485a      	ldr	r0, [pc, #360]	; (801e720 <tcp_output_segment+0x1ac>)
 801e5b8:	f004 fbba 	bl	8022d30 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801e5bc:	68f8      	ldr	r0, [r7, #12]
 801e5be:	f7ff ffb9 	bl	801e534 <tcp_output_segment_busy>
 801e5c2:	4603      	mov	r3, r0
 801e5c4:	2b00      	cmp	r3, #0
 801e5c6:	d001      	beq.n	801e5cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801e5c8:	2300      	movs	r3, #0
 801e5ca:	e0a1      	b.n	801e710 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e5cc:	68bb      	ldr	r3, [r7, #8]
 801e5ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	68dc      	ldr	r4, [r3, #12]
 801e5d4:	4610      	mov	r0, r2
 801e5d6:	f7f6 f83a 	bl	801464e <lwip_htonl>
 801e5da:	4603      	mov	r3, r0
 801e5dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e5de:	68bb      	ldr	r3, [r7, #8]
 801e5e0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801e5e2:	68fb      	ldr	r3, [r7, #12]
 801e5e4:	68dc      	ldr	r4, [r3, #12]
 801e5e6:	4610      	mov	r0, r2
 801e5e8:	f7f6 f81c 	bl	8014624 <lwip_htons>
 801e5ec:	4603      	mov	r3, r0
 801e5ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e5f0:	68bb      	ldr	r3, [r7, #8]
 801e5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e5f4:	68ba      	ldr	r2, [r7, #8]
 801e5f6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801e5f8:	441a      	add	r2, r3
 801e5fa:	68bb      	ldr	r3, [r7, #8]
 801e5fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e5fe:	68fb      	ldr	r3, [r7, #12]
 801e600:	68db      	ldr	r3, [r3, #12]
 801e602:	3314      	adds	r3, #20
 801e604:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e606:	68fb      	ldr	r3, [r7, #12]
 801e608:	7a9b      	ldrb	r3, [r3, #10]
 801e60a:	f003 0301 	and.w	r3, r3, #1
 801e60e:	2b00      	cmp	r3, #0
 801e610:	d015      	beq.n	801e63e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e612:	68bb      	ldr	r3, [r7, #8]
 801e614:	3304      	adds	r3, #4
 801e616:	461a      	mov	r2, r3
 801e618:	6879      	ldr	r1, [r7, #4]
 801e61a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801e61e:	f7fc f985 	bl	801a92c <tcp_eff_send_mss_netif>
 801e622:	4603      	mov	r3, r0
 801e624:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e626:	8b7b      	ldrh	r3, [r7, #26]
 801e628:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801e62c:	4618      	mov	r0, r3
 801e62e:	f7f6 f80e 	bl	801464e <lwip_htonl>
 801e632:	4602      	mov	r2, r0
 801e634:	69fb      	ldr	r3, [r7, #28]
 801e636:	601a      	str	r2, [r3, #0]
    opts += 1;
 801e638:	69fb      	ldr	r3, [r7, #28]
 801e63a:	3304      	adds	r3, #4
 801e63c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801e63e:	68bb      	ldr	r3, [r7, #8]
 801e640:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 801e644:	2b00      	cmp	r3, #0
 801e646:	da02      	bge.n	801e64e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801e648:	68bb      	ldr	r3, [r7, #8]
 801e64a:	2200      	movs	r2, #0
 801e64c:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  if (pcb->rttest == 0) {
 801e64e:	68bb      	ldr	r3, [r7, #8]
 801e650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e652:	2b00      	cmp	r3, #0
 801e654:	d10c      	bne.n	801e670 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801e656:	4b35      	ldr	r3, [pc, #212]	; (801e72c <tcp_output_segment+0x1b8>)
 801e658:	681a      	ldr	r2, [r3, #0]
 801e65a:	68bb      	ldr	r3, [r7, #8]
 801e65c:	63da      	str	r2, [r3, #60]	; 0x3c
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e65e:	68fb      	ldr	r3, [r7, #12]
 801e660:	68db      	ldr	r3, [r3, #12]
 801e662:	685b      	ldr	r3, [r3, #4]
 801e664:	4618      	mov	r0, r3
 801e666:	f7f5 fff2 	bl	801464e <lwip_htonl>
 801e66a:	4602      	mov	r2, r0
 801e66c:	68bb      	ldr	r3, [r7, #8]
 801e66e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e670:	68fb      	ldr	r3, [r7, #12]
 801e672:	68da      	ldr	r2, [r3, #12]
 801e674:	68fb      	ldr	r3, [r7, #12]
 801e676:	685b      	ldr	r3, [r3, #4]
 801e678:	685b      	ldr	r3, [r3, #4]
 801e67a:	1ad3      	subs	r3, r2, r3
 801e67c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	685b      	ldr	r3, [r3, #4]
 801e682:	8959      	ldrh	r1, [r3, #10]
 801e684:	68fb      	ldr	r3, [r7, #12]
 801e686:	685b      	ldr	r3, [r3, #4]
 801e688:	8b3a      	ldrh	r2, [r7, #24]
 801e68a:	1a8a      	subs	r2, r1, r2
 801e68c:	b292      	uxth	r2, r2
 801e68e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801e690:	68fb      	ldr	r3, [r7, #12]
 801e692:	685b      	ldr	r3, [r3, #4]
 801e694:	8919      	ldrh	r1, [r3, #8]
 801e696:	68fb      	ldr	r3, [r7, #12]
 801e698:	685b      	ldr	r3, [r3, #4]
 801e69a:	8b3a      	ldrh	r2, [r7, #24]
 801e69c:	1a8a      	subs	r2, r1, r2
 801e69e:	b292      	uxth	r2, r2
 801e6a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801e6a2:	68fb      	ldr	r3, [r7, #12]
 801e6a4:	685b      	ldr	r3, [r3, #4]
 801e6a6:	68fa      	ldr	r2, [r7, #12]
 801e6a8:	68d2      	ldr	r2, [r2, #12]
 801e6aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801e6ac:	68fb      	ldr	r3, [r7, #12]
 801e6ae:	68db      	ldr	r3, [r3, #12]
 801e6b0:	2200      	movs	r2, #0
 801e6b2:	741a      	strb	r2, [r3, #16]
 801e6b4:	2200      	movs	r2, #0
 801e6b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e6b8:	68fb      	ldr	r3, [r7, #12]
 801e6ba:	68da      	ldr	r2, [r3, #12]
 801e6bc:	68fb      	ldr	r3, [r7, #12]
 801e6be:	7a9b      	ldrb	r3, [r3, #10]
 801e6c0:	f003 0301 	and.w	r3, r3, #1
 801e6c4:	2b00      	cmp	r3, #0
 801e6c6:	d001      	beq.n	801e6cc <tcp_output_segment+0x158>
 801e6c8:	2318      	movs	r3, #24
 801e6ca:	e000      	b.n	801e6ce <tcp_output_segment+0x15a>
 801e6cc:	2314      	movs	r3, #20
 801e6ce:	4413      	add	r3, r2
 801e6d0:	69fa      	ldr	r2, [r7, #28]
 801e6d2:	429a      	cmp	r2, r3
 801e6d4:	d006      	beq.n	801e6e4 <tcp_output_segment+0x170>
 801e6d6:	4b10      	ldr	r3, [pc, #64]	; (801e718 <tcp_output_segment+0x1a4>)
 801e6d8:	f240 621c 	movw	r2, #1564	; 0x61c
 801e6dc:	4914      	ldr	r1, [pc, #80]	; (801e730 <tcp_output_segment+0x1bc>)
 801e6de:	4810      	ldr	r0, [pc, #64]	; (801e720 <tcp_output_segment+0x1ac>)
 801e6e0:	f004 fb26 	bl	8022d30 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e6e4:	68fb      	ldr	r3, [r7, #12]
 801e6e6:	6858      	ldr	r0, [r3, #4]
 801e6e8:	68b9      	ldr	r1, [r7, #8]
 801e6ea:	68bb      	ldr	r3, [r7, #8]
 801e6ec:	1d1c      	adds	r4, r3, #4
 801e6ee:	68bb      	ldr	r3, [r7, #8]
 801e6f0:	7add      	ldrb	r5, [r3, #11]
 801e6f2:	68bb      	ldr	r3, [r7, #8]
 801e6f4:	7a9b      	ldrb	r3, [r3, #10]
 801e6f6:	687a      	ldr	r2, [r7, #4]
 801e6f8:	9202      	str	r2, [sp, #8]
 801e6fa:	2206      	movs	r2, #6
 801e6fc:	9201      	str	r2, [sp, #4]
 801e6fe:	9300      	str	r3, [sp, #0]
 801e700:	462b      	mov	r3, r5
 801e702:	4622      	mov	r2, r4
 801e704:	f7f7 fb42 	bl	8015d8c <ip4_output_if>
 801e708:	4603      	mov	r3, r0
 801e70a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801e70c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e710:	4618      	mov	r0, r3
 801e712:	3720      	adds	r7, #32
 801e714:	46bd      	mov	sp, r7
 801e716:	bdb0      	pop	{r4, r5, r7, pc}
 801e718:	08027184 	.word	0x08027184
 801e71c:	08027780 	.word	0x08027780
 801e720:	08027210 	.word	0x08027210
 801e724:	080277a0 	.word	0x080277a0
 801e728:	080277c0 	.word	0x080277c0
 801e72c:	200238dc 	.word	0x200238dc
 801e730:	080277e4 	.word	0x080277e4

0801e734 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801e734:	b5b0      	push	{r4, r5, r7, lr}
 801e736:	b084      	sub	sp, #16
 801e738:	af00      	add	r7, sp, #0
 801e73a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	2b00      	cmp	r3, #0
 801e740:	d106      	bne.n	801e750 <tcp_rexmit_rto_prepare+0x1c>
 801e742:	4b31      	ldr	r3, [pc, #196]	; (801e808 <tcp_rexmit_rto_prepare+0xd4>)
 801e744:	f240 6263 	movw	r2, #1635	; 0x663
 801e748:	4930      	ldr	r1, [pc, #192]	; (801e80c <tcp_rexmit_rto_prepare+0xd8>)
 801e74a:	4831      	ldr	r0, [pc, #196]	; (801e810 <tcp_rexmit_rto_prepare+0xdc>)
 801e74c:	f004 faf0 	bl	8022d30 <iprintf>

  if (pcb->unacked == NULL) {
 801e750:	687b      	ldr	r3, [r7, #4]
 801e752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e754:	2b00      	cmp	r3, #0
 801e756:	d102      	bne.n	801e75e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801e758:	f06f 0305 	mvn.w	r3, #5
 801e75c:	e050      	b.n	801e800 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e762:	60fb      	str	r3, [r7, #12]
 801e764:	e00b      	b.n	801e77e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801e766:	68f8      	ldr	r0, [r7, #12]
 801e768:	f7ff fee4 	bl	801e534 <tcp_output_segment_busy>
 801e76c:	4603      	mov	r3, r0
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d002      	beq.n	801e778 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801e772:	f06f 0305 	mvn.w	r3, #5
 801e776:	e043      	b.n	801e800 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	681b      	ldr	r3, [r3, #0]
 801e77c:	60fb      	str	r3, [r7, #12]
 801e77e:	68fb      	ldr	r3, [r7, #12]
 801e780:	681b      	ldr	r3, [r3, #0]
 801e782:	2b00      	cmp	r3, #0
 801e784:	d1ef      	bne.n	801e766 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801e786:	68f8      	ldr	r0, [r7, #12]
 801e788:	f7ff fed4 	bl	801e534 <tcp_output_segment_busy>
 801e78c:	4603      	mov	r3, r0
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d002      	beq.n	801e798 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801e792:	f06f 0305 	mvn.w	r3, #5
 801e796:	e033      	b.n	801e800 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801e79c:	68fb      	ldr	r3, [r7, #12]
 801e79e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801e7a4:	687b      	ldr	r3, [r7, #4]
 801e7a6:	675a      	str	r2, [r3, #116]	; 0x74
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	2200      	movs	r2, #0
 801e7ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e7b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801e7b6:	b29a      	uxth	r2, r3
 801e7b8:	687b      	ldr	r3, [r7, #4]
 801e7ba:	845a      	strh	r2, [r3, #34]	; 0x22
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e7bc:	68fb      	ldr	r3, [r7, #12]
 801e7be:	68db      	ldr	r3, [r3, #12]
 801e7c0:	685b      	ldr	r3, [r3, #4]
 801e7c2:	4618      	mov	r0, r3
 801e7c4:	f7f5 ff43 	bl	801464e <lwip_htonl>
 801e7c8:	4604      	mov	r4, r0
 801e7ca:	68fb      	ldr	r3, [r7, #12]
 801e7cc:	891b      	ldrh	r3, [r3, #8]
 801e7ce:	461d      	mov	r5, r3
 801e7d0:	68fb      	ldr	r3, [r7, #12]
 801e7d2:	68db      	ldr	r3, [r3, #12]
 801e7d4:	899b      	ldrh	r3, [r3, #12]
 801e7d6:	b29b      	uxth	r3, r3
 801e7d8:	4618      	mov	r0, r3
 801e7da:	f7f5 ff23 	bl	8014624 <lwip_htons>
 801e7de:	4603      	mov	r3, r0
 801e7e0:	b2db      	uxtb	r3, r3
 801e7e2:	f003 0303 	and.w	r3, r3, #3
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d001      	beq.n	801e7ee <tcp_rexmit_rto_prepare+0xba>
 801e7ea:	2301      	movs	r3, #1
 801e7ec:	e000      	b.n	801e7f0 <tcp_rexmit_rto_prepare+0xbc>
 801e7ee:	2300      	movs	r3, #0
 801e7f0:	442b      	add	r3, r5
 801e7f2:	18e2      	adds	r2, r4, r3
 801e7f4:	687b      	ldr	r3, [r7, #4]
 801e7f6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	63da      	str	r2, [r3, #60]	; 0x3c

  return ERR_OK;
 801e7fe:	2300      	movs	r3, #0
}
 801e800:	4618      	mov	r0, r3
 801e802:	3710      	adds	r7, #16
 801e804:	46bd      	mov	sp, r7
 801e806:	bdb0      	pop	{r4, r5, r7, pc}
 801e808:	08027184 	.word	0x08027184
 801e80c:	080277f8 	.word	0x080277f8
 801e810:	08027210 	.word	0x08027210

0801e814 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801e814:	b580      	push	{r7, lr}
 801e816:	b082      	sub	sp, #8
 801e818:	af00      	add	r7, sp, #0
 801e81a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e81c:	687b      	ldr	r3, [r7, #4]
 801e81e:	2b00      	cmp	r3, #0
 801e820:	d106      	bne.n	801e830 <tcp_rexmit_rto_commit+0x1c>
 801e822:	4b0d      	ldr	r3, [pc, #52]	; (801e858 <tcp_rexmit_rto_commit+0x44>)
 801e824:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e828:	490c      	ldr	r1, [pc, #48]	; (801e85c <tcp_rexmit_rto_commit+0x48>)
 801e82a:	480d      	ldr	r0, [pc, #52]	; (801e860 <tcp_rexmit_rto_commit+0x4c>)
 801e82c:	f004 fa80 	bl	8022d30 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801e836:	2bff      	cmp	r3, #255	; 0xff
 801e838:	d007      	beq.n	801e84a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801e840:	3301      	adds	r3, #1
 801e842:	b2da      	uxtb	r2, r3
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801e84a:	6878      	ldr	r0, [r7, #4]
 801e84c:	f7ff fc7e 	bl	801e14c <tcp_output>
}
 801e850:	bf00      	nop
 801e852:	3708      	adds	r7, #8
 801e854:	46bd      	mov	sp, r7
 801e856:	bd80      	pop	{r7, pc}
 801e858:	08027184 	.word	0x08027184
 801e85c:	0802781c 	.word	0x0802781c
 801e860:	08027210 	.word	0x08027210

0801e864 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801e864:	b580      	push	{r7, lr}
 801e866:	b082      	sub	sp, #8
 801e868:	af00      	add	r7, sp, #0
 801e86a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d106      	bne.n	801e880 <tcp_rexmit_rto+0x1c>
 801e872:	4b0a      	ldr	r3, [pc, #40]	; (801e89c <tcp_rexmit_rto+0x38>)
 801e874:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801e878:	4909      	ldr	r1, [pc, #36]	; (801e8a0 <tcp_rexmit_rto+0x3c>)
 801e87a:	480a      	ldr	r0, [pc, #40]	; (801e8a4 <tcp_rexmit_rto+0x40>)
 801e87c:	f004 fa58 	bl	8022d30 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801e880:	6878      	ldr	r0, [r7, #4]
 801e882:	f7ff ff57 	bl	801e734 <tcp_rexmit_rto_prepare>
 801e886:	4603      	mov	r3, r0
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d102      	bne.n	801e892 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801e88c:	6878      	ldr	r0, [r7, #4]
 801e88e:	f7ff ffc1 	bl	801e814 <tcp_rexmit_rto_commit>
  }
}
 801e892:	bf00      	nop
 801e894:	3708      	adds	r7, #8
 801e896:	46bd      	mov	sp, r7
 801e898:	bd80      	pop	{r7, pc}
 801e89a:	bf00      	nop
 801e89c:	08027184 	.word	0x08027184
 801e8a0:	08027840 	.word	0x08027840
 801e8a4:	08027210 	.word	0x08027210

0801e8a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801e8a8:	b590      	push	{r4, r7, lr}
 801e8aa:	b085      	sub	sp, #20
 801e8ac:	af00      	add	r7, sp, #0
 801e8ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801e8b0:	687b      	ldr	r3, [r7, #4]
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	d106      	bne.n	801e8c4 <tcp_rexmit+0x1c>
 801e8b6:	4b2f      	ldr	r3, [pc, #188]	; (801e974 <tcp_rexmit+0xcc>)
 801e8b8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801e8bc:	492e      	ldr	r1, [pc, #184]	; (801e978 <tcp_rexmit+0xd0>)
 801e8be:	482f      	ldr	r0, [pc, #188]	; (801e97c <tcp_rexmit+0xd4>)
 801e8c0:	f004 fa36 	bl	8022d30 <iprintf>

  if (pcb->unacked == NULL) {
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d102      	bne.n	801e8d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801e8cc:	f06f 0305 	mvn.w	r3, #5
 801e8d0:	e04c      	b.n	801e96c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e8d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801e8d8:	68b8      	ldr	r0, [r7, #8]
 801e8da:	f7ff fe2b 	bl	801e534 <tcp_output_segment_busy>
 801e8de:	4603      	mov	r3, r0
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d002      	beq.n	801e8ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801e8e4:	f06f 0305 	mvn.w	r3, #5
 801e8e8:	e040      	b.n	801e96c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801e8ea:	68bb      	ldr	r3, [r7, #8]
 801e8ec:	681a      	ldr	r2, [r3, #0]
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	679a      	str	r2, [r3, #120]	; 0x78

  cur_seg = &(pcb->unsent);
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	3374      	adds	r3, #116	; 0x74
 801e8f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e8f8:	e002      	b.n	801e900 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801e8fa:	68fb      	ldr	r3, [r7, #12]
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801e900:	68fb      	ldr	r3, [r7, #12]
 801e902:	681b      	ldr	r3, [r3, #0]
 801e904:	2b00      	cmp	r3, #0
 801e906:	d011      	beq.n	801e92c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	681b      	ldr	r3, [r3, #0]
 801e90c:	68db      	ldr	r3, [r3, #12]
 801e90e:	685b      	ldr	r3, [r3, #4]
 801e910:	4618      	mov	r0, r3
 801e912:	f7f5 fe9c 	bl	801464e <lwip_htonl>
 801e916:	4604      	mov	r4, r0
 801e918:	68bb      	ldr	r3, [r7, #8]
 801e91a:	68db      	ldr	r3, [r3, #12]
 801e91c:	685b      	ldr	r3, [r3, #4]
 801e91e:	4618      	mov	r0, r3
 801e920:	f7f5 fe95 	bl	801464e <lwip_htonl>
 801e924:	4603      	mov	r3, r0
 801e926:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801e928:	2b00      	cmp	r3, #0
 801e92a:	dbe6      	blt.n	801e8fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801e92c:	68fb      	ldr	r3, [r7, #12]
 801e92e:	681a      	ldr	r2, [r3, #0]
 801e930:	68bb      	ldr	r3, [r7, #8]
 801e932:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801e934:	68fb      	ldr	r3, [r7, #12]
 801e936:	68ba      	ldr	r2, [r7, #8]
 801e938:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801e93a:	68bb      	ldr	r3, [r7, #8]
 801e93c:	681b      	ldr	r3, [r3, #0]
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d103      	bne.n	801e94a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	2200      	movs	r2, #0
 801e946:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801e950:	2bff      	cmp	r3, #255	; 0xff
 801e952:	d007      	beq.n	801e964 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 801e95a:	3301      	adds	r3, #1
 801e95c:	b2da      	uxtb	r2, r3
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	2200      	movs	r2, #0
 801e968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801e96a:	2300      	movs	r3, #0
}
 801e96c:	4618      	mov	r0, r3
 801e96e:	3714      	adds	r7, #20
 801e970:	46bd      	mov	sp, r7
 801e972:	bd90      	pop	{r4, r7, pc}
 801e974:	08027184 	.word	0x08027184
 801e978:	0802785c 	.word	0x0802785c
 801e97c:	08027210 	.word	0x08027210

0801e980 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801e980:	b580      	push	{r7, lr}
 801e982:	b082      	sub	sp, #8
 801e984:	af00      	add	r7, sp, #0
 801e986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	2b00      	cmp	r3, #0
 801e98c:	d106      	bne.n	801e99c <tcp_rexmit_fast+0x1c>
 801e98e:	4b2a      	ldr	r3, [pc, #168]	; (801ea38 <tcp_rexmit_fast+0xb8>)
 801e990:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801e994:	4929      	ldr	r1, [pc, #164]	; (801ea3c <tcp_rexmit_fast+0xbc>)
 801e996:	482a      	ldr	r0, [pc, #168]	; (801ea40 <tcp_rexmit_fast+0xc0>)
 801e998:	f004 f9ca 	bl	8022d30 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801e9a0:	2b00      	cmp	r3, #0
 801e9a2:	d045      	beq.n	801ea30 <tcp_rexmit_fast+0xb0>
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801e9a8:	f003 0304 	and.w	r3, r3, #4
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	d13f      	bne.n	801ea30 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801e9b0:	6878      	ldr	r0, [r7, #4]
 801e9b2:	f7ff ff79 	bl	801e8a8 <tcp_rexmit>
 801e9b6:	4603      	mov	r3, r0
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d139      	bne.n	801ea30 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801e9c8:	4293      	cmp	r3, r2
 801e9ca:	bf28      	it	cs
 801e9cc:	4613      	movcs	r3, r2
 801e9ce:	b29b      	uxth	r3, r3
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	da00      	bge.n	801e9d6 <tcp_rexmit_fast+0x56>
 801e9d4:	3301      	adds	r3, #1
 801e9d6:	105b      	asrs	r3, r3, #1
 801e9d8:	b29a      	uxth	r2, r3
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801e9e6:	461a      	mov	r2, r3
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801e9ec:	005b      	lsls	r3, r3, #1
 801e9ee:	429a      	cmp	r2, r3
 801e9f0:	d206      	bcs.n	801ea00 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801e9f2:	687b      	ldr	r3, [r7, #4]
 801e9f4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801e9f6:	005b      	lsls	r3, r3, #1
 801e9f8:	b29a      	uxth	r2, r3
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801ea0a:	4619      	mov	r1, r3
 801ea0c:	0049      	lsls	r1, r1, #1
 801ea0e:	440b      	add	r3, r1
 801ea10:	b29b      	uxth	r3, r3
 801ea12:	4413      	add	r3, r2
 801ea14:	b29a      	uxth	r2, r3
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
      tcp_set_flags(pcb, TF_INFR);
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801ea20:	f043 0304 	orr.w	r3, r3, #4
 801ea24:	b29a      	uxth	r2, r3
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	845a      	strh	r2, [r3, #34]	; 0x22

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	2200      	movs	r2, #0
 801ea2e:	871a      	strh	r2, [r3, #56]	; 0x38
    }
  }
}
 801ea30:	bf00      	nop
 801ea32:	3708      	adds	r7, #8
 801ea34:	46bd      	mov	sp, r7
 801ea36:	bd80      	pop	{r7, pc}
 801ea38:	08027184 	.word	0x08027184
 801ea3c:	08027874 	.word	0x08027874
 801ea40:	08027210 	.word	0x08027210

0801ea44 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ea44:	b580      	push	{r7, lr}
 801ea46:	b086      	sub	sp, #24
 801ea48:	af00      	add	r7, sp, #0
 801ea4a:	60f8      	str	r0, [r7, #12]
 801ea4c:	607b      	str	r3, [r7, #4]
 801ea4e:	460b      	mov	r3, r1
 801ea50:	817b      	strh	r3, [r7, #10]
 801ea52:	4613      	mov	r3, r2
 801ea54:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ea56:	897a      	ldrh	r2, [r7, #10]
 801ea58:	893b      	ldrh	r3, [r7, #8]
 801ea5a:	4413      	add	r3, r2
 801ea5c:	b29b      	uxth	r3, r3
 801ea5e:	3314      	adds	r3, #20
 801ea60:	b29b      	uxth	r3, r3
 801ea62:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ea66:	4619      	mov	r1, r3
 801ea68:	2022      	movs	r0, #34	; 0x22
 801ea6a:	f7f9 f9ff 	bl	8017e6c <pbuf_alloc>
 801ea6e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ea70:	697b      	ldr	r3, [r7, #20]
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	d04d      	beq.n	801eb12 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ea76:	897b      	ldrh	r3, [r7, #10]
 801ea78:	3313      	adds	r3, #19
 801ea7a:	697a      	ldr	r2, [r7, #20]
 801ea7c:	8952      	ldrh	r2, [r2, #10]
 801ea7e:	4293      	cmp	r3, r2
 801ea80:	db06      	blt.n	801ea90 <tcp_output_alloc_header_common+0x4c>
 801ea82:	4b26      	ldr	r3, [pc, #152]	; (801eb1c <tcp_output_alloc_header_common+0xd8>)
 801ea84:	f240 7223 	movw	r2, #1827	; 0x723
 801ea88:	4925      	ldr	r1, [pc, #148]	; (801eb20 <tcp_output_alloc_header_common+0xdc>)
 801ea8a:	4826      	ldr	r0, [pc, #152]	; (801eb24 <tcp_output_alloc_header_common+0xe0>)
 801ea8c:	f004 f950 	bl	8022d30 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ea90:	697b      	ldr	r3, [r7, #20]
 801ea92:	685b      	ldr	r3, [r3, #4]
 801ea94:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ea96:	8c3b      	ldrh	r3, [r7, #32]
 801ea98:	4618      	mov	r0, r3
 801ea9a:	f7f5 fdc3 	bl	8014624 <lwip_htons>
 801ea9e:	4603      	mov	r3, r0
 801eaa0:	461a      	mov	r2, r3
 801eaa2:	693b      	ldr	r3, [r7, #16]
 801eaa4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801eaa6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801eaa8:	4618      	mov	r0, r3
 801eaaa:	f7f5 fdbb 	bl	8014624 <lwip_htons>
 801eaae:	4603      	mov	r3, r0
 801eab0:	461a      	mov	r2, r3
 801eab2:	693b      	ldr	r3, [r7, #16]
 801eab4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801eab6:	693b      	ldr	r3, [r7, #16]
 801eab8:	687a      	ldr	r2, [r7, #4]
 801eaba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801eabc:	68f8      	ldr	r0, [r7, #12]
 801eabe:	f7f5 fdc6 	bl	801464e <lwip_htonl>
 801eac2:	4602      	mov	r2, r0
 801eac4:	693b      	ldr	r3, [r7, #16]
 801eac6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801eac8:	897b      	ldrh	r3, [r7, #10]
 801eaca:	089b      	lsrs	r3, r3, #2
 801eacc:	b29b      	uxth	r3, r3
 801eace:	3305      	adds	r3, #5
 801ead0:	b29b      	uxth	r3, r3
 801ead2:	031b      	lsls	r3, r3, #12
 801ead4:	b29a      	uxth	r2, r3
 801ead6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801eada:	b29b      	uxth	r3, r3
 801eadc:	4313      	orrs	r3, r2
 801eade:	b29b      	uxth	r3, r3
 801eae0:	4618      	mov	r0, r3
 801eae2:	f7f5 fd9f 	bl	8014624 <lwip_htons>
 801eae6:	4603      	mov	r3, r0
 801eae8:	461a      	mov	r2, r3
 801eaea:	693b      	ldr	r3, [r7, #16]
 801eaec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801eaee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801eaf0:	4618      	mov	r0, r3
 801eaf2:	f7f5 fd97 	bl	8014624 <lwip_htons>
 801eaf6:	4603      	mov	r3, r0
 801eaf8:	461a      	mov	r2, r3
 801eafa:	693b      	ldr	r3, [r7, #16]
 801eafc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801eafe:	693b      	ldr	r3, [r7, #16]
 801eb00:	2200      	movs	r2, #0
 801eb02:	741a      	strb	r2, [r3, #16]
 801eb04:	2200      	movs	r2, #0
 801eb06:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801eb08:	693b      	ldr	r3, [r7, #16]
 801eb0a:	2200      	movs	r2, #0
 801eb0c:	749a      	strb	r2, [r3, #18]
 801eb0e:	2200      	movs	r2, #0
 801eb10:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801eb12:	697b      	ldr	r3, [r7, #20]
}
 801eb14:	4618      	mov	r0, r3
 801eb16:	3718      	adds	r7, #24
 801eb18:	46bd      	mov	sp, r7
 801eb1a:	bd80      	pop	{r7, pc}
 801eb1c:	08027184 	.word	0x08027184
 801eb20:	08027894 	.word	0x08027894
 801eb24:	08027210 	.word	0x08027210

0801eb28 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801eb28:	b5b0      	push	{r4, r5, r7, lr}
 801eb2a:	b08a      	sub	sp, #40	; 0x28
 801eb2c:	af04      	add	r7, sp, #16
 801eb2e:	60f8      	str	r0, [r7, #12]
 801eb30:	607b      	str	r3, [r7, #4]
 801eb32:	460b      	mov	r3, r1
 801eb34:	817b      	strh	r3, [r7, #10]
 801eb36:	4613      	mov	r3, r2
 801eb38:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801eb3a:	68fb      	ldr	r3, [r7, #12]
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d106      	bne.n	801eb4e <tcp_output_alloc_header+0x26>
 801eb40:	4b15      	ldr	r3, [pc, #84]	; (801eb98 <tcp_output_alloc_header+0x70>)
 801eb42:	f240 7242 	movw	r2, #1858	; 0x742
 801eb46:	4915      	ldr	r1, [pc, #84]	; (801eb9c <tcp_output_alloc_header+0x74>)
 801eb48:	4815      	ldr	r0, [pc, #84]	; (801eba0 <tcp_output_alloc_header+0x78>)
 801eb4a:	f004 f8f1 	bl	8022d30 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801eb52:	68fb      	ldr	r3, [r7, #12]
 801eb54:	8bdb      	ldrh	r3, [r3, #30]
 801eb56:	68fa      	ldr	r2, [r7, #12]
 801eb58:	8c12      	ldrh	r2, [r2, #32]
 801eb5a:	68f9      	ldr	r1, [r7, #12]
 801eb5c:	8e49      	ldrh	r1, [r1, #50]	; 0x32
 801eb5e:	893d      	ldrh	r5, [r7, #8]
 801eb60:	897c      	ldrh	r4, [r7, #10]
 801eb62:	9103      	str	r1, [sp, #12]
 801eb64:	2110      	movs	r1, #16
 801eb66:	9102      	str	r1, [sp, #8]
 801eb68:	9201      	str	r2, [sp, #4]
 801eb6a:	9300      	str	r3, [sp, #0]
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	462a      	mov	r2, r5
 801eb70:	4621      	mov	r1, r4
 801eb72:	f7ff ff67 	bl	801ea44 <tcp_output_alloc_header_common>
 801eb76:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801eb78:	697b      	ldr	r3, [r7, #20]
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d006      	beq.n	801eb8c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801eb7e:	68fb      	ldr	r3, [r7, #12]
 801eb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eb82:	68fa      	ldr	r2, [r7, #12]
 801eb84:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801eb86:	441a      	add	r2, r3
 801eb88:	68fb      	ldr	r3, [r7, #12]
 801eb8a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return p;
 801eb8c:	697b      	ldr	r3, [r7, #20]
}
 801eb8e:	4618      	mov	r0, r3
 801eb90:	3718      	adds	r7, #24
 801eb92:	46bd      	mov	sp, r7
 801eb94:	bdb0      	pop	{r4, r5, r7, pc}
 801eb96:	bf00      	nop
 801eb98:	08027184 	.word	0x08027184
 801eb9c:	080278c4 	.word	0x080278c4
 801eba0:	08027210 	.word	0x08027210

0801eba4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801eba4:	b580      	push	{r7, lr}
 801eba6:	b088      	sub	sp, #32
 801eba8:	af00      	add	r7, sp, #0
 801ebaa:	60f8      	str	r0, [r7, #12]
 801ebac:	60b9      	str	r1, [r7, #8]
 801ebae:	4611      	mov	r1, r2
 801ebb0:	461a      	mov	r2, r3
 801ebb2:	460b      	mov	r3, r1
 801ebb4:	71fb      	strb	r3, [r7, #7]
 801ebb6:	4613      	mov	r3, r2
 801ebb8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ebba:	2300      	movs	r3, #0
 801ebbc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801ebbe:	68bb      	ldr	r3, [r7, #8]
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d106      	bne.n	801ebd2 <tcp_output_fill_options+0x2e>
 801ebc4:	4b12      	ldr	r3, [pc, #72]	; (801ec10 <tcp_output_fill_options+0x6c>)
 801ebc6:	f240 7256 	movw	r2, #1878	; 0x756
 801ebca:	4912      	ldr	r1, [pc, #72]	; (801ec14 <tcp_output_fill_options+0x70>)
 801ebcc:	4812      	ldr	r0, [pc, #72]	; (801ec18 <tcp_output_fill_options+0x74>)
 801ebce:	f004 f8af 	bl	8022d30 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801ebd2:	68bb      	ldr	r3, [r7, #8]
 801ebd4:	685b      	ldr	r3, [r3, #4]
 801ebd6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801ebd8:	69bb      	ldr	r3, [r7, #24]
 801ebda:	3314      	adds	r3, #20
 801ebdc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801ebde:	8bfb      	ldrh	r3, [r7, #30]
 801ebe0:	009b      	lsls	r3, r3, #2
 801ebe2:	461a      	mov	r2, r3
 801ebe4:	79fb      	ldrb	r3, [r7, #7]
 801ebe6:	009b      	lsls	r3, r3, #2
 801ebe8:	f003 0304 	and.w	r3, r3, #4
 801ebec:	4413      	add	r3, r2
 801ebee:	3314      	adds	r3, #20
 801ebf0:	69ba      	ldr	r2, [r7, #24]
 801ebf2:	4413      	add	r3, r2
 801ebf4:	697a      	ldr	r2, [r7, #20]
 801ebf6:	429a      	cmp	r2, r3
 801ebf8:	d006      	beq.n	801ec08 <tcp_output_fill_options+0x64>
 801ebfa:	4b05      	ldr	r3, [pc, #20]	; (801ec10 <tcp_output_fill_options+0x6c>)
 801ebfc:	f240 7275 	movw	r2, #1909	; 0x775
 801ec00:	4906      	ldr	r1, [pc, #24]	; (801ec1c <tcp_output_fill_options+0x78>)
 801ec02:	4805      	ldr	r0, [pc, #20]	; (801ec18 <tcp_output_fill_options+0x74>)
 801ec04:	f004 f894 	bl	8022d30 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801ec08:	bf00      	nop
 801ec0a:	3720      	adds	r7, #32
 801ec0c:	46bd      	mov	sp, r7
 801ec0e:	bd80      	pop	{r7, pc}
 801ec10:	08027184 	.word	0x08027184
 801ec14:	080278ec 	.word	0x080278ec
 801ec18:	08027210 	.word	0x08027210
 801ec1c:	080277e4 	.word	0x080277e4

0801ec20 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801ec20:	b580      	push	{r7, lr}
 801ec22:	b08a      	sub	sp, #40	; 0x28
 801ec24:	af04      	add	r7, sp, #16
 801ec26:	60f8      	str	r0, [r7, #12]
 801ec28:	60b9      	str	r1, [r7, #8]
 801ec2a:	607a      	str	r2, [r7, #4]
 801ec2c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ec2e:	68bb      	ldr	r3, [r7, #8]
 801ec30:	2b00      	cmp	r3, #0
 801ec32:	d106      	bne.n	801ec42 <tcp_output_control_segment+0x22>
 801ec34:	4b1c      	ldr	r3, [pc, #112]	; (801eca8 <tcp_output_control_segment+0x88>)
 801ec36:	f240 7287 	movw	r2, #1927	; 0x787
 801ec3a:	491c      	ldr	r1, [pc, #112]	; (801ecac <tcp_output_control_segment+0x8c>)
 801ec3c:	481c      	ldr	r0, [pc, #112]	; (801ecb0 <tcp_output_control_segment+0x90>)
 801ec3e:	f004 f877 	bl	8022d30 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ec42:	683a      	ldr	r2, [r7, #0]
 801ec44:	6879      	ldr	r1, [r7, #4]
 801ec46:	68f8      	ldr	r0, [r7, #12]
 801ec48:	f7fe fae8 	bl	801d21c <tcp_route>
 801ec4c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ec4e:	693b      	ldr	r3, [r7, #16]
 801ec50:	2b00      	cmp	r3, #0
 801ec52:	d102      	bne.n	801ec5a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ec54:	23fc      	movs	r3, #252	; 0xfc
 801ec56:	75fb      	strb	r3, [r7, #23]
 801ec58:	e01c      	b.n	801ec94 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ec5a:	68fb      	ldr	r3, [r7, #12]
 801ec5c:	2b00      	cmp	r3, #0
 801ec5e:	d006      	beq.n	801ec6e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ec60:	68fb      	ldr	r3, [r7, #12]
 801ec62:	7adb      	ldrb	r3, [r3, #11]
 801ec64:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ec66:	68fb      	ldr	r3, [r7, #12]
 801ec68:	7a9b      	ldrb	r3, [r3, #10]
 801ec6a:	757b      	strb	r3, [r7, #21]
 801ec6c:	e003      	b.n	801ec76 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ec6e:	23ff      	movs	r3, #255	; 0xff
 801ec70:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ec72:	2300      	movs	r3, #0
 801ec74:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801ec76:	7dba      	ldrb	r2, [r7, #22]
 801ec78:	693b      	ldr	r3, [r7, #16]
 801ec7a:	9302      	str	r3, [sp, #8]
 801ec7c:	2306      	movs	r3, #6
 801ec7e:	9301      	str	r3, [sp, #4]
 801ec80:	7d7b      	ldrb	r3, [r7, #21]
 801ec82:	9300      	str	r3, [sp, #0]
 801ec84:	4613      	mov	r3, r2
 801ec86:	683a      	ldr	r2, [r7, #0]
 801ec88:	6879      	ldr	r1, [r7, #4]
 801ec8a:	68b8      	ldr	r0, [r7, #8]
 801ec8c:	f7f7 f87e 	bl	8015d8c <ip4_output_if>
 801ec90:	4603      	mov	r3, r0
 801ec92:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ec94:	68b8      	ldr	r0, [r7, #8]
 801ec96:	f7f9 fbcd 	bl	8018434 <pbuf_free>
  return err;
 801ec9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ec9e:	4618      	mov	r0, r3
 801eca0:	3718      	adds	r7, #24
 801eca2:	46bd      	mov	sp, r7
 801eca4:	bd80      	pop	{r7, pc}
 801eca6:	bf00      	nop
 801eca8:	08027184 	.word	0x08027184
 801ecac:	08027914 	.word	0x08027914
 801ecb0:	08027210 	.word	0x08027210

0801ecb4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ecb4:	b590      	push	{r4, r7, lr}
 801ecb6:	b08b      	sub	sp, #44	; 0x2c
 801ecb8:	af04      	add	r7, sp, #16
 801ecba:	60f8      	str	r0, [r7, #12]
 801ecbc:	60b9      	str	r1, [r7, #8]
 801ecbe:	607a      	str	r2, [r7, #4]
 801ecc0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ecc2:	683b      	ldr	r3, [r7, #0]
 801ecc4:	2b00      	cmp	r3, #0
 801ecc6:	d106      	bne.n	801ecd6 <tcp_rst+0x22>
 801ecc8:	4b1f      	ldr	r3, [pc, #124]	; (801ed48 <tcp_rst+0x94>)
 801ecca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801ecce:	491f      	ldr	r1, [pc, #124]	; (801ed4c <tcp_rst+0x98>)
 801ecd0:	481f      	ldr	r0, [pc, #124]	; (801ed50 <tcp_rst+0x9c>)
 801ecd2:	f004 f82d 	bl	8022d30 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ecd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	d106      	bne.n	801ecea <tcp_rst+0x36>
 801ecdc:	4b1a      	ldr	r3, [pc, #104]	; (801ed48 <tcp_rst+0x94>)
 801ecde:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801ece2:	491c      	ldr	r1, [pc, #112]	; (801ed54 <tcp_rst+0xa0>)
 801ece4:	481a      	ldr	r0, [pc, #104]	; (801ed50 <tcp_rst+0x9c>)
 801ece6:	f004 f823 	bl	8022d30 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ecea:	2300      	movs	r3, #0
 801ecec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801ecee:	f246 0308 	movw	r3, #24584	; 0x6008
 801ecf2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ecf4:	7dfb      	ldrb	r3, [r7, #23]
 801ecf6:	b29c      	uxth	r4, r3
 801ecf8:	68b8      	ldr	r0, [r7, #8]
 801ecfa:	f7f5 fca8 	bl	801464e <lwip_htonl>
 801ecfe:	4602      	mov	r2, r0
 801ed00:	8abb      	ldrh	r3, [r7, #20]
 801ed02:	9303      	str	r3, [sp, #12]
 801ed04:	2314      	movs	r3, #20
 801ed06:	9302      	str	r3, [sp, #8]
 801ed08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801ed0a:	9301      	str	r3, [sp, #4]
 801ed0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ed0e:	9300      	str	r3, [sp, #0]
 801ed10:	4613      	mov	r3, r2
 801ed12:	2200      	movs	r2, #0
 801ed14:	4621      	mov	r1, r4
 801ed16:	6878      	ldr	r0, [r7, #4]
 801ed18:	f7ff fe94 	bl	801ea44 <tcp_output_alloc_header_common>
 801ed1c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ed1e:	693b      	ldr	r3, [r7, #16]
 801ed20:	2b00      	cmp	r3, #0
 801ed22:	d00c      	beq.n	801ed3e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ed24:	7dfb      	ldrb	r3, [r7, #23]
 801ed26:	2200      	movs	r2, #0
 801ed28:	6939      	ldr	r1, [r7, #16]
 801ed2a:	68f8      	ldr	r0, [r7, #12]
 801ed2c:	f7ff ff3a 	bl	801eba4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed32:	683a      	ldr	r2, [r7, #0]
 801ed34:	6939      	ldr	r1, [r7, #16]
 801ed36:	68f8      	ldr	r0, [r7, #12]
 801ed38:	f7ff ff72 	bl	801ec20 <tcp_output_control_segment>
 801ed3c:	e000      	b.n	801ed40 <tcp_rst+0x8c>
    return;
 801ed3e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ed40:	371c      	adds	r7, #28
 801ed42:	46bd      	mov	sp, r7
 801ed44:	bd90      	pop	{r4, r7, pc}
 801ed46:	bf00      	nop
 801ed48:	08027184 	.word	0x08027184
 801ed4c:	08027940 	.word	0x08027940
 801ed50:	08027210 	.word	0x08027210
 801ed54:	0802795c 	.word	0x0802795c

0801ed58 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ed58:	b590      	push	{r4, r7, lr}
 801ed5a:	b087      	sub	sp, #28
 801ed5c:	af00      	add	r7, sp, #0
 801ed5e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801ed60:	2300      	movs	r3, #0
 801ed62:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801ed64:	2300      	movs	r3, #0
 801ed66:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	2b00      	cmp	r3, #0
 801ed6c:	d106      	bne.n	801ed7c <tcp_send_empty_ack+0x24>
 801ed6e:	4b28      	ldr	r3, [pc, #160]	; (801ee10 <tcp_send_empty_ack+0xb8>)
 801ed70:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801ed74:	4927      	ldr	r1, [pc, #156]	; (801ee14 <tcp_send_empty_ack+0xbc>)
 801ed76:	4828      	ldr	r0, [pc, #160]	; (801ee18 <tcp_send_empty_ack+0xc0>)
 801ed78:	f003 ffda 	bl	8022d30 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ed7c:	7dfb      	ldrb	r3, [r7, #23]
 801ed7e:	009b      	lsls	r3, r3, #2
 801ed80:	b2db      	uxtb	r3, r3
 801ed82:	f003 0304 	and.w	r3, r3, #4
 801ed86:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801ed88:	7d7b      	ldrb	r3, [r7, #21]
 801ed8a:	b29c      	uxth	r4, r3
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ed90:	4618      	mov	r0, r3
 801ed92:	f7f5 fc5c 	bl	801464e <lwip_htonl>
 801ed96:	4603      	mov	r3, r0
 801ed98:	2200      	movs	r2, #0
 801ed9a:	4621      	mov	r1, r4
 801ed9c:	6878      	ldr	r0, [r7, #4]
 801ed9e:	f7ff fec3 	bl	801eb28 <tcp_output_alloc_header>
 801eda2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801eda4:	693b      	ldr	r3, [r7, #16]
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	d109      	bne.n	801edbe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801edae:	f043 0303 	orr.w	r3, r3, #3
 801edb2:	b29a      	uxth	r2, r3
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	845a      	strh	r2, [r3, #34]	; 0x22
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801edb8:	f06f 0301 	mvn.w	r3, #1
 801edbc:	e023      	b.n	801ee06 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801edbe:	7dbb      	ldrb	r3, [r7, #22]
 801edc0:	7dfa      	ldrb	r2, [r7, #23]
 801edc2:	6939      	ldr	r1, [r7, #16]
 801edc4:	6878      	ldr	r0, [r7, #4]
 801edc6:	f7ff feed 	bl	801eba4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801edca:	687a      	ldr	r2, [r7, #4]
 801edcc:	687b      	ldr	r3, [r7, #4]
 801edce:	3304      	adds	r3, #4
 801edd0:	6939      	ldr	r1, [r7, #16]
 801edd2:	6878      	ldr	r0, [r7, #4]
 801edd4:	f7ff ff24 	bl	801ec20 <tcp_output_control_segment>
 801edd8:	4603      	mov	r3, r0
 801edda:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801eddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ede0:	2b00      	cmp	r3, #0
 801ede2:	d007      	beq.n	801edf4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801ede8:	f043 0303 	orr.w	r3, r3, #3
 801edec:	b29a      	uxth	r2, r3
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	845a      	strh	r2, [r3, #34]	; 0x22
 801edf2:	e006      	b.n	801ee02 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 801edf8:	f023 0303 	bic.w	r3, r3, #3
 801edfc:	b29a      	uxth	r2, r3
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	845a      	strh	r2, [r3, #34]	; 0x22
  }

  return err;
 801ee02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ee06:	4618      	mov	r0, r3
 801ee08:	371c      	adds	r7, #28
 801ee0a:	46bd      	mov	sp, r7
 801ee0c:	bd90      	pop	{r4, r7, pc}
 801ee0e:	bf00      	nop
 801ee10:	08027184 	.word	0x08027184
 801ee14:	08027978 	.word	0x08027978
 801ee18:	08027210 	.word	0x08027210

0801ee1c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801ee1c:	b590      	push	{r4, r7, lr}
 801ee1e:	b087      	sub	sp, #28
 801ee20:	af00      	add	r7, sp, #0
 801ee22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801ee24:	2300      	movs	r3, #0
 801ee26:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	2b00      	cmp	r3, #0
 801ee2c:	d106      	bne.n	801ee3c <tcp_keepalive+0x20>
 801ee2e:	4b18      	ldr	r3, [pc, #96]	; (801ee90 <tcp_keepalive+0x74>)
 801ee30:	f640 0224 	movw	r2, #2084	; 0x824
 801ee34:	4917      	ldr	r1, [pc, #92]	; (801ee94 <tcp_keepalive+0x78>)
 801ee36:	4818      	ldr	r0, [pc, #96]	; (801ee98 <tcp_keepalive+0x7c>)
 801ee38:	f003 ff7a 	bl	8022d30 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801ee3c:	7dfb      	ldrb	r3, [r7, #23]
 801ee3e:	b29c      	uxth	r4, r3
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ee44:	3b01      	subs	r3, #1
 801ee46:	4618      	mov	r0, r3
 801ee48:	f7f5 fc01 	bl	801464e <lwip_htonl>
 801ee4c:	4603      	mov	r3, r0
 801ee4e:	2200      	movs	r2, #0
 801ee50:	4621      	mov	r1, r4
 801ee52:	6878      	ldr	r0, [r7, #4]
 801ee54:	f7ff fe68 	bl	801eb28 <tcp_output_alloc_header>
 801ee58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ee5a:	693b      	ldr	r3, [r7, #16]
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	d102      	bne.n	801ee66 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801ee60:	f04f 33ff 	mov.w	r3, #4294967295
 801ee64:	e010      	b.n	801ee88 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801ee66:	7dfb      	ldrb	r3, [r7, #23]
 801ee68:	2200      	movs	r2, #0
 801ee6a:	6939      	ldr	r1, [r7, #16]
 801ee6c:	6878      	ldr	r0, [r7, #4]
 801ee6e:	f7ff fe99 	bl	801eba4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ee72:	687a      	ldr	r2, [r7, #4]
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	3304      	adds	r3, #4
 801ee78:	6939      	ldr	r1, [r7, #16]
 801ee7a:	6878      	ldr	r0, [r7, #4]
 801ee7c:	f7ff fed0 	bl	801ec20 <tcp_output_control_segment>
 801ee80:	4603      	mov	r3, r0
 801ee82:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801ee84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ee88:	4618      	mov	r0, r3
 801ee8a:	371c      	adds	r7, #28
 801ee8c:	46bd      	mov	sp, r7
 801ee8e:	bd90      	pop	{r4, r7, pc}
 801ee90:	08027184 	.word	0x08027184
 801ee94:	08027998 	.word	0x08027998
 801ee98:	08027210 	.word	0x08027210

0801ee9c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801ee9c:	b590      	push	{r4, r7, lr}
 801ee9e:	b08b      	sub	sp, #44	; 0x2c
 801eea0:	af00      	add	r7, sp, #0
 801eea2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801eea4:	2300      	movs	r3, #0
 801eea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801eeaa:	687b      	ldr	r3, [r7, #4]
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d106      	bne.n	801eebe <tcp_zero_window_probe+0x22>
 801eeb0:	4b4c      	ldr	r3, [pc, #304]	; (801efe4 <tcp_zero_window_probe+0x148>)
 801eeb2:	f640 024f 	movw	r2, #2127	; 0x84f
 801eeb6:	494c      	ldr	r1, [pc, #304]	; (801efe8 <tcp_zero_window_probe+0x14c>)
 801eeb8:	484c      	ldr	r0, [pc, #304]	; (801efec <tcp_zero_window_probe+0x150>)
 801eeba:	f003 ff39 	bl	8022d30 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801eebe:	687b      	ldr	r3, [r7, #4]
 801eec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801eec2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801eec4:	6a3b      	ldr	r3, [r7, #32]
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d101      	bne.n	801eece <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801eeca:	2300      	movs	r3, #0
 801eecc:	e086      	b.n	801efdc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 801eed4:	2bff      	cmp	r3, #255	; 0xff
 801eed6:	d007      	beq.n	801eee8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 801eede:	3301      	adds	r3, #1
 801eee0:	b2da      	uxtb	r2, r3
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801eee8:	6a3b      	ldr	r3, [r7, #32]
 801eeea:	68db      	ldr	r3, [r3, #12]
 801eeec:	899b      	ldrh	r3, [r3, #12]
 801eeee:	b29b      	uxth	r3, r3
 801eef0:	4618      	mov	r0, r3
 801eef2:	f7f5 fb97 	bl	8014624 <lwip_htons>
 801eef6:	4603      	mov	r3, r0
 801eef8:	b2db      	uxtb	r3, r3
 801eefa:	f003 0301 	and.w	r3, r3, #1
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d005      	beq.n	801ef0e <tcp_zero_window_probe+0x72>
 801ef02:	6a3b      	ldr	r3, [r7, #32]
 801ef04:	891b      	ldrh	r3, [r3, #8]
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	d101      	bne.n	801ef0e <tcp_zero_window_probe+0x72>
 801ef0a:	2301      	movs	r3, #1
 801ef0c:	e000      	b.n	801ef10 <tcp_zero_window_probe+0x74>
 801ef0e:	2300      	movs	r3, #0
 801ef10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801ef12:	7ffb      	ldrb	r3, [r7, #31]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	bf0c      	ite	eq
 801ef18:	2301      	moveq	r3, #1
 801ef1a:	2300      	movne	r3, #0
 801ef1c:	b2db      	uxtb	r3, r3
 801ef1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ef20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ef24:	b299      	uxth	r1, r3
 801ef26:	6a3b      	ldr	r3, [r7, #32]
 801ef28:	68db      	ldr	r3, [r3, #12]
 801ef2a:	685b      	ldr	r3, [r3, #4]
 801ef2c:	8bba      	ldrh	r2, [r7, #28]
 801ef2e:	6878      	ldr	r0, [r7, #4]
 801ef30:	f7ff fdfa 	bl	801eb28 <tcp_output_alloc_header>
 801ef34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801ef36:	69bb      	ldr	r3, [r7, #24]
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d102      	bne.n	801ef42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801ef3c:	f04f 33ff 	mov.w	r3, #4294967295
 801ef40:	e04c      	b.n	801efdc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801ef42:	69bb      	ldr	r3, [r7, #24]
 801ef44:	685b      	ldr	r3, [r3, #4]
 801ef46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801ef48:	7ffb      	ldrb	r3, [r7, #31]
 801ef4a:	2b00      	cmp	r3, #0
 801ef4c:	d011      	beq.n	801ef72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801ef4e:	697b      	ldr	r3, [r7, #20]
 801ef50:	899b      	ldrh	r3, [r3, #12]
 801ef52:	b29b      	uxth	r3, r3
 801ef54:	b21b      	sxth	r3, r3
 801ef56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ef5a:	b21c      	sxth	r4, r3
 801ef5c:	2011      	movs	r0, #17
 801ef5e:	f7f5 fb61 	bl	8014624 <lwip_htons>
 801ef62:	4603      	mov	r3, r0
 801ef64:	b21b      	sxth	r3, r3
 801ef66:	4323      	orrs	r3, r4
 801ef68:	b21b      	sxth	r3, r3
 801ef6a:	b29a      	uxth	r2, r3
 801ef6c:	697b      	ldr	r3, [r7, #20]
 801ef6e:	819a      	strh	r2, [r3, #12]
 801ef70:	e010      	b.n	801ef94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801ef72:	69bb      	ldr	r3, [r7, #24]
 801ef74:	685b      	ldr	r3, [r3, #4]
 801ef76:	3314      	adds	r3, #20
 801ef78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801ef7a:	6a3b      	ldr	r3, [r7, #32]
 801ef7c:	6858      	ldr	r0, [r3, #4]
 801ef7e:	6a3b      	ldr	r3, [r7, #32]
 801ef80:	685b      	ldr	r3, [r3, #4]
 801ef82:	891a      	ldrh	r2, [r3, #8]
 801ef84:	6a3b      	ldr	r3, [r7, #32]
 801ef86:	891b      	ldrh	r3, [r3, #8]
 801ef88:	1ad3      	subs	r3, r2, r3
 801ef8a:	b29b      	uxth	r3, r3
 801ef8c:	2201      	movs	r2, #1
 801ef8e:	6939      	ldr	r1, [r7, #16]
 801ef90:	f7f9 fc46 	bl	8018820 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801ef94:	6a3b      	ldr	r3, [r7, #32]
 801ef96:	68db      	ldr	r3, [r3, #12]
 801ef98:	685b      	ldr	r3, [r3, #4]
 801ef9a:	4618      	mov	r0, r3
 801ef9c:	f7f5 fb57 	bl	801464e <lwip_htonl>
 801efa0:	4603      	mov	r3, r0
 801efa2:	3301      	adds	r3, #1
 801efa4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801efaa:	68fb      	ldr	r3, [r7, #12]
 801efac:	1ad3      	subs	r3, r2, r3
 801efae:	2b00      	cmp	r3, #0
 801efb0:	da02      	bge.n	801efb8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	68fa      	ldr	r2, [r7, #12]
 801efb6:	659a      	str	r2, [r3, #88]	; 0x58
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801efb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801efbc:	2200      	movs	r2, #0
 801efbe:	69b9      	ldr	r1, [r7, #24]
 801efc0:	6878      	ldr	r0, [r7, #4]
 801efc2:	f7ff fdef 	bl	801eba4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801efc6:	687a      	ldr	r2, [r7, #4]
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	3304      	adds	r3, #4
 801efcc:	69b9      	ldr	r1, [r7, #24]
 801efce:	6878      	ldr	r0, [r7, #4]
 801efd0:	f7ff fe26 	bl	801ec20 <tcp_output_control_segment>
 801efd4:	4603      	mov	r3, r0
 801efd6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801efd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801efdc:	4618      	mov	r0, r3
 801efde:	372c      	adds	r7, #44	; 0x2c
 801efe0:	46bd      	mov	sp, r7
 801efe2:	bd90      	pop	{r4, r7, pc}
 801efe4:	08027184 	.word	0x08027184
 801efe8:	080279b4 	.word	0x080279b4
 801efec:	08027210 	.word	0x08027210

0801eff0 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801eff0:	b580      	push	{r7, lr}
 801eff2:	b084      	sub	sp, #16
 801eff4:	af00      	add	r7, sp, #0
 801eff6:	6078      	str	r0, [r7, #4]
 801eff8:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801effa:	f000 fb73 	bl	801f6e4 <sys_timeouts_sleeptime>
 801effe:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801f000:	68fb      	ldr	r3, [r7, #12]
 801f002:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f006:	d10b      	bne.n	801f020 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 801f008:	4813      	ldr	r0, [pc, #76]	; (801f058 <tcpip_timeouts_mbox_fetch+0x68>)
 801f00a:	f7f9 fe18 	bl	8018c3e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801f00e:	2200      	movs	r2, #0
 801f010:	6839      	ldr	r1, [r7, #0]
 801f012:	6878      	ldr	r0, [r7, #4]
 801f014:	f7f9 fcee 	bl	80189f4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801f018:	480f      	ldr	r0, [pc, #60]	; (801f058 <tcpip_timeouts_mbox_fetch+0x68>)
 801f01a:	f7f9 fe01 	bl	8018c20 <sys_mutex_lock>
    return;
 801f01e:	e018      	b.n	801f052 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801f020:	68fb      	ldr	r3, [r7, #12]
 801f022:	2b00      	cmp	r3, #0
 801f024:	d102      	bne.n	801f02c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801f026:	f000 fb23 	bl	801f670 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801f02a:	e7e6      	b.n	801effa <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 801f02c:	480a      	ldr	r0, [pc, #40]	; (801f058 <tcpip_timeouts_mbox_fetch+0x68>)
 801f02e:	f7f9 fe06 	bl	8018c3e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801f032:	68fa      	ldr	r2, [r7, #12]
 801f034:	6839      	ldr	r1, [r7, #0]
 801f036:	6878      	ldr	r0, [r7, #4]
 801f038:	f7f9 fcdc 	bl	80189f4 <sys_arch_mbox_fetch>
 801f03c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801f03e:	4806      	ldr	r0, [pc, #24]	; (801f058 <tcpip_timeouts_mbox_fetch+0x68>)
 801f040:	f7f9 fdee 	bl	8018c20 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 801f044:	68bb      	ldr	r3, [r7, #8]
 801f046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f04a:	d102      	bne.n	801f052 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801f04c:	f000 fb10 	bl	801f670 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801f050:	e7d3      	b.n	801effa <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801f052:	3710      	adds	r7, #16
 801f054:	46bd      	mov	sp, r7
 801f056:	bd80      	pop	{r7, pc}
 801f058:	20023938 	.word	0x20023938

0801f05c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 801f05c:	b580      	push	{r7, lr}
 801f05e:	b084      	sub	sp, #16
 801f060:	af00      	add	r7, sp, #0
 801f062:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 801f064:	4810      	ldr	r0, [pc, #64]	; (801f0a8 <tcpip_thread+0x4c>)
 801f066:	f7f9 fddb 	bl	8018c20 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801f06a:	4b10      	ldr	r3, [pc, #64]	; (801f0ac <tcpip_thread+0x50>)
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	2b00      	cmp	r3, #0
 801f070:	d005      	beq.n	801f07e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801f072:	4b0e      	ldr	r3, [pc, #56]	; (801f0ac <tcpip_thread+0x50>)
 801f074:	681b      	ldr	r3, [r3, #0]
 801f076:	4a0e      	ldr	r2, [pc, #56]	; (801f0b0 <tcpip_thread+0x54>)
 801f078:	6812      	ldr	r2, [r2, #0]
 801f07a:	4610      	mov	r0, r2
 801f07c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801f07e:	f107 030c 	add.w	r3, r7, #12
 801f082:	4619      	mov	r1, r3
 801f084:	480b      	ldr	r0, [pc, #44]	; (801f0b4 <tcpip_thread+0x58>)
 801f086:	f7ff ffb3 	bl	801eff0 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801f08a:	68fb      	ldr	r3, [r7, #12]
 801f08c:	2b00      	cmp	r3, #0
 801f08e:	d106      	bne.n	801f09e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801f090:	4b09      	ldr	r3, [pc, #36]	; (801f0b8 <tcpip_thread+0x5c>)
 801f092:	2291      	movs	r2, #145	; 0x91
 801f094:	4909      	ldr	r1, [pc, #36]	; (801f0bc <tcpip_thread+0x60>)
 801f096:	480a      	ldr	r0, [pc, #40]	; (801f0c0 <tcpip_thread+0x64>)
 801f098:	f003 fe4a 	bl	8022d30 <iprintf>
      continue;
 801f09c:	e003      	b.n	801f0a6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801f09e:	68fb      	ldr	r3, [r7, #12]
 801f0a0:	4618      	mov	r0, r3
 801f0a2:	f000 f80f 	bl	801f0c4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801f0a6:	e7ea      	b.n	801f07e <tcpip_thread+0x22>
 801f0a8:	20023938 	.word	0x20023938
 801f0ac:	2002392c 	.word	0x2002392c
 801f0b0:	20023930 	.word	0x20023930
 801f0b4:	20023934 	.word	0x20023934
 801f0b8:	080279d8 	.word	0x080279d8
 801f0bc:	08027a44 	.word	0x08027a44
 801f0c0:	08027a64 	.word	0x08027a64

0801f0c4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801f0c4:	b580      	push	{r7, lr}
 801f0c6:	b082      	sub	sp, #8
 801f0c8:	af00      	add	r7, sp, #0
 801f0ca:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801f0cc:	687b      	ldr	r3, [r7, #4]
 801f0ce:	781b      	ldrb	r3, [r3, #0]
 801f0d0:	2b04      	cmp	r3, #4
 801f0d2:	d84f      	bhi.n	801f174 <tcpip_thread_handle_msg+0xb0>
 801f0d4:	a201      	add	r2, pc, #4	; (adr r2, 801f0dc <tcpip_thread_handle_msg+0x18>)
 801f0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f0da:	bf00      	nop
 801f0dc:	0801f0f1 	.word	0x0801f0f1
 801f0e0:	0801f11b 	.word	0x0801f11b
 801f0e4:	0801f137 	.word	0x0801f137
 801f0e8:	0801f151 	.word	0x0801f151
 801f0ec:	0801f167 	.word	0x0801f167
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	68db      	ldr	r3, [r3, #12]
 801f0f4:	687a      	ldr	r2, [r7, #4]
 801f0f6:	6850      	ldr	r0, [r2, #4]
 801f0f8:	687a      	ldr	r2, [r7, #4]
 801f0fa:	6892      	ldr	r2, [r2, #8]
 801f0fc:	4611      	mov	r1, r2
 801f0fe:	4798      	blx	r3
 801f100:	4603      	mov	r3, r0
 801f102:	2b00      	cmp	r3, #0
 801f104:	d004      	beq.n	801f110 <tcpip_thread_handle_msg+0x4c>
        pbuf_free(msg->msg.inp.p);
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	685b      	ldr	r3, [r3, #4]
 801f10a:	4618      	mov	r0, r3
 801f10c:	f7f9 f992 	bl	8018434 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801f110:	6879      	ldr	r1, [r7, #4]
 801f112:	2009      	movs	r0, #9
 801f114:	f7f8 fa9a 	bl	801764c <memp_free>
      break;
 801f118:	e033      	b.n	801f182 <tcpip_thread_handle_msg+0xbe>
#endif /* !LWIP_TCPIP_CORE_LOCKING_INPUT */

#if LWIP_TCPIP_TIMEOUT && LWIP_TIMERS
    case TCPIP_MSG_TIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	6858      	ldr	r0, [r3, #4]
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	6899      	ldr	r1, [r3, #8]
 801f122:	687b      	ldr	r3, [r7, #4]
 801f124:	68db      	ldr	r3, [r3, #12]
 801f126:	461a      	mov	r2, r3
 801f128:	f000 fa42 	bl	801f5b0 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801f12c:	6879      	ldr	r1, [r7, #4]
 801f12e:	2008      	movs	r0, #8
 801f130:	f7f8 fa8c 	bl	801764c <memp_free>
      break;
 801f134:	e025      	b.n	801f182 <tcpip_thread_handle_msg+0xbe>
    case TCPIP_MSG_UNTIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 801f136:	687b      	ldr	r3, [r7, #4]
 801f138:	689a      	ldr	r2, [r3, #8]
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	68db      	ldr	r3, [r3, #12]
 801f13e:	4619      	mov	r1, r3
 801f140:	4610      	mov	r0, r2
 801f142:	f000 fa5b 	bl	801f5fc <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801f146:	6879      	ldr	r1, [r7, #4]
 801f148:	2008      	movs	r0, #8
 801f14a:	f7f8 fa7f 	bl	801764c <memp_free>
      break;
 801f14e:	e018      	b.n	801f182 <tcpip_thread_handle_msg+0xbe>
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	685b      	ldr	r3, [r3, #4]
 801f154:	687a      	ldr	r2, [r7, #4]
 801f156:	6892      	ldr	r2, [r2, #8]
 801f158:	4610      	mov	r0, r2
 801f15a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801f15c:	6879      	ldr	r1, [r7, #4]
 801f15e:	2008      	movs	r0, #8
 801f160:	f7f8 fa74 	bl	801764c <memp_free>
      break;
 801f164:	e00d      	b.n	801f182 <tcpip_thread_handle_msg+0xbe>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	685b      	ldr	r3, [r3, #4]
 801f16a:	687a      	ldr	r2, [r7, #4]
 801f16c:	6892      	ldr	r2, [r2, #8]
 801f16e:	4610      	mov	r0, r2
 801f170:	4798      	blx	r3
      break;
 801f172:	e006      	b.n	801f182 <tcpip_thread_handle_msg+0xbe>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801f174:	4b05      	ldr	r3, [pc, #20]	; (801f18c <tcpip_thread_handle_msg+0xc8>)
 801f176:	22cf      	movs	r2, #207	; 0xcf
 801f178:	4905      	ldr	r1, [pc, #20]	; (801f190 <tcpip_thread_handle_msg+0xcc>)
 801f17a:	4806      	ldr	r0, [pc, #24]	; (801f194 <tcpip_thread_handle_msg+0xd0>)
 801f17c:	f003 fdd8 	bl	8022d30 <iprintf>
      break;
 801f180:	bf00      	nop
  }
}
 801f182:	bf00      	nop
 801f184:	3708      	adds	r7, #8
 801f186:	46bd      	mov	sp, r7
 801f188:	bd80      	pop	{r7, pc}
 801f18a:	bf00      	nop
 801f18c:	080279d8 	.word	0x080279d8
 801f190:	08027a44 	.word	0x08027a44
 801f194:	08027a64 	.word	0x08027a64

0801f198 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 801f198:	b580      	push	{r7, lr}
 801f19a:	b086      	sub	sp, #24
 801f19c:	af00      	add	r7, sp, #0
 801f19e:	60f8      	str	r0, [r7, #12]
 801f1a0:	60b9      	str	r1, [r7, #8]
 801f1a2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801f1a4:	481a      	ldr	r0, [pc, #104]	; (801f210 <tcpip_inpkt+0x78>)
 801f1a6:	f7f9 fc6d 	bl	8018a84 <sys_mbox_valid>
 801f1aa:	4603      	mov	r3, r0
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	d105      	bne.n	801f1bc <tcpip_inpkt+0x24>
 801f1b0:	4b18      	ldr	r3, [pc, #96]	; (801f214 <tcpip_inpkt+0x7c>)
 801f1b2:	22fc      	movs	r2, #252	; 0xfc
 801f1b4:	4918      	ldr	r1, [pc, #96]	; (801f218 <tcpip_inpkt+0x80>)
 801f1b6:	4819      	ldr	r0, [pc, #100]	; (801f21c <tcpip_inpkt+0x84>)
 801f1b8:	f003 fdba 	bl	8022d30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801f1bc:	2009      	movs	r0, #9
 801f1be:	f7f8 f9cf 	bl	8017560 <memp_malloc>
 801f1c2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801f1c4:	697b      	ldr	r3, [r7, #20]
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	d102      	bne.n	801f1d0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801f1ca:	f04f 33ff 	mov.w	r3, #4294967295
 801f1ce:	e01a      	b.n	801f206 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801f1d0:	697b      	ldr	r3, [r7, #20]
 801f1d2:	2200      	movs	r2, #0
 801f1d4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801f1d6:	697b      	ldr	r3, [r7, #20]
 801f1d8:	68fa      	ldr	r2, [r7, #12]
 801f1da:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801f1dc:	697b      	ldr	r3, [r7, #20]
 801f1de:	68ba      	ldr	r2, [r7, #8]
 801f1e0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801f1e2:	697b      	ldr	r3, [r7, #20]
 801f1e4:	687a      	ldr	r2, [r7, #4]
 801f1e6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801f1e8:	6979      	ldr	r1, [r7, #20]
 801f1ea:	4809      	ldr	r0, [pc, #36]	; (801f210 <tcpip_inpkt+0x78>)
 801f1ec:	f7f9 fbe8 	bl	80189c0 <sys_mbox_trypost>
 801f1f0:	4603      	mov	r3, r0
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	d006      	beq.n	801f204 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801f1f6:	6979      	ldr	r1, [r7, #20]
 801f1f8:	2009      	movs	r0, #9
 801f1fa:	f7f8 fa27 	bl	801764c <memp_free>
    return ERR_MEM;
 801f1fe:	f04f 33ff 	mov.w	r3, #4294967295
 801f202:	e000      	b.n	801f206 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801f204:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801f206:	4618      	mov	r0, r3
 801f208:	3718      	adds	r7, #24
 801f20a:	46bd      	mov	sp, r7
 801f20c:	bd80      	pop	{r7, pc}
 801f20e:	bf00      	nop
 801f210:	20023934 	.word	0x20023934
 801f214:	080279d8 	.word	0x080279d8
 801f218:	08027a8c 	.word	0x08027a8c
 801f21c:	08027a64 	.word	0x08027a64

0801f220 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801f220:	b580      	push	{r7, lr}
 801f222:	b082      	sub	sp, #8
 801f224:	af00      	add	r7, sp, #0
 801f226:	6078      	str	r0, [r7, #4]
 801f228:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801f22a:	683b      	ldr	r3, [r7, #0]
 801f22c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f230:	f003 0318 	and.w	r3, r3, #24
 801f234:	2b00      	cmp	r3, #0
 801f236:	d006      	beq.n	801f246 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801f238:	4a08      	ldr	r2, [pc, #32]	; (801f25c <tcpip_input+0x3c>)
 801f23a:	6839      	ldr	r1, [r7, #0]
 801f23c:	6878      	ldr	r0, [r7, #4]
 801f23e:	f7ff ffab 	bl	801f198 <tcpip_inpkt>
 801f242:	4603      	mov	r3, r0
 801f244:	e005      	b.n	801f252 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801f246:	4a06      	ldr	r2, [pc, #24]	; (801f260 <tcpip_input+0x40>)
 801f248:	6839      	ldr	r1, [r7, #0]
 801f24a:	6878      	ldr	r0, [r7, #4]
 801f24c:	f7ff ffa4 	bl	801f198 <tcpip_inpkt>
 801f250:	4603      	mov	r3, r0
}
 801f252:	4618      	mov	r0, r3
 801f254:	3708      	adds	r7, #8
 801f256:	46bd      	mov	sp, r7
 801f258:	bd80      	pop	{r7, pc}
 801f25a:	bf00      	nop
 801f25c:	08015519 	.word	0x08015519
 801f260:	08015b45 	.word	0x08015b45

0801f264 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801f264:	b580      	push	{r7, lr}
 801f266:	b084      	sub	sp, #16
 801f268:	af00      	add	r7, sp, #0
 801f26a:	6078      	str	r0, [r7, #4]
 801f26c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801f26e:	4819      	ldr	r0, [pc, #100]	; (801f2d4 <tcpip_try_callback+0x70>)
 801f270:	f7f9 fc08 	bl	8018a84 <sys_mbox_valid>
 801f274:	4603      	mov	r3, r0
 801f276:	2b00      	cmp	r3, #0
 801f278:	d106      	bne.n	801f288 <tcpip_try_callback+0x24>
 801f27a:	4b17      	ldr	r3, [pc, #92]	; (801f2d8 <tcpip_try_callback+0x74>)
 801f27c:	f240 125d 	movw	r2, #349	; 0x15d
 801f280:	4916      	ldr	r1, [pc, #88]	; (801f2dc <tcpip_try_callback+0x78>)
 801f282:	4817      	ldr	r0, [pc, #92]	; (801f2e0 <tcpip_try_callback+0x7c>)
 801f284:	f003 fd54 	bl	8022d30 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801f288:	2008      	movs	r0, #8
 801f28a:	f7f8 f969 	bl	8017560 <memp_malloc>
 801f28e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 801f290:	68fb      	ldr	r3, [r7, #12]
 801f292:	2b00      	cmp	r3, #0
 801f294:	d102      	bne.n	801f29c <tcpip_try_callback+0x38>
    return ERR_MEM;
 801f296:	f04f 33ff 	mov.w	r3, #4294967295
 801f29a:	e017      	b.n	801f2cc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801f29c:	68fb      	ldr	r3, [r7, #12]
 801f29e:	2203      	movs	r2, #3
 801f2a0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801f2a2:	68fb      	ldr	r3, [r7, #12]
 801f2a4:	687a      	ldr	r2, [r7, #4]
 801f2a6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801f2a8:	68fb      	ldr	r3, [r7, #12]
 801f2aa:	683a      	ldr	r2, [r7, #0]
 801f2ac:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801f2ae:	68f9      	ldr	r1, [r7, #12]
 801f2b0:	4808      	ldr	r0, [pc, #32]	; (801f2d4 <tcpip_try_callback+0x70>)
 801f2b2:	f7f9 fb85 	bl	80189c0 <sys_mbox_trypost>
 801f2b6:	4603      	mov	r3, r0
 801f2b8:	2b00      	cmp	r3, #0
 801f2ba:	d006      	beq.n	801f2ca <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801f2bc:	68f9      	ldr	r1, [r7, #12]
 801f2be:	2008      	movs	r0, #8
 801f2c0:	f7f8 f9c4 	bl	801764c <memp_free>
    return ERR_MEM;
 801f2c4:	f04f 33ff 	mov.w	r3, #4294967295
 801f2c8:	e000      	b.n	801f2cc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801f2ca:	2300      	movs	r3, #0
}
 801f2cc:	4618      	mov	r0, r3
 801f2ce:	3710      	adds	r7, #16
 801f2d0:	46bd      	mov	sp, r7
 801f2d2:	bd80      	pop	{r7, pc}
 801f2d4:	20023934 	.word	0x20023934
 801f2d8:	080279d8 	.word	0x080279d8
 801f2dc:	08027a8c 	.word	0x08027a8c
 801f2e0:	08027a64 	.word	0x08027a64

0801f2e4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801f2e4:	b580      	push	{r7, lr}
 801f2e6:	b084      	sub	sp, #16
 801f2e8:	af00      	add	r7, sp, #0
 801f2ea:	60f8      	str	r0, [r7, #12]
 801f2ec:	60b9      	str	r1, [r7, #8]
 801f2ee:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 801f2f0:	4806      	ldr	r0, [pc, #24]	; (801f30c <tcpip_send_msg_wait_sem+0x28>)
 801f2f2:	f7f9 fc95 	bl	8018c20 <sys_mutex_lock>
  fn(apimsg);
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	68b8      	ldr	r0, [r7, #8]
 801f2fa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801f2fc:	4803      	ldr	r0, [pc, #12]	; (801f30c <tcpip_send_msg_wait_sem+0x28>)
 801f2fe:	f7f9 fc9e 	bl	8018c3e <sys_mutex_unlock>
  return ERR_OK;
 801f302:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801f304:	4618      	mov	r0, r3
 801f306:	3710      	adds	r7, #16
 801f308:	46bd      	mov	sp, r7
 801f30a:	bd80      	pop	{r7, pc}
 801f30c:	20023938 	.word	0x20023938

0801f310 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801f310:	b580      	push	{r7, lr}
 801f312:	b084      	sub	sp, #16
 801f314:	af02      	add	r7, sp, #8
 801f316:	6078      	str	r0, [r7, #4]
 801f318:	6039      	str	r1, [r7, #0]
  lwip_init();
 801f31a:	f7f6 fb61 	bl	80159e0 <lwip_init>

  tcpip_init_done = initfunc;
 801f31e:	4a17      	ldr	r2, [pc, #92]	; (801f37c <tcpip_init+0x6c>)
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801f324:	4a16      	ldr	r2, [pc, #88]	; (801f380 <tcpip_init+0x70>)
 801f326:	683b      	ldr	r3, [r7, #0]
 801f328:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801f32a:	2106      	movs	r1, #6
 801f32c:	4815      	ldr	r0, [pc, #84]	; (801f384 <tcpip_init+0x74>)
 801f32e:	f7f9 fb1b 	bl	8018968 <sys_mbox_new>
 801f332:	4603      	mov	r3, r0
 801f334:	2b00      	cmp	r3, #0
 801f336:	d006      	beq.n	801f346 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801f338:	4b13      	ldr	r3, [pc, #76]	; (801f388 <tcpip_init+0x78>)
 801f33a:	f240 2261 	movw	r2, #609	; 0x261
 801f33e:	4913      	ldr	r1, [pc, #76]	; (801f38c <tcpip_init+0x7c>)
 801f340:	4813      	ldr	r0, [pc, #76]	; (801f390 <tcpip_init+0x80>)
 801f342:	f003 fcf5 	bl	8022d30 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801f346:	4813      	ldr	r0, [pc, #76]	; (801f394 <tcpip_init+0x84>)
 801f348:	f7f9 fc54 	bl	8018bf4 <sys_mutex_new>
 801f34c:	4603      	mov	r3, r0
 801f34e:	2b00      	cmp	r3, #0
 801f350:	d006      	beq.n	801f360 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801f352:	4b0d      	ldr	r3, [pc, #52]	; (801f388 <tcpip_init+0x78>)
 801f354:	f240 2265 	movw	r2, #613	; 0x265
 801f358:	490f      	ldr	r1, [pc, #60]	; (801f398 <tcpip_init+0x88>)
 801f35a:	480d      	ldr	r0, [pc, #52]	; (801f390 <tcpip_init+0x80>)
 801f35c:	f003 fce8 	bl	8022d30 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 801f360:	2318      	movs	r3, #24
 801f362:	9300      	str	r3, [sp, #0]
 801f364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f368:	2200      	movs	r2, #0
 801f36a:	490c      	ldr	r1, [pc, #48]	; (801f39c <tcpip_init+0x8c>)
 801f36c:	480c      	ldr	r0, [pc, #48]	; (801f3a0 <tcpip_init+0x90>)
 801f36e:	f7f9 fc73 	bl	8018c58 <sys_thread_new>
}
 801f372:	bf00      	nop
 801f374:	3708      	adds	r7, #8
 801f376:	46bd      	mov	sp, r7
 801f378:	bd80      	pop	{r7, pc}
 801f37a:	bf00      	nop
 801f37c:	2002392c 	.word	0x2002392c
 801f380:	20023930 	.word	0x20023930
 801f384:	20023934 	.word	0x20023934
 801f388:	080279d8 	.word	0x080279d8
 801f38c:	08027a9c 	.word	0x08027a9c
 801f390:	08027a64 	.word	0x08027a64
 801f394:	20023938 	.word	0x20023938
 801f398:	08027ac0 	.word	0x08027ac0
 801f39c:	0801f05d 	.word	0x0801f05d
 801f3a0:	08027ae4 	.word	0x08027ae4

0801f3a4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f3a4:	b580      	push	{r7, lr}
 801f3a6:	b082      	sub	sp, #8
 801f3a8:	af00      	add	r7, sp, #0
 801f3aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f3ac:	f7f9 fce8 	bl	8018d80 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f3b0:	4b0a      	ldr	r3, [pc, #40]	; (801f3dc <tcpip_tcp_timer+0x38>)
 801f3b2:	681b      	ldr	r3, [r3, #0]
 801f3b4:	2b00      	cmp	r3, #0
 801f3b6:	d103      	bne.n	801f3c0 <tcpip_tcp_timer+0x1c>
 801f3b8:	4b09      	ldr	r3, [pc, #36]	; (801f3e0 <tcpip_tcp_timer+0x3c>)
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	d005      	beq.n	801f3cc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f3c0:	2200      	movs	r2, #0
 801f3c2:	4908      	ldr	r1, [pc, #32]	; (801f3e4 <tcpip_tcp_timer+0x40>)
 801f3c4:	20fa      	movs	r0, #250	; 0xfa
 801f3c6:	f000 f8f3 	bl	801f5b0 <sys_timeout>
 801f3ca:	e003      	b.n	801f3d4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f3cc:	4b06      	ldr	r3, [pc, #24]	; (801f3e8 <tcpip_tcp_timer+0x44>)
 801f3ce:	2200      	movs	r2, #0
 801f3d0:	601a      	str	r2, [r3, #0]
  }
}
 801f3d2:	bf00      	nop
 801f3d4:	bf00      	nop
 801f3d6:	3708      	adds	r7, #8
 801f3d8:	46bd      	mov	sp, r7
 801f3da:	bd80      	pop	{r7, pc}
 801f3dc:	200238e8 	.word	0x200238e8
 801f3e0:	200238ec 	.word	0x200238ec
 801f3e4:	0801f3a5 	.word	0x0801f3a5
 801f3e8:	20023944 	.word	0x20023944

0801f3ec <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f3ec:	b580      	push	{r7, lr}
 801f3ee:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f3f0:	4b0a      	ldr	r3, [pc, #40]	; (801f41c <tcp_timer_needed+0x30>)
 801f3f2:	681b      	ldr	r3, [r3, #0]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	d10f      	bne.n	801f418 <tcp_timer_needed+0x2c>
 801f3f8:	4b09      	ldr	r3, [pc, #36]	; (801f420 <tcp_timer_needed+0x34>)
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d103      	bne.n	801f408 <tcp_timer_needed+0x1c>
 801f400:	4b08      	ldr	r3, [pc, #32]	; (801f424 <tcp_timer_needed+0x38>)
 801f402:	681b      	ldr	r3, [r3, #0]
 801f404:	2b00      	cmp	r3, #0
 801f406:	d007      	beq.n	801f418 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f408:	4b04      	ldr	r3, [pc, #16]	; (801f41c <tcp_timer_needed+0x30>)
 801f40a:	2201      	movs	r2, #1
 801f40c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f40e:	2200      	movs	r2, #0
 801f410:	4905      	ldr	r1, [pc, #20]	; (801f428 <tcp_timer_needed+0x3c>)
 801f412:	20fa      	movs	r0, #250	; 0xfa
 801f414:	f000 f8cc 	bl	801f5b0 <sys_timeout>
  }
}
 801f418:	bf00      	nop
 801f41a:	bd80      	pop	{r7, pc}
 801f41c:	20023944 	.word	0x20023944
 801f420:	200238e8 	.word	0x200238e8
 801f424:	200238ec 	.word	0x200238ec
 801f428:	0801f3a5 	.word	0x0801f3a5

0801f42c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f42c:	b580      	push	{r7, lr}
 801f42e:	b086      	sub	sp, #24
 801f430:	af00      	add	r7, sp, #0
 801f432:	60f8      	str	r0, [r7, #12]
 801f434:	60b9      	str	r1, [r7, #8]
 801f436:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f438:	200a      	movs	r0, #10
 801f43a:	f7f8 f891 	bl	8017560 <memp_malloc>
 801f43e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f440:	693b      	ldr	r3, [r7, #16]
 801f442:	2b00      	cmp	r3, #0
 801f444:	d109      	bne.n	801f45a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f446:	693b      	ldr	r3, [r7, #16]
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d151      	bne.n	801f4f0 <sys_timeout_abs+0xc4>
 801f44c:	4b2a      	ldr	r3, [pc, #168]	; (801f4f8 <sys_timeout_abs+0xcc>)
 801f44e:	22be      	movs	r2, #190	; 0xbe
 801f450:	492a      	ldr	r1, [pc, #168]	; (801f4fc <sys_timeout_abs+0xd0>)
 801f452:	482b      	ldr	r0, [pc, #172]	; (801f500 <sys_timeout_abs+0xd4>)
 801f454:	f003 fc6c 	bl	8022d30 <iprintf>
    return;
 801f458:	e04a      	b.n	801f4f0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f45a:	693b      	ldr	r3, [r7, #16]
 801f45c:	2200      	movs	r2, #0
 801f45e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f460:	693b      	ldr	r3, [r7, #16]
 801f462:	68ba      	ldr	r2, [r7, #8]
 801f464:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f466:	693b      	ldr	r3, [r7, #16]
 801f468:	687a      	ldr	r2, [r7, #4]
 801f46a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f46c:	693b      	ldr	r3, [r7, #16]
 801f46e:	68fa      	ldr	r2, [r7, #12]
 801f470:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f472:	4b24      	ldr	r3, [pc, #144]	; (801f504 <sys_timeout_abs+0xd8>)
 801f474:	681b      	ldr	r3, [r3, #0]
 801f476:	2b00      	cmp	r3, #0
 801f478:	d103      	bne.n	801f482 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f47a:	4a22      	ldr	r2, [pc, #136]	; (801f504 <sys_timeout_abs+0xd8>)
 801f47c:	693b      	ldr	r3, [r7, #16]
 801f47e:	6013      	str	r3, [r2, #0]
    return;
 801f480:	e037      	b.n	801f4f2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f482:	693b      	ldr	r3, [r7, #16]
 801f484:	685a      	ldr	r2, [r3, #4]
 801f486:	4b1f      	ldr	r3, [pc, #124]	; (801f504 <sys_timeout_abs+0xd8>)
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	685b      	ldr	r3, [r3, #4]
 801f48c:	1ad3      	subs	r3, r2, r3
 801f48e:	0fdb      	lsrs	r3, r3, #31
 801f490:	f003 0301 	and.w	r3, r3, #1
 801f494:	b2db      	uxtb	r3, r3
 801f496:	2b00      	cmp	r3, #0
 801f498:	d007      	beq.n	801f4aa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f49a:	4b1a      	ldr	r3, [pc, #104]	; (801f504 <sys_timeout_abs+0xd8>)
 801f49c:	681a      	ldr	r2, [r3, #0]
 801f49e:	693b      	ldr	r3, [r7, #16]
 801f4a0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f4a2:	4a18      	ldr	r2, [pc, #96]	; (801f504 <sys_timeout_abs+0xd8>)
 801f4a4:	693b      	ldr	r3, [r7, #16]
 801f4a6:	6013      	str	r3, [r2, #0]
 801f4a8:	e023      	b.n	801f4f2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f4aa:	4b16      	ldr	r3, [pc, #88]	; (801f504 <sys_timeout_abs+0xd8>)
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	617b      	str	r3, [r7, #20]
 801f4b0:	e01a      	b.n	801f4e8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f4b2:	697b      	ldr	r3, [r7, #20]
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	d00b      	beq.n	801f4d2 <sys_timeout_abs+0xa6>
 801f4ba:	693b      	ldr	r3, [r7, #16]
 801f4bc:	685a      	ldr	r2, [r3, #4]
 801f4be:	697b      	ldr	r3, [r7, #20]
 801f4c0:	681b      	ldr	r3, [r3, #0]
 801f4c2:	685b      	ldr	r3, [r3, #4]
 801f4c4:	1ad3      	subs	r3, r2, r3
 801f4c6:	0fdb      	lsrs	r3, r3, #31
 801f4c8:	f003 0301 	and.w	r3, r3, #1
 801f4cc:	b2db      	uxtb	r3, r3
 801f4ce:	2b00      	cmp	r3, #0
 801f4d0:	d007      	beq.n	801f4e2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f4d2:	697b      	ldr	r3, [r7, #20]
 801f4d4:	681a      	ldr	r2, [r3, #0]
 801f4d6:	693b      	ldr	r3, [r7, #16]
 801f4d8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f4da:	697b      	ldr	r3, [r7, #20]
 801f4dc:	693a      	ldr	r2, [r7, #16]
 801f4de:	601a      	str	r2, [r3, #0]
        break;
 801f4e0:	e007      	b.n	801f4f2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f4e2:	697b      	ldr	r3, [r7, #20]
 801f4e4:	681b      	ldr	r3, [r3, #0]
 801f4e6:	617b      	str	r3, [r7, #20]
 801f4e8:	697b      	ldr	r3, [r7, #20]
 801f4ea:	2b00      	cmp	r3, #0
 801f4ec:	d1e1      	bne.n	801f4b2 <sys_timeout_abs+0x86>
 801f4ee:	e000      	b.n	801f4f2 <sys_timeout_abs+0xc6>
    return;
 801f4f0:	bf00      	nop
      }
    }
  }
}
 801f4f2:	3718      	adds	r7, #24
 801f4f4:	46bd      	mov	sp, r7
 801f4f6:	bd80      	pop	{r7, pc}
 801f4f8:	08027af4 	.word	0x08027af4
 801f4fc:	08027b64 	.word	0x08027b64
 801f500:	08027ba4 	.word	0x08027ba4
 801f504:	2002393c 	.word	0x2002393c

0801f508 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f508:	b580      	push	{r7, lr}
 801f50a:	b086      	sub	sp, #24
 801f50c:	af00      	add	r7, sp, #0
 801f50e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f514:	697b      	ldr	r3, [r7, #20]
 801f516:	685b      	ldr	r3, [r3, #4]
 801f518:	4798      	blx	r3

  now = sys_now();
 801f51a:	f7ee fafd 	bl	800db18 <sys_now>
 801f51e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f520:	697b      	ldr	r3, [r7, #20]
 801f522:	681a      	ldr	r2, [r3, #0]
 801f524:	4b0f      	ldr	r3, [pc, #60]	; (801f564 <lwip_cyclic_timer+0x5c>)
 801f526:	681b      	ldr	r3, [r3, #0]
 801f528:	4413      	add	r3, r2
 801f52a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f52c:	68fa      	ldr	r2, [r7, #12]
 801f52e:	693b      	ldr	r3, [r7, #16]
 801f530:	1ad3      	subs	r3, r2, r3
 801f532:	0fdb      	lsrs	r3, r3, #31
 801f534:	f003 0301 	and.w	r3, r3, #1
 801f538:	b2db      	uxtb	r3, r3
 801f53a:	2b00      	cmp	r3, #0
 801f53c:	d009      	beq.n	801f552 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f53e:	697b      	ldr	r3, [r7, #20]
 801f540:	681a      	ldr	r2, [r3, #0]
 801f542:	693b      	ldr	r3, [r7, #16]
 801f544:	4413      	add	r3, r2
 801f546:	687a      	ldr	r2, [r7, #4]
 801f548:	4907      	ldr	r1, [pc, #28]	; (801f568 <lwip_cyclic_timer+0x60>)
 801f54a:	4618      	mov	r0, r3
 801f54c:	f7ff ff6e 	bl	801f42c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f550:	e004      	b.n	801f55c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f552:	687a      	ldr	r2, [r7, #4]
 801f554:	4904      	ldr	r1, [pc, #16]	; (801f568 <lwip_cyclic_timer+0x60>)
 801f556:	68f8      	ldr	r0, [r7, #12]
 801f558:	f7ff ff68 	bl	801f42c <sys_timeout_abs>
}
 801f55c:	bf00      	nop
 801f55e:	3718      	adds	r7, #24
 801f560:	46bd      	mov	sp, r7
 801f562:	bd80      	pop	{r7, pc}
 801f564:	20023940 	.word	0x20023940
 801f568:	0801f509 	.word	0x0801f509

0801f56c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f56c:	b580      	push	{r7, lr}
 801f56e:	b082      	sub	sp, #8
 801f570:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f572:	2301      	movs	r3, #1
 801f574:	607b      	str	r3, [r7, #4]
 801f576:	e00e      	b.n	801f596 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f578:	4a0b      	ldr	r2, [pc, #44]	; (801f5a8 <sys_timeouts_init+0x3c>)
 801f57a:	687b      	ldr	r3, [r7, #4]
 801f57c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f580:	687b      	ldr	r3, [r7, #4]
 801f582:	00db      	lsls	r3, r3, #3
 801f584:	4a08      	ldr	r2, [pc, #32]	; (801f5a8 <sys_timeouts_init+0x3c>)
 801f586:	4413      	add	r3, r2
 801f588:	461a      	mov	r2, r3
 801f58a:	4908      	ldr	r1, [pc, #32]	; (801f5ac <sys_timeouts_init+0x40>)
 801f58c:	f000 f810 	bl	801f5b0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	3301      	adds	r3, #1
 801f594:	607b      	str	r3, [r7, #4]
 801f596:	687b      	ldr	r3, [r7, #4]
 801f598:	2b02      	cmp	r3, #2
 801f59a:	d9ed      	bls.n	801f578 <sys_timeouts_init+0xc>
  }
}
 801f59c:	bf00      	nop
 801f59e:	bf00      	nop
 801f5a0:	3708      	adds	r7, #8
 801f5a2:	46bd      	mov	sp, r7
 801f5a4:	bd80      	pop	{r7, pc}
 801f5a6:	bf00      	nop
 801f5a8:	080285c4 	.word	0x080285c4
 801f5ac:	0801f509 	.word	0x0801f509

0801f5b0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f5b0:	b580      	push	{r7, lr}
 801f5b2:	b086      	sub	sp, #24
 801f5b4:	af00      	add	r7, sp, #0
 801f5b6:	60f8      	str	r0, [r7, #12]
 801f5b8:	60b9      	str	r1, [r7, #8]
 801f5ba:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f5bc:	68fb      	ldr	r3, [r7, #12]
 801f5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f5c2:	d306      	bcc.n	801f5d2 <sys_timeout+0x22>
 801f5c4:	4b0a      	ldr	r3, [pc, #40]	; (801f5f0 <sys_timeout+0x40>)
 801f5c6:	f240 1229 	movw	r2, #297	; 0x129
 801f5ca:	490a      	ldr	r1, [pc, #40]	; (801f5f4 <sys_timeout+0x44>)
 801f5cc:	480a      	ldr	r0, [pc, #40]	; (801f5f8 <sys_timeout+0x48>)
 801f5ce:	f003 fbaf 	bl	8022d30 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f5d2:	f7ee faa1 	bl	800db18 <sys_now>
 801f5d6:	4602      	mov	r2, r0
 801f5d8:	68fb      	ldr	r3, [r7, #12]
 801f5da:	4413      	add	r3, r2
 801f5dc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f5de:	687a      	ldr	r2, [r7, #4]
 801f5e0:	68b9      	ldr	r1, [r7, #8]
 801f5e2:	6978      	ldr	r0, [r7, #20]
 801f5e4:	f7ff ff22 	bl	801f42c <sys_timeout_abs>
#endif
}
 801f5e8:	bf00      	nop
 801f5ea:	3718      	adds	r7, #24
 801f5ec:	46bd      	mov	sp, r7
 801f5ee:	bd80      	pop	{r7, pc}
 801f5f0:	08027af4 	.word	0x08027af4
 801f5f4:	08027bcc 	.word	0x08027bcc
 801f5f8:	08027ba4 	.word	0x08027ba4

0801f5fc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801f5fc:	b580      	push	{r7, lr}
 801f5fe:	b084      	sub	sp, #16
 801f600:	af00      	add	r7, sp, #0
 801f602:	6078      	str	r0, [r7, #4]
 801f604:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f606:	4b19      	ldr	r3, [pc, #100]	; (801f66c <sys_untimeout+0x70>)
 801f608:	681b      	ldr	r3, [r3, #0]
 801f60a:	2b00      	cmp	r3, #0
 801f60c:	d029      	beq.n	801f662 <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801f60e:	4b17      	ldr	r3, [pc, #92]	; (801f66c <sys_untimeout+0x70>)
 801f610:	681b      	ldr	r3, [r3, #0]
 801f612:	60bb      	str	r3, [r7, #8]
 801f614:	2300      	movs	r3, #0
 801f616:	60fb      	str	r3, [r7, #12]
 801f618:	e01f      	b.n	801f65a <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 801f61a:	68bb      	ldr	r3, [r7, #8]
 801f61c:	689b      	ldr	r3, [r3, #8]
 801f61e:	687a      	ldr	r2, [r7, #4]
 801f620:	429a      	cmp	r2, r3
 801f622:	d115      	bne.n	801f650 <sys_untimeout+0x54>
 801f624:	68bb      	ldr	r3, [r7, #8]
 801f626:	68db      	ldr	r3, [r3, #12]
 801f628:	683a      	ldr	r2, [r7, #0]
 801f62a:	429a      	cmp	r2, r3
 801f62c:	d110      	bne.n	801f650 <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801f62e:	68fb      	ldr	r3, [r7, #12]
 801f630:	2b00      	cmp	r3, #0
 801f632:	d104      	bne.n	801f63e <sys_untimeout+0x42>
        next_timeout = t->next;
 801f634:	68bb      	ldr	r3, [r7, #8]
 801f636:	681b      	ldr	r3, [r3, #0]
 801f638:	4a0c      	ldr	r2, [pc, #48]	; (801f66c <sys_untimeout+0x70>)
 801f63a:	6013      	str	r3, [r2, #0]
 801f63c:	e003      	b.n	801f646 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801f63e:	68bb      	ldr	r3, [r7, #8]
 801f640:	681a      	ldr	r2, [r3, #0]
 801f642:	68fb      	ldr	r3, [r7, #12]
 801f644:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801f646:	68b9      	ldr	r1, [r7, #8]
 801f648:	200a      	movs	r0, #10
 801f64a:	f7f7 ffff 	bl	801764c <memp_free>
      return;
 801f64e:	e009      	b.n	801f664 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801f650:	68bb      	ldr	r3, [r7, #8]
 801f652:	60fb      	str	r3, [r7, #12]
 801f654:	68bb      	ldr	r3, [r7, #8]
 801f656:	681b      	ldr	r3, [r3, #0]
 801f658:	60bb      	str	r3, [r7, #8]
 801f65a:	68bb      	ldr	r3, [r7, #8]
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	d1dc      	bne.n	801f61a <sys_untimeout+0x1e>
    }
  }
  return;
 801f660:	e000      	b.n	801f664 <sys_untimeout+0x68>
    return;
 801f662:	bf00      	nop
}
 801f664:	3710      	adds	r7, #16
 801f666:	46bd      	mov	sp, r7
 801f668:	bd80      	pop	{r7, pc}
 801f66a:	bf00      	nop
 801f66c:	2002393c 	.word	0x2002393c

0801f670 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f670:	b580      	push	{r7, lr}
 801f672:	b084      	sub	sp, #16
 801f674:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f676:	f7ee fa4f 	bl	800db18 <sys_now>
 801f67a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f67c:	4b17      	ldr	r3, [pc, #92]	; (801f6dc <sys_check_timeouts+0x6c>)
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f682:	68bb      	ldr	r3, [r7, #8]
 801f684:	2b00      	cmp	r3, #0
 801f686:	d022      	beq.n	801f6ce <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f688:	68bb      	ldr	r3, [r7, #8]
 801f68a:	685b      	ldr	r3, [r3, #4]
 801f68c:	68fa      	ldr	r2, [r7, #12]
 801f68e:	1ad3      	subs	r3, r2, r3
 801f690:	0fdb      	lsrs	r3, r3, #31
 801f692:	f003 0301 	and.w	r3, r3, #1
 801f696:	b2db      	uxtb	r3, r3
 801f698:	2b00      	cmp	r3, #0
 801f69a:	d11a      	bne.n	801f6d2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f69c:	68bb      	ldr	r3, [r7, #8]
 801f69e:	681b      	ldr	r3, [r3, #0]
 801f6a0:	4a0e      	ldr	r2, [pc, #56]	; (801f6dc <sys_check_timeouts+0x6c>)
 801f6a2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f6a4:	68bb      	ldr	r3, [r7, #8]
 801f6a6:	689b      	ldr	r3, [r3, #8]
 801f6a8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f6aa:	68bb      	ldr	r3, [r7, #8]
 801f6ac:	68db      	ldr	r3, [r3, #12]
 801f6ae:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f6b0:	68bb      	ldr	r3, [r7, #8]
 801f6b2:	685b      	ldr	r3, [r3, #4]
 801f6b4:	4a0a      	ldr	r2, [pc, #40]	; (801f6e0 <sys_check_timeouts+0x70>)
 801f6b6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f6b8:	68b9      	ldr	r1, [r7, #8]
 801f6ba:	200a      	movs	r0, #10
 801f6bc:	f7f7 ffc6 	bl	801764c <memp_free>
    if (handler != NULL) {
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d0da      	beq.n	801f67c <sys_check_timeouts+0xc>
      handler(arg);
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	6838      	ldr	r0, [r7, #0]
 801f6ca:	4798      	blx	r3
  do {
 801f6cc:	e7d6      	b.n	801f67c <sys_check_timeouts+0xc>
      return;
 801f6ce:	bf00      	nop
 801f6d0:	e000      	b.n	801f6d4 <sys_check_timeouts+0x64>
      return;
 801f6d2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f6d4:	3710      	adds	r7, #16
 801f6d6:	46bd      	mov	sp, r7
 801f6d8:	bd80      	pop	{r7, pc}
 801f6da:	bf00      	nop
 801f6dc:	2002393c 	.word	0x2002393c
 801f6e0:	20023940 	.word	0x20023940

0801f6e4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f6e4:	b580      	push	{r7, lr}
 801f6e6:	b082      	sub	sp, #8
 801f6e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f6ea:	4b16      	ldr	r3, [pc, #88]	; (801f744 <sys_timeouts_sleeptime+0x60>)
 801f6ec:	681b      	ldr	r3, [r3, #0]
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	d102      	bne.n	801f6f8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f6f2:	f04f 33ff 	mov.w	r3, #4294967295
 801f6f6:	e020      	b.n	801f73a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801f6f8:	f7ee fa0e 	bl	800db18 <sys_now>
 801f6fc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f6fe:	4b11      	ldr	r3, [pc, #68]	; (801f744 <sys_timeouts_sleeptime+0x60>)
 801f700:	681b      	ldr	r3, [r3, #0]
 801f702:	685a      	ldr	r2, [r3, #4]
 801f704:	687b      	ldr	r3, [r7, #4]
 801f706:	1ad3      	subs	r3, r2, r3
 801f708:	0fdb      	lsrs	r3, r3, #31
 801f70a:	f003 0301 	and.w	r3, r3, #1
 801f70e:	b2db      	uxtb	r3, r3
 801f710:	2b00      	cmp	r3, #0
 801f712:	d001      	beq.n	801f718 <sys_timeouts_sleeptime+0x34>
    return 0;
 801f714:	2300      	movs	r3, #0
 801f716:	e010      	b.n	801f73a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801f718:	4b0a      	ldr	r3, [pc, #40]	; (801f744 <sys_timeouts_sleeptime+0x60>)
 801f71a:	681b      	ldr	r3, [r3, #0]
 801f71c:	685a      	ldr	r2, [r3, #4]
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	1ad3      	subs	r3, r2, r3
 801f722:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801f724:	683b      	ldr	r3, [r7, #0]
 801f726:	2b00      	cmp	r3, #0
 801f728:	da06      	bge.n	801f738 <sys_timeouts_sleeptime+0x54>
 801f72a:	4b07      	ldr	r3, [pc, #28]	; (801f748 <sys_timeouts_sleeptime+0x64>)
 801f72c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801f730:	4906      	ldr	r1, [pc, #24]	; (801f74c <sys_timeouts_sleeptime+0x68>)
 801f732:	4807      	ldr	r0, [pc, #28]	; (801f750 <sys_timeouts_sleeptime+0x6c>)
 801f734:	f003 fafc 	bl	8022d30 <iprintf>
    return ret;
 801f738:	683b      	ldr	r3, [r7, #0]
  }
}
 801f73a:	4618      	mov	r0, r3
 801f73c:	3708      	adds	r7, #8
 801f73e:	46bd      	mov	sp, r7
 801f740:	bd80      	pop	{r7, pc}
 801f742:	bf00      	nop
 801f744:	2002393c 	.word	0x2002393c
 801f748:	08027af4 	.word	0x08027af4
 801f74c:	08027c04 	.word	0x08027c04
 801f750:	08027ba4 	.word	0x08027ba4

0801f754 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f754:	b580      	push	{r7, lr}
 801f756:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f758:	f003 f9fc 	bl	8022b54 <rand>
 801f75c:	4603      	mov	r3, r0
 801f75e:	b29b      	uxth	r3, r3
 801f760:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f764:	b29b      	uxth	r3, r3
 801f766:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f76a:	b29a      	uxth	r2, r3
 801f76c:	4b01      	ldr	r3, [pc, #4]	; (801f774 <udp_init+0x20>)
 801f76e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f770:	bf00      	nop
 801f772:	bd80      	pop	{r7, pc}
 801f774:	20000034 	.word	0x20000034

0801f778 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f778:	b480      	push	{r7}
 801f77a:	b083      	sub	sp, #12
 801f77c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f77e:	2300      	movs	r3, #0
 801f780:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f782:	4b17      	ldr	r3, [pc, #92]	; (801f7e0 <udp_new_port+0x68>)
 801f784:	881b      	ldrh	r3, [r3, #0]
 801f786:	1c5a      	adds	r2, r3, #1
 801f788:	b291      	uxth	r1, r2
 801f78a:	4a15      	ldr	r2, [pc, #84]	; (801f7e0 <udp_new_port+0x68>)
 801f78c:	8011      	strh	r1, [r2, #0]
 801f78e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f792:	4293      	cmp	r3, r2
 801f794:	d103      	bne.n	801f79e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f796:	4b12      	ldr	r3, [pc, #72]	; (801f7e0 <udp_new_port+0x68>)
 801f798:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f79c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f79e:	4b11      	ldr	r3, [pc, #68]	; (801f7e4 <udp_new_port+0x6c>)
 801f7a0:	681b      	ldr	r3, [r3, #0]
 801f7a2:	603b      	str	r3, [r7, #0]
 801f7a4:	e011      	b.n	801f7ca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f7a6:	683b      	ldr	r3, [r7, #0]
 801f7a8:	8a5a      	ldrh	r2, [r3, #18]
 801f7aa:	4b0d      	ldr	r3, [pc, #52]	; (801f7e0 <udp_new_port+0x68>)
 801f7ac:	881b      	ldrh	r3, [r3, #0]
 801f7ae:	429a      	cmp	r2, r3
 801f7b0:	d108      	bne.n	801f7c4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f7b2:	88fb      	ldrh	r3, [r7, #6]
 801f7b4:	3301      	adds	r3, #1
 801f7b6:	80fb      	strh	r3, [r7, #6]
 801f7b8:	88fb      	ldrh	r3, [r7, #6]
 801f7ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f7be:	d3e0      	bcc.n	801f782 <udp_new_port+0xa>
        return 0;
 801f7c0:	2300      	movs	r3, #0
 801f7c2:	e007      	b.n	801f7d4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f7c4:	683b      	ldr	r3, [r7, #0]
 801f7c6:	68db      	ldr	r3, [r3, #12]
 801f7c8:	603b      	str	r3, [r7, #0]
 801f7ca:	683b      	ldr	r3, [r7, #0]
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	d1ea      	bne.n	801f7a6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f7d0:	4b03      	ldr	r3, [pc, #12]	; (801f7e0 <udp_new_port+0x68>)
 801f7d2:	881b      	ldrh	r3, [r3, #0]
}
 801f7d4:	4618      	mov	r0, r3
 801f7d6:	370c      	adds	r7, #12
 801f7d8:	46bd      	mov	sp, r7
 801f7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7de:	4770      	bx	lr
 801f7e0:	20000034 	.word	0x20000034
 801f7e4:	20023948 	.word	0x20023948

0801f7e8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f7e8:	b580      	push	{r7, lr}
 801f7ea:	b084      	sub	sp, #16
 801f7ec:	af00      	add	r7, sp, #0
 801f7ee:	60f8      	str	r0, [r7, #12]
 801f7f0:	60b9      	str	r1, [r7, #8]
 801f7f2:	4613      	mov	r3, r2
 801f7f4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f7f6:	68fb      	ldr	r3, [r7, #12]
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	d105      	bne.n	801f808 <udp_input_local_match+0x20>
 801f7fc:	4b27      	ldr	r3, [pc, #156]	; (801f89c <udp_input_local_match+0xb4>)
 801f7fe:	2287      	movs	r2, #135	; 0x87
 801f800:	4927      	ldr	r1, [pc, #156]	; (801f8a0 <udp_input_local_match+0xb8>)
 801f802:	4828      	ldr	r0, [pc, #160]	; (801f8a4 <udp_input_local_match+0xbc>)
 801f804:	f003 fa94 	bl	8022d30 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f808:	68bb      	ldr	r3, [r7, #8]
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d105      	bne.n	801f81a <udp_input_local_match+0x32>
 801f80e:	4b23      	ldr	r3, [pc, #140]	; (801f89c <udp_input_local_match+0xb4>)
 801f810:	2288      	movs	r2, #136	; 0x88
 801f812:	4925      	ldr	r1, [pc, #148]	; (801f8a8 <udp_input_local_match+0xc0>)
 801f814:	4823      	ldr	r0, [pc, #140]	; (801f8a4 <udp_input_local_match+0xbc>)
 801f816:	f003 fa8b 	bl	8022d30 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f81a:	68fb      	ldr	r3, [r7, #12]
 801f81c:	7a1b      	ldrb	r3, [r3, #8]
 801f81e:	2b00      	cmp	r3, #0
 801f820:	d00b      	beq.n	801f83a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f822:	68fb      	ldr	r3, [r7, #12]
 801f824:	7a1a      	ldrb	r2, [r3, #8]
 801f826:	4b21      	ldr	r3, [pc, #132]	; (801f8ac <udp_input_local_match+0xc4>)
 801f828:	685b      	ldr	r3, [r3, #4]
 801f82a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f82e:	3301      	adds	r3, #1
 801f830:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f832:	429a      	cmp	r2, r3
 801f834:	d001      	beq.n	801f83a <udp_input_local_match+0x52>
    return 0;
 801f836:	2300      	movs	r3, #0
 801f838:	e02b      	b.n	801f892 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f83a:	79fb      	ldrb	r3, [r7, #7]
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	d018      	beq.n	801f872 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f840:	68fb      	ldr	r3, [r7, #12]
 801f842:	2b00      	cmp	r3, #0
 801f844:	d013      	beq.n	801f86e <udp_input_local_match+0x86>
 801f846:	68fb      	ldr	r3, [r7, #12]
 801f848:	681b      	ldr	r3, [r3, #0]
 801f84a:	2b00      	cmp	r3, #0
 801f84c:	d00f      	beq.n	801f86e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f84e:	4b17      	ldr	r3, [pc, #92]	; (801f8ac <udp_input_local_match+0xc4>)
 801f850:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f852:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f856:	d00a      	beq.n	801f86e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f858:	68fb      	ldr	r3, [r7, #12]
 801f85a:	681a      	ldr	r2, [r3, #0]
 801f85c:	4b13      	ldr	r3, [pc, #76]	; (801f8ac <udp_input_local_match+0xc4>)
 801f85e:	695b      	ldr	r3, [r3, #20]
 801f860:	405a      	eors	r2, r3
 801f862:	68bb      	ldr	r3, [r7, #8]
 801f864:	3308      	adds	r3, #8
 801f866:	681b      	ldr	r3, [r3, #0]
 801f868:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f86a:	2b00      	cmp	r3, #0
 801f86c:	d110      	bne.n	801f890 <udp_input_local_match+0xa8>
          return 1;
 801f86e:	2301      	movs	r3, #1
 801f870:	e00f      	b.n	801f892 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f872:	68fb      	ldr	r3, [r7, #12]
 801f874:	2b00      	cmp	r3, #0
 801f876:	d009      	beq.n	801f88c <udp_input_local_match+0xa4>
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	681b      	ldr	r3, [r3, #0]
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	d005      	beq.n	801f88c <udp_input_local_match+0xa4>
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	681a      	ldr	r2, [r3, #0]
 801f884:	4b09      	ldr	r3, [pc, #36]	; (801f8ac <udp_input_local_match+0xc4>)
 801f886:	695b      	ldr	r3, [r3, #20]
 801f888:	429a      	cmp	r2, r3
 801f88a:	d101      	bne.n	801f890 <udp_input_local_match+0xa8>
        return 1;
 801f88c:	2301      	movs	r3, #1
 801f88e:	e000      	b.n	801f892 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f890:	2300      	movs	r3, #0
}
 801f892:	4618      	mov	r0, r3
 801f894:	3710      	adds	r7, #16
 801f896:	46bd      	mov	sp, r7
 801f898:	bd80      	pop	{r7, pc}
 801f89a:	bf00      	nop
 801f89c:	08027c18 	.word	0x08027c18
 801f8a0:	08027c80 	.word	0x08027c80
 801f8a4:	08027ca4 	.word	0x08027ca4
 801f8a8:	08027ccc 	.word	0x08027ccc
 801f8ac:	20018f08 	.word	0x20018f08

0801f8b0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f8b0:	b590      	push	{r4, r7, lr}
 801f8b2:	b08d      	sub	sp, #52	; 0x34
 801f8b4:	af02      	add	r7, sp, #8
 801f8b6:	6078      	str	r0, [r7, #4]
 801f8b8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f8ba:	2300      	movs	r3, #0
 801f8bc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	2b00      	cmp	r3, #0
 801f8c2:	d105      	bne.n	801f8d0 <udp_input+0x20>
 801f8c4:	4b7c      	ldr	r3, [pc, #496]	; (801fab8 <udp_input+0x208>)
 801f8c6:	22cf      	movs	r2, #207	; 0xcf
 801f8c8:	497c      	ldr	r1, [pc, #496]	; (801fabc <udp_input+0x20c>)
 801f8ca:	487d      	ldr	r0, [pc, #500]	; (801fac0 <udp_input+0x210>)
 801f8cc:	f003 fa30 	bl	8022d30 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f8d0:	683b      	ldr	r3, [r7, #0]
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d105      	bne.n	801f8e2 <udp_input+0x32>
 801f8d6:	4b78      	ldr	r3, [pc, #480]	; (801fab8 <udp_input+0x208>)
 801f8d8:	22d0      	movs	r2, #208	; 0xd0
 801f8da:	497a      	ldr	r1, [pc, #488]	; (801fac4 <udp_input+0x214>)
 801f8dc:	4878      	ldr	r0, [pc, #480]	; (801fac0 <udp_input+0x210>)
 801f8de:	f003 fa27 	bl	8022d30 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f8e2:	687b      	ldr	r3, [r7, #4]
 801f8e4:	895b      	ldrh	r3, [r3, #10]
 801f8e6:	2b07      	cmp	r3, #7
 801f8e8:	d803      	bhi.n	801f8f2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f8ea:	6878      	ldr	r0, [r7, #4]
 801f8ec:	f7f8 fda2 	bl	8018434 <pbuf_free>
    goto end;
 801f8f0:	e0de      	b.n	801fab0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f8f2:	687b      	ldr	r3, [r7, #4]
 801f8f4:	685b      	ldr	r3, [r3, #4]
 801f8f6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f8f8:	4b73      	ldr	r3, [pc, #460]	; (801fac8 <udp_input+0x218>)
 801f8fa:	695b      	ldr	r3, [r3, #20]
 801f8fc:	4a72      	ldr	r2, [pc, #456]	; (801fac8 <udp_input+0x218>)
 801f8fe:	6812      	ldr	r2, [r2, #0]
 801f900:	4611      	mov	r1, r2
 801f902:	4618      	mov	r0, r3
 801f904:	f7f6 fb1a 	bl	8015f3c <ip4_addr_isbroadcast_u32>
 801f908:	4603      	mov	r3, r0
 801f90a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f90c:	697b      	ldr	r3, [r7, #20]
 801f90e:	881b      	ldrh	r3, [r3, #0]
 801f910:	b29b      	uxth	r3, r3
 801f912:	4618      	mov	r0, r3
 801f914:	f7f4 fe86 	bl	8014624 <lwip_htons>
 801f918:	4603      	mov	r3, r0
 801f91a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f91c:	697b      	ldr	r3, [r7, #20]
 801f91e:	885b      	ldrh	r3, [r3, #2]
 801f920:	b29b      	uxth	r3, r3
 801f922:	4618      	mov	r0, r3
 801f924:	f7f4 fe7e 	bl	8014624 <lwip_htons>
 801f928:	4603      	mov	r3, r0
 801f92a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f92c:	2300      	movs	r3, #0
 801f92e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f930:	2300      	movs	r3, #0
 801f932:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f934:	2300      	movs	r3, #0
 801f936:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f938:	4b64      	ldr	r3, [pc, #400]	; (801facc <udp_input+0x21c>)
 801f93a:	681b      	ldr	r3, [r3, #0]
 801f93c:	627b      	str	r3, [r7, #36]	; 0x24
 801f93e:	e054      	b.n	801f9ea <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f942:	8a5b      	ldrh	r3, [r3, #18]
 801f944:	89fa      	ldrh	r2, [r7, #14]
 801f946:	429a      	cmp	r2, r3
 801f948:	d14a      	bne.n	801f9e0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f94a:	7cfb      	ldrb	r3, [r7, #19]
 801f94c:	461a      	mov	r2, r3
 801f94e:	6839      	ldr	r1, [r7, #0]
 801f950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f952:	f7ff ff49 	bl	801f7e8 <udp_input_local_match>
 801f956:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d041      	beq.n	801f9e0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f95e:	7c1b      	ldrb	r3, [r3, #16]
 801f960:	f003 0304 	and.w	r3, r3, #4
 801f964:	2b00      	cmp	r3, #0
 801f966:	d11d      	bne.n	801f9a4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f968:	69fb      	ldr	r3, [r7, #28]
 801f96a:	2b00      	cmp	r3, #0
 801f96c:	d102      	bne.n	801f974 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f970:	61fb      	str	r3, [r7, #28]
 801f972:	e017      	b.n	801f9a4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f974:	7cfb      	ldrb	r3, [r7, #19]
 801f976:	2b00      	cmp	r3, #0
 801f978:	d014      	beq.n	801f9a4 <udp_input+0xf4>
 801f97a:	4b53      	ldr	r3, [pc, #332]	; (801fac8 <udp_input+0x218>)
 801f97c:	695b      	ldr	r3, [r3, #20]
 801f97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f982:	d10f      	bne.n	801f9a4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f984:	69fb      	ldr	r3, [r7, #28]
 801f986:	681a      	ldr	r2, [r3, #0]
 801f988:	683b      	ldr	r3, [r7, #0]
 801f98a:	3304      	adds	r3, #4
 801f98c:	681b      	ldr	r3, [r3, #0]
 801f98e:	429a      	cmp	r2, r3
 801f990:	d008      	beq.n	801f9a4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f994:	681a      	ldr	r2, [r3, #0]
 801f996:	683b      	ldr	r3, [r7, #0]
 801f998:	3304      	adds	r3, #4
 801f99a:	681b      	ldr	r3, [r3, #0]
 801f99c:	429a      	cmp	r2, r3
 801f99e:	d101      	bne.n	801f9a4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9a2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9a6:	8a9b      	ldrh	r3, [r3, #20]
 801f9a8:	8a3a      	ldrh	r2, [r7, #16]
 801f9aa:	429a      	cmp	r2, r3
 801f9ac:	d118      	bne.n	801f9e0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9b0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	d005      	beq.n	801f9c2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9b8:	685a      	ldr	r2, [r3, #4]
 801f9ba:	4b43      	ldr	r3, [pc, #268]	; (801fac8 <udp_input+0x218>)
 801f9bc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f9be:	429a      	cmp	r2, r3
 801f9c0:	d10e      	bne.n	801f9e0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f9c2:	6a3b      	ldr	r3, [r7, #32]
 801f9c4:	2b00      	cmp	r3, #0
 801f9c6:	d014      	beq.n	801f9f2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9ca:	68da      	ldr	r2, [r3, #12]
 801f9cc:	6a3b      	ldr	r3, [r7, #32]
 801f9ce:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f9d0:	4b3e      	ldr	r3, [pc, #248]	; (801facc <udp_input+0x21c>)
 801f9d2:	681a      	ldr	r2, [r3, #0]
 801f9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9d6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f9d8:	4a3c      	ldr	r2, [pc, #240]	; (801facc <udp_input+0x21c>)
 801f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9dc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f9de:	e008      	b.n	801f9f2 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9e2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9e6:	68db      	ldr	r3, [r3, #12]
 801f9e8:	627b      	str	r3, [r7, #36]	; 0x24
 801f9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	d1a7      	bne.n	801f940 <udp_input+0x90>
 801f9f0:	e000      	b.n	801f9f4 <udp_input+0x144>
        break;
 801f9f2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9f6:	2b00      	cmp	r3, #0
 801f9f8:	d101      	bne.n	801f9fe <udp_input+0x14e>
    pcb = uncon_pcb;
 801f9fa:	69fb      	ldr	r3, [r7, #28]
 801f9fc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d002      	beq.n	801fa0a <udp_input+0x15a>
    for_us = 1;
 801fa04:	2301      	movs	r3, #1
 801fa06:	76fb      	strb	r3, [r7, #27]
 801fa08:	e00a      	b.n	801fa20 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801fa0a:	683b      	ldr	r3, [r7, #0]
 801fa0c:	3304      	adds	r3, #4
 801fa0e:	681a      	ldr	r2, [r3, #0]
 801fa10:	4b2d      	ldr	r3, [pc, #180]	; (801fac8 <udp_input+0x218>)
 801fa12:	695b      	ldr	r3, [r3, #20]
 801fa14:	429a      	cmp	r2, r3
 801fa16:	bf0c      	ite	eq
 801fa18:	2301      	moveq	r3, #1
 801fa1a:	2300      	movne	r3, #0
 801fa1c:	b2db      	uxtb	r3, r3
 801fa1e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801fa20:	7efb      	ldrb	r3, [r7, #27]
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d041      	beq.n	801faaa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fa26:	2108      	movs	r1, #8
 801fa28:	6878      	ldr	r0, [r7, #4]
 801fa2a:	f7f8 fc7d 	bl	8018328 <pbuf_remove_header>
 801fa2e:	4603      	mov	r3, r0
 801fa30:	2b00      	cmp	r3, #0
 801fa32:	d00a      	beq.n	801fa4a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801fa34:	4b20      	ldr	r3, [pc, #128]	; (801fab8 <udp_input+0x208>)
 801fa36:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801fa3a:	4925      	ldr	r1, [pc, #148]	; (801fad0 <udp_input+0x220>)
 801fa3c:	4820      	ldr	r0, [pc, #128]	; (801fac0 <udp_input+0x210>)
 801fa3e:	f003 f977 	bl	8022d30 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801fa42:	6878      	ldr	r0, [r7, #4]
 801fa44:	f7f8 fcf6 	bl	8018434 <pbuf_free>
      goto end;
 801fa48:	e032      	b.n	801fab0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa4c:	2b00      	cmp	r3, #0
 801fa4e:	d012      	beq.n	801fa76 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fa50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa52:	699b      	ldr	r3, [r3, #24]
 801fa54:	2b00      	cmp	r3, #0
 801fa56:	d00a      	beq.n	801fa6e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801fa58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa5a:	699c      	ldr	r4, [r3, #24]
 801fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa5e:	69d8      	ldr	r0, [r3, #28]
 801fa60:	8a3b      	ldrh	r3, [r7, #16]
 801fa62:	9300      	str	r3, [sp, #0]
 801fa64:	4b1b      	ldr	r3, [pc, #108]	; (801fad4 <udp_input+0x224>)
 801fa66:	687a      	ldr	r2, [r7, #4]
 801fa68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fa6a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801fa6c:	e021      	b.n	801fab2 <udp_input+0x202>
        pbuf_free(p);
 801fa6e:	6878      	ldr	r0, [r7, #4]
 801fa70:	f7f8 fce0 	bl	8018434 <pbuf_free>
        goto end;
 801fa74:	e01c      	b.n	801fab0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801fa76:	7cfb      	ldrb	r3, [r7, #19]
 801fa78:	2b00      	cmp	r3, #0
 801fa7a:	d112      	bne.n	801faa2 <udp_input+0x1f2>
 801fa7c:	4b12      	ldr	r3, [pc, #72]	; (801fac8 <udp_input+0x218>)
 801fa7e:	695b      	ldr	r3, [r3, #20]
 801fa80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fa84:	2be0      	cmp	r3, #224	; 0xe0
 801fa86:	d00c      	beq.n	801faa2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801fa88:	4b0f      	ldr	r3, [pc, #60]	; (801fac8 <udp_input+0x218>)
 801fa8a:	899b      	ldrh	r3, [r3, #12]
 801fa8c:	3308      	adds	r3, #8
 801fa8e:	b29b      	uxth	r3, r3
 801fa90:	b21b      	sxth	r3, r3
 801fa92:	4619      	mov	r1, r3
 801fa94:	6878      	ldr	r0, [r7, #4]
 801fa96:	f7f8 fcba 	bl	801840e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801fa9a:	2103      	movs	r1, #3
 801fa9c:	6878      	ldr	r0, [r7, #4]
 801fa9e:	f7f5 ff15 	bl	80158cc <icmp_dest_unreach>
      pbuf_free(p);
 801faa2:	6878      	ldr	r0, [r7, #4]
 801faa4:	f7f8 fcc6 	bl	8018434 <pbuf_free>
  return;
 801faa8:	e003      	b.n	801fab2 <udp_input+0x202>
    pbuf_free(p);
 801faaa:	6878      	ldr	r0, [r7, #4]
 801faac:	f7f8 fcc2 	bl	8018434 <pbuf_free>
  return;
 801fab0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fab2:	372c      	adds	r7, #44	; 0x2c
 801fab4:	46bd      	mov	sp, r7
 801fab6:	bd90      	pop	{r4, r7, pc}
 801fab8:	08027c18 	.word	0x08027c18
 801fabc:	08027cf4 	.word	0x08027cf4
 801fac0:	08027ca4 	.word	0x08027ca4
 801fac4:	08027d0c 	.word	0x08027d0c
 801fac8:	20018f08 	.word	0x20018f08
 801facc:	20023948 	.word	0x20023948
 801fad0:	08027d28 	.word	0x08027d28
 801fad4:	20018f18 	.word	0x20018f18

0801fad8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fad8:	b580      	push	{r7, lr}
 801fada:	b086      	sub	sp, #24
 801fadc:	af00      	add	r7, sp, #0
 801fade:	60f8      	str	r0, [r7, #12]
 801fae0:	60b9      	str	r1, [r7, #8]
 801fae2:	4613      	mov	r3, r2
 801fae4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fae6:	68bb      	ldr	r3, [r7, #8]
 801fae8:	2b00      	cmp	r3, #0
 801faea:	d101      	bne.n	801faf0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801faec:	4b39      	ldr	r3, [pc, #228]	; (801fbd4 <udp_bind+0xfc>)
 801faee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801faf0:	68fb      	ldr	r3, [r7, #12]
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	d109      	bne.n	801fb0a <udp_bind+0x32>
 801faf6:	4b38      	ldr	r3, [pc, #224]	; (801fbd8 <udp_bind+0x100>)
 801faf8:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fafc:	4937      	ldr	r1, [pc, #220]	; (801fbdc <udp_bind+0x104>)
 801fafe:	4838      	ldr	r0, [pc, #224]	; (801fbe0 <udp_bind+0x108>)
 801fb00:	f003 f916 	bl	8022d30 <iprintf>
 801fb04:	f06f 030f 	mvn.w	r3, #15
 801fb08:	e060      	b.n	801fbcc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801fb0a:	2300      	movs	r3, #0
 801fb0c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fb0e:	4b35      	ldr	r3, [pc, #212]	; (801fbe4 <udp_bind+0x10c>)
 801fb10:	681b      	ldr	r3, [r3, #0]
 801fb12:	617b      	str	r3, [r7, #20]
 801fb14:	e009      	b.n	801fb2a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fb16:	68fa      	ldr	r2, [r7, #12]
 801fb18:	697b      	ldr	r3, [r7, #20]
 801fb1a:	429a      	cmp	r2, r3
 801fb1c:	d102      	bne.n	801fb24 <udp_bind+0x4c>
      rebind = 1;
 801fb1e:	2301      	movs	r3, #1
 801fb20:	74fb      	strb	r3, [r7, #19]
      break;
 801fb22:	e005      	b.n	801fb30 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fb24:	697b      	ldr	r3, [r7, #20]
 801fb26:	68db      	ldr	r3, [r3, #12]
 801fb28:	617b      	str	r3, [r7, #20]
 801fb2a:	697b      	ldr	r3, [r7, #20]
 801fb2c:	2b00      	cmp	r3, #0
 801fb2e:	d1f2      	bne.n	801fb16 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fb30:	88fb      	ldrh	r3, [r7, #6]
 801fb32:	2b00      	cmp	r3, #0
 801fb34:	d109      	bne.n	801fb4a <udp_bind+0x72>
    port = udp_new_port();
 801fb36:	f7ff fe1f 	bl	801f778 <udp_new_port>
 801fb3a:	4603      	mov	r3, r0
 801fb3c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fb3e:	88fb      	ldrh	r3, [r7, #6]
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d12c      	bne.n	801fb9e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fb44:	f06f 0307 	mvn.w	r3, #7
 801fb48:	e040      	b.n	801fbcc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fb4a:	4b26      	ldr	r3, [pc, #152]	; (801fbe4 <udp_bind+0x10c>)
 801fb4c:	681b      	ldr	r3, [r3, #0]
 801fb4e:	617b      	str	r3, [r7, #20]
 801fb50:	e022      	b.n	801fb98 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801fb52:	68fa      	ldr	r2, [r7, #12]
 801fb54:	697b      	ldr	r3, [r7, #20]
 801fb56:	429a      	cmp	r2, r3
 801fb58:	d01b      	beq.n	801fb92 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fb5a:	697b      	ldr	r3, [r7, #20]
 801fb5c:	8a5b      	ldrh	r3, [r3, #18]
 801fb5e:	88fa      	ldrh	r2, [r7, #6]
 801fb60:	429a      	cmp	r2, r3
 801fb62:	d116      	bne.n	801fb92 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb64:	697b      	ldr	r3, [r7, #20]
 801fb66:	681a      	ldr	r2, [r3, #0]
 801fb68:	68bb      	ldr	r3, [r7, #8]
 801fb6a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fb6c:	429a      	cmp	r2, r3
 801fb6e:	d00d      	beq.n	801fb8c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb70:	68bb      	ldr	r3, [r7, #8]
 801fb72:	2b00      	cmp	r3, #0
 801fb74:	d00a      	beq.n	801fb8c <udp_bind+0xb4>
 801fb76:	68bb      	ldr	r3, [r7, #8]
 801fb78:	681b      	ldr	r3, [r3, #0]
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d006      	beq.n	801fb8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fb7e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fb80:	2b00      	cmp	r3, #0
 801fb82:	d003      	beq.n	801fb8c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fb84:	697b      	ldr	r3, [r7, #20]
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	d102      	bne.n	801fb92 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fb8c:	f06f 0307 	mvn.w	r3, #7
 801fb90:	e01c      	b.n	801fbcc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fb92:	697b      	ldr	r3, [r7, #20]
 801fb94:	68db      	ldr	r3, [r3, #12]
 801fb96:	617b      	str	r3, [r7, #20]
 801fb98:	697b      	ldr	r3, [r7, #20]
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d1d9      	bne.n	801fb52 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fb9e:	68bb      	ldr	r3, [r7, #8]
 801fba0:	2b00      	cmp	r3, #0
 801fba2:	d002      	beq.n	801fbaa <udp_bind+0xd2>
 801fba4:	68bb      	ldr	r3, [r7, #8]
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	e000      	b.n	801fbac <udp_bind+0xd4>
 801fbaa:	2300      	movs	r3, #0
 801fbac:	68fa      	ldr	r2, [r7, #12]
 801fbae:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fbb0:	68fb      	ldr	r3, [r7, #12]
 801fbb2:	88fa      	ldrh	r2, [r7, #6]
 801fbb4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fbb6:	7cfb      	ldrb	r3, [r7, #19]
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	d106      	bne.n	801fbca <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fbbc:	4b09      	ldr	r3, [pc, #36]	; (801fbe4 <udp_bind+0x10c>)
 801fbbe:	681a      	ldr	r2, [r3, #0]
 801fbc0:	68fb      	ldr	r3, [r7, #12]
 801fbc2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fbc4:	4a07      	ldr	r2, [pc, #28]	; (801fbe4 <udp_bind+0x10c>)
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fbca:	2300      	movs	r3, #0
}
 801fbcc:	4618      	mov	r0, r3
 801fbce:	3718      	adds	r7, #24
 801fbd0:	46bd      	mov	sp, r7
 801fbd2:	bd80      	pop	{r7, pc}
 801fbd4:	080284c8 	.word	0x080284c8
 801fbd8:	08027c18 	.word	0x08027c18
 801fbdc:	08027f18 	.word	0x08027f18
 801fbe0:	08027ca4 	.word	0x08027ca4
 801fbe4:	20023948 	.word	0x20023948

0801fbe8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fbe8:	b580      	push	{r7, lr}
 801fbea:	b086      	sub	sp, #24
 801fbec:	af00      	add	r7, sp, #0
 801fbee:	60f8      	str	r0, [r7, #12]
 801fbf0:	60b9      	str	r1, [r7, #8]
 801fbf2:	4613      	mov	r3, r2
 801fbf4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fbf6:	68fb      	ldr	r3, [r7, #12]
 801fbf8:	2b00      	cmp	r3, #0
 801fbfa:	d109      	bne.n	801fc10 <udp_connect+0x28>
 801fbfc:	4b2c      	ldr	r3, [pc, #176]	; (801fcb0 <udp_connect+0xc8>)
 801fbfe:	f240 4235 	movw	r2, #1077	; 0x435
 801fc02:	492c      	ldr	r1, [pc, #176]	; (801fcb4 <udp_connect+0xcc>)
 801fc04:	482c      	ldr	r0, [pc, #176]	; (801fcb8 <udp_connect+0xd0>)
 801fc06:	f003 f893 	bl	8022d30 <iprintf>
 801fc0a:	f06f 030f 	mvn.w	r3, #15
 801fc0e:	e04b      	b.n	801fca8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fc10:	68bb      	ldr	r3, [r7, #8]
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	d109      	bne.n	801fc2a <udp_connect+0x42>
 801fc16:	4b26      	ldr	r3, [pc, #152]	; (801fcb0 <udp_connect+0xc8>)
 801fc18:	f240 4236 	movw	r2, #1078	; 0x436
 801fc1c:	4927      	ldr	r1, [pc, #156]	; (801fcbc <udp_connect+0xd4>)
 801fc1e:	4826      	ldr	r0, [pc, #152]	; (801fcb8 <udp_connect+0xd0>)
 801fc20:	f003 f886 	bl	8022d30 <iprintf>
 801fc24:	f06f 030f 	mvn.w	r3, #15
 801fc28:	e03e      	b.n	801fca8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801fc2a:	68fb      	ldr	r3, [r7, #12]
 801fc2c:	8a5b      	ldrh	r3, [r3, #18]
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d10f      	bne.n	801fc52 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fc32:	68f9      	ldr	r1, [r7, #12]
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	8a5b      	ldrh	r3, [r3, #18]
 801fc38:	461a      	mov	r2, r3
 801fc3a:	68f8      	ldr	r0, [r7, #12]
 801fc3c:	f7ff ff4c 	bl	801fad8 <udp_bind>
 801fc40:	4603      	mov	r3, r0
 801fc42:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801fc44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	d002      	beq.n	801fc52 <udp_connect+0x6a>
      return err;
 801fc4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fc50:	e02a      	b.n	801fca8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fc52:	68bb      	ldr	r3, [r7, #8]
 801fc54:	2b00      	cmp	r3, #0
 801fc56:	d002      	beq.n	801fc5e <udp_connect+0x76>
 801fc58:	68bb      	ldr	r3, [r7, #8]
 801fc5a:	681b      	ldr	r3, [r3, #0]
 801fc5c:	e000      	b.n	801fc60 <udp_connect+0x78>
 801fc5e:	2300      	movs	r3, #0
 801fc60:	68fa      	ldr	r2, [r7, #12]
 801fc62:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801fc64:	68fb      	ldr	r3, [r7, #12]
 801fc66:	88fa      	ldrh	r2, [r7, #6]
 801fc68:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fc6a:	68fb      	ldr	r3, [r7, #12]
 801fc6c:	7c1b      	ldrb	r3, [r3, #16]
 801fc6e:	f043 0304 	orr.w	r3, r3, #4
 801fc72:	b2da      	uxtb	r2, r3
 801fc74:	68fb      	ldr	r3, [r7, #12]
 801fc76:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc78:	4b11      	ldr	r3, [pc, #68]	; (801fcc0 <udp_connect+0xd8>)
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	617b      	str	r3, [r7, #20]
 801fc7e:	e008      	b.n	801fc92 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801fc80:	68fa      	ldr	r2, [r7, #12]
 801fc82:	697b      	ldr	r3, [r7, #20]
 801fc84:	429a      	cmp	r2, r3
 801fc86:	d101      	bne.n	801fc8c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801fc88:	2300      	movs	r3, #0
 801fc8a:	e00d      	b.n	801fca8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fc8c:	697b      	ldr	r3, [r7, #20]
 801fc8e:	68db      	ldr	r3, [r3, #12]
 801fc90:	617b      	str	r3, [r7, #20]
 801fc92:	697b      	ldr	r3, [r7, #20]
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d1f3      	bne.n	801fc80 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801fc98:	4b09      	ldr	r3, [pc, #36]	; (801fcc0 <udp_connect+0xd8>)
 801fc9a:	681a      	ldr	r2, [r3, #0]
 801fc9c:	68fb      	ldr	r3, [r7, #12]
 801fc9e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801fca0:	4a07      	ldr	r2, [pc, #28]	; (801fcc0 <udp_connect+0xd8>)
 801fca2:	68fb      	ldr	r3, [r7, #12]
 801fca4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801fca6:	2300      	movs	r3, #0
}
 801fca8:	4618      	mov	r0, r3
 801fcaa:	3718      	adds	r7, #24
 801fcac:	46bd      	mov	sp, r7
 801fcae:	bd80      	pop	{r7, pc}
 801fcb0:	08027c18 	.word	0x08027c18
 801fcb4:	08027f30 	.word	0x08027f30
 801fcb8:	08027ca4 	.word	0x08027ca4
 801fcbc:	08027f4c 	.word	0x08027f4c
 801fcc0:	20023948 	.word	0x20023948

0801fcc4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801fcc4:	b580      	push	{r7, lr}
 801fcc6:	b084      	sub	sp, #16
 801fcc8:	af00      	add	r7, sp, #0
 801fcca:	60f8      	str	r0, [r7, #12]
 801fccc:	60b9      	str	r1, [r7, #8]
 801fcce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fcd0:	68fb      	ldr	r3, [r7, #12]
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d107      	bne.n	801fce6 <udp_recv+0x22>
 801fcd6:	4b08      	ldr	r3, [pc, #32]	; (801fcf8 <udp_recv+0x34>)
 801fcd8:	f240 428a 	movw	r2, #1162	; 0x48a
 801fcdc:	4907      	ldr	r1, [pc, #28]	; (801fcfc <udp_recv+0x38>)
 801fcde:	4808      	ldr	r0, [pc, #32]	; (801fd00 <udp_recv+0x3c>)
 801fce0:	f003 f826 	bl	8022d30 <iprintf>
 801fce4:	e005      	b.n	801fcf2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fce6:	68fb      	ldr	r3, [r7, #12]
 801fce8:	68ba      	ldr	r2, [r7, #8]
 801fcea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801fcec:	68fb      	ldr	r3, [r7, #12]
 801fcee:	687a      	ldr	r2, [r7, #4]
 801fcf0:	61da      	str	r2, [r3, #28]
}
 801fcf2:	3710      	adds	r7, #16
 801fcf4:	46bd      	mov	sp, r7
 801fcf6:	bd80      	pop	{r7, pc}
 801fcf8:	08027c18 	.word	0x08027c18
 801fcfc:	08027f84 	.word	0x08027f84
 801fd00:	08027ca4 	.word	0x08027ca4

0801fd04 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801fd04:	b580      	push	{r7, lr}
 801fd06:	b084      	sub	sp, #16
 801fd08:	af00      	add	r7, sp, #0
 801fd0a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	2b00      	cmp	r3, #0
 801fd10:	d107      	bne.n	801fd22 <udp_remove+0x1e>
 801fd12:	4b19      	ldr	r3, [pc, #100]	; (801fd78 <udp_remove+0x74>)
 801fd14:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801fd18:	4918      	ldr	r1, [pc, #96]	; (801fd7c <udp_remove+0x78>)
 801fd1a:	4819      	ldr	r0, [pc, #100]	; (801fd80 <udp_remove+0x7c>)
 801fd1c:	f003 f808 	bl	8022d30 <iprintf>
 801fd20:	e026      	b.n	801fd70 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fd22:	4b18      	ldr	r3, [pc, #96]	; (801fd84 <udp_remove+0x80>)
 801fd24:	681b      	ldr	r3, [r3, #0]
 801fd26:	687a      	ldr	r2, [r7, #4]
 801fd28:	429a      	cmp	r2, r3
 801fd2a:	d105      	bne.n	801fd38 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801fd2c:	4b15      	ldr	r3, [pc, #84]	; (801fd84 <udp_remove+0x80>)
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	68db      	ldr	r3, [r3, #12]
 801fd32:	4a14      	ldr	r2, [pc, #80]	; (801fd84 <udp_remove+0x80>)
 801fd34:	6013      	str	r3, [r2, #0]
 801fd36:	e017      	b.n	801fd68 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fd38:	4b12      	ldr	r3, [pc, #72]	; (801fd84 <udp_remove+0x80>)
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	60fb      	str	r3, [r7, #12]
 801fd3e:	e010      	b.n	801fd62 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fd40:	68fb      	ldr	r3, [r7, #12]
 801fd42:	68db      	ldr	r3, [r3, #12]
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	d009      	beq.n	801fd5c <udp_remove+0x58>
 801fd48:	68fb      	ldr	r3, [r7, #12]
 801fd4a:	68db      	ldr	r3, [r3, #12]
 801fd4c:	687a      	ldr	r2, [r7, #4]
 801fd4e:	429a      	cmp	r2, r3
 801fd50:	d104      	bne.n	801fd5c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	68da      	ldr	r2, [r3, #12]
 801fd56:	68fb      	ldr	r3, [r7, #12]
 801fd58:	60da      	str	r2, [r3, #12]
        break;
 801fd5a:	e005      	b.n	801fd68 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fd5c:	68fb      	ldr	r3, [r7, #12]
 801fd5e:	68db      	ldr	r3, [r3, #12]
 801fd60:	60fb      	str	r3, [r7, #12]
 801fd62:	68fb      	ldr	r3, [r7, #12]
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d1eb      	bne.n	801fd40 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fd68:	6879      	ldr	r1, [r7, #4]
 801fd6a:	2000      	movs	r0, #0
 801fd6c:	f7f7 fc6e 	bl	801764c <memp_free>
}
 801fd70:	3710      	adds	r7, #16
 801fd72:	46bd      	mov	sp, r7
 801fd74:	bd80      	pop	{r7, pc}
 801fd76:	bf00      	nop
 801fd78:	08027c18 	.word	0x08027c18
 801fd7c:	08027f9c 	.word	0x08027f9c
 801fd80:	08027ca4 	.word	0x08027ca4
 801fd84:	20023948 	.word	0x20023948

0801fd88 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b082      	sub	sp, #8
 801fd8c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fd8e:	2000      	movs	r0, #0
 801fd90:	f7f7 fbe6 	bl	8017560 <memp_malloc>
 801fd94:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	2b00      	cmp	r3, #0
 801fd9a:	d007      	beq.n	801fdac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fd9c:	2220      	movs	r2, #32
 801fd9e:	2100      	movs	r1, #0
 801fda0:	6878      	ldr	r0, [r7, #4]
 801fda2:	f003 f864 	bl	8022e6e <memset>
    pcb->ttl = UDP_TTL;
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	22ff      	movs	r2, #255	; 0xff
 801fdaa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801fdac:	687b      	ldr	r3, [r7, #4]
}
 801fdae:	4618      	mov	r0, r3
 801fdb0:	3708      	adds	r7, #8
 801fdb2:	46bd      	mov	sp, r7
 801fdb4:	bd80      	pop	{r7, pc}

0801fdb6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801fdb6:	b580      	push	{r7, lr}
 801fdb8:	b084      	sub	sp, #16
 801fdba:	af00      	add	r7, sp, #0
 801fdbc:	4603      	mov	r3, r0
 801fdbe:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801fdc0:	f7ff ffe2 	bl	801fd88 <udp_new>
 801fdc4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801fdc6:	68fb      	ldr	r3, [r7, #12]
}
 801fdc8:	4618      	mov	r0, r3
 801fdca:	3710      	adds	r7, #16
 801fdcc:	46bd      	mov	sp, r7
 801fdce:	bd80      	pop	{r7, pc}

0801fdd0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801fdd0:	b480      	push	{r7}
 801fdd2:	b085      	sub	sp, #20
 801fdd4:	af00      	add	r7, sp, #0
 801fdd6:	6078      	str	r0, [r7, #4]
 801fdd8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	2b00      	cmp	r3, #0
 801fdde:	d01e      	beq.n	801fe1e <udp_netif_ip_addr_changed+0x4e>
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	2b00      	cmp	r3, #0
 801fde6:	d01a      	beq.n	801fe1e <udp_netif_ip_addr_changed+0x4e>
 801fde8:	683b      	ldr	r3, [r7, #0]
 801fdea:	2b00      	cmp	r3, #0
 801fdec:	d017      	beq.n	801fe1e <udp_netif_ip_addr_changed+0x4e>
 801fdee:	683b      	ldr	r3, [r7, #0]
 801fdf0:	681b      	ldr	r3, [r3, #0]
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	d013      	beq.n	801fe1e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fdf6:	4b0d      	ldr	r3, [pc, #52]	; (801fe2c <udp_netif_ip_addr_changed+0x5c>)
 801fdf8:	681b      	ldr	r3, [r3, #0]
 801fdfa:	60fb      	str	r3, [r7, #12]
 801fdfc:	e00c      	b.n	801fe18 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801fdfe:	68fb      	ldr	r3, [r7, #12]
 801fe00:	681a      	ldr	r2, [r3, #0]
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	429a      	cmp	r2, r3
 801fe08:	d103      	bne.n	801fe12 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801fe0a:	683b      	ldr	r3, [r7, #0]
 801fe0c:	681a      	ldr	r2, [r3, #0]
 801fe0e:	68fb      	ldr	r3, [r7, #12]
 801fe10:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	68db      	ldr	r3, [r3, #12]
 801fe16:	60fb      	str	r3, [r7, #12]
 801fe18:	68fb      	ldr	r3, [r7, #12]
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d1ef      	bne.n	801fdfe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801fe1e:	bf00      	nop
 801fe20:	3714      	adds	r7, #20
 801fe22:	46bd      	mov	sp, r7
 801fe24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe28:	4770      	bx	lr
 801fe2a:	bf00      	nop
 801fe2c:	20023948 	.word	0x20023948

0801fe30 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801fe30:	b580      	push	{r7, lr}
 801fe32:	b084      	sub	sp, #16
 801fe34:	af00      	add	r7, sp, #0
 801fe36:	6078      	str	r0, [r7, #4]
 801fe38:	460b      	mov	r3, r1
 801fe3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801fe3c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801fe40:	f002 fdcc 	bl	80229dc <malloc>
 801fe44:	4603      	mov	r3, r0
 801fe46:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801fe48:	68fb      	ldr	r3, [r7, #12]
 801fe4a:	2b00      	cmp	r3, #0
 801fe4c:	d109      	bne.n	801fe62 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801fe4e:	687b      	ldr	r3, [r7, #4]
 801fe50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	32b0      	adds	r2, #176	; 0xb0
 801fe58:	2100      	movs	r1, #0
 801fe5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801fe5e:	2302      	movs	r3, #2
 801fe60:	e0d4      	b.n	802000c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801fe62:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801fe66:	2100      	movs	r1, #0
 801fe68:	68f8      	ldr	r0, [r7, #12]
 801fe6a:	f003 f800 	bl	8022e6e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fe74:	687b      	ldr	r3, [r7, #4]
 801fe76:	32b0      	adds	r2, #176	; 0xb0
 801fe78:	68f9      	ldr	r1, [r7, #12]
 801fe7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801fe7e:	687b      	ldr	r3, [r7, #4]
 801fe80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801fe84:	687b      	ldr	r3, [r7, #4]
 801fe86:	32b0      	adds	r2, #176	; 0xb0
 801fe88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801fe8c:	687b      	ldr	r3, [r7, #4]
 801fe8e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	7c1b      	ldrb	r3, [r3, #16]
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d138      	bne.n	801ff0c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801fe9a:	4b5e      	ldr	r3, [pc, #376]	; (8020014 <USBD_CDC_Init+0x1e4>)
 801fe9c:	7819      	ldrb	r1, [r3, #0]
 801fe9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801fea2:	2202      	movs	r2, #2
 801fea4:	6878      	ldr	r0, [r7, #4]
 801fea6:	f002 fbf6 	bl	8022696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801feaa:	4b5a      	ldr	r3, [pc, #360]	; (8020014 <USBD_CDC_Init+0x1e4>)
 801feac:	781b      	ldrb	r3, [r3, #0]
 801feae:	f003 020f 	and.w	r2, r3, #15
 801feb2:	6879      	ldr	r1, [r7, #4]
 801feb4:	4613      	mov	r3, r2
 801feb6:	009b      	lsls	r3, r3, #2
 801feb8:	4413      	add	r3, r2
 801feba:	009b      	lsls	r3, r3, #2
 801febc:	440b      	add	r3, r1
 801febe:	3324      	adds	r3, #36	; 0x24
 801fec0:	2201      	movs	r2, #1
 801fec2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801fec4:	4b54      	ldr	r3, [pc, #336]	; (8020018 <USBD_CDC_Init+0x1e8>)
 801fec6:	7819      	ldrb	r1, [r3, #0]
 801fec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801fecc:	2202      	movs	r2, #2
 801fece:	6878      	ldr	r0, [r7, #4]
 801fed0:	f002 fbe1 	bl	8022696 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801fed4:	4b50      	ldr	r3, [pc, #320]	; (8020018 <USBD_CDC_Init+0x1e8>)
 801fed6:	781b      	ldrb	r3, [r3, #0]
 801fed8:	f003 020f 	and.w	r2, r3, #15
 801fedc:	6879      	ldr	r1, [r7, #4]
 801fede:	4613      	mov	r3, r2
 801fee0:	009b      	lsls	r3, r3, #2
 801fee2:	4413      	add	r3, r2
 801fee4:	009b      	lsls	r3, r3, #2
 801fee6:	440b      	add	r3, r1
 801fee8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801feec:	2201      	movs	r2, #1
 801feee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801fef0:	4b4a      	ldr	r3, [pc, #296]	; (802001c <USBD_CDC_Init+0x1ec>)
 801fef2:	781b      	ldrb	r3, [r3, #0]
 801fef4:	f003 020f 	and.w	r2, r3, #15
 801fef8:	6879      	ldr	r1, [r7, #4]
 801fefa:	4613      	mov	r3, r2
 801fefc:	009b      	lsls	r3, r3, #2
 801fefe:	4413      	add	r3, r2
 801ff00:	009b      	lsls	r3, r3, #2
 801ff02:	440b      	add	r3, r1
 801ff04:	3326      	adds	r3, #38	; 0x26
 801ff06:	2210      	movs	r2, #16
 801ff08:	801a      	strh	r2, [r3, #0]
 801ff0a:	e035      	b.n	801ff78 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801ff0c:	4b41      	ldr	r3, [pc, #260]	; (8020014 <USBD_CDC_Init+0x1e4>)
 801ff0e:	7819      	ldrb	r1, [r3, #0]
 801ff10:	2340      	movs	r3, #64	; 0x40
 801ff12:	2202      	movs	r2, #2
 801ff14:	6878      	ldr	r0, [r7, #4]
 801ff16:	f002 fbbe 	bl	8022696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801ff1a:	4b3e      	ldr	r3, [pc, #248]	; (8020014 <USBD_CDC_Init+0x1e4>)
 801ff1c:	781b      	ldrb	r3, [r3, #0]
 801ff1e:	f003 020f 	and.w	r2, r3, #15
 801ff22:	6879      	ldr	r1, [r7, #4]
 801ff24:	4613      	mov	r3, r2
 801ff26:	009b      	lsls	r3, r3, #2
 801ff28:	4413      	add	r3, r2
 801ff2a:	009b      	lsls	r3, r3, #2
 801ff2c:	440b      	add	r3, r1
 801ff2e:	3324      	adds	r3, #36	; 0x24
 801ff30:	2201      	movs	r2, #1
 801ff32:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801ff34:	4b38      	ldr	r3, [pc, #224]	; (8020018 <USBD_CDC_Init+0x1e8>)
 801ff36:	7819      	ldrb	r1, [r3, #0]
 801ff38:	2340      	movs	r3, #64	; 0x40
 801ff3a:	2202      	movs	r2, #2
 801ff3c:	6878      	ldr	r0, [r7, #4]
 801ff3e:	f002 fbaa 	bl	8022696 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801ff42:	4b35      	ldr	r3, [pc, #212]	; (8020018 <USBD_CDC_Init+0x1e8>)
 801ff44:	781b      	ldrb	r3, [r3, #0]
 801ff46:	f003 020f 	and.w	r2, r3, #15
 801ff4a:	6879      	ldr	r1, [r7, #4]
 801ff4c:	4613      	mov	r3, r2
 801ff4e:	009b      	lsls	r3, r3, #2
 801ff50:	4413      	add	r3, r2
 801ff52:	009b      	lsls	r3, r3, #2
 801ff54:	440b      	add	r3, r1
 801ff56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801ff5a:	2201      	movs	r2, #1
 801ff5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801ff5e:	4b2f      	ldr	r3, [pc, #188]	; (802001c <USBD_CDC_Init+0x1ec>)
 801ff60:	781b      	ldrb	r3, [r3, #0]
 801ff62:	f003 020f 	and.w	r2, r3, #15
 801ff66:	6879      	ldr	r1, [r7, #4]
 801ff68:	4613      	mov	r3, r2
 801ff6a:	009b      	lsls	r3, r3, #2
 801ff6c:	4413      	add	r3, r2
 801ff6e:	009b      	lsls	r3, r3, #2
 801ff70:	440b      	add	r3, r1
 801ff72:	3326      	adds	r3, #38	; 0x26
 801ff74:	2210      	movs	r2, #16
 801ff76:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801ff78:	4b28      	ldr	r3, [pc, #160]	; (802001c <USBD_CDC_Init+0x1ec>)
 801ff7a:	7819      	ldrb	r1, [r3, #0]
 801ff7c:	2308      	movs	r3, #8
 801ff7e:	2203      	movs	r2, #3
 801ff80:	6878      	ldr	r0, [r7, #4]
 801ff82:	f002 fb88 	bl	8022696 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801ff86:	4b25      	ldr	r3, [pc, #148]	; (802001c <USBD_CDC_Init+0x1ec>)
 801ff88:	781b      	ldrb	r3, [r3, #0]
 801ff8a:	f003 020f 	and.w	r2, r3, #15
 801ff8e:	6879      	ldr	r1, [r7, #4]
 801ff90:	4613      	mov	r3, r2
 801ff92:	009b      	lsls	r3, r3, #2
 801ff94:	4413      	add	r3, r2
 801ff96:	009b      	lsls	r3, r3, #2
 801ff98:	440b      	add	r3, r1
 801ff9a:	3324      	adds	r3, #36	; 0x24
 801ff9c:	2201      	movs	r2, #1
 801ff9e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801ffa0:	68fb      	ldr	r3, [r7, #12]
 801ffa2:	2200      	movs	r2, #0
 801ffa4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801ffae:	687a      	ldr	r2, [r7, #4]
 801ffb0:	33b0      	adds	r3, #176	; 0xb0
 801ffb2:	009b      	lsls	r3, r3, #2
 801ffb4:	4413      	add	r3, r2
 801ffb6:	685b      	ldr	r3, [r3, #4]
 801ffb8:	681b      	ldr	r3, [r3, #0]
 801ffba:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801ffbc:	68fb      	ldr	r3, [r7, #12]
 801ffbe:	2200      	movs	r2, #0
 801ffc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801ffc4:	68fb      	ldr	r3, [r7, #12]
 801ffc6:	2200      	movs	r2, #0
 801ffc8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801ffcc:	68fb      	ldr	r3, [r7, #12]
 801ffce:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801ffd2:	2b00      	cmp	r3, #0
 801ffd4:	d101      	bne.n	801ffda <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 801ffd6:	2302      	movs	r3, #2
 801ffd8:	e018      	b.n	802000c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	7c1b      	ldrb	r3, [r3, #16]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d10a      	bne.n	801fff8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801ffe2:	4b0d      	ldr	r3, [pc, #52]	; (8020018 <USBD_CDC_Init+0x1e8>)
 801ffe4:	7819      	ldrb	r1, [r3, #0]
 801ffe6:	68fb      	ldr	r3, [r7, #12]
 801ffe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ffec:	f44f 7300 	mov.w	r3, #512	; 0x200
 801fff0:	6878      	ldr	r0, [r7, #4]
 801fff2:	f002 fc3f 	bl	8022874 <USBD_LL_PrepareReceive>
 801fff6:	e008      	b.n	802000a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801fff8:	4b07      	ldr	r3, [pc, #28]	; (8020018 <USBD_CDC_Init+0x1e8>)
 801fffa:	7819      	ldrb	r1, [r3, #0]
 801fffc:	68fb      	ldr	r3, [r7, #12]
 801fffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8020002:	2340      	movs	r3, #64	; 0x40
 8020004:	6878      	ldr	r0, [r7, #4]
 8020006:	f002 fc35 	bl	8022874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 802000a:	2300      	movs	r3, #0
}
 802000c:	4618      	mov	r0, r3
 802000e:	3710      	adds	r7, #16
 8020010:	46bd      	mov	sp, r7
 8020012:	bd80      	pop	{r7, pc}
 8020014:	200000bf 	.word	0x200000bf
 8020018:	200000c0 	.word	0x200000c0
 802001c:	200000c1 	.word	0x200000c1

08020020 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020020:	b580      	push	{r7, lr}
 8020022:	b082      	sub	sp, #8
 8020024:	af00      	add	r7, sp, #0
 8020026:	6078      	str	r0, [r7, #4]
 8020028:	460b      	mov	r3, r1
 802002a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 802002c:	4b3a      	ldr	r3, [pc, #232]	; (8020118 <USBD_CDC_DeInit+0xf8>)
 802002e:	781b      	ldrb	r3, [r3, #0]
 8020030:	4619      	mov	r1, r3
 8020032:	6878      	ldr	r0, [r7, #4]
 8020034:	f002 fb55 	bl	80226e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8020038:	4b37      	ldr	r3, [pc, #220]	; (8020118 <USBD_CDC_DeInit+0xf8>)
 802003a:	781b      	ldrb	r3, [r3, #0]
 802003c:	f003 020f 	and.w	r2, r3, #15
 8020040:	6879      	ldr	r1, [r7, #4]
 8020042:	4613      	mov	r3, r2
 8020044:	009b      	lsls	r3, r3, #2
 8020046:	4413      	add	r3, r2
 8020048:	009b      	lsls	r3, r3, #2
 802004a:	440b      	add	r3, r1
 802004c:	3324      	adds	r3, #36	; 0x24
 802004e:	2200      	movs	r2, #0
 8020050:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8020052:	4b32      	ldr	r3, [pc, #200]	; (802011c <USBD_CDC_DeInit+0xfc>)
 8020054:	781b      	ldrb	r3, [r3, #0]
 8020056:	4619      	mov	r1, r3
 8020058:	6878      	ldr	r0, [r7, #4]
 802005a:	f002 fb42 	bl	80226e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 802005e:	4b2f      	ldr	r3, [pc, #188]	; (802011c <USBD_CDC_DeInit+0xfc>)
 8020060:	781b      	ldrb	r3, [r3, #0]
 8020062:	f003 020f 	and.w	r2, r3, #15
 8020066:	6879      	ldr	r1, [r7, #4]
 8020068:	4613      	mov	r3, r2
 802006a:	009b      	lsls	r3, r3, #2
 802006c:	4413      	add	r3, r2
 802006e:	009b      	lsls	r3, r3, #2
 8020070:	440b      	add	r3, r1
 8020072:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8020076:	2200      	movs	r2, #0
 8020078:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 802007a:	4b29      	ldr	r3, [pc, #164]	; (8020120 <USBD_CDC_DeInit+0x100>)
 802007c:	781b      	ldrb	r3, [r3, #0]
 802007e:	4619      	mov	r1, r3
 8020080:	6878      	ldr	r0, [r7, #4]
 8020082:	f002 fb2e 	bl	80226e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8020086:	4b26      	ldr	r3, [pc, #152]	; (8020120 <USBD_CDC_DeInit+0x100>)
 8020088:	781b      	ldrb	r3, [r3, #0]
 802008a:	f003 020f 	and.w	r2, r3, #15
 802008e:	6879      	ldr	r1, [r7, #4]
 8020090:	4613      	mov	r3, r2
 8020092:	009b      	lsls	r3, r3, #2
 8020094:	4413      	add	r3, r2
 8020096:	009b      	lsls	r3, r3, #2
 8020098:	440b      	add	r3, r1
 802009a:	3324      	adds	r3, #36	; 0x24
 802009c:	2200      	movs	r2, #0
 802009e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80200a0:	4b1f      	ldr	r3, [pc, #124]	; (8020120 <USBD_CDC_DeInit+0x100>)
 80200a2:	781b      	ldrb	r3, [r3, #0]
 80200a4:	f003 020f 	and.w	r2, r3, #15
 80200a8:	6879      	ldr	r1, [r7, #4]
 80200aa:	4613      	mov	r3, r2
 80200ac:	009b      	lsls	r3, r3, #2
 80200ae:	4413      	add	r3, r2
 80200b0:	009b      	lsls	r3, r3, #2
 80200b2:	440b      	add	r3, r1
 80200b4:	3326      	adds	r3, #38	; 0x26
 80200b6:	2200      	movs	r2, #0
 80200b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80200ba:	687b      	ldr	r3, [r7, #4]
 80200bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80200c0:	687b      	ldr	r3, [r7, #4]
 80200c2:	32b0      	adds	r2, #176	; 0xb0
 80200c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80200c8:	2b00      	cmp	r3, #0
 80200ca:	d01f      	beq.n	802010c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80200d2:	687a      	ldr	r2, [r7, #4]
 80200d4:	33b0      	adds	r3, #176	; 0xb0
 80200d6:	009b      	lsls	r3, r3, #2
 80200d8:	4413      	add	r3, r2
 80200da:	685b      	ldr	r3, [r3, #4]
 80200dc:	685b      	ldr	r3, [r3, #4]
 80200de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	32b0      	adds	r2, #176	; 0xb0
 80200ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80200ee:	4618      	mov	r0, r3
 80200f0:	f002 fc7c 	bl	80229ec <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80200f4:	687b      	ldr	r3, [r7, #4]
 80200f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80200fa:	687b      	ldr	r3, [r7, #4]
 80200fc:	32b0      	adds	r2, #176	; 0xb0
 80200fe:	2100      	movs	r1, #0
 8020100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	2200      	movs	r2, #0
 8020108:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 802010c:	2300      	movs	r3, #0
}
 802010e:	4618      	mov	r0, r3
 8020110:	3708      	adds	r7, #8
 8020112:	46bd      	mov	sp, r7
 8020114:	bd80      	pop	{r7, pc}
 8020116:	bf00      	nop
 8020118:	200000bf 	.word	0x200000bf
 802011c:	200000c0 	.word	0x200000c0
 8020120:	200000c1 	.word	0x200000c1

08020124 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8020124:	b580      	push	{r7, lr}
 8020126:	b086      	sub	sp, #24
 8020128:	af00      	add	r7, sp, #0
 802012a:	6078      	str	r0, [r7, #4]
 802012c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802012e:	687b      	ldr	r3, [r7, #4]
 8020130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	32b0      	adds	r2, #176	; 0xb0
 8020138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802013c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 802013e:	2300      	movs	r3, #0
 8020140:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8020142:	2300      	movs	r3, #0
 8020144:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8020146:	2300      	movs	r3, #0
 8020148:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 802014a:	693b      	ldr	r3, [r7, #16]
 802014c:	2b00      	cmp	r3, #0
 802014e:	d101      	bne.n	8020154 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8020150:	2303      	movs	r3, #3
 8020152:	e0bf      	b.n	80202d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8020154:	683b      	ldr	r3, [r7, #0]
 8020156:	781b      	ldrb	r3, [r3, #0]
 8020158:	f003 0360 	and.w	r3, r3, #96	; 0x60
 802015c:	2b00      	cmp	r3, #0
 802015e:	d050      	beq.n	8020202 <USBD_CDC_Setup+0xde>
 8020160:	2b20      	cmp	r3, #32
 8020162:	f040 80af 	bne.w	80202c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8020166:	683b      	ldr	r3, [r7, #0]
 8020168:	88db      	ldrh	r3, [r3, #6]
 802016a:	2b00      	cmp	r3, #0
 802016c:	d03a      	beq.n	80201e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 802016e:	683b      	ldr	r3, [r7, #0]
 8020170:	781b      	ldrb	r3, [r3, #0]
 8020172:	b25b      	sxtb	r3, r3
 8020174:	2b00      	cmp	r3, #0
 8020176:	da1b      	bge.n	80201b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802017e:	687a      	ldr	r2, [r7, #4]
 8020180:	33b0      	adds	r3, #176	; 0xb0
 8020182:	009b      	lsls	r3, r3, #2
 8020184:	4413      	add	r3, r2
 8020186:	685b      	ldr	r3, [r3, #4]
 8020188:	689b      	ldr	r3, [r3, #8]
 802018a:	683a      	ldr	r2, [r7, #0]
 802018c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 802018e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8020190:	683a      	ldr	r2, [r7, #0]
 8020192:	88d2      	ldrh	r2, [r2, #6]
 8020194:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8020196:	683b      	ldr	r3, [r7, #0]
 8020198:	88db      	ldrh	r3, [r3, #6]
 802019a:	2b07      	cmp	r3, #7
 802019c:	bf28      	it	cs
 802019e:	2307      	movcs	r3, #7
 80201a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80201a2:	693b      	ldr	r3, [r7, #16]
 80201a4:	89fa      	ldrh	r2, [r7, #14]
 80201a6:	4619      	mov	r1, r3
 80201a8:	6878      	ldr	r0, [r7, #4]
 80201aa:	f001 fdad 	bl	8021d08 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80201ae:	e090      	b.n	80202d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80201b0:	683b      	ldr	r3, [r7, #0]
 80201b2:	785a      	ldrb	r2, [r3, #1]
 80201b4:	693b      	ldr	r3, [r7, #16]
 80201b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80201ba:	683b      	ldr	r3, [r7, #0]
 80201bc:	88db      	ldrh	r3, [r3, #6]
 80201be:	2b3f      	cmp	r3, #63	; 0x3f
 80201c0:	d803      	bhi.n	80201ca <USBD_CDC_Setup+0xa6>
 80201c2:	683b      	ldr	r3, [r7, #0]
 80201c4:	88db      	ldrh	r3, [r3, #6]
 80201c6:	b2da      	uxtb	r2, r3
 80201c8:	e000      	b.n	80201cc <USBD_CDC_Setup+0xa8>
 80201ca:	2240      	movs	r2, #64	; 0x40
 80201cc:	693b      	ldr	r3, [r7, #16]
 80201ce:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80201d2:	6939      	ldr	r1, [r7, #16]
 80201d4:	693b      	ldr	r3, [r7, #16]
 80201d6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80201da:	461a      	mov	r2, r3
 80201dc:	6878      	ldr	r0, [r7, #4]
 80201de:	f001 fdbf 	bl	8021d60 <USBD_CtlPrepareRx>
      break;
 80201e2:	e076      	b.n	80202d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80201ea:	687a      	ldr	r2, [r7, #4]
 80201ec:	33b0      	adds	r3, #176	; 0xb0
 80201ee:	009b      	lsls	r3, r3, #2
 80201f0:	4413      	add	r3, r2
 80201f2:	685b      	ldr	r3, [r3, #4]
 80201f4:	689b      	ldr	r3, [r3, #8]
 80201f6:	683a      	ldr	r2, [r7, #0]
 80201f8:	7850      	ldrb	r0, [r2, #1]
 80201fa:	2200      	movs	r2, #0
 80201fc:	6839      	ldr	r1, [r7, #0]
 80201fe:	4798      	blx	r3
      break;
 8020200:	e067      	b.n	80202d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8020202:	683b      	ldr	r3, [r7, #0]
 8020204:	785b      	ldrb	r3, [r3, #1]
 8020206:	2b0b      	cmp	r3, #11
 8020208:	d851      	bhi.n	80202ae <USBD_CDC_Setup+0x18a>
 802020a:	a201      	add	r2, pc, #4	; (adr r2, 8020210 <USBD_CDC_Setup+0xec>)
 802020c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020210:	08020241 	.word	0x08020241
 8020214:	080202bd 	.word	0x080202bd
 8020218:	080202af 	.word	0x080202af
 802021c:	080202af 	.word	0x080202af
 8020220:	080202af 	.word	0x080202af
 8020224:	080202af 	.word	0x080202af
 8020228:	080202af 	.word	0x080202af
 802022c:	080202af 	.word	0x080202af
 8020230:	080202af 	.word	0x080202af
 8020234:	080202af 	.word	0x080202af
 8020238:	0802026b 	.word	0x0802026b
 802023c:	08020295 	.word	0x08020295
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020240:	687b      	ldr	r3, [r7, #4]
 8020242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020246:	b2db      	uxtb	r3, r3
 8020248:	2b03      	cmp	r3, #3
 802024a:	d107      	bne.n	802025c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 802024c:	f107 030a 	add.w	r3, r7, #10
 8020250:	2202      	movs	r2, #2
 8020252:	4619      	mov	r1, r3
 8020254:	6878      	ldr	r0, [r7, #4]
 8020256:	f001 fd57 	bl	8021d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 802025a:	e032      	b.n	80202c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 802025c:	6839      	ldr	r1, [r7, #0]
 802025e:	6878      	ldr	r0, [r7, #4]
 8020260:	f001 fce1 	bl	8021c26 <USBD_CtlError>
            ret = USBD_FAIL;
 8020264:	2303      	movs	r3, #3
 8020266:	75fb      	strb	r3, [r7, #23]
          break;
 8020268:	e02b      	b.n	80202c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802026a:	687b      	ldr	r3, [r7, #4]
 802026c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020270:	b2db      	uxtb	r3, r3
 8020272:	2b03      	cmp	r3, #3
 8020274:	d107      	bne.n	8020286 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8020276:	f107 030d 	add.w	r3, r7, #13
 802027a:	2201      	movs	r2, #1
 802027c:	4619      	mov	r1, r3
 802027e:	6878      	ldr	r0, [r7, #4]
 8020280:	f001 fd42 	bl	8021d08 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8020284:	e01d      	b.n	80202c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8020286:	6839      	ldr	r1, [r7, #0]
 8020288:	6878      	ldr	r0, [r7, #4]
 802028a:	f001 fccc 	bl	8021c26 <USBD_CtlError>
            ret = USBD_FAIL;
 802028e:	2303      	movs	r3, #3
 8020290:	75fb      	strb	r3, [r7, #23]
          break;
 8020292:	e016      	b.n	80202c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802029a:	b2db      	uxtb	r3, r3
 802029c:	2b03      	cmp	r3, #3
 802029e:	d00f      	beq.n	80202c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80202a0:	6839      	ldr	r1, [r7, #0]
 80202a2:	6878      	ldr	r0, [r7, #4]
 80202a4:	f001 fcbf 	bl	8021c26 <USBD_CtlError>
            ret = USBD_FAIL;
 80202a8:	2303      	movs	r3, #3
 80202aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80202ac:	e008      	b.n	80202c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80202ae:	6839      	ldr	r1, [r7, #0]
 80202b0:	6878      	ldr	r0, [r7, #4]
 80202b2:	f001 fcb8 	bl	8021c26 <USBD_CtlError>
          ret = USBD_FAIL;
 80202b6:	2303      	movs	r3, #3
 80202b8:	75fb      	strb	r3, [r7, #23]
          break;
 80202ba:	e002      	b.n	80202c2 <USBD_CDC_Setup+0x19e>
          break;
 80202bc:	bf00      	nop
 80202be:	e008      	b.n	80202d2 <USBD_CDC_Setup+0x1ae>
          break;
 80202c0:	bf00      	nop
      }
      break;
 80202c2:	e006      	b.n	80202d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80202c4:	6839      	ldr	r1, [r7, #0]
 80202c6:	6878      	ldr	r0, [r7, #4]
 80202c8:	f001 fcad 	bl	8021c26 <USBD_CtlError>
      ret = USBD_FAIL;
 80202cc:	2303      	movs	r3, #3
 80202ce:	75fb      	strb	r3, [r7, #23]
      break;
 80202d0:	bf00      	nop
  }

  return (uint8_t)ret;
 80202d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80202d4:	4618      	mov	r0, r3
 80202d6:	3718      	adds	r7, #24
 80202d8:	46bd      	mov	sp, r7
 80202da:	bd80      	pop	{r7, pc}

080202dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80202dc:	b580      	push	{r7, lr}
 80202de:	b084      	sub	sp, #16
 80202e0:	af00      	add	r7, sp, #0
 80202e2:	6078      	str	r0, [r7, #4]
 80202e4:	460b      	mov	r3, r1
 80202e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80202e8:	687b      	ldr	r3, [r7, #4]
 80202ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80202ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	32b0      	adds	r2, #176	; 0xb0
 80202fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80202fe:	2b00      	cmp	r3, #0
 8020300:	d101      	bne.n	8020306 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8020302:	2303      	movs	r3, #3
 8020304:	e065      	b.n	80203d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802030c:	687b      	ldr	r3, [r7, #4]
 802030e:	32b0      	adds	r2, #176	; 0xb0
 8020310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020314:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8020316:	78fb      	ldrb	r3, [r7, #3]
 8020318:	f003 020f 	and.w	r2, r3, #15
 802031c:	6879      	ldr	r1, [r7, #4]
 802031e:	4613      	mov	r3, r2
 8020320:	009b      	lsls	r3, r3, #2
 8020322:	4413      	add	r3, r2
 8020324:	009b      	lsls	r3, r3, #2
 8020326:	440b      	add	r3, r1
 8020328:	3318      	adds	r3, #24
 802032a:	681b      	ldr	r3, [r3, #0]
 802032c:	2b00      	cmp	r3, #0
 802032e:	d02f      	beq.n	8020390 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8020330:	78fb      	ldrb	r3, [r7, #3]
 8020332:	f003 020f 	and.w	r2, r3, #15
 8020336:	6879      	ldr	r1, [r7, #4]
 8020338:	4613      	mov	r3, r2
 802033a:	009b      	lsls	r3, r3, #2
 802033c:	4413      	add	r3, r2
 802033e:	009b      	lsls	r3, r3, #2
 8020340:	440b      	add	r3, r1
 8020342:	3318      	adds	r3, #24
 8020344:	681a      	ldr	r2, [r3, #0]
 8020346:	78fb      	ldrb	r3, [r7, #3]
 8020348:	f003 010f 	and.w	r1, r3, #15
 802034c:	68f8      	ldr	r0, [r7, #12]
 802034e:	460b      	mov	r3, r1
 8020350:	00db      	lsls	r3, r3, #3
 8020352:	440b      	add	r3, r1
 8020354:	009b      	lsls	r3, r3, #2
 8020356:	4403      	add	r3, r0
 8020358:	3348      	adds	r3, #72	; 0x48
 802035a:	681b      	ldr	r3, [r3, #0]
 802035c:	fbb2 f1f3 	udiv	r1, r2, r3
 8020360:	fb01 f303 	mul.w	r3, r1, r3
 8020364:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8020366:	2b00      	cmp	r3, #0
 8020368:	d112      	bne.n	8020390 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 802036a:	78fb      	ldrb	r3, [r7, #3]
 802036c:	f003 020f 	and.w	r2, r3, #15
 8020370:	6879      	ldr	r1, [r7, #4]
 8020372:	4613      	mov	r3, r2
 8020374:	009b      	lsls	r3, r3, #2
 8020376:	4413      	add	r3, r2
 8020378:	009b      	lsls	r3, r3, #2
 802037a:	440b      	add	r3, r1
 802037c:	3318      	adds	r3, #24
 802037e:	2200      	movs	r2, #0
 8020380:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8020382:	78f9      	ldrb	r1, [r7, #3]
 8020384:	2300      	movs	r3, #0
 8020386:	2200      	movs	r2, #0
 8020388:	6878      	ldr	r0, [r7, #4]
 802038a:	f002 fa52 	bl	8022832 <USBD_LL_Transmit>
 802038e:	e01f      	b.n	80203d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8020390:	68bb      	ldr	r3, [r7, #8]
 8020392:	2200      	movs	r2, #0
 8020394:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802039e:	687a      	ldr	r2, [r7, #4]
 80203a0:	33b0      	adds	r3, #176	; 0xb0
 80203a2:	009b      	lsls	r3, r3, #2
 80203a4:	4413      	add	r3, r2
 80203a6:	685b      	ldr	r3, [r3, #4]
 80203a8:	691b      	ldr	r3, [r3, #16]
 80203aa:	2b00      	cmp	r3, #0
 80203ac:	d010      	beq.n	80203d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80203b4:	687a      	ldr	r2, [r7, #4]
 80203b6:	33b0      	adds	r3, #176	; 0xb0
 80203b8:	009b      	lsls	r3, r3, #2
 80203ba:	4413      	add	r3, r2
 80203bc:	685b      	ldr	r3, [r3, #4]
 80203be:	691b      	ldr	r3, [r3, #16]
 80203c0:	68ba      	ldr	r2, [r7, #8]
 80203c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80203c6:	68ba      	ldr	r2, [r7, #8]
 80203c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80203cc:	78fa      	ldrb	r2, [r7, #3]
 80203ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80203d0:	2300      	movs	r3, #0
}
 80203d2:	4618      	mov	r0, r3
 80203d4:	3710      	adds	r7, #16
 80203d6:	46bd      	mov	sp, r7
 80203d8:	bd80      	pop	{r7, pc}

080203da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80203da:	b580      	push	{r7, lr}
 80203dc:	b084      	sub	sp, #16
 80203de:	af00      	add	r7, sp, #0
 80203e0:	6078      	str	r0, [r7, #4]
 80203e2:	460b      	mov	r3, r1
 80203e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	32b0      	adds	r2, #176	; 0xb0
 80203f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80203f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	32b0      	adds	r2, #176	; 0xb0
 8020400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020404:	2b00      	cmp	r3, #0
 8020406:	d101      	bne.n	802040c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8020408:	2303      	movs	r3, #3
 802040a:	e01a      	b.n	8020442 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 802040c:	78fb      	ldrb	r3, [r7, #3]
 802040e:	4619      	mov	r1, r3
 8020410:	6878      	ldr	r0, [r7, #4]
 8020412:	f002 fa50 	bl	80228b6 <USBD_LL_GetRxDataSize>
 8020416:	4602      	mov	r2, r0
 8020418:	68fb      	ldr	r3, [r7, #12]
 802041a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020424:	687a      	ldr	r2, [r7, #4]
 8020426:	33b0      	adds	r3, #176	; 0xb0
 8020428:	009b      	lsls	r3, r3, #2
 802042a:	4413      	add	r3, r2
 802042c:	685b      	ldr	r3, [r3, #4]
 802042e:	68db      	ldr	r3, [r3, #12]
 8020430:	68fa      	ldr	r2, [r7, #12]
 8020432:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8020436:	68fa      	ldr	r2, [r7, #12]
 8020438:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 802043c:	4611      	mov	r1, r2
 802043e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8020440:	2300      	movs	r3, #0
}
 8020442:	4618      	mov	r0, r3
 8020444:	3710      	adds	r7, #16
 8020446:	46bd      	mov	sp, r7
 8020448:	bd80      	pop	{r7, pc}

0802044a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 802044a:	b580      	push	{r7, lr}
 802044c:	b084      	sub	sp, #16
 802044e:	af00      	add	r7, sp, #0
 8020450:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	32b0      	adds	r2, #176	; 0xb0
 802045c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020460:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8020462:	68fb      	ldr	r3, [r7, #12]
 8020464:	2b00      	cmp	r3, #0
 8020466:	d101      	bne.n	802046c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8020468:	2303      	movs	r3, #3
 802046a:	e025      	b.n	80204b8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020472:	687a      	ldr	r2, [r7, #4]
 8020474:	33b0      	adds	r3, #176	; 0xb0
 8020476:	009b      	lsls	r3, r3, #2
 8020478:	4413      	add	r3, r2
 802047a:	685b      	ldr	r3, [r3, #4]
 802047c:	2b00      	cmp	r3, #0
 802047e:	d01a      	beq.n	80204b6 <USBD_CDC_EP0_RxReady+0x6c>
 8020480:	68fb      	ldr	r3, [r7, #12]
 8020482:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8020486:	2bff      	cmp	r3, #255	; 0xff
 8020488:	d015      	beq.n	80204b6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8020490:	687a      	ldr	r2, [r7, #4]
 8020492:	33b0      	adds	r3, #176	; 0xb0
 8020494:	009b      	lsls	r3, r3, #2
 8020496:	4413      	add	r3, r2
 8020498:	685b      	ldr	r3, [r3, #4]
 802049a:	689b      	ldr	r3, [r3, #8]
 802049c:	68fa      	ldr	r2, [r7, #12]
 802049e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80204a2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80204a4:	68fa      	ldr	r2, [r7, #12]
 80204a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80204aa:	b292      	uxth	r2, r2
 80204ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80204ae:	68fb      	ldr	r3, [r7, #12]
 80204b0:	22ff      	movs	r2, #255	; 0xff
 80204b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80204b6:	2300      	movs	r3, #0
}
 80204b8:	4618      	mov	r0, r3
 80204ba:	3710      	adds	r7, #16
 80204bc:	46bd      	mov	sp, r7
 80204be:	bd80      	pop	{r7, pc}

080204c0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80204c0:	b580      	push	{r7, lr}
 80204c2:	b086      	sub	sp, #24
 80204c4:	af00      	add	r7, sp, #0
 80204c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80204c8:	2182      	movs	r1, #130	; 0x82
 80204ca:	4818      	ldr	r0, [pc, #96]	; (802052c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80204cc:	f000 fd49 	bl	8020f62 <USBD_GetEpDesc>
 80204d0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80204d2:	2101      	movs	r1, #1
 80204d4:	4815      	ldr	r0, [pc, #84]	; (802052c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80204d6:	f000 fd44 	bl	8020f62 <USBD_GetEpDesc>
 80204da:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80204dc:	2181      	movs	r1, #129	; 0x81
 80204de:	4813      	ldr	r0, [pc, #76]	; (802052c <USBD_CDC_GetFSCfgDesc+0x6c>)
 80204e0:	f000 fd3f 	bl	8020f62 <USBD_GetEpDesc>
 80204e4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80204e6:	697b      	ldr	r3, [r7, #20]
 80204e8:	2b00      	cmp	r3, #0
 80204ea:	d002      	beq.n	80204f2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80204ec:	697b      	ldr	r3, [r7, #20]
 80204ee:	2210      	movs	r2, #16
 80204f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80204f2:	693b      	ldr	r3, [r7, #16]
 80204f4:	2b00      	cmp	r3, #0
 80204f6:	d006      	beq.n	8020506 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80204f8:	693b      	ldr	r3, [r7, #16]
 80204fa:	2200      	movs	r2, #0
 80204fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8020500:	711a      	strb	r2, [r3, #4]
 8020502:	2200      	movs	r2, #0
 8020504:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8020506:	68fb      	ldr	r3, [r7, #12]
 8020508:	2b00      	cmp	r3, #0
 802050a:	d006      	beq.n	802051a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 802050c:	68fb      	ldr	r3, [r7, #12]
 802050e:	2200      	movs	r2, #0
 8020510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8020514:	711a      	strb	r2, [r3, #4]
 8020516:	2200      	movs	r2, #0
 8020518:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802051a:	687b      	ldr	r3, [r7, #4]
 802051c:	2243      	movs	r2, #67	; 0x43
 802051e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8020520:	4b02      	ldr	r3, [pc, #8]	; (802052c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8020522:	4618      	mov	r0, r3
 8020524:	3718      	adds	r7, #24
 8020526:	46bd      	mov	sp, r7
 8020528:	bd80      	pop	{r7, pc}
 802052a:	bf00      	nop
 802052c:	2000007c 	.word	0x2000007c

08020530 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8020530:	b580      	push	{r7, lr}
 8020532:	b086      	sub	sp, #24
 8020534:	af00      	add	r7, sp, #0
 8020536:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8020538:	2182      	movs	r1, #130	; 0x82
 802053a:	4818      	ldr	r0, [pc, #96]	; (802059c <USBD_CDC_GetHSCfgDesc+0x6c>)
 802053c:	f000 fd11 	bl	8020f62 <USBD_GetEpDesc>
 8020540:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8020542:	2101      	movs	r1, #1
 8020544:	4815      	ldr	r0, [pc, #84]	; (802059c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8020546:	f000 fd0c 	bl	8020f62 <USBD_GetEpDesc>
 802054a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 802054c:	2181      	movs	r1, #129	; 0x81
 802054e:	4813      	ldr	r0, [pc, #76]	; (802059c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8020550:	f000 fd07 	bl	8020f62 <USBD_GetEpDesc>
 8020554:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8020556:	697b      	ldr	r3, [r7, #20]
 8020558:	2b00      	cmp	r3, #0
 802055a:	d002      	beq.n	8020562 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 802055c:	697b      	ldr	r3, [r7, #20]
 802055e:	2210      	movs	r2, #16
 8020560:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8020562:	693b      	ldr	r3, [r7, #16]
 8020564:	2b00      	cmp	r3, #0
 8020566:	d006      	beq.n	8020576 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8020568:	693b      	ldr	r3, [r7, #16]
 802056a:	2200      	movs	r2, #0
 802056c:	711a      	strb	r2, [r3, #4]
 802056e:	2200      	movs	r2, #0
 8020570:	f042 0202 	orr.w	r2, r2, #2
 8020574:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8020576:	68fb      	ldr	r3, [r7, #12]
 8020578:	2b00      	cmp	r3, #0
 802057a:	d006      	beq.n	802058a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 802057c:	68fb      	ldr	r3, [r7, #12]
 802057e:	2200      	movs	r2, #0
 8020580:	711a      	strb	r2, [r3, #4]
 8020582:	2200      	movs	r2, #0
 8020584:	f042 0202 	orr.w	r2, r2, #2
 8020588:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	2243      	movs	r2, #67	; 0x43
 802058e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8020590:	4b02      	ldr	r3, [pc, #8]	; (802059c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8020592:	4618      	mov	r0, r3
 8020594:	3718      	adds	r7, #24
 8020596:	46bd      	mov	sp, r7
 8020598:	bd80      	pop	{r7, pc}
 802059a:	bf00      	nop
 802059c:	2000007c 	.word	0x2000007c

080205a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80205a0:	b580      	push	{r7, lr}
 80205a2:	b086      	sub	sp, #24
 80205a4:	af00      	add	r7, sp, #0
 80205a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80205a8:	2182      	movs	r1, #130	; 0x82
 80205aa:	4818      	ldr	r0, [pc, #96]	; (802060c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80205ac:	f000 fcd9 	bl	8020f62 <USBD_GetEpDesc>
 80205b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80205b2:	2101      	movs	r1, #1
 80205b4:	4815      	ldr	r0, [pc, #84]	; (802060c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80205b6:	f000 fcd4 	bl	8020f62 <USBD_GetEpDesc>
 80205ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80205bc:	2181      	movs	r1, #129	; 0x81
 80205be:	4813      	ldr	r0, [pc, #76]	; (802060c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80205c0:	f000 fccf 	bl	8020f62 <USBD_GetEpDesc>
 80205c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80205c6:	697b      	ldr	r3, [r7, #20]
 80205c8:	2b00      	cmp	r3, #0
 80205ca:	d002      	beq.n	80205d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80205cc:	697b      	ldr	r3, [r7, #20]
 80205ce:	2210      	movs	r2, #16
 80205d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80205d2:	693b      	ldr	r3, [r7, #16]
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	d006      	beq.n	80205e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80205d8:	693b      	ldr	r3, [r7, #16]
 80205da:	2200      	movs	r2, #0
 80205dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80205e0:	711a      	strb	r2, [r3, #4]
 80205e2:	2200      	movs	r2, #0
 80205e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80205e6:	68fb      	ldr	r3, [r7, #12]
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	d006      	beq.n	80205fa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80205ec:	68fb      	ldr	r3, [r7, #12]
 80205ee:	2200      	movs	r2, #0
 80205f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80205f4:	711a      	strb	r2, [r3, #4]
 80205f6:	2200      	movs	r2, #0
 80205f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80205fa:	687b      	ldr	r3, [r7, #4]
 80205fc:	2243      	movs	r2, #67	; 0x43
 80205fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8020600:	4b02      	ldr	r3, [pc, #8]	; (802060c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8020602:	4618      	mov	r0, r3
 8020604:	3718      	adds	r7, #24
 8020606:	46bd      	mov	sp, r7
 8020608:	bd80      	pop	{r7, pc}
 802060a:	bf00      	nop
 802060c:	2000007c 	.word	0x2000007c

08020610 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8020610:	b480      	push	{r7}
 8020612:	b083      	sub	sp, #12
 8020614:	af00      	add	r7, sp, #0
 8020616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8020618:	687b      	ldr	r3, [r7, #4]
 802061a:	220a      	movs	r2, #10
 802061c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 802061e:	4b03      	ldr	r3, [pc, #12]	; (802062c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8020620:	4618      	mov	r0, r3
 8020622:	370c      	adds	r7, #12
 8020624:	46bd      	mov	sp, r7
 8020626:	f85d 7b04 	ldr.w	r7, [sp], #4
 802062a:	4770      	bx	lr
 802062c:	20000038 	.word	0x20000038

08020630 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8020630:	b480      	push	{r7}
 8020632:	b083      	sub	sp, #12
 8020634:	af00      	add	r7, sp, #0
 8020636:	6078      	str	r0, [r7, #4]
 8020638:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 802063a:	683b      	ldr	r3, [r7, #0]
 802063c:	2b00      	cmp	r3, #0
 802063e:	d101      	bne.n	8020644 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8020640:	2303      	movs	r3, #3
 8020642:	e009      	b.n	8020658 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 802064a:	687a      	ldr	r2, [r7, #4]
 802064c:	33b0      	adds	r3, #176	; 0xb0
 802064e:	009b      	lsls	r3, r3, #2
 8020650:	4413      	add	r3, r2
 8020652:	683a      	ldr	r2, [r7, #0]
 8020654:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8020656:	2300      	movs	r3, #0
}
 8020658:	4618      	mov	r0, r3
 802065a:	370c      	adds	r7, #12
 802065c:	46bd      	mov	sp, r7
 802065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020662:	4770      	bx	lr

08020664 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8020664:	b480      	push	{r7}
 8020666:	b087      	sub	sp, #28
 8020668:	af00      	add	r7, sp, #0
 802066a:	60f8      	str	r0, [r7, #12]
 802066c:	60b9      	str	r1, [r7, #8]
 802066e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8020670:	68fb      	ldr	r3, [r7, #12]
 8020672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020676:	68fb      	ldr	r3, [r7, #12]
 8020678:	32b0      	adds	r2, #176	; 0xb0
 802067a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802067e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8020680:	697b      	ldr	r3, [r7, #20]
 8020682:	2b00      	cmp	r3, #0
 8020684:	d101      	bne.n	802068a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8020686:	2303      	movs	r3, #3
 8020688:	e008      	b.n	802069c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 802068a:	697b      	ldr	r3, [r7, #20]
 802068c:	68ba      	ldr	r2, [r7, #8]
 802068e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8020692:	697b      	ldr	r3, [r7, #20]
 8020694:	687a      	ldr	r2, [r7, #4]
 8020696:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 802069a:	2300      	movs	r3, #0
}
 802069c:	4618      	mov	r0, r3
 802069e:	371c      	adds	r7, #28
 80206a0:	46bd      	mov	sp, r7
 80206a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206a6:	4770      	bx	lr

080206a8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80206a8:	b480      	push	{r7}
 80206aa:	b085      	sub	sp, #20
 80206ac:	af00      	add	r7, sp, #0
 80206ae:	6078      	str	r0, [r7, #4]
 80206b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	32b0      	adds	r2, #176	; 0xb0
 80206bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80206c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80206c2:	68fb      	ldr	r3, [r7, #12]
 80206c4:	2b00      	cmp	r3, #0
 80206c6:	d101      	bne.n	80206cc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80206c8:	2303      	movs	r3, #3
 80206ca:	e004      	b.n	80206d6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80206cc:	68fb      	ldr	r3, [r7, #12]
 80206ce:	683a      	ldr	r2, [r7, #0]
 80206d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80206d4:	2300      	movs	r3, #0
}
 80206d6:	4618      	mov	r0, r3
 80206d8:	3714      	adds	r7, #20
 80206da:	46bd      	mov	sp, r7
 80206dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206e0:	4770      	bx	lr
	...

080206e4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80206e4:	b580      	push	{r7, lr}
 80206e6:	b084      	sub	sp, #16
 80206e8:	af00      	add	r7, sp, #0
 80206ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	32b0      	adds	r2, #176	; 0xb0
 80206f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80206fa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80206fc:	2301      	movs	r3, #1
 80206fe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8020700:	68bb      	ldr	r3, [r7, #8]
 8020702:	2b00      	cmp	r3, #0
 8020704:	d101      	bne.n	802070a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8020706:	2303      	movs	r3, #3
 8020708:	e025      	b.n	8020756 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 802070a:	68bb      	ldr	r3, [r7, #8]
 802070c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8020710:	2b00      	cmp	r3, #0
 8020712:	d11f      	bne.n	8020754 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8020714:	68bb      	ldr	r3, [r7, #8]
 8020716:	2201      	movs	r2, #1
 8020718:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 802071c:	4b10      	ldr	r3, [pc, #64]	; (8020760 <USBD_CDC_TransmitPacket+0x7c>)
 802071e:	781b      	ldrb	r3, [r3, #0]
 8020720:	f003 020f 	and.w	r2, r3, #15
 8020724:	68bb      	ldr	r3, [r7, #8]
 8020726:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 802072a:	6878      	ldr	r0, [r7, #4]
 802072c:	4613      	mov	r3, r2
 802072e:	009b      	lsls	r3, r3, #2
 8020730:	4413      	add	r3, r2
 8020732:	009b      	lsls	r3, r3, #2
 8020734:	4403      	add	r3, r0
 8020736:	3318      	adds	r3, #24
 8020738:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 802073a:	4b09      	ldr	r3, [pc, #36]	; (8020760 <USBD_CDC_TransmitPacket+0x7c>)
 802073c:	7819      	ldrb	r1, [r3, #0]
 802073e:	68bb      	ldr	r3, [r7, #8]
 8020740:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8020744:	68bb      	ldr	r3, [r7, #8]
 8020746:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 802074a:	6878      	ldr	r0, [r7, #4]
 802074c:	f002 f871 	bl	8022832 <USBD_LL_Transmit>

    ret = USBD_OK;
 8020750:	2300      	movs	r3, #0
 8020752:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8020754:	7bfb      	ldrb	r3, [r7, #15]
}
 8020756:	4618      	mov	r0, r3
 8020758:	3710      	adds	r7, #16
 802075a:	46bd      	mov	sp, r7
 802075c:	bd80      	pop	{r7, pc}
 802075e:	bf00      	nop
 8020760:	200000bf 	.word	0x200000bf

08020764 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8020764:	b580      	push	{r7, lr}
 8020766:	b084      	sub	sp, #16
 8020768:	af00      	add	r7, sp, #0
 802076a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	32b0      	adds	r2, #176	; 0xb0
 8020776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802077a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 802077c:	687b      	ldr	r3, [r7, #4]
 802077e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	32b0      	adds	r2, #176	; 0xb0
 8020786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802078a:	2b00      	cmp	r3, #0
 802078c:	d101      	bne.n	8020792 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 802078e:	2303      	movs	r3, #3
 8020790:	e018      	b.n	80207c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	7c1b      	ldrb	r3, [r3, #16]
 8020796:	2b00      	cmp	r3, #0
 8020798:	d10a      	bne.n	80207b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 802079a:	4b0c      	ldr	r3, [pc, #48]	; (80207cc <USBD_CDC_ReceivePacket+0x68>)
 802079c:	7819      	ldrb	r1, [r3, #0]
 802079e:	68fb      	ldr	r3, [r7, #12]
 80207a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80207a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80207a8:	6878      	ldr	r0, [r7, #4]
 80207aa:	f002 f863 	bl	8022874 <USBD_LL_PrepareReceive>
 80207ae:	e008      	b.n	80207c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80207b0:	4b06      	ldr	r3, [pc, #24]	; (80207cc <USBD_CDC_ReceivePacket+0x68>)
 80207b2:	7819      	ldrb	r1, [r3, #0]
 80207b4:	68fb      	ldr	r3, [r7, #12]
 80207b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80207ba:	2340      	movs	r3, #64	; 0x40
 80207bc:	6878      	ldr	r0, [r7, #4]
 80207be:	f002 f859 	bl	8022874 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80207c2:	2300      	movs	r3, #0
}
 80207c4:	4618      	mov	r0, r3
 80207c6:	3710      	adds	r7, #16
 80207c8:	46bd      	mov	sp, r7
 80207ca:	bd80      	pop	{r7, pc}
 80207cc:	200000c0 	.word	0x200000c0

080207d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80207d0:	b580      	push	{r7, lr}
 80207d2:	b086      	sub	sp, #24
 80207d4:	af00      	add	r7, sp, #0
 80207d6:	60f8      	str	r0, [r7, #12]
 80207d8:	60b9      	str	r1, [r7, #8]
 80207da:	4613      	mov	r3, r2
 80207dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80207de:	68fb      	ldr	r3, [r7, #12]
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d101      	bne.n	80207e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80207e4:	2303      	movs	r3, #3
 80207e6:	e01f      	b.n	8020828 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80207e8:	68fb      	ldr	r3, [r7, #12]
 80207ea:	2200      	movs	r2, #0
 80207ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80207f0:	68fb      	ldr	r3, [r7, #12]
 80207f2:	2200      	movs	r2, #0
 80207f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80207f8:	68fb      	ldr	r3, [r7, #12]
 80207fa:	2200      	movs	r2, #0
 80207fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8020800:	68bb      	ldr	r3, [r7, #8]
 8020802:	2b00      	cmp	r3, #0
 8020804:	d003      	beq.n	802080e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8020806:	68fb      	ldr	r3, [r7, #12]
 8020808:	68ba      	ldr	r2, [r7, #8]
 802080a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 802080e:	68fb      	ldr	r3, [r7, #12]
 8020810:	2201      	movs	r2, #1
 8020812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8020816:	68fb      	ldr	r3, [r7, #12]
 8020818:	79fa      	ldrb	r2, [r7, #7]
 802081a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 802081c:	68f8      	ldr	r0, [r7, #12]
 802081e:	f001 fed3 	bl	80225c8 <USBD_LL_Init>
 8020822:	4603      	mov	r3, r0
 8020824:	75fb      	strb	r3, [r7, #23]

  return ret;
 8020826:	7dfb      	ldrb	r3, [r7, #23]
}
 8020828:	4618      	mov	r0, r3
 802082a:	3718      	adds	r7, #24
 802082c:	46bd      	mov	sp, r7
 802082e:	bd80      	pop	{r7, pc}

08020830 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8020830:	b580      	push	{r7, lr}
 8020832:	b084      	sub	sp, #16
 8020834:	af00      	add	r7, sp, #0
 8020836:	6078      	str	r0, [r7, #4]
 8020838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802083a:	2300      	movs	r3, #0
 802083c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 802083e:	683b      	ldr	r3, [r7, #0]
 8020840:	2b00      	cmp	r3, #0
 8020842:	d101      	bne.n	8020848 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8020844:	2303      	movs	r3, #3
 8020846:	e025      	b.n	8020894 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	683a      	ldr	r2, [r7, #0]
 802084c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020856:	687b      	ldr	r3, [r7, #4]
 8020858:	32ae      	adds	r2, #174	; 0xae
 802085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802085e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020860:	2b00      	cmp	r3, #0
 8020862:	d00f      	beq.n	8020884 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8020864:	687b      	ldr	r3, [r7, #4]
 8020866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 802086a:	687b      	ldr	r3, [r7, #4]
 802086c:	32ae      	adds	r2, #174	; 0xae
 802086e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020874:	f107 020e 	add.w	r2, r7, #14
 8020878:	4610      	mov	r0, r2
 802087a:	4798      	blx	r3
 802087c:	4602      	mov	r2, r0
 802087e:	687b      	ldr	r3, [r7, #4]
 8020880:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8020884:	687b      	ldr	r3, [r7, #4]
 8020886:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 802088a:	1c5a      	adds	r2, r3, #1
 802088c:	687b      	ldr	r3, [r7, #4]
 802088e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8020892:	2300      	movs	r3, #0
}
 8020894:	4618      	mov	r0, r3
 8020896:	3710      	adds	r7, #16
 8020898:	46bd      	mov	sp, r7
 802089a:	bd80      	pop	{r7, pc}

0802089c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 802089c:	b580      	push	{r7, lr}
 802089e:	b082      	sub	sp, #8
 80208a0:	af00      	add	r7, sp, #0
 80208a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80208a4:	6878      	ldr	r0, [r7, #4]
 80208a6:	f001 fedb 	bl	8022660 <USBD_LL_Start>
 80208aa:	4603      	mov	r3, r0
}
 80208ac:	4618      	mov	r0, r3
 80208ae:	3708      	adds	r7, #8
 80208b0:	46bd      	mov	sp, r7
 80208b2:	bd80      	pop	{r7, pc}

080208b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80208b4:	b480      	push	{r7}
 80208b6:	b083      	sub	sp, #12
 80208b8:	af00      	add	r7, sp, #0
 80208ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80208bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80208be:	4618      	mov	r0, r3
 80208c0:	370c      	adds	r7, #12
 80208c2:	46bd      	mov	sp, r7
 80208c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c8:	4770      	bx	lr

080208ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80208ca:	b580      	push	{r7, lr}
 80208cc:	b084      	sub	sp, #16
 80208ce:	af00      	add	r7, sp, #0
 80208d0:	6078      	str	r0, [r7, #4]
 80208d2:	460b      	mov	r3, r1
 80208d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80208d6:	2300      	movs	r3, #0
 80208d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80208da:	687b      	ldr	r3, [r7, #4]
 80208dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	d009      	beq.n	80208f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80208e4:	687b      	ldr	r3, [r7, #4]
 80208e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80208ea:	681b      	ldr	r3, [r3, #0]
 80208ec:	78fa      	ldrb	r2, [r7, #3]
 80208ee:	4611      	mov	r1, r2
 80208f0:	6878      	ldr	r0, [r7, #4]
 80208f2:	4798      	blx	r3
 80208f4:	4603      	mov	r3, r0
 80208f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80208f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80208fa:	4618      	mov	r0, r3
 80208fc:	3710      	adds	r7, #16
 80208fe:	46bd      	mov	sp, r7
 8020900:	bd80      	pop	{r7, pc}

08020902 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8020902:	b580      	push	{r7, lr}
 8020904:	b084      	sub	sp, #16
 8020906:	af00      	add	r7, sp, #0
 8020908:	6078      	str	r0, [r7, #4]
 802090a:	460b      	mov	r3, r1
 802090c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 802090e:	2300      	movs	r3, #0
 8020910:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8020912:	687b      	ldr	r3, [r7, #4]
 8020914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020918:	685b      	ldr	r3, [r3, #4]
 802091a:	78fa      	ldrb	r2, [r7, #3]
 802091c:	4611      	mov	r1, r2
 802091e:	6878      	ldr	r0, [r7, #4]
 8020920:	4798      	blx	r3
 8020922:	4603      	mov	r3, r0
 8020924:	2b00      	cmp	r3, #0
 8020926:	d001      	beq.n	802092c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8020928:	2303      	movs	r3, #3
 802092a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 802092c:	7bfb      	ldrb	r3, [r7, #15]
}
 802092e:	4618      	mov	r0, r3
 8020930:	3710      	adds	r7, #16
 8020932:	46bd      	mov	sp, r7
 8020934:	bd80      	pop	{r7, pc}

08020936 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8020936:	b580      	push	{r7, lr}
 8020938:	b084      	sub	sp, #16
 802093a:	af00      	add	r7, sp, #0
 802093c:	6078      	str	r0, [r7, #4]
 802093e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8020940:	687b      	ldr	r3, [r7, #4]
 8020942:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020946:	6839      	ldr	r1, [r7, #0]
 8020948:	4618      	mov	r0, r3
 802094a:	f001 f932 	bl	8021bb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	2201      	movs	r2, #1
 8020952:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 802095c:	461a      	mov	r2, r3
 802095e:	687b      	ldr	r3, [r7, #4]
 8020960:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 802096a:	f003 031f 	and.w	r3, r3, #31
 802096e:	2b02      	cmp	r3, #2
 8020970:	d01a      	beq.n	80209a8 <USBD_LL_SetupStage+0x72>
 8020972:	2b02      	cmp	r3, #2
 8020974:	d822      	bhi.n	80209bc <USBD_LL_SetupStage+0x86>
 8020976:	2b00      	cmp	r3, #0
 8020978:	d002      	beq.n	8020980 <USBD_LL_SetupStage+0x4a>
 802097a:	2b01      	cmp	r3, #1
 802097c:	d00a      	beq.n	8020994 <USBD_LL_SetupStage+0x5e>
 802097e:	e01d      	b.n	80209bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8020986:	4619      	mov	r1, r3
 8020988:	6878      	ldr	r0, [r7, #4]
 802098a:	f000 fb5f 	bl	802104c <USBD_StdDevReq>
 802098e:	4603      	mov	r3, r0
 8020990:	73fb      	strb	r3, [r7, #15]
      break;
 8020992:	e020      	b.n	80209d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 802099a:	4619      	mov	r1, r3
 802099c:	6878      	ldr	r0, [r7, #4]
 802099e:	f000 fbc7 	bl	8021130 <USBD_StdItfReq>
 80209a2:	4603      	mov	r3, r0
 80209a4:	73fb      	strb	r3, [r7, #15]
      break;
 80209a6:	e016      	b.n	80209d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80209a8:	687b      	ldr	r3, [r7, #4]
 80209aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80209ae:	4619      	mov	r1, r3
 80209b0:	6878      	ldr	r0, [r7, #4]
 80209b2:	f000 fc29 	bl	8021208 <USBD_StdEPReq>
 80209b6:	4603      	mov	r3, r0
 80209b8:	73fb      	strb	r3, [r7, #15]
      break;
 80209ba:	e00c      	b.n	80209d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80209bc:	687b      	ldr	r3, [r7, #4]
 80209be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80209c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80209c6:	b2db      	uxtb	r3, r3
 80209c8:	4619      	mov	r1, r3
 80209ca:	6878      	ldr	r0, [r7, #4]
 80209cc:	f001 fea8 	bl	8022720 <USBD_LL_StallEP>
 80209d0:	4603      	mov	r3, r0
 80209d2:	73fb      	strb	r3, [r7, #15]
      break;
 80209d4:	bf00      	nop
  }

  return ret;
 80209d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80209d8:	4618      	mov	r0, r3
 80209da:	3710      	adds	r7, #16
 80209dc:	46bd      	mov	sp, r7
 80209de:	bd80      	pop	{r7, pc}

080209e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80209e0:	b580      	push	{r7, lr}
 80209e2:	b086      	sub	sp, #24
 80209e4:	af00      	add	r7, sp, #0
 80209e6:	60f8      	str	r0, [r7, #12]
 80209e8:	460b      	mov	r3, r1
 80209ea:	607a      	str	r2, [r7, #4]
 80209ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80209ee:	2300      	movs	r3, #0
 80209f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80209f2:	7afb      	ldrb	r3, [r7, #11]
 80209f4:	2b00      	cmp	r3, #0
 80209f6:	d16e      	bne.n	8020ad6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80209f8:	68fb      	ldr	r3, [r7, #12]
 80209fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80209fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8020a00:	68fb      	ldr	r3, [r7, #12]
 8020a02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8020a06:	2b03      	cmp	r3, #3
 8020a08:	f040 8098 	bne.w	8020b3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8020a0c:	693b      	ldr	r3, [r7, #16]
 8020a0e:	689a      	ldr	r2, [r3, #8]
 8020a10:	693b      	ldr	r3, [r7, #16]
 8020a12:	68db      	ldr	r3, [r3, #12]
 8020a14:	429a      	cmp	r2, r3
 8020a16:	d913      	bls.n	8020a40 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8020a18:	693b      	ldr	r3, [r7, #16]
 8020a1a:	689a      	ldr	r2, [r3, #8]
 8020a1c:	693b      	ldr	r3, [r7, #16]
 8020a1e:	68db      	ldr	r3, [r3, #12]
 8020a20:	1ad2      	subs	r2, r2, r3
 8020a22:	693b      	ldr	r3, [r7, #16]
 8020a24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8020a26:	693b      	ldr	r3, [r7, #16]
 8020a28:	68da      	ldr	r2, [r3, #12]
 8020a2a:	693b      	ldr	r3, [r7, #16]
 8020a2c:	689b      	ldr	r3, [r3, #8]
 8020a2e:	4293      	cmp	r3, r2
 8020a30:	bf28      	it	cs
 8020a32:	4613      	movcs	r3, r2
 8020a34:	461a      	mov	r2, r3
 8020a36:	6879      	ldr	r1, [r7, #4]
 8020a38:	68f8      	ldr	r0, [r7, #12]
 8020a3a:	f001 f9ae 	bl	8021d9a <USBD_CtlContinueRx>
 8020a3e:	e07d      	b.n	8020b3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8020a40:	68fb      	ldr	r3, [r7, #12]
 8020a42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8020a46:	f003 031f 	and.w	r3, r3, #31
 8020a4a:	2b02      	cmp	r3, #2
 8020a4c:	d014      	beq.n	8020a78 <USBD_LL_DataOutStage+0x98>
 8020a4e:	2b02      	cmp	r3, #2
 8020a50:	d81d      	bhi.n	8020a8e <USBD_LL_DataOutStage+0xae>
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	d002      	beq.n	8020a5c <USBD_LL_DataOutStage+0x7c>
 8020a56:	2b01      	cmp	r3, #1
 8020a58:	d003      	beq.n	8020a62 <USBD_LL_DataOutStage+0x82>
 8020a5a:	e018      	b.n	8020a8e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8020a5c:	2300      	movs	r3, #0
 8020a5e:	75bb      	strb	r3, [r7, #22]
            break;
 8020a60:	e018      	b.n	8020a94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8020a62:	68fb      	ldr	r3, [r7, #12]
 8020a64:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8020a68:	b2db      	uxtb	r3, r3
 8020a6a:	4619      	mov	r1, r3
 8020a6c:	68f8      	ldr	r0, [r7, #12]
 8020a6e:	f000 fa5e 	bl	8020f2e <USBD_CoreFindIF>
 8020a72:	4603      	mov	r3, r0
 8020a74:	75bb      	strb	r3, [r7, #22]
            break;
 8020a76:	e00d      	b.n	8020a94 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8020a78:	68fb      	ldr	r3, [r7, #12]
 8020a7a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8020a7e:	b2db      	uxtb	r3, r3
 8020a80:	4619      	mov	r1, r3
 8020a82:	68f8      	ldr	r0, [r7, #12]
 8020a84:	f000 fa60 	bl	8020f48 <USBD_CoreFindEP>
 8020a88:	4603      	mov	r3, r0
 8020a8a:	75bb      	strb	r3, [r7, #22]
            break;
 8020a8c:	e002      	b.n	8020a94 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8020a8e:	2300      	movs	r3, #0
 8020a90:	75bb      	strb	r3, [r7, #22]
            break;
 8020a92:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8020a94:	7dbb      	ldrb	r3, [r7, #22]
 8020a96:	2b00      	cmp	r3, #0
 8020a98:	d119      	bne.n	8020ace <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020a9a:	68fb      	ldr	r3, [r7, #12]
 8020a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020aa0:	b2db      	uxtb	r3, r3
 8020aa2:	2b03      	cmp	r3, #3
 8020aa4:	d113      	bne.n	8020ace <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8020aa6:	7dba      	ldrb	r2, [r7, #22]
 8020aa8:	68fb      	ldr	r3, [r7, #12]
 8020aaa:	32ae      	adds	r2, #174	; 0xae
 8020aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020ab0:	691b      	ldr	r3, [r3, #16]
 8020ab2:	2b00      	cmp	r3, #0
 8020ab4:	d00b      	beq.n	8020ace <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8020ab6:	7dba      	ldrb	r2, [r7, #22]
 8020ab8:	68fb      	ldr	r3, [r7, #12]
 8020aba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8020abe:	7dba      	ldrb	r2, [r7, #22]
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	32ae      	adds	r2, #174	; 0xae
 8020ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020ac8:	691b      	ldr	r3, [r3, #16]
 8020aca:	68f8      	ldr	r0, [r7, #12]
 8020acc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8020ace:	68f8      	ldr	r0, [r7, #12]
 8020ad0:	f001 f974 	bl	8021dbc <USBD_CtlSendStatus>
 8020ad4:	e032      	b.n	8020b3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8020ad6:	7afb      	ldrb	r3, [r7, #11]
 8020ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020adc:	b2db      	uxtb	r3, r3
 8020ade:	4619      	mov	r1, r3
 8020ae0:	68f8      	ldr	r0, [r7, #12]
 8020ae2:	f000 fa31 	bl	8020f48 <USBD_CoreFindEP>
 8020ae6:	4603      	mov	r3, r0
 8020ae8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8020aea:	7dbb      	ldrb	r3, [r7, #22]
 8020aec:	2bff      	cmp	r3, #255	; 0xff
 8020aee:	d025      	beq.n	8020b3c <USBD_LL_DataOutStage+0x15c>
 8020af0:	7dbb      	ldrb	r3, [r7, #22]
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d122      	bne.n	8020b3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020af6:	68fb      	ldr	r3, [r7, #12]
 8020af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020afc:	b2db      	uxtb	r3, r3
 8020afe:	2b03      	cmp	r3, #3
 8020b00:	d117      	bne.n	8020b32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8020b02:	7dba      	ldrb	r2, [r7, #22]
 8020b04:	68fb      	ldr	r3, [r7, #12]
 8020b06:	32ae      	adds	r2, #174	; 0xae
 8020b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020b0c:	699b      	ldr	r3, [r3, #24]
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d00f      	beq.n	8020b32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8020b12:	7dba      	ldrb	r2, [r7, #22]
 8020b14:	68fb      	ldr	r3, [r7, #12]
 8020b16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8020b1a:	7dba      	ldrb	r2, [r7, #22]
 8020b1c:	68fb      	ldr	r3, [r7, #12]
 8020b1e:	32ae      	adds	r2, #174	; 0xae
 8020b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020b24:	699b      	ldr	r3, [r3, #24]
 8020b26:	7afa      	ldrb	r2, [r7, #11]
 8020b28:	4611      	mov	r1, r2
 8020b2a:	68f8      	ldr	r0, [r7, #12]
 8020b2c:	4798      	blx	r3
 8020b2e:	4603      	mov	r3, r0
 8020b30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8020b32:	7dfb      	ldrb	r3, [r7, #23]
 8020b34:	2b00      	cmp	r3, #0
 8020b36:	d001      	beq.n	8020b3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8020b38:	7dfb      	ldrb	r3, [r7, #23]
 8020b3a:	e000      	b.n	8020b3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8020b3c:	2300      	movs	r3, #0
}
 8020b3e:	4618      	mov	r0, r3
 8020b40:	3718      	adds	r7, #24
 8020b42:	46bd      	mov	sp, r7
 8020b44:	bd80      	pop	{r7, pc}

08020b46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8020b46:	b580      	push	{r7, lr}
 8020b48:	b086      	sub	sp, #24
 8020b4a:	af00      	add	r7, sp, #0
 8020b4c:	60f8      	str	r0, [r7, #12]
 8020b4e:	460b      	mov	r3, r1
 8020b50:	607a      	str	r2, [r7, #4]
 8020b52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8020b54:	7afb      	ldrb	r3, [r7, #11]
 8020b56:	2b00      	cmp	r3, #0
 8020b58:	d16f      	bne.n	8020c3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8020b5a:	68fb      	ldr	r3, [r7, #12]
 8020b5c:	3314      	adds	r3, #20
 8020b5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8020b60:	68fb      	ldr	r3, [r7, #12]
 8020b62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8020b66:	2b02      	cmp	r3, #2
 8020b68:	d15a      	bne.n	8020c20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8020b6a:	693b      	ldr	r3, [r7, #16]
 8020b6c:	689a      	ldr	r2, [r3, #8]
 8020b6e:	693b      	ldr	r3, [r7, #16]
 8020b70:	68db      	ldr	r3, [r3, #12]
 8020b72:	429a      	cmp	r2, r3
 8020b74:	d914      	bls.n	8020ba0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8020b76:	693b      	ldr	r3, [r7, #16]
 8020b78:	689a      	ldr	r2, [r3, #8]
 8020b7a:	693b      	ldr	r3, [r7, #16]
 8020b7c:	68db      	ldr	r3, [r3, #12]
 8020b7e:	1ad2      	subs	r2, r2, r3
 8020b80:	693b      	ldr	r3, [r7, #16]
 8020b82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8020b84:	693b      	ldr	r3, [r7, #16]
 8020b86:	689b      	ldr	r3, [r3, #8]
 8020b88:	461a      	mov	r2, r3
 8020b8a:	6879      	ldr	r1, [r7, #4]
 8020b8c:	68f8      	ldr	r0, [r7, #12]
 8020b8e:	f001 f8d6 	bl	8021d3e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020b92:	2300      	movs	r3, #0
 8020b94:	2200      	movs	r2, #0
 8020b96:	2100      	movs	r1, #0
 8020b98:	68f8      	ldr	r0, [r7, #12]
 8020b9a:	f001 fe6b 	bl	8022874 <USBD_LL_PrepareReceive>
 8020b9e:	e03f      	b.n	8020c20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8020ba0:	693b      	ldr	r3, [r7, #16]
 8020ba2:	68da      	ldr	r2, [r3, #12]
 8020ba4:	693b      	ldr	r3, [r7, #16]
 8020ba6:	689b      	ldr	r3, [r3, #8]
 8020ba8:	429a      	cmp	r2, r3
 8020baa:	d11c      	bne.n	8020be6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8020bac:	693b      	ldr	r3, [r7, #16]
 8020bae:	685a      	ldr	r2, [r3, #4]
 8020bb0:	693b      	ldr	r3, [r7, #16]
 8020bb2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8020bb4:	429a      	cmp	r2, r3
 8020bb6:	d316      	bcc.n	8020be6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8020bb8:	693b      	ldr	r3, [r7, #16]
 8020bba:	685a      	ldr	r2, [r3, #4]
 8020bbc:	68fb      	ldr	r3, [r7, #12]
 8020bbe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8020bc2:	429a      	cmp	r2, r3
 8020bc4:	d20f      	bcs.n	8020be6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8020bc6:	2200      	movs	r2, #0
 8020bc8:	2100      	movs	r1, #0
 8020bca:	68f8      	ldr	r0, [r7, #12]
 8020bcc:	f001 f8b7 	bl	8021d3e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8020bd0:	68fb      	ldr	r3, [r7, #12]
 8020bd2:	2200      	movs	r2, #0
 8020bd4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8020bd8:	2300      	movs	r3, #0
 8020bda:	2200      	movs	r2, #0
 8020bdc:	2100      	movs	r1, #0
 8020bde:	68f8      	ldr	r0, [r7, #12]
 8020be0:	f001 fe48 	bl	8022874 <USBD_LL_PrepareReceive>
 8020be4:	e01c      	b.n	8020c20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020be6:	68fb      	ldr	r3, [r7, #12]
 8020be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020bec:	b2db      	uxtb	r3, r3
 8020bee:	2b03      	cmp	r3, #3
 8020bf0:	d10f      	bne.n	8020c12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8020bf2:	68fb      	ldr	r3, [r7, #12]
 8020bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020bf8:	68db      	ldr	r3, [r3, #12]
 8020bfa:	2b00      	cmp	r3, #0
 8020bfc:	d009      	beq.n	8020c12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8020bfe:	68fb      	ldr	r3, [r7, #12]
 8020c00:	2200      	movs	r2, #0
 8020c02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8020c06:	68fb      	ldr	r3, [r7, #12]
 8020c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020c0c:	68db      	ldr	r3, [r3, #12]
 8020c0e:	68f8      	ldr	r0, [r7, #12]
 8020c10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8020c12:	2180      	movs	r1, #128	; 0x80
 8020c14:	68f8      	ldr	r0, [r7, #12]
 8020c16:	f001 fd83 	bl	8022720 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8020c1a:	68f8      	ldr	r0, [r7, #12]
 8020c1c:	f001 f8e1 	bl	8021de2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8020c20:	68fb      	ldr	r3, [r7, #12]
 8020c22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8020c26:	2b00      	cmp	r3, #0
 8020c28:	d03a      	beq.n	8020ca0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8020c2a:	68f8      	ldr	r0, [r7, #12]
 8020c2c:	f7ff fe42 	bl	80208b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8020c30:	68fb      	ldr	r3, [r7, #12]
 8020c32:	2200      	movs	r2, #0
 8020c34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8020c38:	e032      	b.n	8020ca0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8020c3a:	7afb      	ldrb	r3, [r7, #11]
 8020c3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8020c40:	b2db      	uxtb	r3, r3
 8020c42:	4619      	mov	r1, r3
 8020c44:	68f8      	ldr	r0, [r7, #12]
 8020c46:	f000 f97f 	bl	8020f48 <USBD_CoreFindEP>
 8020c4a:	4603      	mov	r3, r0
 8020c4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8020c4e:	7dfb      	ldrb	r3, [r7, #23]
 8020c50:	2bff      	cmp	r3, #255	; 0xff
 8020c52:	d025      	beq.n	8020ca0 <USBD_LL_DataInStage+0x15a>
 8020c54:	7dfb      	ldrb	r3, [r7, #23]
 8020c56:	2b00      	cmp	r3, #0
 8020c58:	d122      	bne.n	8020ca0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020c5a:	68fb      	ldr	r3, [r7, #12]
 8020c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020c60:	b2db      	uxtb	r3, r3
 8020c62:	2b03      	cmp	r3, #3
 8020c64:	d11c      	bne.n	8020ca0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8020c66:	7dfa      	ldrb	r2, [r7, #23]
 8020c68:	68fb      	ldr	r3, [r7, #12]
 8020c6a:	32ae      	adds	r2, #174	; 0xae
 8020c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020c70:	695b      	ldr	r3, [r3, #20]
 8020c72:	2b00      	cmp	r3, #0
 8020c74:	d014      	beq.n	8020ca0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8020c76:	7dfa      	ldrb	r2, [r7, #23]
 8020c78:	68fb      	ldr	r3, [r7, #12]
 8020c7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8020c7e:	7dfa      	ldrb	r2, [r7, #23]
 8020c80:	68fb      	ldr	r3, [r7, #12]
 8020c82:	32ae      	adds	r2, #174	; 0xae
 8020c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020c88:	695b      	ldr	r3, [r3, #20]
 8020c8a:	7afa      	ldrb	r2, [r7, #11]
 8020c8c:	4611      	mov	r1, r2
 8020c8e:	68f8      	ldr	r0, [r7, #12]
 8020c90:	4798      	blx	r3
 8020c92:	4603      	mov	r3, r0
 8020c94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8020c96:	7dbb      	ldrb	r3, [r7, #22]
 8020c98:	2b00      	cmp	r3, #0
 8020c9a:	d001      	beq.n	8020ca0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8020c9c:	7dbb      	ldrb	r3, [r7, #22]
 8020c9e:	e000      	b.n	8020ca2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8020ca0:	2300      	movs	r3, #0
}
 8020ca2:	4618      	mov	r0, r3
 8020ca4:	3718      	adds	r7, #24
 8020ca6:	46bd      	mov	sp, r7
 8020ca8:	bd80      	pop	{r7, pc}

08020caa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8020caa:	b580      	push	{r7, lr}
 8020cac:	b084      	sub	sp, #16
 8020cae:	af00      	add	r7, sp, #0
 8020cb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8020cb2:	2300      	movs	r3, #0
 8020cb4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020cb6:	687b      	ldr	r3, [r7, #4]
 8020cb8:	2201      	movs	r2, #1
 8020cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8020cbe:	687b      	ldr	r3, [r7, #4]
 8020cc0:	2200      	movs	r2, #0
 8020cc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8020cc6:	687b      	ldr	r3, [r7, #4]
 8020cc8:	2200      	movs	r2, #0
 8020cca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8020ccc:	687b      	ldr	r3, [r7, #4]
 8020cce:	2200      	movs	r2, #0
 8020cd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	2200      	movs	r2, #0
 8020cd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8020cdc:	687b      	ldr	r3, [r7, #4]
 8020cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020ce2:	2b00      	cmp	r3, #0
 8020ce4:	d014      	beq.n	8020d10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8020ce6:	687b      	ldr	r3, [r7, #4]
 8020ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020cec:	685b      	ldr	r3, [r3, #4]
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	d00e      	beq.n	8020d10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8020cf2:	687b      	ldr	r3, [r7, #4]
 8020cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020cf8:	685b      	ldr	r3, [r3, #4]
 8020cfa:	687a      	ldr	r2, [r7, #4]
 8020cfc:	6852      	ldr	r2, [r2, #4]
 8020cfe:	b2d2      	uxtb	r2, r2
 8020d00:	4611      	mov	r1, r2
 8020d02:	6878      	ldr	r0, [r7, #4]
 8020d04:	4798      	blx	r3
 8020d06:	4603      	mov	r3, r0
 8020d08:	2b00      	cmp	r3, #0
 8020d0a:	d001      	beq.n	8020d10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8020d0c:	2303      	movs	r3, #3
 8020d0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020d10:	2340      	movs	r3, #64	; 0x40
 8020d12:	2200      	movs	r2, #0
 8020d14:	2100      	movs	r1, #0
 8020d16:	6878      	ldr	r0, [r7, #4]
 8020d18:	f001 fcbd 	bl	8022696 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	2201      	movs	r2, #1
 8020d20:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	2240      	movs	r2, #64	; 0x40
 8020d28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8020d2c:	2340      	movs	r3, #64	; 0x40
 8020d2e:	2200      	movs	r2, #0
 8020d30:	2180      	movs	r1, #128	; 0x80
 8020d32:	6878      	ldr	r0, [r7, #4]
 8020d34:	f001 fcaf 	bl	8022696 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	2201      	movs	r2, #1
 8020d3c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8020d3e:	687b      	ldr	r3, [r7, #4]
 8020d40:	2240      	movs	r2, #64	; 0x40
 8020d42:	621a      	str	r2, [r3, #32]

  return ret;
 8020d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8020d46:	4618      	mov	r0, r3
 8020d48:	3710      	adds	r7, #16
 8020d4a:	46bd      	mov	sp, r7
 8020d4c:	bd80      	pop	{r7, pc}

08020d4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8020d4e:	b480      	push	{r7}
 8020d50:	b083      	sub	sp, #12
 8020d52:	af00      	add	r7, sp, #0
 8020d54:	6078      	str	r0, [r7, #4]
 8020d56:	460b      	mov	r3, r1
 8020d58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8020d5a:	687b      	ldr	r3, [r7, #4]
 8020d5c:	78fa      	ldrb	r2, [r7, #3]
 8020d5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8020d60:	2300      	movs	r3, #0
}
 8020d62:	4618      	mov	r0, r3
 8020d64:	370c      	adds	r7, #12
 8020d66:	46bd      	mov	sp, r7
 8020d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d6c:	4770      	bx	lr

08020d6e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8020d6e:	b480      	push	{r7}
 8020d70:	b083      	sub	sp, #12
 8020d72:	af00      	add	r7, sp, #0
 8020d74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020d7c:	b2da      	uxtb	r2, r3
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	2204      	movs	r2, #4
 8020d88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8020d8c:	2300      	movs	r3, #0
}
 8020d8e:	4618      	mov	r0, r3
 8020d90:	370c      	adds	r7, #12
 8020d92:	46bd      	mov	sp, r7
 8020d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d98:	4770      	bx	lr

08020d9a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8020d9a:	b480      	push	{r7}
 8020d9c:	b083      	sub	sp, #12
 8020d9e:	af00      	add	r7, sp, #0
 8020da0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8020da2:	687b      	ldr	r3, [r7, #4]
 8020da4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020da8:	b2db      	uxtb	r3, r3
 8020daa:	2b04      	cmp	r3, #4
 8020dac:	d106      	bne.n	8020dbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8020dae:	687b      	ldr	r3, [r7, #4]
 8020db0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8020db4:	b2da      	uxtb	r2, r3
 8020db6:	687b      	ldr	r3, [r7, #4]
 8020db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8020dbc:	2300      	movs	r3, #0
}
 8020dbe:	4618      	mov	r0, r3
 8020dc0:	370c      	adds	r7, #12
 8020dc2:	46bd      	mov	sp, r7
 8020dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc8:	4770      	bx	lr

08020dca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8020dca:	b580      	push	{r7, lr}
 8020dcc:	b082      	sub	sp, #8
 8020dce:	af00      	add	r7, sp, #0
 8020dd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020dd8:	b2db      	uxtb	r3, r3
 8020dda:	2b03      	cmp	r3, #3
 8020ddc:	d110      	bne.n	8020e00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	d00b      	beq.n	8020e00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8020de8:	687b      	ldr	r3, [r7, #4]
 8020dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020dee:	69db      	ldr	r3, [r3, #28]
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d005      	beq.n	8020e00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8020df4:	687b      	ldr	r3, [r7, #4]
 8020df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020dfa:	69db      	ldr	r3, [r3, #28]
 8020dfc:	6878      	ldr	r0, [r7, #4]
 8020dfe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8020e00:	2300      	movs	r3, #0
}
 8020e02:	4618      	mov	r0, r3
 8020e04:	3708      	adds	r7, #8
 8020e06:	46bd      	mov	sp, r7
 8020e08:	bd80      	pop	{r7, pc}

08020e0a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8020e0a:	b580      	push	{r7, lr}
 8020e0c:	b082      	sub	sp, #8
 8020e0e:	af00      	add	r7, sp, #0
 8020e10:	6078      	str	r0, [r7, #4]
 8020e12:	460b      	mov	r3, r1
 8020e14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	32ae      	adds	r2, #174	; 0xae
 8020e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	d101      	bne.n	8020e2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8020e28:	2303      	movs	r3, #3
 8020e2a:	e01c      	b.n	8020e66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020e2c:	687b      	ldr	r3, [r7, #4]
 8020e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020e32:	b2db      	uxtb	r3, r3
 8020e34:	2b03      	cmp	r3, #3
 8020e36:	d115      	bne.n	8020e64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8020e38:	687b      	ldr	r3, [r7, #4]
 8020e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020e3e:	687b      	ldr	r3, [r7, #4]
 8020e40:	32ae      	adds	r2, #174	; 0xae
 8020e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020e46:	6a1b      	ldr	r3, [r3, #32]
 8020e48:	2b00      	cmp	r3, #0
 8020e4a:	d00b      	beq.n	8020e64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020e52:	687b      	ldr	r3, [r7, #4]
 8020e54:	32ae      	adds	r2, #174	; 0xae
 8020e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020e5a:	6a1b      	ldr	r3, [r3, #32]
 8020e5c:	78fa      	ldrb	r2, [r7, #3]
 8020e5e:	4611      	mov	r1, r2
 8020e60:	6878      	ldr	r0, [r7, #4]
 8020e62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8020e64:	2300      	movs	r3, #0
}
 8020e66:	4618      	mov	r0, r3
 8020e68:	3708      	adds	r7, #8
 8020e6a:	46bd      	mov	sp, r7
 8020e6c:	bd80      	pop	{r7, pc}

08020e6e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8020e6e:	b580      	push	{r7, lr}
 8020e70:	b082      	sub	sp, #8
 8020e72:	af00      	add	r7, sp, #0
 8020e74:	6078      	str	r0, [r7, #4]
 8020e76:	460b      	mov	r3, r1
 8020e78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8020e7a:	687b      	ldr	r3, [r7, #4]
 8020e7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	32ae      	adds	r2, #174	; 0xae
 8020e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020e88:	2b00      	cmp	r3, #0
 8020e8a:	d101      	bne.n	8020e90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8020e8c:	2303      	movs	r3, #3
 8020e8e:	e01c      	b.n	8020eca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8020e96:	b2db      	uxtb	r3, r3
 8020e98:	2b03      	cmp	r3, #3
 8020e9a:	d115      	bne.n	8020ec8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	32ae      	adds	r2, #174	; 0xae
 8020ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020eac:	2b00      	cmp	r3, #0
 8020eae:	d00b      	beq.n	8020ec8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8020eb0:	687b      	ldr	r3, [r7, #4]
 8020eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8020eb6:	687b      	ldr	r3, [r7, #4]
 8020eb8:	32ae      	adds	r2, #174	; 0xae
 8020eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8020ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ec0:	78fa      	ldrb	r2, [r7, #3]
 8020ec2:	4611      	mov	r1, r2
 8020ec4:	6878      	ldr	r0, [r7, #4]
 8020ec6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8020ec8:	2300      	movs	r3, #0
}
 8020eca:	4618      	mov	r0, r3
 8020ecc:	3708      	adds	r7, #8
 8020ece:	46bd      	mov	sp, r7
 8020ed0:	bd80      	pop	{r7, pc}

08020ed2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8020ed2:	b480      	push	{r7}
 8020ed4:	b083      	sub	sp, #12
 8020ed6:	af00      	add	r7, sp, #0
 8020ed8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8020eda:	2300      	movs	r3, #0
}
 8020edc:	4618      	mov	r0, r3
 8020ede:	370c      	adds	r7, #12
 8020ee0:	46bd      	mov	sp, r7
 8020ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020ee6:	4770      	bx	lr

08020ee8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8020ee8:	b580      	push	{r7, lr}
 8020eea:	b084      	sub	sp, #16
 8020eec:	af00      	add	r7, sp, #0
 8020eee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8020ef0:	2300      	movs	r3, #0
 8020ef2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	2201      	movs	r2, #1
 8020ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8020efc:	687b      	ldr	r3, [r7, #4]
 8020efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f02:	2b00      	cmp	r3, #0
 8020f04:	d00e      	beq.n	8020f24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8020f0c:	685b      	ldr	r3, [r3, #4]
 8020f0e:	687a      	ldr	r2, [r7, #4]
 8020f10:	6852      	ldr	r2, [r2, #4]
 8020f12:	b2d2      	uxtb	r2, r2
 8020f14:	4611      	mov	r1, r2
 8020f16:	6878      	ldr	r0, [r7, #4]
 8020f18:	4798      	blx	r3
 8020f1a:	4603      	mov	r3, r0
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	d001      	beq.n	8020f24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8020f20:	2303      	movs	r3, #3
 8020f22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8020f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8020f26:	4618      	mov	r0, r3
 8020f28:	3710      	adds	r7, #16
 8020f2a:	46bd      	mov	sp, r7
 8020f2c:	bd80      	pop	{r7, pc}

08020f2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8020f2e:	b480      	push	{r7}
 8020f30:	b083      	sub	sp, #12
 8020f32:	af00      	add	r7, sp, #0
 8020f34:	6078      	str	r0, [r7, #4]
 8020f36:	460b      	mov	r3, r1
 8020f38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8020f3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8020f3c:	4618      	mov	r0, r3
 8020f3e:	370c      	adds	r7, #12
 8020f40:	46bd      	mov	sp, r7
 8020f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f46:	4770      	bx	lr

08020f48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8020f48:	b480      	push	{r7}
 8020f4a:	b083      	sub	sp, #12
 8020f4c:	af00      	add	r7, sp, #0
 8020f4e:	6078      	str	r0, [r7, #4]
 8020f50:	460b      	mov	r3, r1
 8020f52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8020f54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8020f56:	4618      	mov	r0, r3
 8020f58:	370c      	adds	r7, #12
 8020f5a:	46bd      	mov	sp, r7
 8020f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f60:	4770      	bx	lr

08020f62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8020f62:	b580      	push	{r7, lr}
 8020f64:	b086      	sub	sp, #24
 8020f66:	af00      	add	r7, sp, #0
 8020f68:	6078      	str	r0, [r7, #4]
 8020f6a:	460b      	mov	r3, r1
 8020f6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8020f6e:	687b      	ldr	r3, [r7, #4]
 8020f70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8020f72:	687b      	ldr	r3, [r7, #4]
 8020f74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8020f76:	2300      	movs	r3, #0
 8020f78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8020f7a:	68fb      	ldr	r3, [r7, #12]
 8020f7c:	885b      	ldrh	r3, [r3, #2]
 8020f7e:	b29a      	uxth	r2, r3
 8020f80:	68fb      	ldr	r3, [r7, #12]
 8020f82:	781b      	ldrb	r3, [r3, #0]
 8020f84:	b29b      	uxth	r3, r3
 8020f86:	429a      	cmp	r2, r3
 8020f88:	d920      	bls.n	8020fcc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8020f8a:	68fb      	ldr	r3, [r7, #12]
 8020f8c:	781b      	ldrb	r3, [r3, #0]
 8020f8e:	b29b      	uxth	r3, r3
 8020f90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8020f92:	e013      	b.n	8020fbc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8020f94:	f107 030a 	add.w	r3, r7, #10
 8020f98:	4619      	mov	r1, r3
 8020f9a:	6978      	ldr	r0, [r7, #20]
 8020f9c:	f000 f81b 	bl	8020fd6 <USBD_GetNextDesc>
 8020fa0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8020fa2:	697b      	ldr	r3, [r7, #20]
 8020fa4:	785b      	ldrb	r3, [r3, #1]
 8020fa6:	2b05      	cmp	r3, #5
 8020fa8:	d108      	bne.n	8020fbc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8020faa:	697b      	ldr	r3, [r7, #20]
 8020fac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8020fae:	693b      	ldr	r3, [r7, #16]
 8020fb0:	789b      	ldrb	r3, [r3, #2]
 8020fb2:	78fa      	ldrb	r2, [r7, #3]
 8020fb4:	429a      	cmp	r2, r3
 8020fb6:	d008      	beq.n	8020fca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8020fb8:	2300      	movs	r3, #0
 8020fba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	885b      	ldrh	r3, [r3, #2]
 8020fc0:	b29a      	uxth	r2, r3
 8020fc2:	897b      	ldrh	r3, [r7, #10]
 8020fc4:	429a      	cmp	r2, r3
 8020fc6:	d8e5      	bhi.n	8020f94 <USBD_GetEpDesc+0x32>
 8020fc8:	e000      	b.n	8020fcc <USBD_GetEpDesc+0x6a>
          break;
 8020fca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8020fcc:	693b      	ldr	r3, [r7, #16]
}
 8020fce:	4618      	mov	r0, r3
 8020fd0:	3718      	adds	r7, #24
 8020fd2:	46bd      	mov	sp, r7
 8020fd4:	bd80      	pop	{r7, pc}

08020fd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8020fd6:	b480      	push	{r7}
 8020fd8:	b085      	sub	sp, #20
 8020fda:	af00      	add	r7, sp, #0
 8020fdc:	6078      	str	r0, [r7, #4]
 8020fde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8020fe0:	687b      	ldr	r3, [r7, #4]
 8020fe2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8020fe4:	683b      	ldr	r3, [r7, #0]
 8020fe6:	881a      	ldrh	r2, [r3, #0]
 8020fe8:	68fb      	ldr	r3, [r7, #12]
 8020fea:	781b      	ldrb	r3, [r3, #0]
 8020fec:	b29b      	uxth	r3, r3
 8020fee:	4413      	add	r3, r2
 8020ff0:	b29a      	uxth	r2, r3
 8020ff2:	683b      	ldr	r3, [r7, #0]
 8020ff4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8020ff6:	68fb      	ldr	r3, [r7, #12]
 8020ff8:	781b      	ldrb	r3, [r3, #0]
 8020ffa:	461a      	mov	r2, r3
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	4413      	add	r3, r2
 8021000:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8021002:	68fb      	ldr	r3, [r7, #12]
}
 8021004:	4618      	mov	r0, r3
 8021006:	3714      	adds	r7, #20
 8021008:	46bd      	mov	sp, r7
 802100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802100e:	4770      	bx	lr

08021010 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8021010:	b480      	push	{r7}
 8021012:	b087      	sub	sp, #28
 8021014:	af00      	add	r7, sp, #0
 8021016:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 802101c:	697b      	ldr	r3, [r7, #20]
 802101e:	781b      	ldrb	r3, [r3, #0]
 8021020:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8021022:	697b      	ldr	r3, [r7, #20]
 8021024:	3301      	adds	r3, #1
 8021026:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8021028:	697b      	ldr	r3, [r7, #20]
 802102a:	781b      	ldrb	r3, [r3, #0]
 802102c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 802102e:	8a3b      	ldrh	r3, [r7, #16]
 8021030:	021b      	lsls	r3, r3, #8
 8021032:	b21a      	sxth	r2, r3
 8021034:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8021038:	4313      	orrs	r3, r2
 802103a:	b21b      	sxth	r3, r3
 802103c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 802103e:	89fb      	ldrh	r3, [r7, #14]
}
 8021040:	4618      	mov	r0, r3
 8021042:	371c      	adds	r7, #28
 8021044:	46bd      	mov	sp, r7
 8021046:	f85d 7b04 	ldr.w	r7, [sp], #4
 802104a:	4770      	bx	lr

0802104c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802104c:	b580      	push	{r7, lr}
 802104e:	b084      	sub	sp, #16
 8021050:	af00      	add	r7, sp, #0
 8021052:	6078      	str	r0, [r7, #4]
 8021054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8021056:	2300      	movs	r3, #0
 8021058:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802105a:	683b      	ldr	r3, [r7, #0]
 802105c:	781b      	ldrb	r3, [r3, #0]
 802105e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021062:	2b40      	cmp	r3, #64	; 0x40
 8021064:	d005      	beq.n	8021072 <USBD_StdDevReq+0x26>
 8021066:	2b40      	cmp	r3, #64	; 0x40
 8021068:	d857      	bhi.n	802111a <USBD_StdDevReq+0xce>
 802106a:	2b00      	cmp	r3, #0
 802106c:	d00f      	beq.n	802108e <USBD_StdDevReq+0x42>
 802106e:	2b20      	cmp	r3, #32
 8021070:	d153      	bne.n	802111a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	32ae      	adds	r2, #174	; 0xae
 802107c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021080:	689b      	ldr	r3, [r3, #8]
 8021082:	6839      	ldr	r1, [r7, #0]
 8021084:	6878      	ldr	r0, [r7, #4]
 8021086:	4798      	blx	r3
 8021088:	4603      	mov	r3, r0
 802108a:	73fb      	strb	r3, [r7, #15]
      break;
 802108c:	e04a      	b.n	8021124 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 802108e:	683b      	ldr	r3, [r7, #0]
 8021090:	785b      	ldrb	r3, [r3, #1]
 8021092:	2b09      	cmp	r3, #9
 8021094:	d83b      	bhi.n	802110e <USBD_StdDevReq+0xc2>
 8021096:	a201      	add	r2, pc, #4	; (adr r2, 802109c <USBD_StdDevReq+0x50>)
 8021098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802109c:	080210f1 	.word	0x080210f1
 80210a0:	08021105 	.word	0x08021105
 80210a4:	0802110f 	.word	0x0802110f
 80210a8:	080210fb 	.word	0x080210fb
 80210ac:	0802110f 	.word	0x0802110f
 80210b0:	080210cf 	.word	0x080210cf
 80210b4:	080210c5 	.word	0x080210c5
 80210b8:	0802110f 	.word	0x0802110f
 80210bc:	080210e7 	.word	0x080210e7
 80210c0:	080210d9 	.word	0x080210d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80210c4:	6839      	ldr	r1, [r7, #0]
 80210c6:	6878      	ldr	r0, [r7, #4]
 80210c8:	f000 fa3c 	bl	8021544 <USBD_GetDescriptor>
          break;
 80210cc:	e024      	b.n	8021118 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80210ce:	6839      	ldr	r1, [r7, #0]
 80210d0:	6878      	ldr	r0, [r7, #4]
 80210d2:	f000 fbcb 	bl	802186c <USBD_SetAddress>
          break;
 80210d6:	e01f      	b.n	8021118 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80210d8:	6839      	ldr	r1, [r7, #0]
 80210da:	6878      	ldr	r0, [r7, #4]
 80210dc:	f000 fc0a 	bl	80218f4 <USBD_SetConfig>
 80210e0:	4603      	mov	r3, r0
 80210e2:	73fb      	strb	r3, [r7, #15]
          break;
 80210e4:	e018      	b.n	8021118 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80210e6:	6839      	ldr	r1, [r7, #0]
 80210e8:	6878      	ldr	r0, [r7, #4]
 80210ea:	f000 fcad 	bl	8021a48 <USBD_GetConfig>
          break;
 80210ee:	e013      	b.n	8021118 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80210f0:	6839      	ldr	r1, [r7, #0]
 80210f2:	6878      	ldr	r0, [r7, #4]
 80210f4:	f000 fcde 	bl	8021ab4 <USBD_GetStatus>
          break;
 80210f8:	e00e      	b.n	8021118 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80210fa:	6839      	ldr	r1, [r7, #0]
 80210fc:	6878      	ldr	r0, [r7, #4]
 80210fe:	f000 fd0d 	bl	8021b1c <USBD_SetFeature>
          break;
 8021102:	e009      	b.n	8021118 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8021104:	6839      	ldr	r1, [r7, #0]
 8021106:	6878      	ldr	r0, [r7, #4]
 8021108:	f000 fd31 	bl	8021b6e <USBD_ClrFeature>
          break;
 802110c:	e004      	b.n	8021118 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 802110e:	6839      	ldr	r1, [r7, #0]
 8021110:	6878      	ldr	r0, [r7, #4]
 8021112:	f000 fd88 	bl	8021c26 <USBD_CtlError>
          break;
 8021116:	bf00      	nop
      }
      break;
 8021118:	e004      	b.n	8021124 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 802111a:	6839      	ldr	r1, [r7, #0]
 802111c:	6878      	ldr	r0, [r7, #4]
 802111e:	f000 fd82 	bl	8021c26 <USBD_CtlError>
      break;
 8021122:	bf00      	nop
  }

  return ret;
 8021124:	7bfb      	ldrb	r3, [r7, #15]
}
 8021126:	4618      	mov	r0, r3
 8021128:	3710      	adds	r7, #16
 802112a:	46bd      	mov	sp, r7
 802112c:	bd80      	pop	{r7, pc}
 802112e:	bf00      	nop

08021130 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021130:	b580      	push	{r7, lr}
 8021132:	b084      	sub	sp, #16
 8021134:	af00      	add	r7, sp, #0
 8021136:	6078      	str	r0, [r7, #4]
 8021138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 802113a:	2300      	movs	r3, #0
 802113c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802113e:	683b      	ldr	r3, [r7, #0]
 8021140:	781b      	ldrb	r3, [r3, #0]
 8021142:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021146:	2b40      	cmp	r3, #64	; 0x40
 8021148:	d005      	beq.n	8021156 <USBD_StdItfReq+0x26>
 802114a:	2b40      	cmp	r3, #64	; 0x40
 802114c:	d852      	bhi.n	80211f4 <USBD_StdItfReq+0xc4>
 802114e:	2b00      	cmp	r3, #0
 8021150:	d001      	beq.n	8021156 <USBD_StdItfReq+0x26>
 8021152:	2b20      	cmp	r3, #32
 8021154:	d14e      	bne.n	80211f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8021156:	687b      	ldr	r3, [r7, #4]
 8021158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 802115c:	b2db      	uxtb	r3, r3
 802115e:	3b01      	subs	r3, #1
 8021160:	2b02      	cmp	r3, #2
 8021162:	d840      	bhi.n	80211e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8021164:	683b      	ldr	r3, [r7, #0]
 8021166:	889b      	ldrh	r3, [r3, #4]
 8021168:	b2db      	uxtb	r3, r3
 802116a:	2b01      	cmp	r3, #1
 802116c:	d836      	bhi.n	80211dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 802116e:	683b      	ldr	r3, [r7, #0]
 8021170:	889b      	ldrh	r3, [r3, #4]
 8021172:	b2db      	uxtb	r3, r3
 8021174:	4619      	mov	r1, r3
 8021176:	6878      	ldr	r0, [r7, #4]
 8021178:	f7ff fed9 	bl	8020f2e <USBD_CoreFindIF>
 802117c:	4603      	mov	r3, r0
 802117e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021180:	7bbb      	ldrb	r3, [r7, #14]
 8021182:	2bff      	cmp	r3, #255	; 0xff
 8021184:	d01d      	beq.n	80211c2 <USBD_StdItfReq+0x92>
 8021186:	7bbb      	ldrb	r3, [r7, #14]
 8021188:	2b00      	cmp	r3, #0
 802118a:	d11a      	bne.n	80211c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 802118c:	7bba      	ldrb	r2, [r7, #14]
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	32ae      	adds	r2, #174	; 0xae
 8021192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021196:	689b      	ldr	r3, [r3, #8]
 8021198:	2b00      	cmp	r3, #0
 802119a:	d00f      	beq.n	80211bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 802119c:	7bba      	ldrb	r2, [r7, #14]
 802119e:	687b      	ldr	r3, [r7, #4]
 80211a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80211a4:	7bba      	ldrb	r2, [r7, #14]
 80211a6:	687b      	ldr	r3, [r7, #4]
 80211a8:	32ae      	adds	r2, #174	; 0xae
 80211aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80211ae:	689b      	ldr	r3, [r3, #8]
 80211b0:	6839      	ldr	r1, [r7, #0]
 80211b2:	6878      	ldr	r0, [r7, #4]
 80211b4:	4798      	blx	r3
 80211b6:	4603      	mov	r3, r0
 80211b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80211ba:	e004      	b.n	80211c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80211bc:	2303      	movs	r3, #3
 80211be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80211c0:	e001      	b.n	80211c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80211c2:	2303      	movs	r3, #3
 80211c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80211c6:	683b      	ldr	r3, [r7, #0]
 80211c8:	88db      	ldrh	r3, [r3, #6]
 80211ca:	2b00      	cmp	r3, #0
 80211cc:	d110      	bne.n	80211f0 <USBD_StdItfReq+0xc0>
 80211ce:	7bfb      	ldrb	r3, [r7, #15]
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d10d      	bne.n	80211f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80211d4:	6878      	ldr	r0, [r7, #4]
 80211d6:	f000 fdf1 	bl	8021dbc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80211da:	e009      	b.n	80211f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80211dc:	6839      	ldr	r1, [r7, #0]
 80211de:	6878      	ldr	r0, [r7, #4]
 80211e0:	f000 fd21 	bl	8021c26 <USBD_CtlError>
          break;
 80211e4:	e004      	b.n	80211f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80211e6:	6839      	ldr	r1, [r7, #0]
 80211e8:	6878      	ldr	r0, [r7, #4]
 80211ea:	f000 fd1c 	bl	8021c26 <USBD_CtlError>
          break;
 80211ee:	e000      	b.n	80211f2 <USBD_StdItfReq+0xc2>
          break;
 80211f0:	bf00      	nop
      }
      break;
 80211f2:	e004      	b.n	80211fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80211f4:	6839      	ldr	r1, [r7, #0]
 80211f6:	6878      	ldr	r0, [r7, #4]
 80211f8:	f000 fd15 	bl	8021c26 <USBD_CtlError>
      break;
 80211fc:	bf00      	nop
  }

  return ret;
 80211fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8021200:	4618      	mov	r0, r3
 8021202:	3710      	adds	r7, #16
 8021204:	46bd      	mov	sp, r7
 8021206:	bd80      	pop	{r7, pc}

08021208 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021208:	b580      	push	{r7, lr}
 802120a:	b084      	sub	sp, #16
 802120c:	af00      	add	r7, sp, #0
 802120e:	6078      	str	r0, [r7, #4]
 8021210:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8021212:	2300      	movs	r3, #0
 8021214:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8021216:	683b      	ldr	r3, [r7, #0]
 8021218:	889b      	ldrh	r3, [r3, #4]
 802121a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 802121c:	683b      	ldr	r3, [r7, #0]
 802121e:	781b      	ldrb	r3, [r3, #0]
 8021220:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8021224:	2b40      	cmp	r3, #64	; 0x40
 8021226:	d007      	beq.n	8021238 <USBD_StdEPReq+0x30>
 8021228:	2b40      	cmp	r3, #64	; 0x40
 802122a:	f200 817f 	bhi.w	802152c <USBD_StdEPReq+0x324>
 802122e:	2b00      	cmp	r3, #0
 8021230:	d02a      	beq.n	8021288 <USBD_StdEPReq+0x80>
 8021232:	2b20      	cmp	r3, #32
 8021234:	f040 817a 	bne.w	802152c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8021238:	7bbb      	ldrb	r3, [r7, #14]
 802123a:	4619      	mov	r1, r3
 802123c:	6878      	ldr	r0, [r7, #4]
 802123e:	f7ff fe83 	bl	8020f48 <USBD_CoreFindEP>
 8021242:	4603      	mov	r3, r0
 8021244:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021246:	7b7b      	ldrb	r3, [r7, #13]
 8021248:	2bff      	cmp	r3, #255	; 0xff
 802124a:	f000 8174 	beq.w	8021536 <USBD_StdEPReq+0x32e>
 802124e:	7b7b      	ldrb	r3, [r7, #13]
 8021250:	2b00      	cmp	r3, #0
 8021252:	f040 8170 	bne.w	8021536 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8021256:	7b7a      	ldrb	r2, [r7, #13]
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 802125e:	7b7a      	ldrb	r2, [r7, #13]
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	32ae      	adds	r2, #174	; 0xae
 8021264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021268:	689b      	ldr	r3, [r3, #8]
 802126a:	2b00      	cmp	r3, #0
 802126c:	f000 8163 	beq.w	8021536 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8021270:	7b7a      	ldrb	r2, [r7, #13]
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	32ae      	adds	r2, #174	; 0xae
 8021276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802127a:	689b      	ldr	r3, [r3, #8]
 802127c:	6839      	ldr	r1, [r7, #0]
 802127e:	6878      	ldr	r0, [r7, #4]
 8021280:	4798      	blx	r3
 8021282:	4603      	mov	r3, r0
 8021284:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8021286:	e156      	b.n	8021536 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8021288:	683b      	ldr	r3, [r7, #0]
 802128a:	785b      	ldrb	r3, [r3, #1]
 802128c:	2b03      	cmp	r3, #3
 802128e:	d008      	beq.n	80212a2 <USBD_StdEPReq+0x9a>
 8021290:	2b03      	cmp	r3, #3
 8021292:	f300 8145 	bgt.w	8021520 <USBD_StdEPReq+0x318>
 8021296:	2b00      	cmp	r3, #0
 8021298:	f000 809b 	beq.w	80213d2 <USBD_StdEPReq+0x1ca>
 802129c:	2b01      	cmp	r3, #1
 802129e:	d03c      	beq.n	802131a <USBD_StdEPReq+0x112>
 80212a0:	e13e      	b.n	8021520 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80212a2:	687b      	ldr	r3, [r7, #4]
 80212a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80212a8:	b2db      	uxtb	r3, r3
 80212aa:	2b02      	cmp	r3, #2
 80212ac:	d002      	beq.n	80212b4 <USBD_StdEPReq+0xac>
 80212ae:	2b03      	cmp	r3, #3
 80212b0:	d016      	beq.n	80212e0 <USBD_StdEPReq+0xd8>
 80212b2:	e02c      	b.n	802130e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80212b4:	7bbb      	ldrb	r3, [r7, #14]
 80212b6:	2b00      	cmp	r3, #0
 80212b8:	d00d      	beq.n	80212d6 <USBD_StdEPReq+0xce>
 80212ba:	7bbb      	ldrb	r3, [r7, #14]
 80212bc:	2b80      	cmp	r3, #128	; 0x80
 80212be:	d00a      	beq.n	80212d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80212c0:	7bbb      	ldrb	r3, [r7, #14]
 80212c2:	4619      	mov	r1, r3
 80212c4:	6878      	ldr	r0, [r7, #4]
 80212c6:	f001 fa2b 	bl	8022720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80212ca:	2180      	movs	r1, #128	; 0x80
 80212cc:	6878      	ldr	r0, [r7, #4]
 80212ce:	f001 fa27 	bl	8022720 <USBD_LL_StallEP>
 80212d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80212d4:	e020      	b.n	8021318 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80212d6:	6839      	ldr	r1, [r7, #0]
 80212d8:	6878      	ldr	r0, [r7, #4]
 80212da:	f000 fca4 	bl	8021c26 <USBD_CtlError>
              break;
 80212de:	e01b      	b.n	8021318 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80212e0:	683b      	ldr	r3, [r7, #0]
 80212e2:	885b      	ldrh	r3, [r3, #2]
 80212e4:	2b00      	cmp	r3, #0
 80212e6:	d10e      	bne.n	8021306 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80212e8:	7bbb      	ldrb	r3, [r7, #14]
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	d00b      	beq.n	8021306 <USBD_StdEPReq+0xfe>
 80212ee:	7bbb      	ldrb	r3, [r7, #14]
 80212f0:	2b80      	cmp	r3, #128	; 0x80
 80212f2:	d008      	beq.n	8021306 <USBD_StdEPReq+0xfe>
 80212f4:	683b      	ldr	r3, [r7, #0]
 80212f6:	88db      	ldrh	r3, [r3, #6]
 80212f8:	2b00      	cmp	r3, #0
 80212fa:	d104      	bne.n	8021306 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80212fc:	7bbb      	ldrb	r3, [r7, #14]
 80212fe:	4619      	mov	r1, r3
 8021300:	6878      	ldr	r0, [r7, #4]
 8021302:	f001 fa0d 	bl	8022720 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8021306:	6878      	ldr	r0, [r7, #4]
 8021308:	f000 fd58 	bl	8021dbc <USBD_CtlSendStatus>

              break;
 802130c:	e004      	b.n	8021318 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 802130e:	6839      	ldr	r1, [r7, #0]
 8021310:	6878      	ldr	r0, [r7, #4]
 8021312:	f000 fc88 	bl	8021c26 <USBD_CtlError>
              break;
 8021316:	bf00      	nop
          }
          break;
 8021318:	e107      	b.n	802152a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 802131a:	687b      	ldr	r3, [r7, #4]
 802131c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021320:	b2db      	uxtb	r3, r3
 8021322:	2b02      	cmp	r3, #2
 8021324:	d002      	beq.n	802132c <USBD_StdEPReq+0x124>
 8021326:	2b03      	cmp	r3, #3
 8021328:	d016      	beq.n	8021358 <USBD_StdEPReq+0x150>
 802132a:	e04b      	b.n	80213c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 802132c:	7bbb      	ldrb	r3, [r7, #14]
 802132e:	2b00      	cmp	r3, #0
 8021330:	d00d      	beq.n	802134e <USBD_StdEPReq+0x146>
 8021332:	7bbb      	ldrb	r3, [r7, #14]
 8021334:	2b80      	cmp	r3, #128	; 0x80
 8021336:	d00a      	beq.n	802134e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8021338:	7bbb      	ldrb	r3, [r7, #14]
 802133a:	4619      	mov	r1, r3
 802133c:	6878      	ldr	r0, [r7, #4]
 802133e:	f001 f9ef 	bl	8022720 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8021342:	2180      	movs	r1, #128	; 0x80
 8021344:	6878      	ldr	r0, [r7, #4]
 8021346:	f001 f9eb 	bl	8022720 <USBD_LL_StallEP>
 802134a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 802134c:	e040      	b.n	80213d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 802134e:	6839      	ldr	r1, [r7, #0]
 8021350:	6878      	ldr	r0, [r7, #4]
 8021352:	f000 fc68 	bl	8021c26 <USBD_CtlError>
              break;
 8021356:	e03b      	b.n	80213d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8021358:	683b      	ldr	r3, [r7, #0]
 802135a:	885b      	ldrh	r3, [r3, #2]
 802135c:	2b00      	cmp	r3, #0
 802135e:	d136      	bne.n	80213ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8021360:	7bbb      	ldrb	r3, [r7, #14]
 8021362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021366:	2b00      	cmp	r3, #0
 8021368:	d004      	beq.n	8021374 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 802136a:	7bbb      	ldrb	r3, [r7, #14]
 802136c:	4619      	mov	r1, r3
 802136e:	6878      	ldr	r0, [r7, #4]
 8021370:	f001 f9f5 	bl	802275e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8021374:	6878      	ldr	r0, [r7, #4]
 8021376:	f000 fd21 	bl	8021dbc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 802137a:	7bbb      	ldrb	r3, [r7, #14]
 802137c:	4619      	mov	r1, r3
 802137e:	6878      	ldr	r0, [r7, #4]
 8021380:	f7ff fde2 	bl	8020f48 <USBD_CoreFindEP>
 8021384:	4603      	mov	r3, r0
 8021386:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8021388:	7b7b      	ldrb	r3, [r7, #13]
 802138a:	2bff      	cmp	r3, #255	; 0xff
 802138c:	d01f      	beq.n	80213ce <USBD_StdEPReq+0x1c6>
 802138e:	7b7b      	ldrb	r3, [r7, #13]
 8021390:	2b00      	cmp	r3, #0
 8021392:	d11c      	bne.n	80213ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8021394:	7b7a      	ldrb	r2, [r7, #13]
 8021396:	687b      	ldr	r3, [r7, #4]
 8021398:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 802139c:	7b7a      	ldrb	r2, [r7, #13]
 802139e:	687b      	ldr	r3, [r7, #4]
 80213a0:	32ae      	adds	r2, #174	; 0xae
 80213a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80213a6:	689b      	ldr	r3, [r3, #8]
 80213a8:	2b00      	cmp	r3, #0
 80213aa:	d010      	beq.n	80213ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80213ac:	7b7a      	ldrb	r2, [r7, #13]
 80213ae:	687b      	ldr	r3, [r7, #4]
 80213b0:	32ae      	adds	r2, #174	; 0xae
 80213b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80213b6:	689b      	ldr	r3, [r3, #8]
 80213b8:	6839      	ldr	r1, [r7, #0]
 80213ba:	6878      	ldr	r0, [r7, #4]
 80213bc:	4798      	blx	r3
 80213be:	4603      	mov	r3, r0
 80213c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80213c2:	e004      	b.n	80213ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80213c4:	6839      	ldr	r1, [r7, #0]
 80213c6:	6878      	ldr	r0, [r7, #4]
 80213c8:	f000 fc2d 	bl	8021c26 <USBD_CtlError>
              break;
 80213cc:	e000      	b.n	80213d0 <USBD_StdEPReq+0x1c8>
              break;
 80213ce:	bf00      	nop
          }
          break;
 80213d0:	e0ab      	b.n	802152a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80213d2:	687b      	ldr	r3, [r7, #4]
 80213d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80213d8:	b2db      	uxtb	r3, r3
 80213da:	2b02      	cmp	r3, #2
 80213dc:	d002      	beq.n	80213e4 <USBD_StdEPReq+0x1dc>
 80213de:	2b03      	cmp	r3, #3
 80213e0:	d032      	beq.n	8021448 <USBD_StdEPReq+0x240>
 80213e2:	e097      	b.n	8021514 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80213e4:	7bbb      	ldrb	r3, [r7, #14]
 80213e6:	2b00      	cmp	r3, #0
 80213e8:	d007      	beq.n	80213fa <USBD_StdEPReq+0x1f2>
 80213ea:	7bbb      	ldrb	r3, [r7, #14]
 80213ec:	2b80      	cmp	r3, #128	; 0x80
 80213ee:	d004      	beq.n	80213fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80213f0:	6839      	ldr	r1, [r7, #0]
 80213f2:	6878      	ldr	r0, [r7, #4]
 80213f4:	f000 fc17 	bl	8021c26 <USBD_CtlError>
                break;
 80213f8:	e091      	b.n	802151e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80213fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80213fe:	2b00      	cmp	r3, #0
 8021400:	da0b      	bge.n	802141a <USBD_StdEPReq+0x212>
 8021402:	7bbb      	ldrb	r3, [r7, #14]
 8021404:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8021408:	4613      	mov	r3, r2
 802140a:	009b      	lsls	r3, r3, #2
 802140c:	4413      	add	r3, r2
 802140e:	009b      	lsls	r3, r3, #2
 8021410:	3310      	adds	r3, #16
 8021412:	687a      	ldr	r2, [r7, #4]
 8021414:	4413      	add	r3, r2
 8021416:	3304      	adds	r3, #4
 8021418:	e00b      	b.n	8021432 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 802141a:	7bbb      	ldrb	r3, [r7, #14]
 802141c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8021420:	4613      	mov	r3, r2
 8021422:	009b      	lsls	r3, r3, #2
 8021424:	4413      	add	r3, r2
 8021426:	009b      	lsls	r3, r3, #2
 8021428:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 802142c:	687a      	ldr	r2, [r7, #4]
 802142e:	4413      	add	r3, r2
 8021430:	3304      	adds	r3, #4
 8021432:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8021434:	68bb      	ldr	r3, [r7, #8]
 8021436:	2200      	movs	r2, #0
 8021438:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 802143a:	68bb      	ldr	r3, [r7, #8]
 802143c:	2202      	movs	r2, #2
 802143e:	4619      	mov	r1, r3
 8021440:	6878      	ldr	r0, [r7, #4]
 8021442:	f000 fc61 	bl	8021d08 <USBD_CtlSendData>
              break;
 8021446:	e06a      	b.n	802151e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8021448:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802144c:	2b00      	cmp	r3, #0
 802144e:	da11      	bge.n	8021474 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8021450:	7bbb      	ldrb	r3, [r7, #14]
 8021452:	f003 020f 	and.w	r2, r3, #15
 8021456:	6879      	ldr	r1, [r7, #4]
 8021458:	4613      	mov	r3, r2
 802145a:	009b      	lsls	r3, r3, #2
 802145c:	4413      	add	r3, r2
 802145e:	009b      	lsls	r3, r3, #2
 8021460:	440b      	add	r3, r1
 8021462:	3324      	adds	r3, #36	; 0x24
 8021464:	881b      	ldrh	r3, [r3, #0]
 8021466:	2b00      	cmp	r3, #0
 8021468:	d117      	bne.n	802149a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 802146a:	6839      	ldr	r1, [r7, #0]
 802146c:	6878      	ldr	r0, [r7, #4]
 802146e:	f000 fbda 	bl	8021c26 <USBD_CtlError>
                  break;
 8021472:	e054      	b.n	802151e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8021474:	7bbb      	ldrb	r3, [r7, #14]
 8021476:	f003 020f 	and.w	r2, r3, #15
 802147a:	6879      	ldr	r1, [r7, #4]
 802147c:	4613      	mov	r3, r2
 802147e:	009b      	lsls	r3, r3, #2
 8021480:	4413      	add	r3, r2
 8021482:	009b      	lsls	r3, r3, #2
 8021484:	440b      	add	r3, r1
 8021486:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 802148a:	881b      	ldrh	r3, [r3, #0]
 802148c:	2b00      	cmp	r3, #0
 802148e:	d104      	bne.n	802149a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8021490:	6839      	ldr	r1, [r7, #0]
 8021492:	6878      	ldr	r0, [r7, #4]
 8021494:	f000 fbc7 	bl	8021c26 <USBD_CtlError>
                  break;
 8021498:	e041      	b.n	802151e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 802149a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 802149e:	2b00      	cmp	r3, #0
 80214a0:	da0b      	bge.n	80214ba <USBD_StdEPReq+0x2b2>
 80214a2:	7bbb      	ldrb	r3, [r7, #14]
 80214a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80214a8:	4613      	mov	r3, r2
 80214aa:	009b      	lsls	r3, r3, #2
 80214ac:	4413      	add	r3, r2
 80214ae:	009b      	lsls	r3, r3, #2
 80214b0:	3310      	adds	r3, #16
 80214b2:	687a      	ldr	r2, [r7, #4]
 80214b4:	4413      	add	r3, r2
 80214b6:	3304      	adds	r3, #4
 80214b8:	e00b      	b.n	80214d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80214ba:	7bbb      	ldrb	r3, [r7, #14]
 80214bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80214c0:	4613      	mov	r3, r2
 80214c2:	009b      	lsls	r3, r3, #2
 80214c4:	4413      	add	r3, r2
 80214c6:	009b      	lsls	r3, r3, #2
 80214c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80214cc:	687a      	ldr	r2, [r7, #4]
 80214ce:	4413      	add	r3, r2
 80214d0:	3304      	adds	r3, #4
 80214d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80214d4:	7bbb      	ldrb	r3, [r7, #14]
 80214d6:	2b00      	cmp	r3, #0
 80214d8:	d002      	beq.n	80214e0 <USBD_StdEPReq+0x2d8>
 80214da:	7bbb      	ldrb	r3, [r7, #14]
 80214dc:	2b80      	cmp	r3, #128	; 0x80
 80214de:	d103      	bne.n	80214e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80214e0:	68bb      	ldr	r3, [r7, #8]
 80214e2:	2200      	movs	r2, #0
 80214e4:	601a      	str	r2, [r3, #0]
 80214e6:	e00e      	b.n	8021506 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80214e8:	7bbb      	ldrb	r3, [r7, #14]
 80214ea:	4619      	mov	r1, r3
 80214ec:	6878      	ldr	r0, [r7, #4]
 80214ee:	f001 f955 	bl	802279c <USBD_LL_IsStallEP>
 80214f2:	4603      	mov	r3, r0
 80214f4:	2b00      	cmp	r3, #0
 80214f6:	d003      	beq.n	8021500 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80214f8:	68bb      	ldr	r3, [r7, #8]
 80214fa:	2201      	movs	r2, #1
 80214fc:	601a      	str	r2, [r3, #0]
 80214fe:	e002      	b.n	8021506 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8021500:	68bb      	ldr	r3, [r7, #8]
 8021502:	2200      	movs	r2, #0
 8021504:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8021506:	68bb      	ldr	r3, [r7, #8]
 8021508:	2202      	movs	r2, #2
 802150a:	4619      	mov	r1, r3
 802150c:	6878      	ldr	r0, [r7, #4]
 802150e:	f000 fbfb 	bl	8021d08 <USBD_CtlSendData>
              break;
 8021512:	e004      	b.n	802151e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8021514:	6839      	ldr	r1, [r7, #0]
 8021516:	6878      	ldr	r0, [r7, #4]
 8021518:	f000 fb85 	bl	8021c26 <USBD_CtlError>
              break;
 802151c:	bf00      	nop
          }
          break;
 802151e:	e004      	b.n	802152a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8021520:	6839      	ldr	r1, [r7, #0]
 8021522:	6878      	ldr	r0, [r7, #4]
 8021524:	f000 fb7f 	bl	8021c26 <USBD_CtlError>
          break;
 8021528:	bf00      	nop
      }
      break;
 802152a:	e005      	b.n	8021538 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 802152c:	6839      	ldr	r1, [r7, #0]
 802152e:	6878      	ldr	r0, [r7, #4]
 8021530:	f000 fb79 	bl	8021c26 <USBD_CtlError>
      break;
 8021534:	e000      	b.n	8021538 <USBD_StdEPReq+0x330>
      break;
 8021536:	bf00      	nop
  }

  return ret;
 8021538:	7bfb      	ldrb	r3, [r7, #15]
}
 802153a:	4618      	mov	r0, r3
 802153c:	3710      	adds	r7, #16
 802153e:	46bd      	mov	sp, r7
 8021540:	bd80      	pop	{r7, pc}
	...

08021544 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021544:	b580      	push	{r7, lr}
 8021546:	b084      	sub	sp, #16
 8021548:	af00      	add	r7, sp, #0
 802154a:	6078      	str	r0, [r7, #4]
 802154c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 802154e:	2300      	movs	r3, #0
 8021550:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8021552:	2300      	movs	r3, #0
 8021554:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8021556:	2300      	movs	r3, #0
 8021558:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 802155a:	683b      	ldr	r3, [r7, #0]
 802155c:	885b      	ldrh	r3, [r3, #2]
 802155e:	0a1b      	lsrs	r3, r3, #8
 8021560:	b29b      	uxth	r3, r3
 8021562:	3b01      	subs	r3, #1
 8021564:	2b0e      	cmp	r3, #14
 8021566:	f200 8152 	bhi.w	802180e <USBD_GetDescriptor+0x2ca>
 802156a:	a201      	add	r2, pc, #4	; (adr r2, 8021570 <USBD_GetDescriptor+0x2c>)
 802156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021570:	080215e1 	.word	0x080215e1
 8021574:	080215f9 	.word	0x080215f9
 8021578:	08021639 	.word	0x08021639
 802157c:	0802180f 	.word	0x0802180f
 8021580:	0802180f 	.word	0x0802180f
 8021584:	080217af 	.word	0x080217af
 8021588:	080217db 	.word	0x080217db
 802158c:	0802180f 	.word	0x0802180f
 8021590:	0802180f 	.word	0x0802180f
 8021594:	0802180f 	.word	0x0802180f
 8021598:	0802180f 	.word	0x0802180f
 802159c:	0802180f 	.word	0x0802180f
 80215a0:	0802180f 	.word	0x0802180f
 80215a4:	0802180f 	.word	0x0802180f
 80215a8:	080215ad 	.word	0x080215ad
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80215ac:	687b      	ldr	r3, [r7, #4]
 80215ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80215b2:	69db      	ldr	r3, [r3, #28]
 80215b4:	2b00      	cmp	r3, #0
 80215b6:	d00b      	beq.n	80215d0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80215be:	69db      	ldr	r3, [r3, #28]
 80215c0:	687a      	ldr	r2, [r7, #4]
 80215c2:	7c12      	ldrb	r2, [r2, #16]
 80215c4:	f107 0108 	add.w	r1, r7, #8
 80215c8:	4610      	mov	r0, r2
 80215ca:	4798      	blx	r3
 80215cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80215ce:	e126      	b.n	802181e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80215d0:	6839      	ldr	r1, [r7, #0]
 80215d2:	6878      	ldr	r0, [r7, #4]
 80215d4:	f000 fb27 	bl	8021c26 <USBD_CtlError>
        err++;
 80215d8:	7afb      	ldrb	r3, [r7, #11]
 80215da:	3301      	adds	r3, #1
 80215dc:	72fb      	strb	r3, [r7, #11]
      break;
 80215de:	e11e      	b.n	802181e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80215e0:	687b      	ldr	r3, [r7, #4]
 80215e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80215e6:	681b      	ldr	r3, [r3, #0]
 80215e8:	687a      	ldr	r2, [r7, #4]
 80215ea:	7c12      	ldrb	r2, [r2, #16]
 80215ec:	f107 0108 	add.w	r1, r7, #8
 80215f0:	4610      	mov	r0, r2
 80215f2:	4798      	blx	r3
 80215f4:	60f8      	str	r0, [r7, #12]
      break;
 80215f6:	e112      	b.n	802181e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80215f8:	687b      	ldr	r3, [r7, #4]
 80215fa:	7c1b      	ldrb	r3, [r3, #16]
 80215fc:	2b00      	cmp	r3, #0
 80215fe:	d10d      	bne.n	802161c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021608:	f107 0208 	add.w	r2, r7, #8
 802160c:	4610      	mov	r0, r2
 802160e:	4798      	blx	r3
 8021610:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8021612:	68fb      	ldr	r3, [r7, #12]
 8021614:	3301      	adds	r3, #1
 8021616:	2202      	movs	r2, #2
 8021618:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 802161a:	e100      	b.n	802181e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 802161c:	687b      	ldr	r3, [r7, #4]
 802161e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8021622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021624:	f107 0208 	add.w	r2, r7, #8
 8021628:	4610      	mov	r0, r2
 802162a:	4798      	blx	r3
 802162c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 802162e:	68fb      	ldr	r3, [r7, #12]
 8021630:	3301      	adds	r3, #1
 8021632:	2202      	movs	r2, #2
 8021634:	701a      	strb	r2, [r3, #0]
      break;
 8021636:	e0f2      	b.n	802181e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8021638:	683b      	ldr	r3, [r7, #0]
 802163a:	885b      	ldrh	r3, [r3, #2]
 802163c:	b2db      	uxtb	r3, r3
 802163e:	2b05      	cmp	r3, #5
 8021640:	f200 80ac 	bhi.w	802179c <USBD_GetDescriptor+0x258>
 8021644:	a201      	add	r2, pc, #4	; (adr r2, 802164c <USBD_GetDescriptor+0x108>)
 8021646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802164a:	bf00      	nop
 802164c:	08021665 	.word	0x08021665
 8021650:	08021699 	.word	0x08021699
 8021654:	080216cd 	.word	0x080216cd
 8021658:	08021701 	.word	0x08021701
 802165c:	08021735 	.word	0x08021735
 8021660:	08021769 	.word	0x08021769
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8021664:	687b      	ldr	r3, [r7, #4]
 8021666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802166a:	685b      	ldr	r3, [r3, #4]
 802166c:	2b00      	cmp	r3, #0
 802166e:	d00b      	beq.n	8021688 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021676:	685b      	ldr	r3, [r3, #4]
 8021678:	687a      	ldr	r2, [r7, #4]
 802167a:	7c12      	ldrb	r2, [r2, #16]
 802167c:	f107 0108 	add.w	r1, r7, #8
 8021680:	4610      	mov	r0, r2
 8021682:	4798      	blx	r3
 8021684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021686:	e091      	b.n	80217ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021688:	6839      	ldr	r1, [r7, #0]
 802168a:	6878      	ldr	r0, [r7, #4]
 802168c:	f000 facb 	bl	8021c26 <USBD_CtlError>
            err++;
 8021690:	7afb      	ldrb	r3, [r7, #11]
 8021692:	3301      	adds	r3, #1
 8021694:	72fb      	strb	r3, [r7, #11]
          break;
 8021696:	e089      	b.n	80217ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8021698:	687b      	ldr	r3, [r7, #4]
 802169a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802169e:	689b      	ldr	r3, [r3, #8]
 80216a0:	2b00      	cmp	r3, #0
 80216a2:	d00b      	beq.n	80216bc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80216aa:	689b      	ldr	r3, [r3, #8]
 80216ac:	687a      	ldr	r2, [r7, #4]
 80216ae:	7c12      	ldrb	r2, [r2, #16]
 80216b0:	f107 0108 	add.w	r1, r7, #8
 80216b4:	4610      	mov	r0, r2
 80216b6:	4798      	blx	r3
 80216b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80216ba:	e077      	b.n	80217ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80216bc:	6839      	ldr	r1, [r7, #0]
 80216be:	6878      	ldr	r0, [r7, #4]
 80216c0:	f000 fab1 	bl	8021c26 <USBD_CtlError>
            err++;
 80216c4:	7afb      	ldrb	r3, [r7, #11]
 80216c6:	3301      	adds	r3, #1
 80216c8:	72fb      	strb	r3, [r7, #11]
          break;
 80216ca:	e06f      	b.n	80217ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80216d2:	68db      	ldr	r3, [r3, #12]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	d00b      	beq.n	80216f0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80216d8:	687b      	ldr	r3, [r7, #4]
 80216da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80216de:	68db      	ldr	r3, [r3, #12]
 80216e0:	687a      	ldr	r2, [r7, #4]
 80216e2:	7c12      	ldrb	r2, [r2, #16]
 80216e4:	f107 0108 	add.w	r1, r7, #8
 80216e8:	4610      	mov	r0, r2
 80216ea:	4798      	blx	r3
 80216ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80216ee:	e05d      	b.n	80217ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80216f0:	6839      	ldr	r1, [r7, #0]
 80216f2:	6878      	ldr	r0, [r7, #4]
 80216f4:	f000 fa97 	bl	8021c26 <USBD_CtlError>
            err++;
 80216f8:	7afb      	ldrb	r3, [r7, #11]
 80216fa:	3301      	adds	r3, #1
 80216fc:	72fb      	strb	r3, [r7, #11]
          break;
 80216fe:	e055      	b.n	80217ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8021700:	687b      	ldr	r3, [r7, #4]
 8021702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021706:	691b      	ldr	r3, [r3, #16]
 8021708:	2b00      	cmp	r3, #0
 802170a:	d00b      	beq.n	8021724 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021712:	691b      	ldr	r3, [r3, #16]
 8021714:	687a      	ldr	r2, [r7, #4]
 8021716:	7c12      	ldrb	r2, [r2, #16]
 8021718:	f107 0108 	add.w	r1, r7, #8
 802171c:	4610      	mov	r0, r2
 802171e:	4798      	blx	r3
 8021720:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021722:	e043      	b.n	80217ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021724:	6839      	ldr	r1, [r7, #0]
 8021726:	6878      	ldr	r0, [r7, #4]
 8021728:	f000 fa7d 	bl	8021c26 <USBD_CtlError>
            err++;
 802172c:	7afb      	ldrb	r3, [r7, #11]
 802172e:	3301      	adds	r3, #1
 8021730:	72fb      	strb	r3, [r7, #11]
          break;
 8021732:	e03b      	b.n	80217ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8021734:	687b      	ldr	r3, [r7, #4]
 8021736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802173a:	695b      	ldr	r3, [r3, #20]
 802173c:	2b00      	cmp	r3, #0
 802173e:	d00b      	beq.n	8021758 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8021740:	687b      	ldr	r3, [r7, #4]
 8021742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8021746:	695b      	ldr	r3, [r3, #20]
 8021748:	687a      	ldr	r2, [r7, #4]
 802174a:	7c12      	ldrb	r2, [r2, #16]
 802174c:	f107 0108 	add.w	r1, r7, #8
 8021750:	4610      	mov	r0, r2
 8021752:	4798      	blx	r3
 8021754:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8021756:	e029      	b.n	80217ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8021758:	6839      	ldr	r1, [r7, #0]
 802175a:	6878      	ldr	r0, [r7, #4]
 802175c:	f000 fa63 	bl	8021c26 <USBD_CtlError>
            err++;
 8021760:	7afb      	ldrb	r3, [r7, #11]
 8021762:	3301      	adds	r3, #1
 8021764:	72fb      	strb	r3, [r7, #11]
          break;
 8021766:	e021      	b.n	80217ac <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8021768:	687b      	ldr	r3, [r7, #4]
 802176a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802176e:	699b      	ldr	r3, [r3, #24]
 8021770:	2b00      	cmp	r3, #0
 8021772:	d00b      	beq.n	802178c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8021774:	687b      	ldr	r3, [r7, #4]
 8021776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 802177a:	699b      	ldr	r3, [r3, #24]
 802177c:	687a      	ldr	r2, [r7, #4]
 802177e:	7c12      	ldrb	r2, [r2, #16]
 8021780:	f107 0108 	add.w	r1, r7, #8
 8021784:	4610      	mov	r0, r2
 8021786:	4798      	blx	r3
 8021788:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 802178a:	e00f      	b.n	80217ac <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 802178c:	6839      	ldr	r1, [r7, #0]
 802178e:	6878      	ldr	r0, [r7, #4]
 8021790:	f000 fa49 	bl	8021c26 <USBD_CtlError>
            err++;
 8021794:	7afb      	ldrb	r3, [r7, #11]
 8021796:	3301      	adds	r3, #1
 8021798:	72fb      	strb	r3, [r7, #11]
          break;
 802179a:	e007      	b.n	80217ac <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 802179c:	6839      	ldr	r1, [r7, #0]
 802179e:	6878      	ldr	r0, [r7, #4]
 80217a0:	f000 fa41 	bl	8021c26 <USBD_CtlError>
          err++;
 80217a4:	7afb      	ldrb	r3, [r7, #11]
 80217a6:	3301      	adds	r3, #1
 80217a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80217aa:	bf00      	nop
      }
      break;
 80217ac:	e037      	b.n	802181e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80217ae:	687b      	ldr	r3, [r7, #4]
 80217b0:	7c1b      	ldrb	r3, [r3, #16]
 80217b2:	2b00      	cmp	r3, #0
 80217b4:	d109      	bne.n	80217ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80217b6:	687b      	ldr	r3, [r7, #4]
 80217b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80217bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80217be:	f107 0208 	add.w	r2, r7, #8
 80217c2:	4610      	mov	r0, r2
 80217c4:	4798      	blx	r3
 80217c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80217c8:	e029      	b.n	802181e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80217ca:	6839      	ldr	r1, [r7, #0]
 80217cc:	6878      	ldr	r0, [r7, #4]
 80217ce:	f000 fa2a 	bl	8021c26 <USBD_CtlError>
        err++;
 80217d2:	7afb      	ldrb	r3, [r7, #11]
 80217d4:	3301      	adds	r3, #1
 80217d6:	72fb      	strb	r3, [r7, #11]
      break;
 80217d8:	e021      	b.n	802181e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	7c1b      	ldrb	r3, [r3, #16]
 80217de:	2b00      	cmp	r3, #0
 80217e0:	d10d      	bne.n	80217fe <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80217e2:	687b      	ldr	r3, [r7, #4]
 80217e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80217e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80217ea:	f107 0208 	add.w	r2, r7, #8
 80217ee:	4610      	mov	r0, r2
 80217f0:	4798      	blx	r3
 80217f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80217f4:	68fb      	ldr	r3, [r7, #12]
 80217f6:	3301      	adds	r3, #1
 80217f8:	2207      	movs	r2, #7
 80217fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80217fc:	e00f      	b.n	802181e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80217fe:	6839      	ldr	r1, [r7, #0]
 8021800:	6878      	ldr	r0, [r7, #4]
 8021802:	f000 fa10 	bl	8021c26 <USBD_CtlError>
        err++;
 8021806:	7afb      	ldrb	r3, [r7, #11]
 8021808:	3301      	adds	r3, #1
 802180a:	72fb      	strb	r3, [r7, #11]
      break;
 802180c:	e007      	b.n	802181e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 802180e:	6839      	ldr	r1, [r7, #0]
 8021810:	6878      	ldr	r0, [r7, #4]
 8021812:	f000 fa08 	bl	8021c26 <USBD_CtlError>
      err++;
 8021816:	7afb      	ldrb	r3, [r7, #11]
 8021818:	3301      	adds	r3, #1
 802181a:	72fb      	strb	r3, [r7, #11]
      break;
 802181c:	bf00      	nop
  }

  if (err != 0U)
 802181e:	7afb      	ldrb	r3, [r7, #11]
 8021820:	2b00      	cmp	r3, #0
 8021822:	d11e      	bne.n	8021862 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8021824:	683b      	ldr	r3, [r7, #0]
 8021826:	88db      	ldrh	r3, [r3, #6]
 8021828:	2b00      	cmp	r3, #0
 802182a:	d016      	beq.n	802185a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 802182c:	893b      	ldrh	r3, [r7, #8]
 802182e:	2b00      	cmp	r3, #0
 8021830:	d00e      	beq.n	8021850 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8021832:	683b      	ldr	r3, [r7, #0]
 8021834:	88da      	ldrh	r2, [r3, #6]
 8021836:	893b      	ldrh	r3, [r7, #8]
 8021838:	4293      	cmp	r3, r2
 802183a:	bf28      	it	cs
 802183c:	4613      	movcs	r3, r2
 802183e:	b29b      	uxth	r3, r3
 8021840:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8021842:	893b      	ldrh	r3, [r7, #8]
 8021844:	461a      	mov	r2, r3
 8021846:	68f9      	ldr	r1, [r7, #12]
 8021848:	6878      	ldr	r0, [r7, #4]
 802184a:	f000 fa5d 	bl	8021d08 <USBD_CtlSendData>
 802184e:	e009      	b.n	8021864 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8021850:	6839      	ldr	r1, [r7, #0]
 8021852:	6878      	ldr	r0, [r7, #4]
 8021854:	f000 f9e7 	bl	8021c26 <USBD_CtlError>
 8021858:	e004      	b.n	8021864 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 802185a:	6878      	ldr	r0, [r7, #4]
 802185c:	f000 faae 	bl	8021dbc <USBD_CtlSendStatus>
 8021860:	e000      	b.n	8021864 <USBD_GetDescriptor+0x320>
    return;
 8021862:	bf00      	nop
  }
}
 8021864:	3710      	adds	r7, #16
 8021866:	46bd      	mov	sp, r7
 8021868:	bd80      	pop	{r7, pc}
 802186a:	bf00      	nop

0802186c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 802186c:	b580      	push	{r7, lr}
 802186e:	b084      	sub	sp, #16
 8021870:	af00      	add	r7, sp, #0
 8021872:	6078      	str	r0, [r7, #4]
 8021874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8021876:	683b      	ldr	r3, [r7, #0]
 8021878:	889b      	ldrh	r3, [r3, #4]
 802187a:	2b00      	cmp	r3, #0
 802187c:	d131      	bne.n	80218e2 <USBD_SetAddress+0x76>
 802187e:	683b      	ldr	r3, [r7, #0]
 8021880:	88db      	ldrh	r3, [r3, #6]
 8021882:	2b00      	cmp	r3, #0
 8021884:	d12d      	bne.n	80218e2 <USBD_SetAddress+0x76>
 8021886:	683b      	ldr	r3, [r7, #0]
 8021888:	885b      	ldrh	r3, [r3, #2]
 802188a:	2b7f      	cmp	r3, #127	; 0x7f
 802188c:	d829      	bhi.n	80218e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 802188e:	683b      	ldr	r3, [r7, #0]
 8021890:	885b      	ldrh	r3, [r3, #2]
 8021892:	b2db      	uxtb	r3, r3
 8021894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80218a0:	b2db      	uxtb	r3, r3
 80218a2:	2b03      	cmp	r3, #3
 80218a4:	d104      	bne.n	80218b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80218a6:	6839      	ldr	r1, [r7, #0]
 80218a8:	6878      	ldr	r0, [r7, #4]
 80218aa:	f000 f9bc 	bl	8021c26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80218ae:	e01d      	b.n	80218ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80218b0:	687b      	ldr	r3, [r7, #4]
 80218b2:	7bfa      	ldrb	r2, [r7, #15]
 80218b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80218b8:	7bfb      	ldrb	r3, [r7, #15]
 80218ba:	4619      	mov	r1, r3
 80218bc:	6878      	ldr	r0, [r7, #4]
 80218be:	f000 ff99 	bl	80227f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80218c2:	6878      	ldr	r0, [r7, #4]
 80218c4:	f000 fa7a 	bl	8021dbc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80218c8:	7bfb      	ldrb	r3, [r7, #15]
 80218ca:	2b00      	cmp	r3, #0
 80218cc:	d004      	beq.n	80218d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80218ce:	687b      	ldr	r3, [r7, #4]
 80218d0:	2202      	movs	r2, #2
 80218d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80218d6:	e009      	b.n	80218ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	2201      	movs	r2, #1
 80218dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80218e0:	e004      	b.n	80218ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80218e2:	6839      	ldr	r1, [r7, #0]
 80218e4:	6878      	ldr	r0, [r7, #4]
 80218e6:	f000 f99e 	bl	8021c26 <USBD_CtlError>
  }
}
 80218ea:	bf00      	nop
 80218ec:	bf00      	nop
 80218ee:	3710      	adds	r7, #16
 80218f0:	46bd      	mov	sp, r7
 80218f2:	bd80      	pop	{r7, pc}

080218f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80218f4:	b580      	push	{r7, lr}
 80218f6:	b084      	sub	sp, #16
 80218f8:	af00      	add	r7, sp, #0
 80218fa:	6078      	str	r0, [r7, #4]
 80218fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80218fe:	2300      	movs	r3, #0
 8021900:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8021902:	683b      	ldr	r3, [r7, #0]
 8021904:	885b      	ldrh	r3, [r3, #2]
 8021906:	b2da      	uxtb	r2, r3
 8021908:	4b4e      	ldr	r3, [pc, #312]	; (8021a44 <USBD_SetConfig+0x150>)
 802190a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 802190c:	4b4d      	ldr	r3, [pc, #308]	; (8021a44 <USBD_SetConfig+0x150>)
 802190e:	781b      	ldrb	r3, [r3, #0]
 8021910:	2b01      	cmp	r3, #1
 8021912:	d905      	bls.n	8021920 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8021914:	6839      	ldr	r1, [r7, #0]
 8021916:	6878      	ldr	r0, [r7, #4]
 8021918:	f000 f985 	bl	8021c26 <USBD_CtlError>
    return USBD_FAIL;
 802191c:	2303      	movs	r3, #3
 802191e:	e08c      	b.n	8021a3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8021920:	687b      	ldr	r3, [r7, #4]
 8021922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021926:	b2db      	uxtb	r3, r3
 8021928:	2b02      	cmp	r3, #2
 802192a:	d002      	beq.n	8021932 <USBD_SetConfig+0x3e>
 802192c:	2b03      	cmp	r3, #3
 802192e:	d029      	beq.n	8021984 <USBD_SetConfig+0x90>
 8021930:	e075      	b.n	8021a1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8021932:	4b44      	ldr	r3, [pc, #272]	; (8021a44 <USBD_SetConfig+0x150>)
 8021934:	781b      	ldrb	r3, [r3, #0]
 8021936:	2b00      	cmp	r3, #0
 8021938:	d020      	beq.n	802197c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 802193a:	4b42      	ldr	r3, [pc, #264]	; (8021a44 <USBD_SetConfig+0x150>)
 802193c:	781b      	ldrb	r3, [r3, #0]
 802193e:	461a      	mov	r2, r3
 8021940:	687b      	ldr	r3, [r7, #4]
 8021942:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8021944:	4b3f      	ldr	r3, [pc, #252]	; (8021a44 <USBD_SetConfig+0x150>)
 8021946:	781b      	ldrb	r3, [r3, #0]
 8021948:	4619      	mov	r1, r3
 802194a:	6878      	ldr	r0, [r7, #4]
 802194c:	f7fe ffbd 	bl	80208ca <USBD_SetClassConfig>
 8021950:	4603      	mov	r3, r0
 8021952:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8021954:	7bfb      	ldrb	r3, [r7, #15]
 8021956:	2b00      	cmp	r3, #0
 8021958:	d008      	beq.n	802196c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 802195a:	6839      	ldr	r1, [r7, #0]
 802195c:	6878      	ldr	r0, [r7, #4]
 802195e:	f000 f962 	bl	8021c26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021962:	687b      	ldr	r3, [r7, #4]
 8021964:	2202      	movs	r2, #2
 8021966:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 802196a:	e065      	b.n	8021a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 802196c:	6878      	ldr	r0, [r7, #4]
 802196e:	f000 fa25 	bl	8021dbc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8021972:	687b      	ldr	r3, [r7, #4]
 8021974:	2203      	movs	r2, #3
 8021976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 802197a:	e05d      	b.n	8021a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 802197c:	6878      	ldr	r0, [r7, #4]
 802197e:	f000 fa1d 	bl	8021dbc <USBD_CtlSendStatus>
      break;
 8021982:	e059      	b.n	8021a38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8021984:	4b2f      	ldr	r3, [pc, #188]	; (8021a44 <USBD_SetConfig+0x150>)
 8021986:	781b      	ldrb	r3, [r3, #0]
 8021988:	2b00      	cmp	r3, #0
 802198a:	d112      	bne.n	80219b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	2202      	movs	r2, #2
 8021990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8021994:	4b2b      	ldr	r3, [pc, #172]	; (8021a44 <USBD_SetConfig+0x150>)
 8021996:	781b      	ldrb	r3, [r3, #0]
 8021998:	461a      	mov	r2, r3
 802199a:	687b      	ldr	r3, [r7, #4]
 802199c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 802199e:	4b29      	ldr	r3, [pc, #164]	; (8021a44 <USBD_SetConfig+0x150>)
 80219a0:	781b      	ldrb	r3, [r3, #0]
 80219a2:	4619      	mov	r1, r3
 80219a4:	6878      	ldr	r0, [r7, #4]
 80219a6:	f7fe ffac 	bl	8020902 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80219aa:	6878      	ldr	r0, [r7, #4]
 80219ac:	f000 fa06 	bl	8021dbc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80219b0:	e042      	b.n	8021a38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80219b2:	4b24      	ldr	r3, [pc, #144]	; (8021a44 <USBD_SetConfig+0x150>)
 80219b4:	781b      	ldrb	r3, [r3, #0]
 80219b6:	461a      	mov	r2, r3
 80219b8:	687b      	ldr	r3, [r7, #4]
 80219ba:	685b      	ldr	r3, [r3, #4]
 80219bc:	429a      	cmp	r2, r3
 80219be:	d02a      	beq.n	8021a16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	685b      	ldr	r3, [r3, #4]
 80219c4:	b2db      	uxtb	r3, r3
 80219c6:	4619      	mov	r1, r3
 80219c8:	6878      	ldr	r0, [r7, #4]
 80219ca:	f7fe ff9a 	bl	8020902 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80219ce:	4b1d      	ldr	r3, [pc, #116]	; (8021a44 <USBD_SetConfig+0x150>)
 80219d0:	781b      	ldrb	r3, [r3, #0]
 80219d2:	461a      	mov	r2, r3
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80219d8:	4b1a      	ldr	r3, [pc, #104]	; (8021a44 <USBD_SetConfig+0x150>)
 80219da:	781b      	ldrb	r3, [r3, #0]
 80219dc:	4619      	mov	r1, r3
 80219de:	6878      	ldr	r0, [r7, #4]
 80219e0:	f7fe ff73 	bl	80208ca <USBD_SetClassConfig>
 80219e4:	4603      	mov	r3, r0
 80219e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80219e8:	7bfb      	ldrb	r3, [r7, #15]
 80219ea:	2b00      	cmp	r3, #0
 80219ec:	d00f      	beq.n	8021a0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80219ee:	6839      	ldr	r1, [r7, #0]
 80219f0:	6878      	ldr	r0, [r7, #4]
 80219f2:	f000 f918 	bl	8021c26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80219f6:	687b      	ldr	r3, [r7, #4]
 80219f8:	685b      	ldr	r3, [r3, #4]
 80219fa:	b2db      	uxtb	r3, r3
 80219fc:	4619      	mov	r1, r3
 80219fe:	6878      	ldr	r0, [r7, #4]
 8021a00:	f7fe ff7f 	bl	8020902 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8021a04:	687b      	ldr	r3, [r7, #4]
 8021a06:	2202      	movs	r2, #2
 8021a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8021a0c:	e014      	b.n	8021a38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8021a0e:	6878      	ldr	r0, [r7, #4]
 8021a10:	f000 f9d4 	bl	8021dbc <USBD_CtlSendStatus>
      break;
 8021a14:	e010      	b.n	8021a38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8021a16:	6878      	ldr	r0, [r7, #4]
 8021a18:	f000 f9d0 	bl	8021dbc <USBD_CtlSendStatus>
      break;
 8021a1c:	e00c      	b.n	8021a38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8021a1e:	6839      	ldr	r1, [r7, #0]
 8021a20:	6878      	ldr	r0, [r7, #4]
 8021a22:	f000 f900 	bl	8021c26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8021a26:	4b07      	ldr	r3, [pc, #28]	; (8021a44 <USBD_SetConfig+0x150>)
 8021a28:	781b      	ldrb	r3, [r3, #0]
 8021a2a:	4619      	mov	r1, r3
 8021a2c:	6878      	ldr	r0, [r7, #4]
 8021a2e:	f7fe ff68 	bl	8020902 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8021a32:	2303      	movs	r3, #3
 8021a34:	73fb      	strb	r3, [r7, #15]
      break;
 8021a36:	bf00      	nop
  }

  return ret;
 8021a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8021a3a:	4618      	mov	r0, r3
 8021a3c:	3710      	adds	r7, #16
 8021a3e:	46bd      	mov	sp, r7
 8021a40:	bd80      	pop	{r7, pc}
 8021a42:	bf00      	nop
 8021a44:	2002394c 	.word	0x2002394c

08021a48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021a48:	b580      	push	{r7, lr}
 8021a4a:	b082      	sub	sp, #8
 8021a4c:	af00      	add	r7, sp, #0
 8021a4e:	6078      	str	r0, [r7, #4]
 8021a50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8021a52:	683b      	ldr	r3, [r7, #0]
 8021a54:	88db      	ldrh	r3, [r3, #6]
 8021a56:	2b01      	cmp	r3, #1
 8021a58:	d004      	beq.n	8021a64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8021a5a:	6839      	ldr	r1, [r7, #0]
 8021a5c:	6878      	ldr	r0, [r7, #4]
 8021a5e:	f000 f8e2 	bl	8021c26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8021a62:	e023      	b.n	8021aac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8021a64:	687b      	ldr	r3, [r7, #4]
 8021a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021a6a:	b2db      	uxtb	r3, r3
 8021a6c:	2b02      	cmp	r3, #2
 8021a6e:	dc02      	bgt.n	8021a76 <USBD_GetConfig+0x2e>
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	dc03      	bgt.n	8021a7c <USBD_GetConfig+0x34>
 8021a74:	e015      	b.n	8021aa2 <USBD_GetConfig+0x5a>
 8021a76:	2b03      	cmp	r3, #3
 8021a78:	d00b      	beq.n	8021a92 <USBD_GetConfig+0x4a>
 8021a7a:	e012      	b.n	8021aa2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	2200      	movs	r2, #0
 8021a80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	3308      	adds	r3, #8
 8021a86:	2201      	movs	r2, #1
 8021a88:	4619      	mov	r1, r3
 8021a8a:	6878      	ldr	r0, [r7, #4]
 8021a8c:	f000 f93c 	bl	8021d08 <USBD_CtlSendData>
        break;
 8021a90:	e00c      	b.n	8021aac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8021a92:	687b      	ldr	r3, [r7, #4]
 8021a94:	3304      	adds	r3, #4
 8021a96:	2201      	movs	r2, #1
 8021a98:	4619      	mov	r1, r3
 8021a9a:	6878      	ldr	r0, [r7, #4]
 8021a9c:	f000 f934 	bl	8021d08 <USBD_CtlSendData>
        break;
 8021aa0:	e004      	b.n	8021aac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8021aa2:	6839      	ldr	r1, [r7, #0]
 8021aa4:	6878      	ldr	r0, [r7, #4]
 8021aa6:	f000 f8be 	bl	8021c26 <USBD_CtlError>
        break;
 8021aaa:	bf00      	nop
}
 8021aac:	bf00      	nop
 8021aae:	3708      	adds	r7, #8
 8021ab0:	46bd      	mov	sp, r7
 8021ab2:	bd80      	pop	{r7, pc}

08021ab4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021ab4:	b580      	push	{r7, lr}
 8021ab6:	b082      	sub	sp, #8
 8021ab8:	af00      	add	r7, sp, #0
 8021aba:	6078      	str	r0, [r7, #4]
 8021abc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021ac4:	b2db      	uxtb	r3, r3
 8021ac6:	3b01      	subs	r3, #1
 8021ac8:	2b02      	cmp	r3, #2
 8021aca:	d81e      	bhi.n	8021b0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8021acc:	683b      	ldr	r3, [r7, #0]
 8021ace:	88db      	ldrh	r3, [r3, #6]
 8021ad0:	2b02      	cmp	r3, #2
 8021ad2:	d004      	beq.n	8021ade <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8021ad4:	6839      	ldr	r1, [r7, #0]
 8021ad6:	6878      	ldr	r0, [r7, #4]
 8021ad8:	f000 f8a5 	bl	8021c26 <USBD_CtlError>
        break;
 8021adc:	e01a      	b.n	8021b14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8021ade:	687b      	ldr	r3, [r7, #4]
 8021ae0:	2201      	movs	r2, #1
 8021ae2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	d005      	beq.n	8021afa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8021aee:	687b      	ldr	r3, [r7, #4]
 8021af0:	68db      	ldr	r3, [r3, #12]
 8021af2:	f043 0202 	orr.w	r2, r3, #2
 8021af6:	687b      	ldr	r3, [r7, #4]
 8021af8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8021afa:	687b      	ldr	r3, [r7, #4]
 8021afc:	330c      	adds	r3, #12
 8021afe:	2202      	movs	r2, #2
 8021b00:	4619      	mov	r1, r3
 8021b02:	6878      	ldr	r0, [r7, #4]
 8021b04:	f000 f900 	bl	8021d08 <USBD_CtlSendData>
      break;
 8021b08:	e004      	b.n	8021b14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8021b0a:	6839      	ldr	r1, [r7, #0]
 8021b0c:	6878      	ldr	r0, [r7, #4]
 8021b0e:	f000 f88a 	bl	8021c26 <USBD_CtlError>
      break;
 8021b12:	bf00      	nop
  }
}
 8021b14:	bf00      	nop
 8021b16:	3708      	adds	r7, #8
 8021b18:	46bd      	mov	sp, r7
 8021b1a:	bd80      	pop	{r7, pc}

08021b1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021b1c:	b580      	push	{r7, lr}
 8021b1e:	b082      	sub	sp, #8
 8021b20:	af00      	add	r7, sp, #0
 8021b22:	6078      	str	r0, [r7, #4]
 8021b24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021b26:	683b      	ldr	r3, [r7, #0]
 8021b28:	885b      	ldrh	r3, [r3, #2]
 8021b2a:	2b01      	cmp	r3, #1
 8021b2c:	d107      	bne.n	8021b3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8021b2e:	687b      	ldr	r3, [r7, #4]
 8021b30:	2201      	movs	r2, #1
 8021b32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8021b36:	6878      	ldr	r0, [r7, #4]
 8021b38:	f000 f940 	bl	8021dbc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8021b3c:	e013      	b.n	8021b66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8021b3e:	683b      	ldr	r3, [r7, #0]
 8021b40:	885b      	ldrh	r3, [r3, #2]
 8021b42:	2b02      	cmp	r3, #2
 8021b44:	d10b      	bne.n	8021b5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8021b46:	683b      	ldr	r3, [r7, #0]
 8021b48:	889b      	ldrh	r3, [r3, #4]
 8021b4a:	0a1b      	lsrs	r3, r3, #8
 8021b4c:	b29b      	uxth	r3, r3
 8021b4e:	b2da      	uxtb	r2, r3
 8021b50:	687b      	ldr	r3, [r7, #4]
 8021b52:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8021b56:	6878      	ldr	r0, [r7, #4]
 8021b58:	f000 f930 	bl	8021dbc <USBD_CtlSendStatus>
}
 8021b5c:	e003      	b.n	8021b66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8021b5e:	6839      	ldr	r1, [r7, #0]
 8021b60:	6878      	ldr	r0, [r7, #4]
 8021b62:	f000 f860 	bl	8021c26 <USBD_CtlError>
}
 8021b66:	bf00      	nop
 8021b68:	3708      	adds	r7, #8
 8021b6a:	46bd      	mov	sp, r7
 8021b6c:	bd80      	pop	{r7, pc}

08021b6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021b6e:	b580      	push	{r7, lr}
 8021b70:	b082      	sub	sp, #8
 8021b72:	af00      	add	r7, sp, #0
 8021b74:	6078      	str	r0, [r7, #4]
 8021b76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8021b78:	687b      	ldr	r3, [r7, #4]
 8021b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8021b7e:	b2db      	uxtb	r3, r3
 8021b80:	3b01      	subs	r3, #1
 8021b82:	2b02      	cmp	r3, #2
 8021b84:	d80b      	bhi.n	8021b9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8021b86:	683b      	ldr	r3, [r7, #0]
 8021b88:	885b      	ldrh	r3, [r3, #2]
 8021b8a:	2b01      	cmp	r3, #1
 8021b8c:	d10c      	bne.n	8021ba8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8021b8e:	687b      	ldr	r3, [r7, #4]
 8021b90:	2200      	movs	r2, #0
 8021b92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8021b96:	6878      	ldr	r0, [r7, #4]
 8021b98:	f000 f910 	bl	8021dbc <USBD_CtlSendStatus>
      }
      break;
 8021b9c:	e004      	b.n	8021ba8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8021b9e:	6839      	ldr	r1, [r7, #0]
 8021ba0:	6878      	ldr	r0, [r7, #4]
 8021ba2:	f000 f840 	bl	8021c26 <USBD_CtlError>
      break;
 8021ba6:	e000      	b.n	8021baa <USBD_ClrFeature+0x3c>
      break;
 8021ba8:	bf00      	nop
  }
}
 8021baa:	bf00      	nop
 8021bac:	3708      	adds	r7, #8
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	bd80      	pop	{r7, pc}

08021bb2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8021bb2:	b580      	push	{r7, lr}
 8021bb4:	b084      	sub	sp, #16
 8021bb6:	af00      	add	r7, sp, #0
 8021bb8:	6078      	str	r0, [r7, #4]
 8021bba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8021bbc:	683b      	ldr	r3, [r7, #0]
 8021bbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8021bc0:	68fb      	ldr	r3, [r7, #12]
 8021bc2:	781a      	ldrb	r2, [r3, #0]
 8021bc4:	687b      	ldr	r3, [r7, #4]
 8021bc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8021bc8:	68fb      	ldr	r3, [r7, #12]
 8021bca:	3301      	adds	r3, #1
 8021bcc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8021bce:	68fb      	ldr	r3, [r7, #12]
 8021bd0:	781a      	ldrb	r2, [r3, #0]
 8021bd2:	687b      	ldr	r3, [r7, #4]
 8021bd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8021bd6:	68fb      	ldr	r3, [r7, #12]
 8021bd8:	3301      	adds	r3, #1
 8021bda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8021bdc:	68f8      	ldr	r0, [r7, #12]
 8021bde:	f7ff fa17 	bl	8021010 <SWAPBYTE>
 8021be2:	4603      	mov	r3, r0
 8021be4:	461a      	mov	r2, r3
 8021be6:	687b      	ldr	r3, [r7, #4]
 8021be8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8021bea:	68fb      	ldr	r3, [r7, #12]
 8021bec:	3301      	adds	r3, #1
 8021bee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021bf0:	68fb      	ldr	r3, [r7, #12]
 8021bf2:	3301      	adds	r3, #1
 8021bf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8021bf6:	68f8      	ldr	r0, [r7, #12]
 8021bf8:	f7ff fa0a 	bl	8021010 <SWAPBYTE>
 8021bfc:	4603      	mov	r3, r0
 8021bfe:	461a      	mov	r2, r3
 8021c00:	687b      	ldr	r3, [r7, #4]
 8021c02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8021c04:	68fb      	ldr	r3, [r7, #12]
 8021c06:	3301      	adds	r3, #1
 8021c08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8021c0a:	68fb      	ldr	r3, [r7, #12]
 8021c0c:	3301      	adds	r3, #1
 8021c0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8021c10:	68f8      	ldr	r0, [r7, #12]
 8021c12:	f7ff f9fd 	bl	8021010 <SWAPBYTE>
 8021c16:	4603      	mov	r3, r0
 8021c18:	461a      	mov	r2, r3
 8021c1a:	687b      	ldr	r3, [r7, #4]
 8021c1c:	80da      	strh	r2, [r3, #6]
}
 8021c1e:	bf00      	nop
 8021c20:	3710      	adds	r7, #16
 8021c22:	46bd      	mov	sp, r7
 8021c24:	bd80      	pop	{r7, pc}

08021c26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8021c26:	b580      	push	{r7, lr}
 8021c28:	b082      	sub	sp, #8
 8021c2a:	af00      	add	r7, sp, #0
 8021c2c:	6078      	str	r0, [r7, #4]
 8021c2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8021c30:	2180      	movs	r1, #128	; 0x80
 8021c32:	6878      	ldr	r0, [r7, #4]
 8021c34:	f000 fd74 	bl	8022720 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8021c38:	2100      	movs	r1, #0
 8021c3a:	6878      	ldr	r0, [r7, #4]
 8021c3c:	f000 fd70 	bl	8022720 <USBD_LL_StallEP>
}
 8021c40:	bf00      	nop
 8021c42:	3708      	adds	r7, #8
 8021c44:	46bd      	mov	sp, r7
 8021c46:	bd80      	pop	{r7, pc}

08021c48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8021c48:	b580      	push	{r7, lr}
 8021c4a:	b086      	sub	sp, #24
 8021c4c:	af00      	add	r7, sp, #0
 8021c4e:	60f8      	str	r0, [r7, #12]
 8021c50:	60b9      	str	r1, [r7, #8]
 8021c52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8021c54:	2300      	movs	r3, #0
 8021c56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8021c58:	68fb      	ldr	r3, [r7, #12]
 8021c5a:	2b00      	cmp	r3, #0
 8021c5c:	d036      	beq.n	8021ccc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8021c5e:	68fb      	ldr	r3, [r7, #12]
 8021c60:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8021c62:	6938      	ldr	r0, [r7, #16]
 8021c64:	f000 f836 	bl	8021cd4 <USBD_GetLen>
 8021c68:	4603      	mov	r3, r0
 8021c6a:	3301      	adds	r3, #1
 8021c6c:	b29b      	uxth	r3, r3
 8021c6e:	005b      	lsls	r3, r3, #1
 8021c70:	b29a      	uxth	r2, r3
 8021c72:	687b      	ldr	r3, [r7, #4]
 8021c74:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8021c76:	7dfb      	ldrb	r3, [r7, #23]
 8021c78:	68ba      	ldr	r2, [r7, #8]
 8021c7a:	4413      	add	r3, r2
 8021c7c:	687a      	ldr	r2, [r7, #4]
 8021c7e:	7812      	ldrb	r2, [r2, #0]
 8021c80:	701a      	strb	r2, [r3, #0]
  idx++;
 8021c82:	7dfb      	ldrb	r3, [r7, #23]
 8021c84:	3301      	adds	r3, #1
 8021c86:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8021c88:	7dfb      	ldrb	r3, [r7, #23]
 8021c8a:	68ba      	ldr	r2, [r7, #8]
 8021c8c:	4413      	add	r3, r2
 8021c8e:	2203      	movs	r2, #3
 8021c90:	701a      	strb	r2, [r3, #0]
  idx++;
 8021c92:	7dfb      	ldrb	r3, [r7, #23]
 8021c94:	3301      	adds	r3, #1
 8021c96:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8021c98:	e013      	b.n	8021cc2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8021c9a:	7dfb      	ldrb	r3, [r7, #23]
 8021c9c:	68ba      	ldr	r2, [r7, #8]
 8021c9e:	4413      	add	r3, r2
 8021ca0:	693a      	ldr	r2, [r7, #16]
 8021ca2:	7812      	ldrb	r2, [r2, #0]
 8021ca4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8021ca6:	693b      	ldr	r3, [r7, #16]
 8021ca8:	3301      	adds	r3, #1
 8021caa:	613b      	str	r3, [r7, #16]
    idx++;
 8021cac:	7dfb      	ldrb	r3, [r7, #23]
 8021cae:	3301      	adds	r3, #1
 8021cb0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8021cb2:	7dfb      	ldrb	r3, [r7, #23]
 8021cb4:	68ba      	ldr	r2, [r7, #8]
 8021cb6:	4413      	add	r3, r2
 8021cb8:	2200      	movs	r2, #0
 8021cba:	701a      	strb	r2, [r3, #0]
    idx++;
 8021cbc:	7dfb      	ldrb	r3, [r7, #23]
 8021cbe:	3301      	adds	r3, #1
 8021cc0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8021cc2:	693b      	ldr	r3, [r7, #16]
 8021cc4:	781b      	ldrb	r3, [r3, #0]
 8021cc6:	2b00      	cmp	r3, #0
 8021cc8:	d1e7      	bne.n	8021c9a <USBD_GetString+0x52>
 8021cca:	e000      	b.n	8021cce <USBD_GetString+0x86>
    return;
 8021ccc:	bf00      	nop
  }
}
 8021cce:	3718      	adds	r7, #24
 8021cd0:	46bd      	mov	sp, r7
 8021cd2:	bd80      	pop	{r7, pc}

08021cd4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8021cd4:	b480      	push	{r7}
 8021cd6:	b085      	sub	sp, #20
 8021cd8:	af00      	add	r7, sp, #0
 8021cda:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8021cdc:	2300      	movs	r3, #0
 8021cde:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8021ce0:	687b      	ldr	r3, [r7, #4]
 8021ce2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8021ce4:	e005      	b.n	8021cf2 <USBD_GetLen+0x1e>
  {
    len++;
 8021ce6:	7bfb      	ldrb	r3, [r7, #15]
 8021ce8:	3301      	adds	r3, #1
 8021cea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8021cec:	68bb      	ldr	r3, [r7, #8]
 8021cee:	3301      	adds	r3, #1
 8021cf0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8021cf2:	68bb      	ldr	r3, [r7, #8]
 8021cf4:	781b      	ldrb	r3, [r3, #0]
 8021cf6:	2b00      	cmp	r3, #0
 8021cf8:	d1f5      	bne.n	8021ce6 <USBD_GetLen+0x12>
  }

  return len;
 8021cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8021cfc:	4618      	mov	r0, r3
 8021cfe:	3714      	adds	r7, #20
 8021d00:	46bd      	mov	sp, r7
 8021d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d06:	4770      	bx	lr

08021d08 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8021d08:	b580      	push	{r7, lr}
 8021d0a:	b084      	sub	sp, #16
 8021d0c:	af00      	add	r7, sp, #0
 8021d0e:	60f8      	str	r0, [r7, #12]
 8021d10:	60b9      	str	r1, [r7, #8]
 8021d12:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8021d14:	68fb      	ldr	r3, [r7, #12]
 8021d16:	2202      	movs	r2, #2
 8021d18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8021d1c:	68fb      	ldr	r3, [r7, #12]
 8021d1e:	687a      	ldr	r2, [r7, #4]
 8021d20:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8021d22:	68fb      	ldr	r3, [r7, #12]
 8021d24:	687a      	ldr	r2, [r7, #4]
 8021d26:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021d28:	687b      	ldr	r3, [r7, #4]
 8021d2a:	68ba      	ldr	r2, [r7, #8]
 8021d2c:	2100      	movs	r1, #0
 8021d2e:	68f8      	ldr	r0, [r7, #12]
 8021d30:	f000 fd7f 	bl	8022832 <USBD_LL_Transmit>

  return USBD_OK;
 8021d34:	2300      	movs	r3, #0
}
 8021d36:	4618      	mov	r0, r3
 8021d38:	3710      	adds	r7, #16
 8021d3a:	46bd      	mov	sp, r7
 8021d3c:	bd80      	pop	{r7, pc}

08021d3e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8021d3e:	b580      	push	{r7, lr}
 8021d40:	b084      	sub	sp, #16
 8021d42:	af00      	add	r7, sp, #0
 8021d44:	60f8      	str	r0, [r7, #12]
 8021d46:	60b9      	str	r1, [r7, #8]
 8021d48:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8021d4a:	687b      	ldr	r3, [r7, #4]
 8021d4c:	68ba      	ldr	r2, [r7, #8]
 8021d4e:	2100      	movs	r1, #0
 8021d50:	68f8      	ldr	r0, [r7, #12]
 8021d52:	f000 fd6e 	bl	8022832 <USBD_LL_Transmit>

  return USBD_OK;
 8021d56:	2300      	movs	r3, #0
}
 8021d58:	4618      	mov	r0, r3
 8021d5a:	3710      	adds	r7, #16
 8021d5c:	46bd      	mov	sp, r7
 8021d5e:	bd80      	pop	{r7, pc}

08021d60 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8021d60:	b580      	push	{r7, lr}
 8021d62:	b084      	sub	sp, #16
 8021d64:	af00      	add	r7, sp, #0
 8021d66:	60f8      	str	r0, [r7, #12]
 8021d68:	60b9      	str	r1, [r7, #8]
 8021d6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8021d6c:	68fb      	ldr	r3, [r7, #12]
 8021d6e:	2203      	movs	r2, #3
 8021d70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8021d74:	68fb      	ldr	r3, [r7, #12]
 8021d76:	687a      	ldr	r2, [r7, #4]
 8021d78:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8021d7c:	68fb      	ldr	r3, [r7, #12]
 8021d7e:	687a      	ldr	r2, [r7, #4]
 8021d80:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021d84:	687b      	ldr	r3, [r7, #4]
 8021d86:	68ba      	ldr	r2, [r7, #8]
 8021d88:	2100      	movs	r1, #0
 8021d8a:	68f8      	ldr	r0, [r7, #12]
 8021d8c:	f000 fd72 	bl	8022874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021d90:	2300      	movs	r3, #0
}
 8021d92:	4618      	mov	r0, r3
 8021d94:	3710      	adds	r7, #16
 8021d96:	46bd      	mov	sp, r7
 8021d98:	bd80      	pop	{r7, pc}

08021d9a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8021d9a:	b580      	push	{r7, lr}
 8021d9c:	b084      	sub	sp, #16
 8021d9e:	af00      	add	r7, sp, #0
 8021da0:	60f8      	str	r0, [r7, #12]
 8021da2:	60b9      	str	r1, [r7, #8]
 8021da4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8021da6:	687b      	ldr	r3, [r7, #4]
 8021da8:	68ba      	ldr	r2, [r7, #8]
 8021daa:	2100      	movs	r1, #0
 8021dac:	68f8      	ldr	r0, [r7, #12]
 8021dae:	f000 fd61 	bl	8022874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021db2:	2300      	movs	r3, #0
}
 8021db4:	4618      	mov	r0, r3
 8021db6:	3710      	adds	r7, #16
 8021db8:	46bd      	mov	sp, r7
 8021dba:	bd80      	pop	{r7, pc}

08021dbc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8021dbc:	b580      	push	{r7, lr}
 8021dbe:	b082      	sub	sp, #8
 8021dc0:	af00      	add	r7, sp, #0
 8021dc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8021dc4:	687b      	ldr	r3, [r7, #4]
 8021dc6:	2204      	movs	r2, #4
 8021dc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8021dcc:	2300      	movs	r3, #0
 8021dce:	2200      	movs	r2, #0
 8021dd0:	2100      	movs	r1, #0
 8021dd2:	6878      	ldr	r0, [r7, #4]
 8021dd4:	f000 fd2d 	bl	8022832 <USBD_LL_Transmit>

  return USBD_OK;
 8021dd8:	2300      	movs	r3, #0
}
 8021dda:	4618      	mov	r0, r3
 8021ddc:	3708      	adds	r7, #8
 8021dde:	46bd      	mov	sp, r7
 8021de0:	bd80      	pop	{r7, pc}

08021de2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8021de2:	b580      	push	{r7, lr}
 8021de4:	b082      	sub	sp, #8
 8021de6:	af00      	add	r7, sp, #0
 8021de8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8021dea:	687b      	ldr	r3, [r7, #4]
 8021dec:	2205      	movs	r2, #5
 8021dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8021df2:	2300      	movs	r3, #0
 8021df4:	2200      	movs	r2, #0
 8021df6:	2100      	movs	r1, #0
 8021df8:	6878      	ldr	r0, [r7, #4]
 8021dfa:	f000 fd3b 	bl	8022874 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8021dfe:	2300      	movs	r3, #0
}
 8021e00:	4618      	mov	r0, r3
 8021e02:	3708      	adds	r7, #8
 8021e04:	46bd      	mov	sp, r7
 8021e06:	bd80      	pop	{r7, pc}

08021e08 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8021e08:	b580      	push	{r7, lr}
 8021e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8021e0c:	2200      	movs	r2, #0
 8021e0e:	4912      	ldr	r1, [pc, #72]	; (8021e58 <MX_USB_DEVICE_Init+0x50>)
 8021e10:	4812      	ldr	r0, [pc, #72]	; (8021e5c <MX_USB_DEVICE_Init+0x54>)
 8021e12:	f7fe fcdd 	bl	80207d0 <USBD_Init>
 8021e16:	4603      	mov	r3, r0
 8021e18:	2b00      	cmp	r3, #0
 8021e1a:	d001      	beq.n	8021e20 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8021e1c:	f7e1 fe16 	bl	8003a4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8021e20:	490f      	ldr	r1, [pc, #60]	; (8021e60 <MX_USB_DEVICE_Init+0x58>)
 8021e22:	480e      	ldr	r0, [pc, #56]	; (8021e5c <MX_USB_DEVICE_Init+0x54>)
 8021e24:	f7fe fd04 	bl	8020830 <USBD_RegisterClass>
 8021e28:	4603      	mov	r3, r0
 8021e2a:	2b00      	cmp	r3, #0
 8021e2c:	d001      	beq.n	8021e32 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8021e2e:	f7e1 fe0d 	bl	8003a4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8021e32:	490c      	ldr	r1, [pc, #48]	; (8021e64 <MX_USB_DEVICE_Init+0x5c>)
 8021e34:	4809      	ldr	r0, [pc, #36]	; (8021e5c <MX_USB_DEVICE_Init+0x54>)
 8021e36:	f7fe fbfb 	bl	8020630 <USBD_CDC_RegisterInterface>
 8021e3a:	4603      	mov	r3, r0
 8021e3c:	2b00      	cmp	r3, #0
 8021e3e:	d001      	beq.n	8021e44 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8021e40:	f7e1 fe04 	bl	8003a4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8021e44:	4805      	ldr	r0, [pc, #20]	; (8021e5c <MX_USB_DEVICE_Init+0x54>)
 8021e46:	f7fe fd29 	bl	802089c <USBD_Start>
 8021e4a:	4603      	mov	r3, r0
 8021e4c:	2b00      	cmp	r3, #0
 8021e4e:	d001      	beq.n	8021e54 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8021e50:	f7e1 fdfc 	bl	8003a4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8021e54:	bf00      	nop
 8021e56:	bd80      	pop	{r7, pc}
 8021e58:	200000d8 	.word	0x200000d8
 8021e5c:	20023950 	.word	0x20023950
 8021e60:	20000044 	.word	0x20000044
 8021e64:	200000c4 	.word	0x200000c4

08021e68 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8021e68:	b580      	push	{r7, lr}
 8021e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8021e6c:	2200      	movs	r2, #0
 8021e6e:	4905      	ldr	r1, [pc, #20]	; (8021e84 <CDC_Init_FS+0x1c>)
 8021e70:	4805      	ldr	r0, [pc, #20]	; (8021e88 <CDC_Init_FS+0x20>)
 8021e72:	f7fe fbf7 	bl	8020664 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8021e76:	4905      	ldr	r1, [pc, #20]	; (8021e8c <CDC_Init_FS+0x24>)
 8021e78:	4803      	ldr	r0, [pc, #12]	; (8021e88 <CDC_Init_FS+0x20>)
 8021e7a:	f7fe fc15 	bl	80206a8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8021e7e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8021e80:	4618      	mov	r0, r3
 8021e82:	bd80      	pop	{r7, pc}
 8021e84:	20024434 	.word	0x20024434
 8021e88:	20023950 	.word	0x20023950
 8021e8c:	20023c34 	.word	0x20023c34

08021e90 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8021e90:	b480      	push	{r7}
 8021e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8021e94:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8021e96:	4618      	mov	r0, r3
 8021e98:	46bd      	mov	sp, r7
 8021e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e9e:	4770      	bx	lr

08021ea0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8021ea0:	b480      	push	{r7}
 8021ea2:	b083      	sub	sp, #12
 8021ea4:	af00      	add	r7, sp, #0
 8021ea6:	4603      	mov	r3, r0
 8021ea8:	6039      	str	r1, [r7, #0]
 8021eaa:	71fb      	strb	r3, [r7, #7]
 8021eac:	4613      	mov	r3, r2
 8021eae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8021eb0:	79fb      	ldrb	r3, [r7, #7]
 8021eb2:	2b23      	cmp	r3, #35	; 0x23
 8021eb4:	f200 8095 	bhi.w	8021fe2 <CDC_Control_FS+0x142>
 8021eb8:	a201      	add	r2, pc, #4	; (adr r2, 8021ec0 <CDC_Control_FS+0x20>)
 8021eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ebe:	bf00      	nop
 8021ec0:	08021fe3 	.word	0x08021fe3
 8021ec4:	08021fe3 	.word	0x08021fe3
 8021ec8:	08021fe3 	.word	0x08021fe3
 8021ecc:	08021fe3 	.word	0x08021fe3
 8021ed0:	08021fe3 	.word	0x08021fe3
 8021ed4:	08021fe3 	.word	0x08021fe3
 8021ed8:	08021fe3 	.word	0x08021fe3
 8021edc:	08021fe3 	.word	0x08021fe3
 8021ee0:	08021fe3 	.word	0x08021fe3
 8021ee4:	08021fe3 	.word	0x08021fe3
 8021ee8:	08021fe3 	.word	0x08021fe3
 8021eec:	08021fe3 	.word	0x08021fe3
 8021ef0:	08021fe3 	.word	0x08021fe3
 8021ef4:	08021fe3 	.word	0x08021fe3
 8021ef8:	08021fe3 	.word	0x08021fe3
 8021efc:	08021fe3 	.word	0x08021fe3
 8021f00:	08021fe3 	.word	0x08021fe3
 8021f04:	08021fe3 	.word	0x08021fe3
 8021f08:	08021fe3 	.word	0x08021fe3
 8021f0c:	08021fe3 	.word	0x08021fe3
 8021f10:	08021fe3 	.word	0x08021fe3
 8021f14:	08021fe3 	.word	0x08021fe3
 8021f18:	08021fe3 	.word	0x08021fe3
 8021f1c:	08021fe3 	.word	0x08021fe3
 8021f20:	08021fe3 	.word	0x08021fe3
 8021f24:	08021fe3 	.word	0x08021fe3
 8021f28:	08021fe3 	.word	0x08021fe3
 8021f2c:	08021fe3 	.word	0x08021fe3
 8021f30:	08021fe3 	.word	0x08021fe3
 8021f34:	08021fe3 	.word	0x08021fe3
 8021f38:	08021fe3 	.word	0x08021fe3
 8021f3c:	08021fe3 	.word	0x08021fe3
 8021f40:	08021f51 	.word	0x08021f51
 8021f44:	08021f93 	.word	0x08021f93
 8021f48:	08021fe3 	.word	0x08021fe3
 8021f4c:	08021fe3 	.word	0x08021fe3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buf[0] = pbuf[0];
 8021f50:	683b      	ldr	r3, [r7, #0]
 8021f52:	781a      	ldrb	r2, [r3, #0]
 8021f54:	4b27      	ldr	r3, [pc, #156]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021f56:	701a      	strb	r2, [r3, #0]
    	buf[1] = pbuf[1];
 8021f58:	683b      	ldr	r3, [r7, #0]
 8021f5a:	785a      	ldrb	r2, [r3, #1]
 8021f5c:	4b25      	ldr	r3, [pc, #148]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021f5e:	705a      	strb	r2, [r3, #1]
    	buf[2] = pbuf[2];
 8021f60:	683b      	ldr	r3, [r7, #0]
 8021f62:	789a      	ldrb	r2, [r3, #2]
 8021f64:	4b23      	ldr	r3, [pc, #140]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021f66:	709a      	strb	r2, [r3, #2]
    	buf[3] = pbuf[3];
 8021f68:	683b      	ldr	r3, [r7, #0]
 8021f6a:	78da      	ldrb	r2, [r3, #3]
 8021f6c:	4b21      	ldr	r3, [pc, #132]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021f6e:	70da      	strb	r2, [r3, #3]
    	buf[4] = pbuf[4];
 8021f70:	683b      	ldr	r3, [r7, #0]
 8021f72:	791a      	ldrb	r2, [r3, #4]
 8021f74:	4b1f      	ldr	r3, [pc, #124]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021f76:	711a      	strb	r2, [r3, #4]
    	buf[5] = pbuf[5];
 8021f78:	683b      	ldr	r3, [r7, #0]
 8021f7a:	795a      	ldrb	r2, [r3, #5]
 8021f7c:	4b1d      	ldr	r3, [pc, #116]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021f7e:	715a      	strb	r2, [r3, #5]
    	buf[6] = pbuf[6];
 8021f80:	683b      	ldr	r3, [r7, #0]
 8021f82:	799a      	ldrb	r2, [r3, #6]
 8021f84:	4b1b      	ldr	r3, [pc, #108]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021f86:	719a      	strb	r2, [r3, #6]
    	buf[7] = pbuf[7];
 8021f88:	683b      	ldr	r3, [r7, #0]
 8021f8a:	79da      	ldrb	r2, [r3, #7]
 8021f8c:	4b19      	ldr	r3, [pc, #100]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021f8e:	71da      	strb	r2, [r3, #7]

    break;
 8021f90:	e028      	b.n	8021fe4 <CDC_Control_FS+0x144>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buf[0];
 8021f92:	4b18      	ldr	r3, [pc, #96]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021f94:	781a      	ldrb	r2, [r3, #0]
 8021f96:	683b      	ldr	r3, [r7, #0]
 8021f98:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buf[1];
 8021f9a:	683b      	ldr	r3, [r7, #0]
 8021f9c:	3301      	adds	r3, #1
 8021f9e:	4a15      	ldr	r2, [pc, #84]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021fa0:	7852      	ldrb	r2, [r2, #1]
 8021fa2:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buf[2];
 8021fa4:	683b      	ldr	r3, [r7, #0]
 8021fa6:	3302      	adds	r3, #2
 8021fa8:	4a12      	ldr	r2, [pc, #72]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021faa:	7892      	ldrb	r2, [r2, #2]
 8021fac:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buf[3];
 8021fae:	683b      	ldr	r3, [r7, #0]
 8021fb0:	3303      	adds	r3, #3
 8021fb2:	4a10      	ldr	r2, [pc, #64]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021fb4:	78d2      	ldrb	r2, [r2, #3]
 8021fb6:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buf[4];
 8021fb8:	683b      	ldr	r3, [r7, #0]
 8021fba:	3304      	adds	r3, #4
 8021fbc:	4a0d      	ldr	r2, [pc, #52]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021fbe:	7912      	ldrb	r2, [r2, #4]
 8021fc0:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buf[5];
 8021fc2:	683b      	ldr	r3, [r7, #0]
 8021fc4:	3305      	adds	r3, #5
 8021fc6:	4a0b      	ldr	r2, [pc, #44]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021fc8:	7952      	ldrb	r2, [r2, #5]
 8021fca:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buf[6];
 8021fcc:	683b      	ldr	r3, [r7, #0]
 8021fce:	3306      	adds	r3, #6
 8021fd0:	4a08      	ldr	r2, [pc, #32]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021fd2:	7992      	ldrb	r2, [r2, #6]
 8021fd4:	701a      	strb	r2, [r3, #0]
    	pbuf[7] = buf[7];
 8021fd6:	683b      	ldr	r3, [r7, #0]
 8021fd8:	3307      	adds	r3, #7
 8021fda:	4a06      	ldr	r2, [pc, #24]	; (8021ff4 <CDC_Control_FS+0x154>)
 8021fdc:	79d2      	ldrb	r2, [r2, #7]
 8021fde:	701a      	strb	r2, [r3, #0]

    break;
 8021fe0:	e000      	b.n	8021fe4 <CDC_Control_FS+0x144>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8021fe2:	bf00      	nop
  }

  return (USBD_OK);
 8021fe4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8021fe6:	4618      	mov	r0, r3
 8021fe8:	370c      	adds	r7, #12
 8021fea:	46bd      	mov	sp, r7
 8021fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff0:	4770      	bx	lr
 8021ff2:	bf00      	nop
 8021ff4:	20023c2c 	.word	0x20023c2c

08021ff8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8021ff8:	b580      	push	{r7, lr}
 8021ffa:	b084      	sub	sp, #16
 8021ffc:	af00      	add	r7, sp, #0
 8021ffe:	6078      	str	r0, [r7, #4]
 8022000:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8022002:	6879      	ldr	r1, [r7, #4]
 8022004:	480f      	ldr	r0, [pc, #60]	; (8022044 <CDC_Receive_FS+0x4c>)
 8022006:	f7fe fb4f 	bl	80206a8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 802200a:	480e      	ldr	r0, [pc, #56]	; (8022044 <CDC_Receive_FS+0x4c>)
 802200c:	f7fe fbaa 	bl	8020764 <USBD_CDC_ReceivePacket>

  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &rxBuffer_USB);
  //USBD_CDC_ReceivePacket(&hUsbDeviceFS);

  if(USE_USB){
	  for (int i =0; i<*Len;i++){
 8022010:	2300      	movs	r3, #0
 8022012:	60fb      	str	r3, [r7, #12]
 8022014:	e00b      	b.n	802202e <CDC_Receive_FS+0x36>
		  memcpy(&(cli_usb.rxBuffer), Buf +i, 1);
 8022016:	68fb      	ldr	r3, [r7, #12]
 8022018:	687a      	ldr	r2, [r7, #4]
 802201a:	4413      	add	r3, r2
 802201c:	781a      	ldrb	r2, [r3, #0]
 802201e:	4b0a      	ldr	r3, [pc, #40]	; (8022048 <CDC_Receive_FS+0x50>)
 8022020:	701a      	strb	r2, [r3, #0]
		  callback_CLI_RX_test(&cli_usb);
 8022022:	4809      	ldr	r0, [pc, #36]	; (8022048 <CDC_Receive_FS+0x50>)
 8022024:	f7e0 fffa 	bl	800301c <callback_CLI_RX_test>
	  for (int i =0; i<*Len;i++){
 8022028:	68fb      	ldr	r3, [r7, #12]
 802202a:	3301      	adds	r3, #1
 802202c:	60fb      	str	r3, [r7, #12]
 802202e:	683b      	ldr	r3, [r7, #0]
 8022030:	681a      	ldr	r2, [r3, #0]
 8022032:	68fb      	ldr	r3, [r7, #12]
 8022034:	429a      	cmp	r2, r3
 8022036:	d8ee      	bhi.n	8022016 <CDC_Receive_FS+0x1e>
	  }
  }
  return (USBD_OK);
 8022038:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 802203a:	4618      	mov	r0, r3
 802203c:	3710      	adds	r7, #16
 802203e:	46bd      	mov	sp, r7
 8022040:	bd80      	pop	{r7, pc}
 8022042:	bf00      	nop
 8022044:	20023950 	.word	0x20023950
 8022048:	200004e0 	.word	0x200004e0

0802204c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 802204c:	b580      	push	{r7, lr}
 802204e:	b084      	sub	sp, #16
 8022050:	af00      	add	r7, sp, #0
 8022052:	6078      	str	r0, [r7, #4]
 8022054:	460b      	mov	r3, r1
 8022056:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8022058:	2300      	movs	r3, #0
 802205a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 802205c:	4b0d      	ldr	r3, [pc, #52]	; (8022094 <CDC_Transmit_FS+0x48>)
 802205e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8022062:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8022064:	68bb      	ldr	r3, [r7, #8]
 8022066:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 802206a:	2b00      	cmp	r3, #0
 802206c:	d001      	beq.n	8022072 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 802206e:	2301      	movs	r3, #1
 8022070:	e00b      	b.n	802208a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8022072:	887b      	ldrh	r3, [r7, #2]
 8022074:	461a      	mov	r2, r3
 8022076:	6879      	ldr	r1, [r7, #4]
 8022078:	4806      	ldr	r0, [pc, #24]	; (8022094 <CDC_Transmit_FS+0x48>)
 802207a:	f7fe faf3 	bl	8020664 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 802207e:	4805      	ldr	r0, [pc, #20]	; (8022094 <CDC_Transmit_FS+0x48>)
 8022080:	f7fe fb30 	bl	80206e4 <USBD_CDC_TransmitPacket>
 8022084:	4603      	mov	r3, r0
 8022086:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8022088:	7bfb      	ldrb	r3, [r7, #15]
}
 802208a:	4618      	mov	r0, r3
 802208c:	3710      	adds	r7, #16
 802208e:	46bd      	mov	sp, r7
 8022090:	bd80      	pop	{r7, pc}
 8022092:	bf00      	nop
 8022094:	20023950 	.word	0x20023950

08022098 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8022098:	b480      	push	{r7}
 802209a:	b087      	sub	sp, #28
 802209c:	af00      	add	r7, sp, #0
 802209e:	60f8      	str	r0, [r7, #12]
 80220a0:	60b9      	str	r1, [r7, #8]
 80220a2:	4613      	mov	r3, r2
 80220a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80220a6:	2300      	movs	r3, #0
 80220a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80220aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80220ae:	4618      	mov	r0, r3
 80220b0:	371c      	adds	r7, #28
 80220b2:	46bd      	mov	sp, r7
 80220b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220b8:	4770      	bx	lr
	...

080220bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80220bc:	b480      	push	{r7}
 80220be:	b083      	sub	sp, #12
 80220c0:	af00      	add	r7, sp, #0
 80220c2:	4603      	mov	r3, r0
 80220c4:	6039      	str	r1, [r7, #0]
 80220c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80220c8:	683b      	ldr	r3, [r7, #0]
 80220ca:	2212      	movs	r2, #18
 80220cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80220ce:	4b03      	ldr	r3, [pc, #12]	; (80220dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80220d0:	4618      	mov	r0, r3
 80220d2:	370c      	adds	r7, #12
 80220d4:	46bd      	mov	sp, r7
 80220d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220da:	4770      	bx	lr
 80220dc:	200000f8 	.word	0x200000f8

080220e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80220e0:	b480      	push	{r7}
 80220e2:	b083      	sub	sp, #12
 80220e4:	af00      	add	r7, sp, #0
 80220e6:	4603      	mov	r3, r0
 80220e8:	6039      	str	r1, [r7, #0]
 80220ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80220ec:	683b      	ldr	r3, [r7, #0]
 80220ee:	2204      	movs	r2, #4
 80220f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80220f2:	4b03      	ldr	r3, [pc, #12]	; (8022100 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80220f4:	4618      	mov	r0, r3
 80220f6:	370c      	adds	r7, #12
 80220f8:	46bd      	mov	sp, r7
 80220fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220fe:	4770      	bx	lr
 8022100:	20000118 	.word	0x20000118

08022104 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022104:	b580      	push	{r7, lr}
 8022106:	b082      	sub	sp, #8
 8022108:	af00      	add	r7, sp, #0
 802210a:	4603      	mov	r3, r0
 802210c:	6039      	str	r1, [r7, #0]
 802210e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8022110:	79fb      	ldrb	r3, [r7, #7]
 8022112:	2b00      	cmp	r3, #0
 8022114:	d105      	bne.n	8022122 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022116:	683a      	ldr	r2, [r7, #0]
 8022118:	4907      	ldr	r1, [pc, #28]	; (8022138 <USBD_FS_ProductStrDescriptor+0x34>)
 802211a:	4808      	ldr	r0, [pc, #32]	; (802213c <USBD_FS_ProductStrDescriptor+0x38>)
 802211c:	f7ff fd94 	bl	8021c48 <USBD_GetString>
 8022120:	e004      	b.n	802212c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8022122:	683a      	ldr	r2, [r7, #0]
 8022124:	4904      	ldr	r1, [pc, #16]	; (8022138 <USBD_FS_ProductStrDescriptor+0x34>)
 8022126:	4805      	ldr	r0, [pc, #20]	; (802213c <USBD_FS_ProductStrDescriptor+0x38>)
 8022128:	f7ff fd8e 	bl	8021c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 802212c:	4b02      	ldr	r3, [pc, #8]	; (8022138 <USBD_FS_ProductStrDescriptor+0x34>)
}
 802212e:	4618      	mov	r0, r3
 8022130:	3708      	adds	r7, #8
 8022132:	46bd      	mov	sp, r7
 8022134:	bd80      	pop	{r7, pc}
 8022136:	bf00      	nop
 8022138:	20024c34 	.word	0x20024c34
 802213c:	08027fb4 	.word	0x08027fb4

08022140 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022140:	b580      	push	{r7, lr}
 8022142:	b082      	sub	sp, #8
 8022144:	af00      	add	r7, sp, #0
 8022146:	4603      	mov	r3, r0
 8022148:	6039      	str	r1, [r7, #0]
 802214a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802214c:	683a      	ldr	r2, [r7, #0]
 802214e:	4904      	ldr	r1, [pc, #16]	; (8022160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8022150:	4804      	ldr	r0, [pc, #16]	; (8022164 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8022152:	f7ff fd79 	bl	8021c48 <USBD_GetString>
  return USBD_StrDesc;
 8022156:	4b02      	ldr	r3, [pc, #8]	; (8022160 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8022158:	4618      	mov	r0, r3
 802215a:	3708      	adds	r7, #8
 802215c:	46bd      	mov	sp, r7
 802215e:	bd80      	pop	{r7, pc}
 8022160:	20024c34 	.word	0x20024c34
 8022164:	08027fcc 	.word	0x08027fcc

08022168 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022168:	b580      	push	{r7, lr}
 802216a:	b082      	sub	sp, #8
 802216c:	af00      	add	r7, sp, #0
 802216e:	4603      	mov	r3, r0
 8022170:	6039      	str	r1, [r7, #0]
 8022172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8022174:	683b      	ldr	r3, [r7, #0]
 8022176:	221a      	movs	r2, #26
 8022178:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 802217a:	f000 f855 	bl	8022228 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 802217e:	4b02      	ldr	r3, [pc, #8]	; (8022188 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8022180:	4618      	mov	r0, r3
 8022182:	3708      	adds	r7, #8
 8022184:	46bd      	mov	sp, r7
 8022186:	bd80      	pop	{r7, pc}
 8022188:	2000011c 	.word	0x2000011c

0802218c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 802218c:	b580      	push	{r7, lr}
 802218e:	b082      	sub	sp, #8
 8022190:	af00      	add	r7, sp, #0
 8022192:	4603      	mov	r3, r0
 8022194:	6039      	str	r1, [r7, #0]
 8022196:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8022198:	79fb      	ldrb	r3, [r7, #7]
 802219a:	2b00      	cmp	r3, #0
 802219c:	d105      	bne.n	80221aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802219e:	683a      	ldr	r2, [r7, #0]
 80221a0:	4907      	ldr	r1, [pc, #28]	; (80221c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80221a2:	4808      	ldr	r0, [pc, #32]	; (80221c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80221a4:	f7ff fd50 	bl	8021c48 <USBD_GetString>
 80221a8:	e004      	b.n	80221b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80221aa:	683a      	ldr	r2, [r7, #0]
 80221ac:	4904      	ldr	r1, [pc, #16]	; (80221c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80221ae:	4805      	ldr	r0, [pc, #20]	; (80221c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80221b0:	f7ff fd4a 	bl	8021c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80221b4:	4b02      	ldr	r3, [pc, #8]	; (80221c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80221b6:	4618      	mov	r0, r3
 80221b8:	3708      	adds	r7, #8
 80221ba:	46bd      	mov	sp, r7
 80221bc:	bd80      	pop	{r7, pc}
 80221be:	bf00      	nop
 80221c0:	20024c34 	.word	0x20024c34
 80221c4:	08027fe0 	.word	0x08027fe0

080221c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80221c8:	b580      	push	{r7, lr}
 80221ca:	b082      	sub	sp, #8
 80221cc:	af00      	add	r7, sp, #0
 80221ce:	4603      	mov	r3, r0
 80221d0:	6039      	str	r1, [r7, #0]
 80221d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80221d4:	79fb      	ldrb	r3, [r7, #7]
 80221d6:	2b00      	cmp	r3, #0
 80221d8:	d105      	bne.n	80221e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80221da:	683a      	ldr	r2, [r7, #0]
 80221dc:	4907      	ldr	r1, [pc, #28]	; (80221fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80221de:	4808      	ldr	r0, [pc, #32]	; (8022200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80221e0:	f7ff fd32 	bl	8021c48 <USBD_GetString>
 80221e4:	e004      	b.n	80221f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80221e6:	683a      	ldr	r2, [r7, #0]
 80221e8:	4904      	ldr	r1, [pc, #16]	; (80221fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80221ea:	4805      	ldr	r0, [pc, #20]	; (8022200 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80221ec:	f7ff fd2c 	bl	8021c48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80221f0:	4b02      	ldr	r3, [pc, #8]	; (80221fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80221f2:	4618      	mov	r0, r3
 80221f4:	3708      	adds	r7, #8
 80221f6:	46bd      	mov	sp, r7
 80221f8:	bd80      	pop	{r7, pc}
 80221fa:	bf00      	nop
 80221fc:	20024c34 	.word	0x20024c34
 8022200:	08027fec 	.word	0x08027fec

08022204 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8022204:	b480      	push	{r7}
 8022206:	b083      	sub	sp, #12
 8022208:	af00      	add	r7, sp, #0
 802220a:	4603      	mov	r3, r0
 802220c:	6039      	str	r1, [r7, #0]
 802220e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8022210:	683b      	ldr	r3, [r7, #0]
 8022212:	220c      	movs	r2, #12
 8022214:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8022216:	4b03      	ldr	r3, [pc, #12]	; (8022224 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8022218:	4618      	mov	r0, r3
 802221a:	370c      	adds	r7, #12
 802221c:	46bd      	mov	sp, r7
 802221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022222:	4770      	bx	lr
 8022224:	2000010c 	.word	0x2000010c

08022228 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8022228:	b580      	push	{r7, lr}
 802222a:	b084      	sub	sp, #16
 802222c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802222e:	4b0f      	ldr	r3, [pc, #60]	; (802226c <Get_SerialNum+0x44>)
 8022230:	681b      	ldr	r3, [r3, #0]
 8022232:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8022234:	4b0e      	ldr	r3, [pc, #56]	; (8022270 <Get_SerialNum+0x48>)
 8022236:	681b      	ldr	r3, [r3, #0]
 8022238:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 802223a:	4b0e      	ldr	r3, [pc, #56]	; (8022274 <Get_SerialNum+0x4c>)
 802223c:	681b      	ldr	r3, [r3, #0]
 802223e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8022240:	68fa      	ldr	r2, [r7, #12]
 8022242:	687b      	ldr	r3, [r7, #4]
 8022244:	4413      	add	r3, r2
 8022246:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8022248:	68fb      	ldr	r3, [r7, #12]
 802224a:	2b00      	cmp	r3, #0
 802224c:	d009      	beq.n	8022262 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 802224e:	2208      	movs	r2, #8
 8022250:	4909      	ldr	r1, [pc, #36]	; (8022278 <Get_SerialNum+0x50>)
 8022252:	68f8      	ldr	r0, [r7, #12]
 8022254:	f000 f814 	bl	8022280 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8022258:	2204      	movs	r2, #4
 802225a:	4908      	ldr	r1, [pc, #32]	; (802227c <Get_SerialNum+0x54>)
 802225c:	68b8      	ldr	r0, [r7, #8]
 802225e:	f000 f80f 	bl	8022280 <IntToUnicode>
  }
}
 8022262:	bf00      	nop
 8022264:	3710      	adds	r7, #16
 8022266:	46bd      	mov	sp, r7
 8022268:	bd80      	pop	{r7, pc}
 802226a:	bf00      	nop
 802226c:	1ff0f420 	.word	0x1ff0f420
 8022270:	1ff0f424 	.word	0x1ff0f424
 8022274:	1ff0f428 	.word	0x1ff0f428
 8022278:	2000011e 	.word	0x2000011e
 802227c:	2000012e 	.word	0x2000012e

08022280 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8022280:	b480      	push	{r7}
 8022282:	b087      	sub	sp, #28
 8022284:	af00      	add	r7, sp, #0
 8022286:	60f8      	str	r0, [r7, #12]
 8022288:	60b9      	str	r1, [r7, #8]
 802228a:	4613      	mov	r3, r2
 802228c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 802228e:	2300      	movs	r3, #0
 8022290:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8022292:	2300      	movs	r3, #0
 8022294:	75fb      	strb	r3, [r7, #23]
 8022296:	e027      	b.n	80222e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8022298:	68fb      	ldr	r3, [r7, #12]
 802229a:	0f1b      	lsrs	r3, r3, #28
 802229c:	2b09      	cmp	r3, #9
 802229e:	d80b      	bhi.n	80222b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80222a0:	68fb      	ldr	r3, [r7, #12]
 80222a2:	0f1b      	lsrs	r3, r3, #28
 80222a4:	b2da      	uxtb	r2, r3
 80222a6:	7dfb      	ldrb	r3, [r7, #23]
 80222a8:	005b      	lsls	r3, r3, #1
 80222aa:	4619      	mov	r1, r3
 80222ac:	68bb      	ldr	r3, [r7, #8]
 80222ae:	440b      	add	r3, r1
 80222b0:	3230      	adds	r2, #48	; 0x30
 80222b2:	b2d2      	uxtb	r2, r2
 80222b4:	701a      	strb	r2, [r3, #0]
 80222b6:	e00a      	b.n	80222ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80222b8:	68fb      	ldr	r3, [r7, #12]
 80222ba:	0f1b      	lsrs	r3, r3, #28
 80222bc:	b2da      	uxtb	r2, r3
 80222be:	7dfb      	ldrb	r3, [r7, #23]
 80222c0:	005b      	lsls	r3, r3, #1
 80222c2:	4619      	mov	r1, r3
 80222c4:	68bb      	ldr	r3, [r7, #8]
 80222c6:	440b      	add	r3, r1
 80222c8:	3237      	adds	r2, #55	; 0x37
 80222ca:	b2d2      	uxtb	r2, r2
 80222cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80222ce:	68fb      	ldr	r3, [r7, #12]
 80222d0:	011b      	lsls	r3, r3, #4
 80222d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80222d4:	7dfb      	ldrb	r3, [r7, #23]
 80222d6:	005b      	lsls	r3, r3, #1
 80222d8:	3301      	adds	r3, #1
 80222da:	68ba      	ldr	r2, [r7, #8]
 80222dc:	4413      	add	r3, r2
 80222de:	2200      	movs	r2, #0
 80222e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80222e2:	7dfb      	ldrb	r3, [r7, #23]
 80222e4:	3301      	adds	r3, #1
 80222e6:	75fb      	strb	r3, [r7, #23]
 80222e8:	7dfa      	ldrb	r2, [r7, #23]
 80222ea:	79fb      	ldrb	r3, [r7, #7]
 80222ec:	429a      	cmp	r2, r3
 80222ee:	d3d3      	bcc.n	8022298 <IntToUnicode+0x18>
  }
}
 80222f0:	bf00      	nop
 80222f2:	bf00      	nop
 80222f4:	371c      	adds	r7, #28
 80222f6:	46bd      	mov	sp, r7
 80222f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222fc:	4770      	bx	lr
	...

08022300 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8022300:	b580      	push	{r7, lr}
 8022302:	b0ac      	sub	sp, #176	; 0xb0
 8022304:	af00      	add	r7, sp, #0
 8022306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8022308:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 802230c:	2200      	movs	r2, #0
 802230e:	601a      	str	r2, [r3, #0]
 8022310:	605a      	str	r2, [r3, #4]
 8022312:	609a      	str	r2, [r3, #8]
 8022314:	60da      	str	r2, [r3, #12]
 8022316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8022318:	f107 0318 	add.w	r3, r7, #24
 802231c:	2284      	movs	r2, #132	; 0x84
 802231e:	2100      	movs	r1, #0
 8022320:	4618      	mov	r0, r3
 8022322:	f000 fda4 	bl	8022e6e <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8022326:	687b      	ldr	r3, [r7, #4]
 8022328:	681b      	ldr	r3, [r3, #0]
 802232a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 802232e:	d151      	bne.n	80223d4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8022330:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8022334:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8022336:	2300      	movs	r3, #0
 8022338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 802233c:	f107 0318 	add.w	r3, r7, #24
 8022340:	4618      	mov	r0, r3
 8022342:	f7e6 f82d 	bl	80083a0 <HAL_RCCEx_PeriphCLKConfig>
 8022346:	4603      	mov	r3, r0
 8022348:	2b00      	cmp	r3, #0
 802234a:	d001      	beq.n	8022350 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 802234c:	f7e1 fb7e 	bl	8003a4c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8022350:	4b22      	ldr	r3, [pc, #136]	; (80223dc <HAL_PCD_MspInit+0xdc>)
 8022352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022354:	4a21      	ldr	r2, [pc, #132]	; (80223dc <HAL_PCD_MspInit+0xdc>)
 8022356:	f043 0301 	orr.w	r3, r3, #1
 802235a:	6313      	str	r3, [r2, #48]	; 0x30
 802235c:	4b1f      	ldr	r3, [pc, #124]	; (80223dc <HAL_PCD_MspInit+0xdc>)
 802235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022360:	f003 0301 	and.w	r3, r3, #1
 8022364:	617b      	str	r3, [r7, #20]
 8022366:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_DM___Pin|USB_DM__A12_Pin;
 8022368:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 802236c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8022370:	2302      	movs	r3, #2
 8022372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8022376:	2300      	movs	r3, #0
 8022378:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 802237c:	2303      	movs	r3, #3
 802237e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8022382:	230a      	movs	r3, #10
 8022384:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8022388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 802238c:	4619      	mov	r1, r3
 802238e:	4814      	ldr	r0, [pc, #80]	; (80223e0 <HAL_PCD_MspInit+0xe0>)
 8022390:	f7e3 fe74 	bl	800607c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8022394:	4b11      	ldr	r3, [pc, #68]	; (80223dc <HAL_PCD_MspInit+0xdc>)
 8022396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8022398:	4a10      	ldr	r2, [pc, #64]	; (80223dc <HAL_PCD_MspInit+0xdc>)
 802239a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802239e:	6353      	str	r3, [r2, #52]	; 0x34
 80223a0:	4b0e      	ldr	r3, [pc, #56]	; (80223dc <HAL_PCD_MspInit+0xdc>)
 80223a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80223a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80223a8:	613b      	str	r3, [r7, #16]
 80223aa:	693b      	ldr	r3, [r7, #16]
 80223ac:	4b0b      	ldr	r3, [pc, #44]	; (80223dc <HAL_PCD_MspInit+0xdc>)
 80223ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80223b0:	4a0a      	ldr	r2, [pc, #40]	; (80223dc <HAL_PCD_MspInit+0xdc>)
 80223b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80223b6:	6453      	str	r3, [r2, #68]	; 0x44
 80223b8:	4b08      	ldr	r3, [pc, #32]	; (80223dc <HAL_PCD_MspInit+0xdc>)
 80223ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80223bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80223c0:	60fb      	str	r3, [r7, #12]
 80223c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80223c4:	2200      	movs	r2, #0
 80223c6:	2105      	movs	r1, #5
 80223c8:	2043      	movs	r0, #67	; 0x43
 80223ca:	f7e2 fb4d 	bl	8004a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80223ce:	2043      	movs	r0, #67	; 0x43
 80223d0:	f7e2 fb66 	bl	8004aa0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80223d4:	bf00      	nop
 80223d6:	37b0      	adds	r7, #176	; 0xb0
 80223d8:	46bd      	mov	sp, r7
 80223da:	bd80      	pop	{r7, pc}
 80223dc:	40023800 	.word	0x40023800
 80223e0:	40020000 	.word	0x40020000

080223e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80223e4:	b580      	push	{r7, lr}
 80223e6:	b082      	sub	sp, #8
 80223e8:	af00      	add	r7, sp, #0
 80223ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80223ec:	687b      	ldr	r3, [r7, #4]
 80223ee:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80223f2:	687b      	ldr	r3, [r7, #4]
 80223f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80223f8:	4619      	mov	r1, r3
 80223fa:	4610      	mov	r0, r2
 80223fc:	f7fe fa9b 	bl	8020936 <USBD_LL_SetupStage>
}
 8022400:	bf00      	nop
 8022402:	3708      	adds	r7, #8
 8022404:	46bd      	mov	sp, r7
 8022406:	bd80      	pop	{r7, pc}

08022408 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022408:	b580      	push	{r7, lr}
 802240a:	b082      	sub	sp, #8
 802240c:	af00      	add	r7, sp, #0
 802240e:	6078      	str	r0, [r7, #4]
 8022410:	460b      	mov	r3, r1
 8022412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 802241a:	78fa      	ldrb	r2, [r7, #3]
 802241c:	6879      	ldr	r1, [r7, #4]
 802241e:	4613      	mov	r3, r2
 8022420:	00db      	lsls	r3, r3, #3
 8022422:	4413      	add	r3, r2
 8022424:	009b      	lsls	r3, r3, #2
 8022426:	440b      	add	r3, r1
 8022428:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 802242c:	681a      	ldr	r2, [r3, #0]
 802242e:	78fb      	ldrb	r3, [r7, #3]
 8022430:	4619      	mov	r1, r3
 8022432:	f7fe fad5 	bl	80209e0 <USBD_LL_DataOutStage>
}
 8022436:	bf00      	nop
 8022438:	3708      	adds	r7, #8
 802243a:	46bd      	mov	sp, r7
 802243c:	bd80      	pop	{r7, pc}

0802243e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802243e:	b580      	push	{r7, lr}
 8022440:	b082      	sub	sp, #8
 8022442:	af00      	add	r7, sp, #0
 8022444:	6078      	str	r0, [r7, #4]
 8022446:	460b      	mov	r3, r1
 8022448:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8022450:	78fa      	ldrb	r2, [r7, #3]
 8022452:	6879      	ldr	r1, [r7, #4]
 8022454:	4613      	mov	r3, r2
 8022456:	00db      	lsls	r3, r3, #3
 8022458:	4413      	add	r3, r2
 802245a:	009b      	lsls	r3, r3, #2
 802245c:	440b      	add	r3, r1
 802245e:	334c      	adds	r3, #76	; 0x4c
 8022460:	681a      	ldr	r2, [r3, #0]
 8022462:	78fb      	ldrb	r3, [r7, #3]
 8022464:	4619      	mov	r1, r3
 8022466:	f7fe fb6e 	bl	8020b46 <USBD_LL_DataInStage>
}
 802246a:	bf00      	nop
 802246c:	3708      	adds	r7, #8
 802246e:	46bd      	mov	sp, r7
 8022470:	bd80      	pop	{r7, pc}

08022472 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022472:	b580      	push	{r7, lr}
 8022474:	b082      	sub	sp, #8
 8022476:	af00      	add	r7, sp, #0
 8022478:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8022480:	4618      	mov	r0, r3
 8022482:	f7fe fca2 	bl	8020dca <USBD_LL_SOF>
}
 8022486:	bf00      	nop
 8022488:	3708      	adds	r7, #8
 802248a:	46bd      	mov	sp, r7
 802248c:	bd80      	pop	{r7, pc}

0802248e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802248e:	b580      	push	{r7, lr}
 8022490:	b084      	sub	sp, #16
 8022492:	af00      	add	r7, sp, #0
 8022494:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8022496:	2301      	movs	r3, #1
 8022498:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	68db      	ldr	r3, [r3, #12]
 802249e:	2b00      	cmp	r3, #0
 80224a0:	d102      	bne.n	80224a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80224a2:	2300      	movs	r3, #0
 80224a4:	73fb      	strb	r3, [r7, #15]
 80224a6:	e008      	b.n	80224ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80224a8:	687b      	ldr	r3, [r7, #4]
 80224aa:	68db      	ldr	r3, [r3, #12]
 80224ac:	2b02      	cmp	r3, #2
 80224ae:	d102      	bne.n	80224b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80224b0:	2301      	movs	r3, #1
 80224b2:	73fb      	strb	r3, [r7, #15]
 80224b4:	e001      	b.n	80224ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80224b6:	f7e1 fac9 	bl	8003a4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80224c0:	7bfa      	ldrb	r2, [r7, #15]
 80224c2:	4611      	mov	r1, r2
 80224c4:	4618      	mov	r0, r3
 80224c6:	f7fe fc42 	bl	8020d4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80224ca:	687b      	ldr	r3, [r7, #4]
 80224cc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80224d0:	4618      	mov	r0, r3
 80224d2:	f7fe fbea 	bl	8020caa <USBD_LL_Reset>
}
 80224d6:	bf00      	nop
 80224d8:	3710      	adds	r7, #16
 80224da:	46bd      	mov	sp, r7
 80224dc:	bd80      	pop	{r7, pc}
	...

080224e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80224e0:	b580      	push	{r7, lr}
 80224e2:	b082      	sub	sp, #8
 80224e4:	af00      	add	r7, sp, #0
 80224e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80224e8:	687b      	ldr	r3, [r7, #4]
 80224ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80224ee:	4618      	mov	r0, r3
 80224f0:	f7fe fc3d 	bl	8020d6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80224f4:	687b      	ldr	r3, [r7, #4]
 80224f6:	681b      	ldr	r3, [r3, #0]
 80224f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80224fc:	681b      	ldr	r3, [r3, #0]
 80224fe:	687a      	ldr	r2, [r7, #4]
 8022500:	6812      	ldr	r2, [r2, #0]
 8022502:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022506:	f043 0301 	orr.w	r3, r3, #1
 802250a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802250c:	687b      	ldr	r3, [r7, #4]
 802250e:	6a1b      	ldr	r3, [r3, #32]
 8022510:	2b00      	cmp	r3, #0
 8022512:	d005      	beq.n	8022520 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022514:	4b04      	ldr	r3, [pc, #16]	; (8022528 <HAL_PCD_SuspendCallback+0x48>)
 8022516:	691b      	ldr	r3, [r3, #16]
 8022518:	4a03      	ldr	r2, [pc, #12]	; (8022528 <HAL_PCD_SuspendCallback+0x48>)
 802251a:	f043 0306 	orr.w	r3, r3, #6
 802251e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8022520:	bf00      	nop
 8022522:	3708      	adds	r7, #8
 8022524:	46bd      	mov	sp, r7
 8022526:	bd80      	pop	{r7, pc}
 8022528:	e000ed00 	.word	0xe000ed00

0802252c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802252c:	b580      	push	{r7, lr}
 802252e:	b082      	sub	sp, #8
 8022530:	af00      	add	r7, sp, #0
 8022532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802253a:	4618      	mov	r0, r3
 802253c:	f7fe fc2d 	bl	8020d9a <USBD_LL_Resume>
}
 8022540:	bf00      	nop
 8022542:	3708      	adds	r7, #8
 8022544:	46bd      	mov	sp, r7
 8022546:	bd80      	pop	{r7, pc}

08022548 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022548:	b580      	push	{r7, lr}
 802254a:	b082      	sub	sp, #8
 802254c:	af00      	add	r7, sp, #0
 802254e:	6078      	str	r0, [r7, #4]
 8022550:	460b      	mov	r3, r1
 8022552:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022554:	687b      	ldr	r3, [r7, #4]
 8022556:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802255a:	78fa      	ldrb	r2, [r7, #3]
 802255c:	4611      	mov	r1, r2
 802255e:	4618      	mov	r0, r3
 8022560:	f7fe fc85 	bl	8020e6e <USBD_LL_IsoOUTIncomplete>
}
 8022564:	bf00      	nop
 8022566:	3708      	adds	r7, #8
 8022568:	46bd      	mov	sp, r7
 802256a:	bd80      	pop	{r7, pc}

0802256c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 802256c:	b580      	push	{r7, lr}
 802256e:	b082      	sub	sp, #8
 8022570:	af00      	add	r7, sp, #0
 8022572:	6078      	str	r0, [r7, #4]
 8022574:	460b      	mov	r3, r1
 8022576:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802257e:	78fa      	ldrb	r2, [r7, #3]
 8022580:	4611      	mov	r1, r2
 8022582:	4618      	mov	r0, r3
 8022584:	f7fe fc41 	bl	8020e0a <USBD_LL_IsoINIncomplete>
}
 8022588:	bf00      	nop
 802258a:	3708      	adds	r7, #8
 802258c:	46bd      	mov	sp, r7
 802258e:	bd80      	pop	{r7, pc}

08022590 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8022590:	b580      	push	{r7, lr}
 8022592:	b082      	sub	sp, #8
 8022594:	af00      	add	r7, sp, #0
 8022596:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8022598:	687b      	ldr	r3, [r7, #4]
 802259a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802259e:	4618      	mov	r0, r3
 80225a0:	f7fe fc97 	bl	8020ed2 <USBD_LL_DevConnected>
}
 80225a4:	bf00      	nop
 80225a6:	3708      	adds	r7, #8
 80225a8:	46bd      	mov	sp, r7
 80225aa:	bd80      	pop	{r7, pc}

080225ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80225ac:	b580      	push	{r7, lr}
 80225ae:	b082      	sub	sp, #8
 80225b0:	af00      	add	r7, sp, #0
 80225b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80225b4:	687b      	ldr	r3, [r7, #4]
 80225b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80225ba:	4618      	mov	r0, r3
 80225bc:	f7fe fc94 	bl	8020ee8 <USBD_LL_DevDisconnected>
}
 80225c0:	bf00      	nop
 80225c2:	3708      	adds	r7, #8
 80225c4:	46bd      	mov	sp, r7
 80225c6:	bd80      	pop	{r7, pc}

080225c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80225c8:	b580      	push	{r7, lr}
 80225ca:	b082      	sub	sp, #8
 80225cc:	af00      	add	r7, sp, #0
 80225ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80225d0:	687b      	ldr	r3, [r7, #4]
 80225d2:	781b      	ldrb	r3, [r3, #0]
 80225d4:	2b00      	cmp	r3, #0
 80225d6:	d13c      	bne.n	8022652 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80225d8:	4a20      	ldr	r2, [pc, #128]	; (802265c <USBD_LL_Init+0x94>)
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 80225e0:	687b      	ldr	r3, [r7, #4]
 80225e2:	4a1e      	ldr	r2, [pc, #120]	; (802265c <USBD_LL_Init+0x94>)
 80225e4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80225e8:	4b1c      	ldr	r3, [pc, #112]	; (802265c <USBD_LL_Init+0x94>)
 80225ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80225ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80225f0:	4b1a      	ldr	r3, [pc, #104]	; (802265c <USBD_LL_Init+0x94>)
 80225f2:	2206      	movs	r2, #6
 80225f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80225f6:	4b19      	ldr	r3, [pc, #100]	; (802265c <USBD_LL_Init+0x94>)
 80225f8:	2202      	movs	r2, #2
 80225fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80225fc:	4b17      	ldr	r3, [pc, #92]	; (802265c <USBD_LL_Init+0x94>)
 80225fe:	2200      	movs	r2, #0
 8022600:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8022602:	4b16      	ldr	r3, [pc, #88]	; (802265c <USBD_LL_Init+0x94>)
 8022604:	2202      	movs	r2, #2
 8022606:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8022608:	4b14      	ldr	r3, [pc, #80]	; (802265c <USBD_LL_Init+0x94>)
 802260a:	2200      	movs	r2, #0
 802260c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 802260e:	4b13      	ldr	r3, [pc, #76]	; (802265c <USBD_LL_Init+0x94>)
 8022610:	2200      	movs	r2, #0
 8022612:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8022614:	4b11      	ldr	r3, [pc, #68]	; (802265c <USBD_LL_Init+0x94>)
 8022616:	2200      	movs	r2, #0
 8022618:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 802261a:	4b10      	ldr	r3, [pc, #64]	; (802265c <USBD_LL_Init+0x94>)
 802261c:	2200      	movs	r2, #0
 802261e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8022620:	4b0e      	ldr	r3, [pc, #56]	; (802265c <USBD_LL_Init+0x94>)
 8022622:	2200      	movs	r2, #0
 8022624:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8022626:	480d      	ldr	r0, [pc, #52]	; (802265c <USBD_LL_Init+0x94>)
 8022628:	f7e3 ff06 	bl	8006438 <HAL_PCD_Init>
 802262c:	4603      	mov	r3, r0
 802262e:	2b00      	cmp	r3, #0
 8022630:	d001      	beq.n	8022636 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8022632:	f7e1 fa0b 	bl	8003a4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8022636:	2180      	movs	r1, #128	; 0x80
 8022638:	4808      	ldr	r0, [pc, #32]	; (802265c <USBD_LL_Init+0x94>)
 802263a:	f7e5 f980 	bl	800793e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802263e:	2240      	movs	r2, #64	; 0x40
 8022640:	2100      	movs	r1, #0
 8022642:	4806      	ldr	r0, [pc, #24]	; (802265c <USBD_LL_Init+0x94>)
 8022644:	f7e5 f934 	bl	80078b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8022648:	2280      	movs	r2, #128	; 0x80
 802264a:	2101      	movs	r1, #1
 802264c:	4803      	ldr	r0, [pc, #12]	; (802265c <USBD_LL_Init+0x94>)
 802264e:	f7e5 f92f 	bl	80078b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8022652:	2300      	movs	r3, #0
}
 8022654:	4618      	mov	r0, r3
 8022656:	3708      	adds	r7, #8
 8022658:	46bd      	mov	sp, r7
 802265a:	bd80      	pop	{r7, pc}
 802265c:	20024e34 	.word	0x20024e34

08022660 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8022660:	b580      	push	{r7, lr}
 8022662:	b084      	sub	sp, #16
 8022664:	af00      	add	r7, sp, #0
 8022666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022668:	2300      	movs	r3, #0
 802266a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802266c:	2300      	movs	r3, #0
 802266e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8022670:	687b      	ldr	r3, [r7, #4]
 8022672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8022676:	4618      	mov	r0, r3
 8022678:	f7e4 f802 	bl	8006680 <HAL_PCD_Start>
 802267c:	4603      	mov	r3, r0
 802267e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022680:	7bfb      	ldrb	r3, [r7, #15]
 8022682:	4618      	mov	r0, r3
 8022684:	f000 f97e 	bl	8022984 <USBD_Get_USB_Status>
 8022688:	4603      	mov	r3, r0
 802268a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 802268c:	7bbb      	ldrb	r3, [r7, #14]
}
 802268e:	4618      	mov	r0, r3
 8022690:	3710      	adds	r7, #16
 8022692:	46bd      	mov	sp, r7
 8022694:	bd80      	pop	{r7, pc}

08022696 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8022696:	b580      	push	{r7, lr}
 8022698:	b084      	sub	sp, #16
 802269a:	af00      	add	r7, sp, #0
 802269c:	6078      	str	r0, [r7, #4]
 802269e:	4608      	mov	r0, r1
 80226a0:	4611      	mov	r1, r2
 80226a2:	461a      	mov	r2, r3
 80226a4:	4603      	mov	r3, r0
 80226a6:	70fb      	strb	r3, [r7, #3]
 80226a8:	460b      	mov	r3, r1
 80226aa:	70bb      	strb	r3, [r7, #2]
 80226ac:	4613      	mov	r3, r2
 80226ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80226b0:	2300      	movs	r3, #0
 80226b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80226b4:	2300      	movs	r3, #0
 80226b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80226b8:	687b      	ldr	r3, [r7, #4]
 80226ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80226be:	78bb      	ldrb	r3, [r7, #2]
 80226c0:	883a      	ldrh	r2, [r7, #0]
 80226c2:	78f9      	ldrb	r1, [r7, #3]
 80226c4:	f7e4 fcef 	bl	80070a6 <HAL_PCD_EP_Open>
 80226c8:	4603      	mov	r3, r0
 80226ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80226cc:	7bfb      	ldrb	r3, [r7, #15]
 80226ce:	4618      	mov	r0, r3
 80226d0:	f000 f958 	bl	8022984 <USBD_Get_USB_Status>
 80226d4:	4603      	mov	r3, r0
 80226d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80226d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80226da:	4618      	mov	r0, r3
 80226dc:	3710      	adds	r7, #16
 80226de:	46bd      	mov	sp, r7
 80226e0:	bd80      	pop	{r7, pc}

080226e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80226e2:	b580      	push	{r7, lr}
 80226e4:	b084      	sub	sp, #16
 80226e6:	af00      	add	r7, sp, #0
 80226e8:	6078      	str	r0, [r7, #4]
 80226ea:	460b      	mov	r3, r1
 80226ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80226ee:	2300      	movs	r3, #0
 80226f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80226f2:	2300      	movs	r3, #0
 80226f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80226f6:	687b      	ldr	r3, [r7, #4]
 80226f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80226fc:	78fa      	ldrb	r2, [r7, #3]
 80226fe:	4611      	mov	r1, r2
 8022700:	4618      	mov	r0, r3
 8022702:	f7e4 fd38 	bl	8007176 <HAL_PCD_EP_Close>
 8022706:	4603      	mov	r3, r0
 8022708:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802270a:	7bfb      	ldrb	r3, [r7, #15]
 802270c:	4618      	mov	r0, r3
 802270e:	f000 f939 	bl	8022984 <USBD_Get_USB_Status>
 8022712:	4603      	mov	r3, r0
 8022714:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022716:	7bbb      	ldrb	r3, [r7, #14]
}
 8022718:	4618      	mov	r0, r3
 802271a:	3710      	adds	r7, #16
 802271c:	46bd      	mov	sp, r7
 802271e:	bd80      	pop	{r7, pc}

08022720 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8022720:	b580      	push	{r7, lr}
 8022722:	b084      	sub	sp, #16
 8022724:	af00      	add	r7, sp, #0
 8022726:	6078      	str	r0, [r7, #4]
 8022728:	460b      	mov	r3, r1
 802272a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802272c:	2300      	movs	r3, #0
 802272e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022730:	2300      	movs	r3, #0
 8022732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8022734:	687b      	ldr	r3, [r7, #4]
 8022736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802273a:	78fa      	ldrb	r2, [r7, #3]
 802273c:	4611      	mov	r1, r2
 802273e:	4618      	mov	r0, r3
 8022740:	f7e4 fe10 	bl	8007364 <HAL_PCD_EP_SetStall>
 8022744:	4603      	mov	r3, r0
 8022746:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022748:	7bfb      	ldrb	r3, [r7, #15]
 802274a:	4618      	mov	r0, r3
 802274c:	f000 f91a 	bl	8022984 <USBD_Get_USB_Status>
 8022750:	4603      	mov	r3, r0
 8022752:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022754:	7bbb      	ldrb	r3, [r7, #14]
}
 8022756:	4618      	mov	r0, r3
 8022758:	3710      	adds	r7, #16
 802275a:	46bd      	mov	sp, r7
 802275c:	bd80      	pop	{r7, pc}

0802275e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802275e:	b580      	push	{r7, lr}
 8022760:	b084      	sub	sp, #16
 8022762:	af00      	add	r7, sp, #0
 8022764:	6078      	str	r0, [r7, #4]
 8022766:	460b      	mov	r3, r1
 8022768:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 802276a:	2300      	movs	r3, #0
 802276c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802276e:	2300      	movs	r3, #0
 8022770:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8022772:	687b      	ldr	r3, [r7, #4]
 8022774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8022778:	78fa      	ldrb	r2, [r7, #3]
 802277a:	4611      	mov	r1, r2
 802277c:	4618      	mov	r0, r3
 802277e:	f7e4 fe55 	bl	800742c <HAL_PCD_EP_ClrStall>
 8022782:	4603      	mov	r3, r0
 8022784:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8022786:	7bfb      	ldrb	r3, [r7, #15]
 8022788:	4618      	mov	r0, r3
 802278a:	f000 f8fb 	bl	8022984 <USBD_Get_USB_Status>
 802278e:	4603      	mov	r3, r0
 8022790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022792:	7bbb      	ldrb	r3, [r7, #14]
}
 8022794:	4618      	mov	r0, r3
 8022796:	3710      	adds	r7, #16
 8022798:	46bd      	mov	sp, r7
 802279a:	bd80      	pop	{r7, pc}

0802279c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 802279c:	b480      	push	{r7}
 802279e:	b085      	sub	sp, #20
 80227a0:	af00      	add	r7, sp, #0
 80227a2:	6078      	str	r0, [r7, #4]
 80227a4:	460b      	mov	r3, r1
 80227a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80227a8:	687b      	ldr	r3, [r7, #4]
 80227aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80227ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80227b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	da0b      	bge.n	80227d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80227b8:	78fb      	ldrb	r3, [r7, #3]
 80227ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80227be:	68f9      	ldr	r1, [r7, #12]
 80227c0:	4613      	mov	r3, r2
 80227c2:	00db      	lsls	r3, r3, #3
 80227c4:	4413      	add	r3, r2
 80227c6:	009b      	lsls	r3, r3, #2
 80227c8:	440b      	add	r3, r1
 80227ca:	333e      	adds	r3, #62	; 0x3e
 80227cc:	781b      	ldrb	r3, [r3, #0]
 80227ce:	e00b      	b.n	80227e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80227d0:	78fb      	ldrb	r3, [r7, #3]
 80227d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80227d6:	68f9      	ldr	r1, [r7, #12]
 80227d8:	4613      	mov	r3, r2
 80227da:	00db      	lsls	r3, r3, #3
 80227dc:	4413      	add	r3, r2
 80227de:	009b      	lsls	r3, r3, #2
 80227e0:	440b      	add	r3, r1
 80227e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80227e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80227e8:	4618      	mov	r0, r3
 80227ea:	3714      	adds	r7, #20
 80227ec:	46bd      	mov	sp, r7
 80227ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227f2:	4770      	bx	lr

080227f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80227f4:	b580      	push	{r7, lr}
 80227f6:	b084      	sub	sp, #16
 80227f8:	af00      	add	r7, sp, #0
 80227fa:	6078      	str	r0, [r7, #4]
 80227fc:	460b      	mov	r3, r1
 80227fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022800:	2300      	movs	r3, #0
 8022802:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022804:	2300      	movs	r3, #0
 8022806:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8022808:	687b      	ldr	r3, [r7, #4]
 802280a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 802280e:	78fa      	ldrb	r2, [r7, #3]
 8022810:	4611      	mov	r1, r2
 8022812:	4618      	mov	r0, r3
 8022814:	f7e4 fc22 	bl	800705c <HAL_PCD_SetAddress>
 8022818:	4603      	mov	r3, r0
 802281a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802281c:	7bfb      	ldrb	r3, [r7, #15]
 802281e:	4618      	mov	r0, r3
 8022820:	f000 f8b0 	bl	8022984 <USBD_Get_USB_Status>
 8022824:	4603      	mov	r3, r0
 8022826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8022828:	7bbb      	ldrb	r3, [r7, #14]
}
 802282a:	4618      	mov	r0, r3
 802282c:	3710      	adds	r7, #16
 802282e:	46bd      	mov	sp, r7
 8022830:	bd80      	pop	{r7, pc}

08022832 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022832:	b580      	push	{r7, lr}
 8022834:	b086      	sub	sp, #24
 8022836:	af00      	add	r7, sp, #0
 8022838:	60f8      	str	r0, [r7, #12]
 802283a:	607a      	str	r2, [r7, #4]
 802283c:	603b      	str	r3, [r7, #0]
 802283e:	460b      	mov	r3, r1
 8022840:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022842:	2300      	movs	r3, #0
 8022844:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022846:	2300      	movs	r3, #0
 8022848:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802284a:	68fb      	ldr	r3, [r7, #12]
 802284c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8022850:	7af9      	ldrb	r1, [r7, #11]
 8022852:	683b      	ldr	r3, [r7, #0]
 8022854:	687a      	ldr	r2, [r7, #4]
 8022856:	f7e4 fd3b 	bl	80072d0 <HAL_PCD_EP_Transmit>
 802285a:	4603      	mov	r3, r0
 802285c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 802285e:	7dfb      	ldrb	r3, [r7, #23]
 8022860:	4618      	mov	r0, r3
 8022862:	f000 f88f 	bl	8022984 <USBD_Get_USB_Status>
 8022866:	4603      	mov	r3, r0
 8022868:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 802286a:	7dbb      	ldrb	r3, [r7, #22]
}
 802286c:	4618      	mov	r0, r3
 802286e:	3718      	adds	r7, #24
 8022870:	46bd      	mov	sp, r7
 8022872:	bd80      	pop	{r7, pc}

08022874 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8022874:	b580      	push	{r7, lr}
 8022876:	b086      	sub	sp, #24
 8022878:	af00      	add	r7, sp, #0
 802287a:	60f8      	str	r0, [r7, #12]
 802287c:	607a      	str	r2, [r7, #4]
 802287e:	603b      	str	r3, [r7, #0]
 8022880:	460b      	mov	r3, r1
 8022882:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8022884:	2300      	movs	r3, #0
 8022886:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8022888:	2300      	movs	r3, #0
 802288a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802288c:	68fb      	ldr	r3, [r7, #12]
 802288e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8022892:	7af9      	ldrb	r1, [r7, #11]
 8022894:	683b      	ldr	r3, [r7, #0]
 8022896:	687a      	ldr	r2, [r7, #4]
 8022898:	f7e4 fcb7 	bl	800720a <HAL_PCD_EP_Receive>
 802289c:	4603      	mov	r3, r0
 802289e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80228a0:	7dfb      	ldrb	r3, [r7, #23]
 80228a2:	4618      	mov	r0, r3
 80228a4:	f000 f86e 	bl	8022984 <USBD_Get_USB_Status>
 80228a8:	4603      	mov	r3, r0
 80228aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80228ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80228ae:	4618      	mov	r0, r3
 80228b0:	3718      	adds	r7, #24
 80228b2:	46bd      	mov	sp, r7
 80228b4:	bd80      	pop	{r7, pc}

080228b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80228b6:	b580      	push	{r7, lr}
 80228b8:	b082      	sub	sp, #8
 80228ba:	af00      	add	r7, sp, #0
 80228bc:	6078      	str	r0, [r7, #4]
 80228be:	460b      	mov	r3, r1
 80228c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80228c8:	78fa      	ldrb	r2, [r7, #3]
 80228ca:	4611      	mov	r1, r2
 80228cc:	4618      	mov	r0, r3
 80228ce:	f7e4 fce7 	bl	80072a0 <HAL_PCD_EP_GetRxCount>
 80228d2:	4603      	mov	r3, r0
}
 80228d4:	4618      	mov	r0, r3
 80228d6:	3708      	adds	r7, #8
 80228d8:	46bd      	mov	sp, r7
 80228da:	bd80      	pop	{r7, pc}

080228dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80228dc:	b580      	push	{r7, lr}
 80228de:	b082      	sub	sp, #8
 80228e0:	af00      	add	r7, sp, #0
 80228e2:	6078      	str	r0, [r7, #4]
 80228e4:	460b      	mov	r3, r1
 80228e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80228e8:	78fb      	ldrb	r3, [r7, #3]
 80228ea:	2b00      	cmp	r3, #0
 80228ec:	d002      	beq.n	80228f4 <HAL_PCDEx_LPM_Callback+0x18>
 80228ee:	2b01      	cmp	r3, #1
 80228f0:	d01f      	beq.n	8022932 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80228f2:	e03b      	b.n	802296c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	6a1b      	ldr	r3, [r3, #32]
 80228f8:	2b00      	cmp	r3, #0
 80228fa:	d007      	beq.n	802290c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80228fc:	f000 f83c 	bl	8022978 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8022900:	4b1c      	ldr	r3, [pc, #112]	; (8022974 <HAL_PCDEx_LPM_Callback+0x98>)
 8022902:	691b      	ldr	r3, [r3, #16]
 8022904:	4a1b      	ldr	r2, [pc, #108]	; (8022974 <HAL_PCDEx_LPM_Callback+0x98>)
 8022906:	f023 0306 	bic.w	r3, r3, #6
 802290a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802290c:	687b      	ldr	r3, [r7, #4]
 802290e:	681b      	ldr	r3, [r3, #0]
 8022910:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8022914:	681b      	ldr	r3, [r3, #0]
 8022916:	687a      	ldr	r2, [r7, #4]
 8022918:	6812      	ldr	r2, [r2, #0]
 802291a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 802291e:	f023 0301 	bic.w	r3, r3, #1
 8022922:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8022924:	687b      	ldr	r3, [r7, #4]
 8022926:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 802292a:	4618      	mov	r0, r3
 802292c:	f7fe fa35 	bl	8020d9a <USBD_LL_Resume>
    break;
 8022930:	e01c      	b.n	802296c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	681b      	ldr	r3, [r3, #0]
 8022936:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 802293a:	681b      	ldr	r3, [r3, #0]
 802293c:	687a      	ldr	r2, [r7, #4]
 802293e:	6812      	ldr	r2, [r2, #0]
 8022940:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8022944:	f043 0301 	orr.w	r3, r3, #1
 8022948:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8022950:	4618      	mov	r0, r3
 8022952:	f7fe fa0c 	bl	8020d6e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	6a1b      	ldr	r3, [r3, #32]
 802295a:	2b00      	cmp	r3, #0
 802295c:	d005      	beq.n	802296a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802295e:	4b05      	ldr	r3, [pc, #20]	; (8022974 <HAL_PCDEx_LPM_Callback+0x98>)
 8022960:	691b      	ldr	r3, [r3, #16]
 8022962:	4a04      	ldr	r2, [pc, #16]	; (8022974 <HAL_PCDEx_LPM_Callback+0x98>)
 8022964:	f043 0306 	orr.w	r3, r3, #6
 8022968:	6113      	str	r3, [r2, #16]
    break;
 802296a:	bf00      	nop
}
 802296c:	bf00      	nop
 802296e:	3708      	adds	r7, #8
 8022970:	46bd      	mov	sp, r7
 8022972:	bd80      	pop	{r7, pc}
 8022974:	e000ed00 	.word	0xe000ed00

08022978 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8022978:	b580      	push	{r7, lr}
 802297a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 802297c:	f7de fd2c 	bl	80013d8 <SystemClock_Config>
}
 8022980:	bf00      	nop
 8022982:	bd80      	pop	{r7, pc}

08022984 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8022984:	b480      	push	{r7}
 8022986:	b085      	sub	sp, #20
 8022988:	af00      	add	r7, sp, #0
 802298a:	4603      	mov	r3, r0
 802298c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 802298e:	2300      	movs	r3, #0
 8022990:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8022992:	79fb      	ldrb	r3, [r7, #7]
 8022994:	2b03      	cmp	r3, #3
 8022996:	d817      	bhi.n	80229c8 <USBD_Get_USB_Status+0x44>
 8022998:	a201      	add	r2, pc, #4	; (adr r2, 80229a0 <USBD_Get_USB_Status+0x1c>)
 802299a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802299e:	bf00      	nop
 80229a0:	080229b1 	.word	0x080229b1
 80229a4:	080229b7 	.word	0x080229b7
 80229a8:	080229bd 	.word	0x080229bd
 80229ac:	080229c3 	.word	0x080229c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80229b0:	2300      	movs	r3, #0
 80229b2:	73fb      	strb	r3, [r7, #15]
    break;
 80229b4:	e00b      	b.n	80229ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80229b6:	2303      	movs	r3, #3
 80229b8:	73fb      	strb	r3, [r7, #15]
    break;
 80229ba:	e008      	b.n	80229ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80229bc:	2301      	movs	r3, #1
 80229be:	73fb      	strb	r3, [r7, #15]
    break;
 80229c0:	e005      	b.n	80229ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80229c2:	2303      	movs	r3, #3
 80229c4:	73fb      	strb	r3, [r7, #15]
    break;
 80229c6:	e002      	b.n	80229ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80229c8:	2303      	movs	r3, #3
 80229ca:	73fb      	strb	r3, [r7, #15]
    break;
 80229cc:	bf00      	nop
  }
  return usb_status;
 80229ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80229d0:	4618      	mov	r0, r3
 80229d2:	3714      	adds	r7, #20
 80229d4:	46bd      	mov	sp, r7
 80229d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229da:	4770      	bx	lr

080229dc <malloc>:
 80229dc:	4b02      	ldr	r3, [pc, #8]	; (80229e8 <malloc+0xc>)
 80229de:	4601      	mov	r1, r0
 80229e0:	6818      	ldr	r0, [r3, #0]
 80229e2:	f000 b82b 	b.w	8022a3c <_malloc_r>
 80229e6:	bf00      	nop
 80229e8:	20000190 	.word	0x20000190

080229ec <free>:
 80229ec:	4b02      	ldr	r3, [pc, #8]	; (80229f8 <free+0xc>)
 80229ee:	4601      	mov	r1, r0
 80229f0:	6818      	ldr	r0, [r3, #0]
 80229f2:	f000 bbb9 	b.w	8023168 <_free_r>
 80229f6:	bf00      	nop
 80229f8:	20000190 	.word	0x20000190

080229fc <sbrk_aligned>:
 80229fc:	b570      	push	{r4, r5, r6, lr}
 80229fe:	4e0e      	ldr	r6, [pc, #56]	; (8022a38 <sbrk_aligned+0x3c>)
 8022a00:	460c      	mov	r4, r1
 8022a02:	6831      	ldr	r1, [r6, #0]
 8022a04:	4605      	mov	r5, r0
 8022a06:	b911      	cbnz	r1, 8022a0e <sbrk_aligned+0x12>
 8022a08:	f000 fb32 	bl	8023070 <_sbrk_r>
 8022a0c:	6030      	str	r0, [r6, #0]
 8022a0e:	4621      	mov	r1, r4
 8022a10:	4628      	mov	r0, r5
 8022a12:	f000 fb2d 	bl	8023070 <_sbrk_r>
 8022a16:	1c43      	adds	r3, r0, #1
 8022a18:	d00a      	beq.n	8022a30 <sbrk_aligned+0x34>
 8022a1a:	1cc4      	adds	r4, r0, #3
 8022a1c:	f024 0403 	bic.w	r4, r4, #3
 8022a20:	42a0      	cmp	r0, r4
 8022a22:	d007      	beq.n	8022a34 <sbrk_aligned+0x38>
 8022a24:	1a21      	subs	r1, r4, r0
 8022a26:	4628      	mov	r0, r5
 8022a28:	f000 fb22 	bl	8023070 <_sbrk_r>
 8022a2c:	3001      	adds	r0, #1
 8022a2e:	d101      	bne.n	8022a34 <sbrk_aligned+0x38>
 8022a30:	f04f 34ff 	mov.w	r4, #4294967295
 8022a34:	4620      	mov	r0, r4
 8022a36:	bd70      	pop	{r4, r5, r6, pc}
 8022a38:	20025340 	.word	0x20025340

08022a3c <_malloc_r>:
 8022a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022a40:	1ccd      	adds	r5, r1, #3
 8022a42:	f025 0503 	bic.w	r5, r5, #3
 8022a46:	3508      	adds	r5, #8
 8022a48:	2d0c      	cmp	r5, #12
 8022a4a:	bf38      	it	cc
 8022a4c:	250c      	movcc	r5, #12
 8022a4e:	2d00      	cmp	r5, #0
 8022a50:	4607      	mov	r7, r0
 8022a52:	db01      	blt.n	8022a58 <_malloc_r+0x1c>
 8022a54:	42a9      	cmp	r1, r5
 8022a56:	d905      	bls.n	8022a64 <_malloc_r+0x28>
 8022a58:	230c      	movs	r3, #12
 8022a5a:	603b      	str	r3, [r7, #0]
 8022a5c:	2600      	movs	r6, #0
 8022a5e:	4630      	mov	r0, r6
 8022a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022a64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8022b38 <_malloc_r+0xfc>
 8022a68:	f000 f868 	bl	8022b3c <__malloc_lock>
 8022a6c:	f8d8 3000 	ldr.w	r3, [r8]
 8022a70:	461c      	mov	r4, r3
 8022a72:	bb5c      	cbnz	r4, 8022acc <_malloc_r+0x90>
 8022a74:	4629      	mov	r1, r5
 8022a76:	4638      	mov	r0, r7
 8022a78:	f7ff ffc0 	bl	80229fc <sbrk_aligned>
 8022a7c:	1c43      	adds	r3, r0, #1
 8022a7e:	4604      	mov	r4, r0
 8022a80:	d155      	bne.n	8022b2e <_malloc_r+0xf2>
 8022a82:	f8d8 4000 	ldr.w	r4, [r8]
 8022a86:	4626      	mov	r6, r4
 8022a88:	2e00      	cmp	r6, #0
 8022a8a:	d145      	bne.n	8022b18 <_malloc_r+0xdc>
 8022a8c:	2c00      	cmp	r4, #0
 8022a8e:	d048      	beq.n	8022b22 <_malloc_r+0xe6>
 8022a90:	6823      	ldr	r3, [r4, #0]
 8022a92:	4631      	mov	r1, r6
 8022a94:	4638      	mov	r0, r7
 8022a96:	eb04 0903 	add.w	r9, r4, r3
 8022a9a:	f000 fae9 	bl	8023070 <_sbrk_r>
 8022a9e:	4581      	cmp	r9, r0
 8022aa0:	d13f      	bne.n	8022b22 <_malloc_r+0xe6>
 8022aa2:	6821      	ldr	r1, [r4, #0]
 8022aa4:	1a6d      	subs	r5, r5, r1
 8022aa6:	4629      	mov	r1, r5
 8022aa8:	4638      	mov	r0, r7
 8022aaa:	f7ff ffa7 	bl	80229fc <sbrk_aligned>
 8022aae:	3001      	adds	r0, #1
 8022ab0:	d037      	beq.n	8022b22 <_malloc_r+0xe6>
 8022ab2:	6823      	ldr	r3, [r4, #0]
 8022ab4:	442b      	add	r3, r5
 8022ab6:	6023      	str	r3, [r4, #0]
 8022ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8022abc:	2b00      	cmp	r3, #0
 8022abe:	d038      	beq.n	8022b32 <_malloc_r+0xf6>
 8022ac0:	685a      	ldr	r2, [r3, #4]
 8022ac2:	42a2      	cmp	r2, r4
 8022ac4:	d12b      	bne.n	8022b1e <_malloc_r+0xe2>
 8022ac6:	2200      	movs	r2, #0
 8022ac8:	605a      	str	r2, [r3, #4]
 8022aca:	e00f      	b.n	8022aec <_malloc_r+0xb0>
 8022acc:	6822      	ldr	r2, [r4, #0]
 8022ace:	1b52      	subs	r2, r2, r5
 8022ad0:	d41f      	bmi.n	8022b12 <_malloc_r+0xd6>
 8022ad2:	2a0b      	cmp	r2, #11
 8022ad4:	d917      	bls.n	8022b06 <_malloc_r+0xca>
 8022ad6:	1961      	adds	r1, r4, r5
 8022ad8:	42a3      	cmp	r3, r4
 8022ada:	6025      	str	r5, [r4, #0]
 8022adc:	bf18      	it	ne
 8022ade:	6059      	strne	r1, [r3, #4]
 8022ae0:	6863      	ldr	r3, [r4, #4]
 8022ae2:	bf08      	it	eq
 8022ae4:	f8c8 1000 	streq.w	r1, [r8]
 8022ae8:	5162      	str	r2, [r4, r5]
 8022aea:	604b      	str	r3, [r1, #4]
 8022aec:	4638      	mov	r0, r7
 8022aee:	f104 060b 	add.w	r6, r4, #11
 8022af2:	f000 f829 	bl	8022b48 <__malloc_unlock>
 8022af6:	f026 0607 	bic.w	r6, r6, #7
 8022afa:	1d23      	adds	r3, r4, #4
 8022afc:	1af2      	subs	r2, r6, r3
 8022afe:	d0ae      	beq.n	8022a5e <_malloc_r+0x22>
 8022b00:	1b9b      	subs	r3, r3, r6
 8022b02:	50a3      	str	r3, [r4, r2]
 8022b04:	e7ab      	b.n	8022a5e <_malloc_r+0x22>
 8022b06:	42a3      	cmp	r3, r4
 8022b08:	6862      	ldr	r2, [r4, #4]
 8022b0a:	d1dd      	bne.n	8022ac8 <_malloc_r+0x8c>
 8022b0c:	f8c8 2000 	str.w	r2, [r8]
 8022b10:	e7ec      	b.n	8022aec <_malloc_r+0xb0>
 8022b12:	4623      	mov	r3, r4
 8022b14:	6864      	ldr	r4, [r4, #4]
 8022b16:	e7ac      	b.n	8022a72 <_malloc_r+0x36>
 8022b18:	4634      	mov	r4, r6
 8022b1a:	6876      	ldr	r6, [r6, #4]
 8022b1c:	e7b4      	b.n	8022a88 <_malloc_r+0x4c>
 8022b1e:	4613      	mov	r3, r2
 8022b20:	e7cc      	b.n	8022abc <_malloc_r+0x80>
 8022b22:	230c      	movs	r3, #12
 8022b24:	603b      	str	r3, [r7, #0]
 8022b26:	4638      	mov	r0, r7
 8022b28:	f000 f80e 	bl	8022b48 <__malloc_unlock>
 8022b2c:	e797      	b.n	8022a5e <_malloc_r+0x22>
 8022b2e:	6025      	str	r5, [r4, #0]
 8022b30:	e7dc      	b.n	8022aec <_malloc_r+0xb0>
 8022b32:	605b      	str	r3, [r3, #4]
 8022b34:	deff      	udf	#255	; 0xff
 8022b36:	bf00      	nop
 8022b38:	2002533c 	.word	0x2002533c

08022b3c <__malloc_lock>:
 8022b3c:	4801      	ldr	r0, [pc, #4]	; (8022b44 <__malloc_lock+0x8>)
 8022b3e:	f000 badd 	b.w	80230fc <__retarget_lock_acquire_recursive>
 8022b42:	bf00      	nop
 8022b44:	20025484 	.word	0x20025484

08022b48 <__malloc_unlock>:
 8022b48:	4801      	ldr	r0, [pc, #4]	; (8022b50 <__malloc_unlock+0x8>)
 8022b4a:	f000 bad8 	b.w	80230fe <__retarget_lock_release_recursive>
 8022b4e:	bf00      	nop
 8022b50:	20025484 	.word	0x20025484

08022b54 <rand>:
 8022b54:	4b16      	ldr	r3, [pc, #88]	; (8022bb0 <rand+0x5c>)
 8022b56:	b510      	push	{r4, lr}
 8022b58:	681c      	ldr	r4, [r3, #0]
 8022b5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8022b5c:	b9b3      	cbnz	r3, 8022b8c <rand+0x38>
 8022b5e:	2018      	movs	r0, #24
 8022b60:	f7ff ff3c 	bl	80229dc <malloc>
 8022b64:	4602      	mov	r2, r0
 8022b66:	6320      	str	r0, [r4, #48]	; 0x30
 8022b68:	b920      	cbnz	r0, 8022b74 <rand+0x20>
 8022b6a:	4b12      	ldr	r3, [pc, #72]	; (8022bb4 <rand+0x60>)
 8022b6c:	4812      	ldr	r0, [pc, #72]	; (8022bb8 <rand+0x64>)
 8022b6e:	2152      	movs	r1, #82	; 0x52
 8022b70:	f000 fadc 	bl	802312c <__assert_func>
 8022b74:	4911      	ldr	r1, [pc, #68]	; (8022bbc <rand+0x68>)
 8022b76:	4b12      	ldr	r3, [pc, #72]	; (8022bc0 <rand+0x6c>)
 8022b78:	e9c0 1300 	strd	r1, r3, [r0]
 8022b7c:	4b11      	ldr	r3, [pc, #68]	; (8022bc4 <rand+0x70>)
 8022b7e:	6083      	str	r3, [r0, #8]
 8022b80:	230b      	movs	r3, #11
 8022b82:	8183      	strh	r3, [r0, #12]
 8022b84:	2100      	movs	r1, #0
 8022b86:	2001      	movs	r0, #1
 8022b88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8022b8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8022b8e:	480e      	ldr	r0, [pc, #56]	; (8022bc8 <rand+0x74>)
 8022b90:	690b      	ldr	r3, [r1, #16]
 8022b92:	694c      	ldr	r4, [r1, #20]
 8022b94:	4a0d      	ldr	r2, [pc, #52]	; (8022bcc <rand+0x78>)
 8022b96:	4358      	muls	r0, r3
 8022b98:	fb02 0004 	mla	r0, r2, r4, r0
 8022b9c:	fba3 3202 	umull	r3, r2, r3, r2
 8022ba0:	3301      	adds	r3, #1
 8022ba2:	eb40 0002 	adc.w	r0, r0, r2
 8022ba6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8022baa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8022bae:	bd10      	pop	{r4, pc}
 8022bb0:	20000190 	.word	0x20000190
 8022bb4:	080285dc 	.word	0x080285dc
 8022bb8:	080285f3 	.word	0x080285f3
 8022bbc:	abcd330e 	.word	0xabcd330e
 8022bc0:	e66d1234 	.word	0xe66d1234
 8022bc4:	0005deec 	.word	0x0005deec
 8022bc8:	5851f42d 	.word	0x5851f42d
 8022bcc:	4c957f2d 	.word	0x4c957f2d

08022bd0 <std>:
 8022bd0:	2300      	movs	r3, #0
 8022bd2:	b510      	push	{r4, lr}
 8022bd4:	4604      	mov	r4, r0
 8022bd6:	e9c0 3300 	strd	r3, r3, [r0]
 8022bda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022bde:	6083      	str	r3, [r0, #8]
 8022be0:	8181      	strh	r1, [r0, #12]
 8022be2:	6643      	str	r3, [r0, #100]	; 0x64
 8022be4:	81c2      	strh	r2, [r0, #14]
 8022be6:	6183      	str	r3, [r0, #24]
 8022be8:	4619      	mov	r1, r3
 8022bea:	2208      	movs	r2, #8
 8022bec:	305c      	adds	r0, #92	; 0x5c
 8022bee:	f000 f93e 	bl	8022e6e <memset>
 8022bf2:	4b05      	ldr	r3, [pc, #20]	; (8022c08 <std+0x38>)
 8022bf4:	6263      	str	r3, [r4, #36]	; 0x24
 8022bf6:	4b05      	ldr	r3, [pc, #20]	; (8022c0c <std+0x3c>)
 8022bf8:	62a3      	str	r3, [r4, #40]	; 0x28
 8022bfa:	4b05      	ldr	r3, [pc, #20]	; (8022c10 <std+0x40>)
 8022bfc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022bfe:	4b05      	ldr	r3, [pc, #20]	; (8022c14 <std+0x44>)
 8022c00:	6224      	str	r4, [r4, #32]
 8022c02:	6323      	str	r3, [r4, #48]	; 0x30
 8022c04:	bd10      	pop	{r4, pc}
 8022c06:	bf00      	nop
 8022c08:	08022d95 	.word	0x08022d95
 8022c0c:	08022db7 	.word	0x08022db7
 8022c10:	08022def 	.word	0x08022def
 8022c14:	08022e13 	.word	0x08022e13

08022c18 <stdio_exit_handler>:
 8022c18:	4a02      	ldr	r2, [pc, #8]	; (8022c24 <stdio_exit_handler+0xc>)
 8022c1a:	4903      	ldr	r1, [pc, #12]	; (8022c28 <stdio_exit_handler+0x10>)
 8022c1c:	4803      	ldr	r0, [pc, #12]	; (8022c2c <stdio_exit_handler+0x14>)
 8022c1e:	f000 b869 	b.w	8022cf4 <_fwalk_sglue>
 8022c22:	bf00      	nop
 8022c24:	20000138 	.word	0x20000138
 8022c28:	08023b65 	.word	0x08023b65
 8022c2c:	20000144 	.word	0x20000144

08022c30 <cleanup_stdio>:
 8022c30:	6841      	ldr	r1, [r0, #4]
 8022c32:	4b0c      	ldr	r3, [pc, #48]	; (8022c64 <cleanup_stdio+0x34>)
 8022c34:	4299      	cmp	r1, r3
 8022c36:	b510      	push	{r4, lr}
 8022c38:	4604      	mov	r4, r0
 8022c3a:	d001      	beq.n	8022c40 <cleanup_stdio+0x10>
 8022c3c:	f000 ff92 	bl	8023b64 <_fflush_r>
 8022c40:	68a1      	ldr	r1, [r4, #8]
 8022c42:	4b09      	ldr	r3, [pc, #36]	; (8022c68 <cleanup_stdio+0x38>)
 8022c44:	4299      	cmp	r1, r3
 8022c46:	d002      	beq.n	8022c4e <cleanup_stdio+0x1e>
 8022c48:	4620      	mov	r0, r4
 8022c4a:	f000 ff8b 	bl	8023b64 <_fflush_r>
 8022c4e:	68e1      	ldr	r1, [r4, #12]
 8022c50:	4b06      	ldr	r3, [pc, #24]	; (8022c6c <cleanup_stdio+0x3c>)
 8022c52:	4299      	cmp	r1, r3
 8022c54:	d004      	beq.n	8022c60 <cleanup_stdio+0x30>
 8022c56:	4620      	mov	r0, r4
 8022c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022c5c:	f000 bf82 	b.w	8023b64 <_fflush_r>
 8022c60:	bd10      	pop	{r4, pc}
 8022c62:	bf00      	nop
 8022c64:	20025344 	.word	0x20025344
 8022c68:	200253ac 	.word	0x200253ac
 8022c6c:	20025414 	.word	0x20025414

08022c70 <global_stdio_init.part.0>:
 8022c70:	b510      	push	{r4, lr}
 8022c72:	4b0b      	ldr	r3, [pc, #44]	; (8022ca0 <global_stdio_init.part.0+0x30>)
 8022c74:	4c0b      	ldr	r4, [pc, #44]	; (8022ca4 <global_stdio_init.part.0+0x34>)
 8022c76:	4a0c      	ldr	r2, [pc, #48]	; (8022ca8 <global_stdio_init.part.0+0x38>)
 8022c78:	601a      	str	r2, [r3, #0]
 8022c7a:	4620      	mov	r0, r4
 8022c7c:	2200      	movs	r2, #0
 8022c7e:	2104      	movs	r1, #4
 8022c80:	f7ff ffa6 	bl	8022bd0 <std>
 8022c84:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8022c88:	2201      	movs	r2, #1
 8022c8a:	2109      	movs	r1, #9
 8022c8c:	f7ff ffa0 	bl	8022bd0 <std>
 8022c90:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8022c94:	2202      	movs	r2, #2
 8022c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022c9a:	2112      	movs	r1, #18
 8022c9c:	f7ff bf98 	b.w	8022bd0 <std>
 8022ca0:	2002547c 	.word	0x2002547c
 8022ca4:	20025344 	.word	0x20025344
 8022ca8:	08022c19 	.word	0x08022c19

08022cac <__sfp_lock_acquire>:
 8022cac:	4801      	ldr	r0, [pc, #4]	; (8022cb4 <__sfp_lock_acquire+0x8>)
 8022cae:	f000 ba25 	b.w	80230fc <__retarget_lock_acquire_recursive>
 8022cb2:	bf00      	nop
 8022cb4:	20025485 	.word	0x20025485

08022cb8 <__sfp_lock_release>:
 8022cb8:	4801      	ldr	r0, [pc, #4]	; (8022cc0 <__sfp_lock_release+0x8>)
 8022cba:	f000 ba20 	b.w	80230fe <__retarget_lock_release_recursive>
 8022cbe:	bf00      	nop
 8022cc0:	20025485 	.word	0x20025485

08022cc4 <__sinit>:
 8022cc4:	b510      	push	{r4, lr}
 8022cc6:	4604      	mov	r4, r0
 8022cc8:	f7ff fff0 	bl	8022cac <__sfp_lock_acquire>
 8022ccc:	6a23      	ldr	r3, [r4, #32]
 8022cce:	b11b      	cbz	r3, 8022cd8 <__sinit+0x14>
 8022cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022cd4:	f7ff bff0 	b.w	8022cb8 <__sfp_lock_release>
 8022cd8:	4b04      	ldr	r3, [pc, #16]	; (8022cec <__sinit+0x28>)
 8022cda:	6223      	str	r3, [r4, #32]
 8022cdc:	4b04      	ldr	r3, [pc, #16]	; (8022cf0 <__sinit+0x2c>)
 8022cde:	681b      	ldr	r3, [r3, #0]
 8022ce0:	2b00      	cmp	r3, #0
 8022ce2:	d1f5      	bne.n	8022cd0 <__sinit+0xc>
 8022ce4:	f7ff ffc4 	bl	8022c70 <global_stdio_init.part.0>
 8022ce8:	e7f2      	b.n	8022cd0 <__sinit+0xc>
 8022cea:	bf00      	nop
 8022cec:	08022c31 	.word	0x08022c31
 8022cf0:	2002547c 	.word	0x2002547c

08022cf4 <_fwalk_sglue>:
 8022cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022cf8:	4607      	mov	r7, r0
 8022cfa:	4688      	mov	r8, r1
 8022cfc:	4614      	mov	r4, r2
 8022cfe:	2600      	movs	r6, #0
 8022d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022d04:	f1b9 0901 	subs.w	r9, r9, #1
 8022d08:	d505      	bpl.n	8022d16 <_fwalk_sglue+0x22>
 8022d0a:	6824      	ldr	r4, [r4, #0]
 8022d0c:	2c00      	cmp	r4, #0
 8022d0e:	d1f7      	bne.n	8022d00 <_fwalk_sglue+0xc>
 8022d10:	4630      	mov	r0, r6
 8022d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d16:	89ab      	ldrh	r3, [r5, #12]
 8022d18:	2b01      	cmp	r3, #1
 8022d1a:	d907      	bls.n	8022d2c <_fwalk_sglue+0x38>
 8022d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022d20:	3301      	adds	r3, #1
 8022d22:	d003      	beq.n	8022d2c <_fwalk_sglue+0x38>
 8022d24:	4629      	mov	r1, r5
 8022d26:	4638      	mov	r0, r7
 8022d28:	47c0      	blx	r8
 8022d2a:	4306      	orrs	r6, r0
 8022d2c:	3568      	adds	r5, #104	; 0x68
 8022d2e:	e7e9      	b.n	8022d04 <_fwalk_sglue+0x10>

08022d30 <iprintf>:
 8022d30:	b40f      	push	{r0, r1, r2, r3}
 8022d32:	b507      	push	{r0, r1, r2, lr}
 8022d34:	4906      	ldr	r1, [pc, #24]	; (8022d50 <iprintf+0x20>)
 8022d36:	ab04      	add	r3, sp, #16
 8022d38:	6808      	ldr	r0, [r1, #0]
 8022d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8022d3e:	6881      	ldr	r1, [r0, #8]
 8022d40:	9301      	str	r3, [sp, #4]
 8022d42:	f000 fbdf 	bl	8023504 <_vfiprintf_r>
 8022d46:	b003      	add	sp, #12
 8022d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d4c:	b004      	add	sp, #16
 8022d4e:	4770      	bx	lr
 8022d50:	20000190 	.word	0x20000190

08022d54 <siprintf>:
 8022d54:	b40e      	push	{r1, r2, r3}
 8022d56:	b500      	push	{lr}
 8022d58:	b09c      	sub	sp, #112	; 0x70
 8022d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8022d5c:	9002      	str	r0, [sp, #8]
 8022d5e:	9006      	str	r0, [sp, #24]
 8022d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022d64:	4809      	ldr	r0, [pc, #36]	; (8022d8c <siprintf+0x38>)
 8022d66:	9107      	str	r1, [sp, #28]
 8022d68:	9104      	str	r1, [sp, #16]
 8022d6a:	4909      	ldr	r1, [pc, #36]	; (8022d90 <siprintf+0x3c>)
 8022d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8022d70:	9105      	str	r1, [sp, #20]
 8022d72:	6800      	ldr	r0, [r0, #0]
 8022d74:	9301      	str	r3, [sp, #4]
 8022d76:	a902      	add	r1, sp, #8
 8022d78:	f000 fa9c 	bl	80232b4 <_svfiprintf_r>
 8022d7c:	9b02      	ldr	r3, [sp, #8]
 8022d7e:	2200      	movs	r2, #0
 8022d80:	701a      	strb	r2, [r3, #0]
 8022d82:	b01c      	add	sp, #112	; 0x70
 8022d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8022d88:	b003      	add	sp, #12
 8022d8a:	4770      	bx	lr
 8022d8c:	20000190 	.word	0x20000190
 8022d90:	ffff0208 	.word	0xffff0208

08022d94 <__sread>:
 8022d94:	b510      	push	{r4, lr}
 8022d96:	460c      	mov	r4, r1
 8022d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022d9c:	f000 f956 	bl	802304c <_read_r>
 8022da0:	2800      	cmp	r0, #0
 8022da2:	bfab      	itete	ge
 8022da4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022da6:	89a3      	ldrhlt	r3, [r4, #12]
 8022da8:	181b      	addge	r3, r3, r0
 8022daa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022dae:	bfac      	ite	ge
 8022db0:	6563      	strge	r3, [r4, #84]	; 0x54
 8022db2:	81a3      	strhlt	r3, [r4, #12]
 8022db4:	bd10      	pop	{r4, pc}

08022db6 <__swrite>:
 8022db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022dba:	461f      	mov	r7, r3
 8022dbc:	898b      	ldrh	r3, [r1, #12]
 8022dbe:	05db      	lsls	r3, r3, #23
 8022dc0:	4605      	mov	r5, r0
 8022dc2:	460c      	mov	r4, r1
 8022dc4:	4616      	mov	r6, r2
 8022dc6:	d505      	bpl.n	8022dd4 <__swrite+0x1e>
 8022dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022dcc:	2302      	movs	r3, #2
 8022dce:	2200      	movs	r2, #0
 8022dd0:	f000 f92a 	bl	8023028 <_lseek_r>
 8022dd4:	89a3      	ldrh	r3, [r4, #12]
 8022dd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022dda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022dde:	81a3      	strh	r3, [r4, #12]
 8022de0:	4632      	mov	r2, r6
 8022de2:	463b      	mov	r3, r7
 8022de4:	4628      	mov	r0, r5
 8022de6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022dea:	f000 b951 	b.w	8023090 <_write_r>

08022dee <__sseek>:
 8022dee:	b510      	push	{r4, lr}
 8022df0:	460c      	mov	r4, r1
 8022df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022df6:	f000 f917 	bl	8023028 <_lseek_r>
 8022dfa:	1c43      	adds	r3, r0, #1
 8022dfc:	89a3      	ldrh	r3, [r4, #12]
 8022dfe:	bf15      	itete	ne
 8022e00:	6560      	strne	r0, [r4, #84]	; 0x54
 8022e02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022e06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022e0a:	81a3      	strheq	r3, [r4, #12]
 8022e0c:	bf18      	it	ne
 8022e0e:	81a3      	strhne	r3, [r4, #12]
 8022e10:	bd10      	pop	{r4, pc}

08022e12 <__sclose>:
 8022e12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022e16:	f000 b8a1 	b.w	8022f5c <_close_r>

08022e1a <memcmp>:
 8022e1a:	b510      	push	{r4, lr}
 8022e1c:	3901      	subs	r1, #1
 8022e1e:	4402      	add	r2, r0
 8022e20:	4290      	cmp	r0, r2
 8022e22:	d101      	bne.n	8022e28 <memcmp+0xe>
 8022e24:	2000      	movs	r0, #0
 8022e26:	e005      	b.n	8022e34 <memcmp+0x1a>
 8022e28:	7803      	ldrb	r3, [r0, #0]
 8022e2a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022e2e:	42a3      	cmp	r3, r4
 8022e30:	d001      	beq.n	8022e36 <memcmp+0x1c>
 8022e32:	1b18      	subs	r0, r3, r4
 8022e34:	bd10      	pop	{r4, pc}
 8022e36:	3001      	adds	r0, #1
 8022e38:	e7f2      	b.n	8022e20 <memcmp+0x6>

08022e3a <memmove>:
 8022e3a:	4288      	cmp	r0, r1
 8022e3c:	b510      	push	{r4, lr}
 8022e3e:	eb01 0402 	add.w	r4, r1, r2
 8022e42:	d902      	bls.n	8022e4a <memmove+0x10>
 8022e44:	4284      	cmp	r4, r0
 8022e46:	4623      	mov	r3, r4
 8022e48:	d807      	bhi.n	8022e5a <memmove+0x20>
 8022e4a:	1e43      	subs	r3, r0, #1
 8022e4c:	42a1      	cmp	r1, r4
 8022e4e:	d008      	beq.n	8022e62 <memmove+0x28>
 8022e50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8022e54:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022e58:	e7f8      	b.n	8022e4c <memmove+0x12>
 8022e5a:	4402      	add	r2, r0
 8022e5c:	4601      	mov	r1, r0
 8022e5e:	428a      	cmp	r2, r1
 8022e60:	d100      	bne.n	8022e64 <memmove+0x2a>
 8022e62:	bd10      	pop	{r4, pc}
 8022e64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022e68:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022e6c:	e7f7      	b.n	8022e5e <memmove+0x24>

08022e6e <memset>:
 8022e6e:	4402      	add	r2, r0
 8022e70:	4603      	mov	r3, r0
 8022e72:	4293      	cmp	r3, r2
 8022e74:	d100      	bne.n	8022e78 <memset+0xa>
 8022e76:	4770      	bx	lr
 8022e78:	f803 1b01 	strb.w	r1, [r3], #1
 8022e7c:	e7f9      	b.n	8022e72 <memset+0x4>

08022e7e <strncpy>:
 8022e7e:	b510      	push	{r4, lr}
 8022e80:	3901      	subs	r1, #1
 8022e82:	4603      	mov	r3, r0
 8022e84:	b132      	cbz	r2, 8022e94 <strncpy+0x16>
 8022e86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022e8a:	f803 4b01 	strb.w	r4, [r3], #1
 8022e8e:	3a01      	subs	r2, #1
 8022e90:	2c00      	cmp	r4, #0
 8022e92:	d1f7      	bne.n	8022e84 <strncpy+0x6>
 8022e94:	441a      	add	r2, r3
 8022e96:	2100      	movs	r1, #0
 8022e98:	4293      	cmp	r3, r2
 8022e9a:	d100      	bne.n	8022e9e <strncpy+0x20>
 8022e9c:	bd10      	pop	{r4, pc}
 8022e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8022ea2:	e7f9      	b.n	8022e98 <strncpy+0x1a>

08022ea4 <strtok>:
 8022ea4:	4b16      	ldr	r3, [pc, #88]	; (8022f00 <strtok+0x5c>)
 8022ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022ea8:	681e      	ldr	r6, [r3, #0]
 8022eaa:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8022eac:	4605      	mov	r5, r0
 8022eae:	b9fc      	cbnz	r4, 8022ef0 <strtok+0x4c>
 8022eb0:	2050      	movs	r0, #80	; 0x50
 8022eb2:	9101      	str	r1, [sp, #4]
 8022eb4:	f7ff fd92 	bl	80229dc <malloc>
 8022eb8:	9901      	ldr	r1, [sp, #4]
 8022eba:	6470      	str	r0, [r6, #68]	; 0x44
 8022ebc:	4602      	mov	r2, r0
 8022ebe:	b920      	cbnz	r0, 8022eca <strtok+0x26>
 8022ec0:	4b10      	ldr	r3, [pc, #64]	; (8022f04 <strtok+0x60>)
 8022ec2:	4811      	ldr	r0, [pc, #68]	; (8022f08 <strtok+0x64>)
 8022ec4:	215b      	movs	r1, #91	; 0x5b
 8022ec6:	f000 f931 	bl	802312c <__assert_func>
 8022eca:	e9c0 4400 	strd	r4, r4, [r0]
 8022ece:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8022ed2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8022ed6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8022eda:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8022ede:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8022ee2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8022ee6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8022eea:	6184      	str	r4, [r0, #24]
 8022eec:	7704      	strb	r4, [r0, #28]
 8022eee:	6244      	str	r4, [r0, #36]	; 0x24
 8022ef0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8022ef2:	2301      	movs	r3, #1
 8022ef4:	4628      	mov	r0, r5
 8022ef6:	b002      	add	sp, #8
 8022ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022efc:	f000 b806 	b.w	8022f0c <__strtok_r>
 8022f00:	20000190 	.word	0x20000190
 8022f04:	080285dc 	.word	0x080285dc
 8022f08:	0802864b 	.word	0x0802864b

08022f0c <__strtok_r>:
 8022f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022f0e:	b908      	cbnz	r0, 8022f14 <__strtok_r+0x8>
 8022f10:	6810      	ldr	r0, [r2, #0]
 8022f12:	b188      	cbz	r0, 8022f38 <__strtok_r+0x2c>
 8022f14:	4604      	mov	r4, r0
 8022f16:	4620      	mov	r0, r4
 8022f18:	f814 5b01 	ldrb.w	r5, [r4], #1
 8022f1c:	460f      	mov	r7, r1
 8022f1e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8022f22:	b91e      	cbnz	r6, 8022f2c <__strtok_r+0x20>
 8022f24:	b965      	cbnz	r5, 8022f40 <__strtok_r+0x34>
 8022f26:	6015      	str	r5, [r2, #0]
 8022f28:	4628      	mov	r0, r5
 8022f2a:	e005      	b.n	8022f38 <__strtok_r+0x2c>
 8022f2c:	42b5      	cmp	r5, r6
 8022f2e:	d1f6      	bne.n	8022f1e <__strtok_r+0x12>
 8022f30:	2b00      	cmp	r3, #0
 8022f32:	d1f0      	bne.n	8022f16 <__strtok_r+0xa>
 8022f34:	6014      	str	r4, [r2, #0]
 8022f36:	7003      	strb	r3, [r0, #0]
 8022f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022f3a:	461c      	mov	r4, r3
 8022f3c:	e00c      	b.n	8022f58 <__strtok_r+0x4c>
 8022f3e:	b915      	cbnz	r5, 8022f46 <__strtok_r+0x3a>
 8022f40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022f44:	460e      	mov	r6, r1
 8022f46:	f816 5b01 	ldrb.w	r5, [r6], #1
 8022f4a:	42ab      	cmp	r3, r5
 8022f4c:	d1f7      	bne.n	8022f3e <__strtok_r+0x32>
 8022f4e:	2b00      	cmp	r3, #0
 8022f50:	d0f3      	beq.n	8022f3a <__strtok_r+0x2e>
 8022f52:	2300      	movs	r3, #0
 8022f54:	f804 3c01 	strb.w	r3, [r4, #-1]
 8022f58:	6014      	str	r4, [r2, #0]
 8022f5a:	e7ed      	b.n	8022f38 <__strtok_r+0x2c>

08022f5c <_close_r>:
 8022f5c:	b538      	push	{r3, r4, r5, lr}
 8022f5e:	4d06      	ldr	r5, [pc, #24]	; (8022f78 <_close_r+0x1c>)
 8022f60:	2300      	movs	r3, #0
 8022f62:	4604      	mov	r4, r0
 8022f64:	4608      	mov	r0, r1
 8022f66:	602b      	str	r3, [r5, #0]
 8022f68:	f7e1 f8f5 	bl	8004156 <_close>
 8022f6c:	1c43      	adds	r3, r0, #1
 8022f6e:	d102      	bne.n	8022f76 <_close_r+0x1a>
 8022f70:	682b      	ldr	r3, [r5, #0]
 8022f72:	b103      	cbz	r3, 8022f76 <_close_r+0x1a>
 8022f74:	6023      	str	r3, [r4, #0]
 8022f76:	bd38      	pop	{r3, r4, r5, pc}
 8022f78:	20025480 	.word	0x20025480

08022f7c <_reclaim_reent>:
 8022f7c:	4b29      	ldr	r3, [pc, #164]	; (8023024 <_reclaim_reent+0xa8>)
 8022f7e:	681b      	ldr	r3, [r3, #0]
 8022f80:	4283      	cmp	r3, r0
 8022f82:	b570      	push	{r4, r5, r6, lr}
 8022f84:	4604      	mov	r4, r0
 8022f86:	d04b      	beq.n	8023020 <_reclaim_reent+0xa4>
 8022f88:	69c3      	ldr	r3, [r0, #28]
 8022f8a:	b143      	cbz	r3, 8022f9e <_reclaim_reent+0x22>
 8022f8c:	68db      	ldr	r3, [r3, #12]
 8022f8e:	2b00      	cmp	r3, #0
 8022f90:	d144      	bne.n	802301c <_reclaim_reent+0xa0>
 8022f92:	69e3      	ldr	r3, [r4, #28]
 8022f94:	6819      	ldr	r1, [r3, #0]
 8022f96:	b111      	cbz	r1, 8022f9e <_reclaim_reent+0x22>
 8022f98:	4620      	mov	r0, r4
 8022f9a:	f000 f8e5 	bl	8023168 <_free_r>
 8022f9e:	6961      	ldr	r1, [r4, #20]
 8022fa0:	b111      	cbz	r1, 8022fa8 <_reclaim_reent+0x2c>
 8022fa2:	4620      	mov	r0, r4
 8022fa4:	f000 f8e0 	bl	8023168 <_free_r>
 8022fa8:	69e1      	ldr	r1, [r4, #28]
 8022faa:	b111      	cbz	r1, 8022fb2 <_reclaim_reent+0x36>
 8022fac:	4620      	mov	r0, r4
 8022fae:	f000 f8db 	bl	8023168 <_free_r>
 8022fb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8022fb4:	b111      	cbz	r1, 8022fbc <_reclaim_reent+0x40>
 8022fb6:	4620      	mov	r0, r4
 8022fb8:	f000 f8d6 	bl	8023168 <_free_r>
 8022fbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022fbe:	b111      	cbz	r1, 8022fc6 <_reclaim_reent+0x4a>
 8022fc0:	4620      	mov	r0, r4
 8022fc2:	f000 f8d1 	bl	8023168 <_free_r>
 8022fc6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8022fc8:	b111      	cbz	r1, 8022fd0 <_reclaim_reent+0x54>
 8022fca:	4620      	mov	r0, r4
 8022fcc:	f000 f8cc 	bl	8023168 <_free_r>
 8022fd0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8022fd2:	b111      	cbz	r1, 8022fda <_reclaim_reent+0x5e>
 8022fd4:	4620      	mov	r0, r4
 8022fd6:	f000 f8c7 	bl	8023168 <_free_r>
 8022fda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8022fdc:	b111      	cbz	r1, 8022fe4 <_reclaim_reent+0x68>
 8022fde:	4620      	mov	r0, r4
 8022fe0:	f000 f8c2 	bl	8023168 <_free_r>
 8022fe4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8022fe6:	b111      	cbz	r1, 8022fee <_reclaim_reent+0x72>
 8022fe8:	4620      	mov	r0, r4
 8022fea:	f000 f8bd 	bl	8023168 <_free_r>
 8022fee:	6a23      	ldr	r3, [r4, #32]
 8022ff0:	b1b3      	cbz	r3, 8023020 <_reclaim_reent+0xa4>
 8022ff2:	4620      	mov	r0, r4
 8022ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8022ff8:	4718      	bx	r3
 8022ffa:	5949      	ldr	r1, [r1, r5]
 8022ffc:	b941      	cbnz	r1, 8023010 <_reclaim_reent+0x94>
 8022ffe:	3504      	adds	r5, #4
 8023000:	69e3      	ldr	r3, [r4, #28]
 8023002:	2d80      	cmp	r5, #128	; 0x80
 8023004:	68d9      	ldr	r1, [r3, #12]
 8023006:	d1f8      	bne.n	8022ffa <_reclaim_reent+0x7e>
 8023008:	4620      	mov	r0, r4
 802300a:	f000 f8ad 	bl	8023168 <_free_r>
 802300e:	e7c0      	b.n	8022f92 <_reclaim_reent+0x16>
 8023010:	680e      	ldr	r6, [r1, #0]
 8023012:	4620      	mov	r0, r4
 8023014:	f000 f8a8 	bl	8023168 <_free_r>
 8023018:	4631      	mov	r1, r6
 802301a:	e7ef      	b.n	8022ffc <_reclaim_reent+0x80>
 802301c:	2500      	movs	r5, #0
 802301e:	e7ef      	b.n	8023000 <_reclaim_reent+0x84>
 8023020:	bd70      	pop	{r4, r5, r6, pc}
 8023022:	bf00      	nop
 8023024:	20000190 	.word	0x20000190

08023028 <_lseek_r>:
 8023028:	b538      	push	{r3, r4, r5, lr}
 802302a:	4d07      	ldr	r5, [pc, #28]	; (8023048 <_lseek_r+0x20>)
 802302c:	4604      	mov	r4, r0
 802302e:	4608      	mov	r0, r1
 8023030:	4611      	mov	r1, r2
 8023032:	2200      	movs	r2, #0
 8023034:	602a      	str	r2, [r5, #0]
 8023036:	461a      	mov	r2, r3
 8023038:	f7e1 f8b4 	bl	80041a4 <_lseek>
 802303c:	1c43      	adds	r3, r0, #1
 802303e:	d102      	bne.n	8023046 <_lseek_r+0x1e>
 8023040:	682b      	ldr	r3, [r5, #0]
 8023042:	b103      	cbz	r3, 8023046 <_lseek_r+0x1e>
 8023044:	6023      	str	r3, [r4, #0]
 8023046:	bd38      	pop	{r3, r4, r5, pc}
 8023048:	20025480 	.word	0x20025480

0802304c <_read_r>:
 802304c:	b538      	push	{r3, r4, r5, lr}
 802304e:	4d07      	ldr	r5, [pc, #28]	; (802306c <_read_r+0x20>)
 8023050:	4604      	mov	r4, r0
 8023052:	4608      	mov	r0, r1
 8023054:	4611      	mov	r1, r2
 8023056:	2200      	movs	r2, #0
 8023058:	602a      	str	r2, [r5, #0]
 802305a:	461a      	mov	r2, r3
 802305c:	f7e1 f842 	bl	80040e4 <_read>
 8023060:	1c43      	adds	r3, r0, #1
 8023062:	d102      	bne.n	802306a <_read_r+0x1e>
 8023064:	682b      	ldr	r3, [r5, #0]
 8023066:	b103      	cbz	r3, 802306a <_read_r+0x1e>
 8023068:	6023      	str	r3, [r4, #0]
 802306a:	bd38      	pop	{r3, r4, r5, pc}
 802306c:	20025480 	.word	0x20025480

08023070 <_sbrk_r>:
 8023070:	b538      	push	{r3, r4, r5, lr}
 8023072:	4d06      	ldr	r5, [pc, #24]	; (802308c <_sbrk_r+0x1c>)
 8023074:	2300      	movs	r3, #0
 8023076:	4604      	mov	r4, r0
 8023078:	4608      	mov	r0, r1
 802307a:	602b      	str	r3, [r5, #0]
 802307c:	f7e1 f8a0 	bl	80041c0 <_sbrk>
 8023080:	1c43      	adds	r3, r0, #1
 8023082:	d102      	bne.n	802308a <_sbrk_r+0x1a>
 8023084:	682b      	ldr	r3, [r5, #0]
 8023086:	b103      	cbz	r3, 802308a <_sbrk_r+0x1a>
 8023088:	6023      	str	r3, [r4, #0]
 802308a:	bd38      	pop	{r3, r4, r5, pc}
 802308c:	20025480 	.word	0x20025480

08023090 <_write_r>:
 8023090:	b538      	push	{r3, r4, r5, lr}
 8023092:	4d07      	ldr	r5, [pc, #28]	; (80230b0 <_write_r+0x20>)
 8023094:	4604      	mov	r4, r0
 8023096:	4608      	mov	r0, r1
 8023098:	4611      	mov	r1, r2
 802309a:	2200      	movs	r2, #0
 802309c:	602a      	str	r2, [r5, #0]
 802309e:	461a      	mov	r2, r3
 80230a0:	f7e1 f83d 	bl	800411e <_write>
 80230a4:	1c43      	adds	r3, r0, #1
 80230a6:	d102      	bne.n	80230ae <_write_r+0x1e>
 80230a8:	682b      	ldr	r3, [r5, #0]
 80230aa:	b103      	cbz	r3, 80230ae <_write_r+0x1e>
 80230ac:	6023      	str	r3, [r4, #0]
 80230ae:	bd38      	pop	{r3, r4, r5, pc}
 80230b0:	20025480 	.word	0x20025480

080230b4 <__libc_init_array>:
 80230b4:	b570      	push	{r4, r5, r6, lr}
 80230b6:	4d0d      	ldr	r5, [pc, #52]	; (80230ec <__libc_init_array+0x38>)
 80230b8:	4c0d      	ldr	r4, [pc, #52]	; (80230f0 <__libc_init_array+0x3c>)
 80230ba:	1b64      	subs	r4, r4, r5
 80230bc:	10a4      	asrs	r4, r4, #2
 80230be:	2600      	movs	r6, #0
 80230c0:	42a6      	cmp	r6, r4
 80230c2:	d109      	bne.n	80230d8 <__libc_init_array+0x24>
 80230c4:	4d0b      	ldr	r5, [pc, #44]	; (80230f4 <__libc_init_array+0x40>)
 80230c6:	4c0c      	ldr	r4, [pc, #48]	; (80230f8 <__libc_init_array+0x44>)
 80230c8:	f000 ff22 	bl	8023f10 <_init>
 80230cc:	1b64      	subs	r4, r4, r5
 80230ce:	10a4      	asrs	r4, r4, #2
 80230d0:	2600      	movs	r6, #0
 80230d2:	42a6      	cmp	r6, r4
 80230d4:	d105      	bne.n	80230e2 <__libc_init_array+0x2e>
 80230d6:	bd70      	pop	{r4, r5, r6, pc}
 80230d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80230dc:	4798      	blx	r3
 80230de:	3601      	adds	r6, #1
 80230e0:	e7ee      	b.n	80230c0 <__libc_init_array+0xc>
 80230e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80230e6:	4798      	blx	r3
 80230e8:	3601      	adds	r6, #1
 80230ea:	e7f2      	b.n	80230d2 <__libc_init_array+0x1e>
 80230ec:	0802871c 	.word	0x0802871c
 80230f0:	0802871c 	.word	0x0802871c
 80230f4:	0802871c 	.word	0x0802871c
 80230f8:	08028720 	.word	0x08028720

080230fc <__retarget_lock_acquire_recursive>:
 80230fc:	4770      	bx	lr

080230fe <__retarget_lock_release_recursive>:
 80230fe:	4770      	bx	lr

08023100 <strcpy>:
 8023100:	4603      	mov	r3, r0
 8023102:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023106:	f803 2b01 	strb.w	r2, [r3], #1
 802310a:	2a00      	cmp	r2, #0
 802310c:	d1f9      	bne.n	8023102 <strcpy+0x2>
 802310e:	4770      	bx	lr

08023110 <memcpy>:
 8023110:	440a      	add	r2, r1
 8023112:	4291      	cmp	r1, r2
 8023114:	f100 33ff 	add.w	r3, r0, #4294967295
 8023118:	d100      	bne.n	802311c <memcpy+0xc>
 802311a:	4770      	bx	lr
 802311c:	b510      	push	{r4, lr}
 802311e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023122:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023126:	4291      	cmp	r1, r2
 8023128:	d1f9      	bne.n	802311e <memcpy+0xe>
 802312a:	bd10      	pop	{r4, pc}

0802312c <__assert_func>:
 802312c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802312e:	4614      	mov	r4, r2
 8023130:	461a      	mov	r2, r3
 8023132:	4b09      	ldr	r3, [pc, #36]	; (8023158 <__assert_func+0x2c>)
 8023134:	681b      	ldr	r3, [r3, #0]
 8023136:	4605      	mov	r5, r0
 8023138:	68d8      	ldr	r0, [r3, #12]
 802313a:	b14c      	cbz	r4, 8023150 <__assert_func+0x24>
 802313c:	4b07      	ldr	r3, [pc, #28]	; (802315c <__assert_func+0x30>)
 802313e:	9100      	str	r1, [sp, #0]
 8023140:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023144:	4906      	ldr	r1, [pc, #24]	; (8023160 <__assert_func+0x34>)
 8023146:	462b      	mov	r3, r5
 8023148:	f000 fd34 	bl	8023bb4 <fiprintf>
 802314c:	f000 fdda 	bl	8023d04 <abort>
 8023150:	4b04      	ldr	r3, [pc, #16]	; (8023164 <__assert_func+0x38>)
 8023152:	461c      	mov	r4, r3
 8023154:	e7f3      	b.n	802313e <__assert_func+0x12>
 8023156:	bf00      	nop
 8023158:	20000190 	.word	0x20000190
 802315c:	080286a5 	.word	0x080286a5
 8023160:	080286b2 	.word	0x080286b2
 8023164:	080286e0 	.word	0x080286e0

08023168 <_free_r>:
 8023168:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802316a:	2900      	cmp	r1, #0
 802316c:	d044      	beq.n	80231f8 <_free_r+0x90>
 802316e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023172:	9001      	str	r0, [sp, #4]
 8023174:	2b00      	cmp	r3, #0
 8023176:	f1a1 0404 	sub.w	r4, r1, #4
 802317a:	bfb8      	it	lt
 802317c:	18e4      	addlt	r4, r4, r3
 802317e:	f7ff fcdd 	bl	8022b3c <__malloc_lock>
 8023182:	4a1e      	ldr	r2, [pc, #120]	; (80231fc <_free_r+0x94>)
 8023184:	9801      	ldr	r0, [sp, #4]
 8023186:	6813      	ldr	r3, [r2, #0]
 8023188:	b933      	cbnz	r3, 8023198 <_free_r+0x30>
 802318a:	6063      	str	r3, [r4, #4]
 802318c:	6014      	str	r4, [r2, #0]
 802318e:	b003      	add	sp, #12
 8023190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023194:	f7ff bcd8 	b.w	8022b48 <__malloc_unlock>
 8023198:	42a3      	cmp	r3, r4
 802319a:	d908      	bls.n	80231ae <_free_r+0x46>
 802319c:	6825      	ldr	r5, [r4, #0]
 802319e:	1961      	adds	r1, r4, r5
 80231a0:	428b      	cmp	r3, r1
 80231a2:	bf01      	itttt	eq
 80231a4:	6819      	ldreq	r1, [r3, #0]
 80231a6:	685b      	ldreq	r3, [r3, #4]
 80231a8:	1949      	addeq	r1, r1, r5
 80231aa:	6021      	streq	r1, [r4, #0]
 80231ac:	e7ed      	b.n	802318a <_free_r+0x22>
 80231ae:	461a      	mov	r2, r3
 80231b0:	685b      	ldr	r3, [r3, #4]
 80231b2:	b10b      	cbz	r3, 80231b8 <_free_r+0x50>
 80231b4:	42a3      	cmp	r3, r4
 80231b6:	d9fa      	bls.n	80231ae <_free_r+0x46>
 80231b8:	6811      	ldr	r1, [r2, #0]
 80231ba:	1855      	adds	r5, r2, r1
 80231bc:	42a5      	cmp	r5, r4
 80231be:	d10b      	bne.n	80231d8 <_free_r+0x70>
 80231c0:	6824      	ldr	r4, [r4, #0]
 80231c2:	4421      	add	r1, r4
 80231c4:	1854      	adds	r4, r2, r1
 80231c6:	42a3      	cmp	r3, r4
 80231c8:	6011      	str	r1, [r2, #0]
 80231ca:	d1e0      	bne.n	802318e <_free_r+0x26>
 80231cc:	681c      	ldr	r4, [r3, #0]
 80231ce:	685b      	ldr	r3, [r3, #4]
 80231d0:	6053      	str	r3, [r2, #4]
 80231d2:	440c      	add	r4, r1
 80231d4:	6014      	str	r4, [r2, #0]
 80231d6:	e7da      	b.n	802318e <_free_r+0x26>
 80231d8:	d902      	bls.n	80231e0 <_free_r+0x78>
 80231da:	230c      	movs	r3, #12
 80231dc:	6003      	str	r3, [r0, #0]
 80231de:	e7d6      	b.n	802318e <_free_r+0x26>
 80231e0:	6825      	ldr	r5, [r4, #0]
 80231e2:	1961      	adds	r1, r4, r5
 80231e4:	428b      	cmp	r3, r1
 80231e6:	bf04      	itt	eq
 80231e8:	6819      	ldreq	r1, [r3, #0]
 80231ea:	685b      	ldreq	r3, [r3, #4]
 80231ec:	6063      	str	r3, [r4, #4]
 80231ee:	bf04      	itt	eq
 80231f0:	1949      	addeq	r1, r1, r5
 80231f2:	6021      	streq	r1, [r4, #0]
 80231f4:	6054      	str	r4, [r2, #4]
 80231f6:	e7ca      	b.n	802318e <_free_r+0x26>
 80231f8:	b003      	add	sp, #12
 80231fa:	bd30      	pop	{r4, r5, pc}
 80231fc:	2002533c 	.word	0x2002533c

08023200 <__ssputs_r>:
 8023200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023204:	688e      	ldr	r6, [r1, #8]
 8023206:	461f      	mov	r7, r3
 8023208:	42be      	cmp	r6, r7
 802320a:	680b      	ldr	r3, [r1, #0]
 802320c:	4682      	mov	sl, r0
 802320e:	460c      	mov	r4, r1
 8023210:	4690      	mov	r8, r2
 8023212:	d82c      	bhi.n	802326e <__ssputs_r+0x6e>
 8023214:	898a      	ldrh	r2, [r1, #12]
 8023216:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802321a:	d026      	beq.n	802326a <__ssputs_r+0x6a>
 802321c:	6965      	ldr	r5, [r4, #20]
 802321e:	6909      	ldr	r1, [r1, #16]
 8023220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023224:	eba3 0901 	sub.w	r9, r3, r1
 8023228:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802322c:	1c7b      	adds	r3, r7, #1
 802322e:	444b      	add	r3, r9
 8023230:	106d      	asrs	r5, r5, #1
 8023232:	429d      	cmp	r5, r3
 8023234:	bf38      	it	cc
 8023236:	461d      	movcc	r5, r3
 8023238:	0553      	lsls	r3, r2, #21
 802323a:	d527      	bpl.n	802328c <__ssputs_r+0x8c>
 802323c:	4629      	mov	r1, r5
 802323e:	f7ff fbfd 	bl	8022a3c <_malloc_r>
 8023242:	4606      	mov	r6, r0
 8023244:	b360      	cbz	r0, 80232a0 <__ssputs_r+0xa0>
 8023246:	6921      	ldr	r1, [r4, #16]
 8023248:	464a      	mov	r2, r9
 802324a:	f7ff ff61 	bl	8023110 <memcpy>
 802324e:	89a3      	ldrh	r3, [r4, #12]
 8023250:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8023254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023258:	81a3      	strh	r3, [r4, #12]
 802325a:	6126      	str	r6, [r4, #16]
 802325c:	6165      	str	r5, [r4, #20]
 802325e:	444e      	add	r6, r9
 8023260:	eba5 0509 	sub.w	r5, r5, r9
 8023264:	6026      	str	r6, [r4, #0]
 8023266:	60a5      	str	r5, [r4, #8]
 8023268:	463e      	mov	r6, r7
 802326a:	42be      	cmp	r6, r7
 802326c:	d900      	bls.n	8023270 <__ssputs_r+0x70>
 802326e:	463e      	mov	r6, r7
 8023270:	6820      	ldr	r0, [r4, #0]
 8023272:	4632      	mov	r2, r6
 8023274:	4641      	mov	r1, r8
 8023276:	f7ff fde0 	bl	8022e3a <memmove>
 802327a:	68a3      	ldr	r3, [r4, #8]
 802327c:	1b9b      	subs	r3, r3, r6
 802327e:	60a3      	str	r3, [r4, #8]
 8023280:	6823      	ldr	r3, [r4, #0]
 8023282:	4433      	add	r3, r6
 8023284:	6023      	str	r3, [r4, #0]
 8023286:	2000      	movs	r0, #0
 8023288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802328c:	462a      	mov	r2, r5
 802328e:	f000 fd40 	bl	8023d12 <_realloc_r>
 8023292:	4606      	mov	r6, r0
 8023294:	2800      	cmp	r0, #0
 8023296:	d1e0      	bne.n	802325a <__ssputs_r+0x5a>
 8023298:	6921      	ldr	r1, [r4, #16]
 802329a:	4650      	mov	r0, sl
 802329c:	f7ff ff64 	bl	8023168 <_free_r>
 80232a0:	230c      	movs	r3, #12
 80232a2:	f8ca 3000 	str.w	r3, [sl]
 80232a6:	89a3      	ldrh	r3, [r4, #12]
 80232a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80232ac:	81a3      	strh	r3, [r4, #12]
 80232ae:	f04f 30ff 	mov.w	r0, #4294967295
 80232b2:	e7e9      	b.n	8023288 <__ssputs_r+0x88>

080232b4 <_svfiprintf_r>:
 80232b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232b8:	4698      	mov	r8, r3
 80232ba:	898b      	ldrh	r3, [r1, #12]
 80232bc:	061b      	lsls	r3, r3, #24
 80232be:	b09d      	sub	sp, #116	; 0x74
 80232c0:	4607      	mov	r7, r0
 80232c2:	460d      	mov	r5, r1
 80232c4:	4614      	mov	r4, r2
 80232c6:	d50e      	bpl.n	80232e6 <_svfiprintf_r+0x32>
 80232c8:	690b      	ldr	r3, [r1, #16]
 80232ca:	b963      	cbnz	r3, 80232e6 <_svfiprintf_r+0x32>
 80232cc:	2140      	movs	r1, #64	; 0x40
 80232ce:	f7ff fbb5 	bl	8022a3c <_malloc_r>
 80232d2:	6028      	str	r0, [r5, #0]
 80232d4:	6128      	str	r0, [r5, #16]
 80232d6:	b920      	cbnz	r0, 80232e2 <_svfiprintf_r+0x2e>
 80232d8:	230c      	movs	r3, #12
 80232da:	603b      	str	r3, [r7, #0]
 80232dc:	f04f 30ff 	mov.w	r0, #4294967295
 80232e0:	e0d0      	b.n	8023484 <_svfiprintf_r+0x1d0>
 80232e2:	2340      	movs	r3, #64	; 0x40
 80232e4:	616b      	str	r3, [r5, #20]
 80232e6:	2300      	movs	r3, #0
 80232e8:	9309      	str	r3, [sp, #36]	; 0x24
 80232ea:	2320      	movs	r3, #32
 80232ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80232f4:	2330      	movs	r3, #48	; 0x30
 80232f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802349c <_svfiprintf_r+0x1e8>
 80232fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80232fe:	f04f 0901 	mov.w	r9, #1
 8023302:	4623      	mov	r3, r4
 8023304:	469a      	mov	sl, r3
 8023306:	f813 2b01 	ldrb.w	r2, [r3], #1
 802330a:	b10a      	cbz	r2, 8023310 <_svfiprintf_r+0x5c>
 802330c:	2a25      	cmp	r2, #37	; 0x25
 802330e:	d1f9      	bne.n	8023304 <_svfiprintf_r+0x50>
 8023310:	ebba 0b04 	subs.w	fp, sl, r4
 8023314:	d00b      	beq.n	802332e <_svfiprintf_r+0x7a>
 8023316:	465b      	mov	r3, fp
 8023318:	4622      	mov	r2, r4
 802331a:	4629      	mov	r1, r5
 802331c:	4638      	mov	r0, r7
 802331e:	f7ff ff6f 	bl	8023200 <__ssputs_r>
 8023322:	3001      	adds	r0, #1
 8023324:	f000 80a9 	beq.w	802347a <_svfiprintf_r+0x1c6>
 8023328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802332a:	445a      	add	r2, fp
 802332c:	9209      	str	r2, [sp, #36]	; 0x24
 802332e:	f89a 3000 	ldrb.w	r3, [sl]
 8023332:	2b00      	cmp	r3, #0
 8023334:	f000 80a1 	beq.w	802347a <_svfiprintf_r+0x1c6>
 8023338:	2300      	movs	r3, #0
 802333a:	f04f 32ff 	mov.w	r2, #4294967295
 802333e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023342:	f10a 0a01 	add.w	sl, sl, #1
 8023346:	9304      	str	r3, [sp, #16]
 8023348:	9307      	str	r3, [sp, #28]
 802334a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802334e:	931a      	str	r3, [sp, #104]	; 0x68
 8023350:	4654      	mov	r4, sl
 8023352:	2205      	movs	r2, #5
 8023354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023358:	4850      	ldr	r0, [pc, #320]	; (802349c <_svfiprintf_r+0x1e8>)
 802335a:	f7dc ff71 	bl	8000240 <memchr>
 802335e:	9a04      	ldr	r2, [sp, #16]
 8023360:	b9d8      	cbnz	r0, 802339a <_svfiprintf_r+0xe6>
 8023362:	06d0      	lsls	r0, r2, #27
 8023364:	bf44      	itt	mi
 8023366:	2320      	movmi	r3, #32
 8023368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802336c:	0711      	lsls	r1, r2, #28
 802336e:	bf44      	itt	mi
 8023370:	232b      	movmi	r3, #43	; 0x2b
 8023372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023376:	f89a 3000 	ldrb.w	r3, [sl]
 802337a:	2b2a      	cmp	r3, #42	; 0x2a
 802337c:	d015      	beq.n	80233aa <_svfiprintf_r+0xf6>
 802337e:	9a07      	ldr	r2, [sp, #28]
 8023380:	4654      	mov	r4, sl
 8023382:	2000      	movs	r0, #0
 8023384:	f04f 0c0a 	mov.w	ip, #10
 8023388:	4621      	mov	r1, r4
 802338a:	f811 3b01 	ldrb.w	r3, [r1], #1
 802338e:	3b30      	subs	r3, #48	; 0x30
 8023390:	2b09      	cmp	r3, #9
 8023392:	d94d      	bls.n	8023430 <_svfiprintf_r+0x17c>
 8023394:	b1b0      	cbz	r0, 80233c4 <_svfiprintf_r+0x110>
 8023396:	9207      	str	r2, [sp, #28]
 8023398:	e014      	b.n	80233c4 <_svfiprintf_r+0x110>
 802339a:	eba0 0308 	sub.w	r3, r0, r8
 802339e:	fa09 f303 	lsl.w	r3, r9, r3
 80233a2:	4313      	orrs	r3, r2
 80233a4:	9304      	str	r3, [sp, #16]
 80233a6:	46a2      	mov	sl, r4
 80233a8:	e7d2      	b.n	8023350 <_svfiprintf_r+0x9c>
 80233aa:	9b03      	ldr	r3, [sp, #12]
 80233ac:	1d19      	adds	r1, r3, #4
 80233ae:	681b      	ldr	r3, [r3, #0]
 80233b0:	9103      	str	r1, [sp, #12]
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	bfbb      	ittet	lt
 80233b6:	425b      	neglt	r3, r3
 80233b8:	f042 0202 	orrlt.w	r2, r2, #2
 80233bc:	9307      	strge	r3, [sp, #28]
 80233be:	9307      	strlt	r3, [sp, #28]
 80233c0:	bfb8      	it	lt
 80233c2:	9204      	strlt	r2, [sp, #16]
 80233c4:	7823      	ldrb	r3, [r4, #0]
 80233c6:	2b2e      	cmp	r3, #46	; 0x2e
 80233c8:	d10c      	bne.n	80233e4 <_svfiprintf_r+0x130>
 80233ca:	7863      	ldrb	r3, [r4, #1]
 80233cc:	2b2a      	cmp	r3, #42	; 0x2a
 80233ce:	d134      	bne.n	802343a <_svfiprintf_r+0x186>
 80233d0:	9b03      	ldr	r3, [sp, #12]
 80233d2:	1d1a      	adds	r2, r3, #4
 80233d4:	681b      	ldr	r3, [r3, #0]
 80233d6:	9203      	str	r2, [sp, #12]
 80233d8:	2b00      	cmp	r3, #0
 80233da:	bfb8      	it	lt
 80233dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80233e0:	3402      	adds	r4, #2
 80233e2:	9305      	str	r3, [sp, #20]
 80233e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80234ac <_svfiprintf_r+0x1f8>
 80233e8:	7821      	ldrb	r1, [r4, #0]
 80233ea:	2203      	movs	r2, #3
 80233ec:	4650      	mov	r0, sl
 80233ee:	f7dc ff27 	bl	8000240 <memchr>
 80233f2:	b138      	cbz	r0, 8023404 <_svfiprintf_r+0x150>
 80233f4:	9b04      	ldr	r3, [sp, #16]
 80233f6:	eba0 000a 	sub.w	r0, r0, sl
 80233fa:	2240      	movs	r2, #64	; 0x40
 80233fc:	4082      	lsls	r2, r0
 80233fe:	4313      	orrs	r3, r2
 8023400:	3401      	adds	r4, #1
 8023402:	9304      	str	r3, [sp, #16]
 8023404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023408:	4825      	ldr	r0, [pc, #148]	; (80234a0 <_svfiprintf_r+0x1ec>)
 802340a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802340e:	2206      	movs	r2, #6
 8023410:	f7dc ff16 	bl	8000240 <memchr>
 8023414:	2800      	cmp	r0, #0
 8023416:	d038      	beq.n	802348a <_svfiprintf_r+0x1d6>
 8023418:	4b22      	ldr	r3, [pc, #136]	; (80234a4 <_svfiprintf_r+0x1f0>)
 802341a:	bb1b      	cbnz	r3, 8023464 <_svfiprintf_r+0x1b0>
 802341c:	9b03      	ldr	r3, [sp, #12]
 802341e:	3307      	adds	r3, #7
 8023420:	f023 0307 	bic.w	r3, r3, #7
 8023424:	3308      	adds	r3, #8
 8023426:	9303      	str	r3, [sp, #12]
 8023428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802342a:	4433      	add	r3, r6
 802342c:	9309      	str	r3, [sp, #36]	; 0x24
 802342e:	e768      	b.n	8023302 <_svfiprintf_r+0x4e>
 8023430:	fb0c 3202 	mla	r2, ip, r2, r3
 8023434:	460c      	mov	r4, r1
 8023436:	2001      	movs	r0, #1
 8023438:	e7a6      	b.n	8023388 <_svfiprintf_r+0xd4>
 802343a:	2300      	movs	r3, #0
 802343c:	3401      	adds	r4, #1
 802343e:	9305      	str	r3, [sp, #20]
 8023440:	4619      	mov	r1, r3
 8023442:	f04f 0c0a 	mov.w	ip, #10
 8023446:	4620      	mov	r0, r4
 8023448:	f810 2b01 	ldrb.w	r2, [r0], #1
 802344c:	3a30      	subs	r2, #48	; 0x30
 802344e:	2a09      	cmp	r2, #9
 8023450:	d903      	bls.n	802345a <_svfiprintf_r+0x1a6>
 8023452:	2b00      	cmp	r3, #0
 8023454:	d0c6      	beq.n	80233e4 <_svfiprintf_r+0x130>
 8023456:	9105      	str	r1, [sp, #20]
 8023458:	e7c4      	b.n	80233e4 <_svfiprintf_r+0x130>
 802345a:	fb0c 2101 	mla	r1, ip, r1, r2
 802345e:	4604      	mov	r4, r0
 8023460:	2301      	movs	r3, #1
 8023462:	e7f0      	b.n	8023446 <_svfiprintf_r+0x192>
 8023464:	ab03      	add	r3, sp, #12
 8023466:	9300      	str	r3, [sp, #0]
 8023468:	462a      	mov	r2, r5
 802346a:	4b0f      	ldr	r3, [pc, #60]	; (80234a8 <_svfiprintf_r+0x1f4>)
 802346c:	a904      	add	r1, sp, #16
 802346e:	4638      	mov	r0, r7
 8023470:	f3af 8000 	nop.w
 8023474:	1c42      	adds	r2, r0, #1
 8023476:	4606      	mov	r6, r0
 8023478:	d1d6      	bne.n	8023428 <_svfiprintf_r+0x174>
 802347a:	89ab      	ldrh	r3, [r5, #12]
 802347c:	065b      	lsls	r3, r3, #25
 802347e:	f53f af2d 	bmi.w	80232dc <_svfiprintf_r+0x28>
 8023482:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023484:	b01d      	add	sp, #116	; 0x74
 8023486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802348a:	ab03      	add	r3, sp, #12
 802348c:	9300      	str	r3, [sp, #0]
 802348e:	462a      	mov	r2, r5
 8023490:	4b05      	ldr	r3, [pc, #20]	; (80234a8 <_svfiprintf_r+0x1f4>)
 8023492:	a904      	add	r1, sp, #16
 8023494:	4638      	mov	r0, r7
 8023496:	f000 f9bd 	bl	8023814 <_printf_i>
 802349a:	e7eb      	b.n	8023474 <_svfiprintf_r+0x1c0>
 802349c:	080286e1 	.word	0x080286e1
 80234a0:	080286eb 	.word	0x080286eb
 80234a4:	00000000 	.word	0x00000000
 80234a8:	08023201 	.word	0x08023201
 80234ac:	080286e7 	.word	0x080286e7

080234b0 <__sfputc_r>:
 80234b0:	6893      	ldr	r3, [r2, #8]
 80234b2:	3b01      	subs	r3, #1
 80234b4:	2b00      	cmp	r3, #0
 80234b6:	b410      	push	{r4}
 80234b8:	6093      	str	r3, [r2, #8]
 80234ba:	da08      	bge.n	80234ce <__sfputc_r+0x1e>
 80234bc:	6994      	ldr	r4, [r2, #24]
 80234be:	42a3      	cmp	r3, r4
 80234c0:	db01      	blt.n	80234c6 <__sfputc_r+0x16>
 80234c2:	290a      	cmp	r1, #10
 80234c4:	d103      	bne.n	80234ce <__sfputc_r+0x1e>
 80234c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234ca:	f000 bb85 	b.w	8023bd8 <__swbuf_r>
 80234ce:	6813      	ldr	r3, [r2, #0]
 80234d0:	1c58      	adds	r0, r3, #1
 80234d2:	6010      	str	r0, [r2, #0]
 80234d4:	7019      	strb	r1, [r3, #0]
 80234d6:	4608      	mov	r0, r1
 80234d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234dc:	4770      	bx	lr

080234de <__sfputs_r>:
 80234de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80234e0:	4606      	mov	r6, r0
 80234e2:	460f      	mov	r7, r1
 80234e4:	4614      	mov	r4, r2
 80234e6:	18d5      	adds	r5, r2, r3
 80234e8:	42ac      	cmp	r4, r5
 80234ea:	d101      	bne.n	80234f0 <__sfputs_r+0x12>
 80234ec:	2000      	movs	r0, #0
 80234ee:	e007      	b.n	8023500 <__sfputs_r+0x22>
 80234f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80234f4:	463a      	mov	r2, r7
 80234f6:	4630      	mov	r0, r6
 80234f8:	f7ff ffda 	bl	80234b0 <__sfputc_r>
 80234fc:	1c43      	adds	r3, r0, #1
 80234fe:	d1f3      	bne.n	80234e8 <__sfputs_r+0xa>
 8023500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023504 <_vfiprintf_r>:
 8023504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023508:	460d      	mov	r5, r1
 802350a:	b09d      	sub	sp, #116	; 0x74
 802350c:	4614      	mov	r4, r2
 802350e:	4698      	mov	r8, r3
 8023510:	4606      	mov	r6, r0
 8023512:	b118      	cbz	r0, 802351c <_vfiprintf_r+0x18>
 8023514:	6a03      	ldr	r3, [r0, #32]
 8023516:	b90b      	cbnz	r3, 802351c <_vfiprintf_r+0x18>
 8023518:	f7ff fbd4 	bl	8022cc4 <__sinit>
 802351c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802351e:	07d9      	lsls	r1, r3, #31
 8023520:	d405      	bmi.n	802352e <_vfiprintf_r+0x2a>
 8023522:	89ab      	ldrh	r3, [r5, #12]
 8023524:	059a      	lsls	r2, r3, #22
 8023526:	d402      	bmi.n	802352e <_vfiprintf_r+0x2a>
 8023528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802352a:	f7ff fde7 	bl	80230fc <__retarget_lock_acquire_recursive>
 802352e:	89ab      	ldrh	r3, [r5, #12]
 8023530:	071b      	lsls	r3, r3, #28
 8023532:	d501      	bpl.n	8023538 <_vfiprintf_r+0x34>
 8023534:	692b      	ldr	r3, [r5, #16]
 8023536:	b99b      	cbnz	r3, 8023560 <_vfiprintf_r+0x5c>
 8023538:	4629      	mov	r1, r5
 802353a:	4630      	mov	r0, r6
 802353c:	f000 fb8a 	bl	8023c54 <__swsetup_r>
 8023540:	b170      	cbz	r0, 8023560 <_vfiprintf_r+0x5c>
 8023542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023544:	07dc      	lsls	r4, r3, #31
 8023546:	d504      	bpl.n	8023552 <_vfiprintf_r+0x4e>
 8023548:	f04f 30ff 	mov.w	r0, #4294967295
 802354c:	b01d      	add	sp, #116	; 0x74
 802354e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023552:	89ab      	ldrh	r3, [r5, #12]
 8023554:	0598      	lsls	r0, r3, #22
 8023556:	d4f7      	bmi.n	8023548 <_vfiprintf_r+0x44>
 8023558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802355a:	f7ff fdd0 	bl	80230fe <__retarget_lock_release_recursive>
 802355e:	e7f3      	b.n	8023548 <_vfiprintf_r+0x44>
 8023560:	2300      	movs	r3, #0
 8023562:	9309      	str	r3, [sp, #36]	; 0x24
 8023564:	2320      	movs	r3, #32
 8023566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802356a:	f8cd 800c 	str.w	r8, [sp, #12]
 802356e:	2330      	movs	r3, #48	; 0x30
 8023570:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8023724 <_vfiprintf_r+0x220>
 8023574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023578:	f04f 0901 	mov.w	r9, #1
 802357c:	4623      	mov	r3, r4
 802357e:	469a      	mov	sl, r3
 8023580:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023584:	b10a      	cbz	r2, 802358a <_vfiprintf_r+0x86>
 8023586:	2a25      	cmp	r2, #37	; 0x25
 8023588:	d1f9      	bne.n	802357e <_vfiprintf_r+0x7a>
 802358a:	ebba 0b04 	subs.w	fp, sl, r4
 802358e:	d00b      	beq.n	80235a8 <_vfiprintf_r+0xa4>
 8023590:	465b      	mov	r3, fp
 8023592:	4622      	mov	r2, r4
 8023594:	4629      	mov	r1, r5
 8023596:	4630      	mov	r0, r6
 8023598:	f7ff ffa1 	bl	80234de <__sfputs_r>
 802359c:	3001      	adds	r0, #1
 802359e:	f000 80a9 	beq.w	80236f4 <_vfiprintf_r+0x1f0>
 80235a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80235a4:	445a      	add	r2, fp
 80235a6:	9209      	str	r2, [sp, #36]	; 0x24
 80235a8:	f89a 3000 	ldrb.w	r3, [sl]
 80235ac:	2b00      	cmp	r3, #0
 80235ae:	f000 80a1 	beq.w	80236f4 <_vfiprintf_r+0x1f0>
 80235b2:	2300      	movs	r3, #0
 80235b4:	f04f 32ff 	mov.w	r2, #4294967295
 80235b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80235bc:	f10a 0a01 	add.w	sl, sl, #1
 80235c0:	9304      	str	r3, [sp, #16]
 80235c2:	9307      	str	r3, [sp, #28]
 80235c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80235c8:	931a      	str	r3, [sp, #104]	; 0x68
 80235ca:	4654      	mov	r4, sl
 80235cc:	2205      	movs	r2, #5
 80235ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80235d2:	4854      	ldr	r0, [pc, #336]	; (8023724 <_vfiprintf_r+0x220>)
 80235d4:	f7dc fe34 	bl	8000240 <memchr>
 80235d8:	9a04      	ldr	r2, [sp, #16]
 80235da:	b9d8      	cbnz	r0, 8023614 <_vfiprintf_r+0x110>
 80235dc:	06d1      	lsls	r1, r2, #27
 80235de:	bf44      	itt	mi
 80235e0:	2320      	movmi	r3, #32
 80235e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235e6:	0713      	lsls	r3, r2, #28
 80235e8:	bf44      	itt	mi
 80235ea:	232b      	movmi	r3, #43	; 0x2b
 80235ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80235f0:	f89a 3000 	ldrb.w	r3, [sl]
 80235f4:	2b2a      	cmp	r3, #42	; 0x2a
 80235f6:	d015      	beq.n	8023624 <_vfiprintf_r+0x120>
 80235f8:	9a07      	ldr	r2, [sp, #28]
 80235fa:	4654      	mov	r4, sl
 80235fc:	2000      	movs	r0, #0
 80235fe:	f04f 0c0a 	mov.w	ip, #10
 8023602:	4621      	mov	r1, r4
 8023604:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023608:	3b30      	subs	r3, #48	; 0x30
 802360a:	2b09      	cmp	r3, #9
 802360c:	d94d      	bls.n	80236aa <_vfiprintf_r+0x1a6>
 802360e:	b1b0      	cbz	r0, 802363e <_vfiprintf_r+0x13a>
 8023610:	9207      	str	r2, [sp, #28]
 8023612:	e014      	b.n	802363e <_vfiprintf_r+0x13a>
 8023614:	eba0 0308 	sub.w	r3, r0, r8
 8023618:	fa09 f303 	lsl.w	r3, r9, r3
 802361c:	4313      	orrs	r3, r2
 802361e:	9304      	str	r3, [sp, #16]
 8023620:	46a2      	mov	sl, r4
 8023622:	e7d2      	b.n	80235ca <_vfiprintf_r+0xc6>
 8023624:	9b03      	ldr	r3, [sp, #12]
 8023626:	1d19      	adds	r1, r3, #4
 8023628:	681b      	ldr	r3, [r3, #0]
 802362a:	9103      	str	r1, [sp, #12]
 802362c:	2b00      	cmp	r3, #0
 802362e:	bfbb      	ittet	lt
 8023630:	425b      	neglt	r3, r3
 8023632:	f042 0202 	orrlt.w	r2, r2, #2
 8023636:	9307      	strge	r3, [sp, #28]
 8023638:	9307      	strlt	r3, [sp, #28]
 802363a:	bfb8      	it	lt
 802363c:	9204      	strlt	r2, [sp, #16]
 802363e:	7823      	ldrb	r3, [r4, #0]
 8023640:	2b2e      	cmp	r3, #46	; 0x2e
 8023642:	d10c      	bne.n	802365e <_vfiprintf_r+0x15a>
 8023644:	7863      	ldrb	r3, [r4, #1]
 8023646:	2b2a      	cmp	r3, #42	; 0x2a
 8023648:	d134      	bne.n	80236b4 <_vfiprintf_r+0x1b0>
 802364a:	9b03      	ldr	r3, [sp, #12]
 802364c:	1d1a      	adds	r2, r3, #4
 802364e:	681b      	ldr	r3, [r3, #0]
 8023650:	9203      	str	r2, [sp, #12]
 8023652:	2b00      	cmp	r3, #0
 8023654:	bfb8      	it	lt
 8023656:	f04f 33ff 	movlt.w	r3, #4294967295
 802365a:	3402      	adds	r4, #2
 802365c:	9305      	str	r3, [sp, #20]
 802365e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8023734 <_vfiprintf_r+0x230>
 8023662:	7821      	ldrb	r1, [r4, #0]
 8023664:	2203      	movs	r2, #3
 8023666:	4650      	mov	r0, sl
 8023668:	f7dc fdea 	bl	8000240 <memchr>
 802366c:	b138      	cbz	r0, 802367e <_vfiprintf_r+0x17a>
 802366e:	9b04      	ldr	r3, [sp, #16]
 8023670:	eba0 000a 	sub.w	r0, r0, sl
 8023674:	2240      	movs	r2, #64	; 0x40
 8023676:	4082      	lsls	r2, r0
 8023678:	4313      	orrs	r3, r2
 802367a:	3401      	adds	r4, #1
 802367c:	9304      	str	r3, [sp, #16]
 802367e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023682:	4829      	ldr	r0, [pc, #164]	; (8023728 <_vfiprintf_r+0x224>)
 8023684:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023688:	2206      	movs	r2, #6
 802368a:	f7dc fdd9 	bl	8000240 <memchr>
 802368e:	2800      	cmp	r0, #0
 8023690:	d03f      	beq.n	8023712 <_vfiprintf_r+0x20e>
 8023692:	4b26      	ldr	r3, [pc, #152]	; (802372c <_vfiprintf_r+0x228>)
 8023694:	bb1b      	cbnz	r3, 80236de <_vfiprintf_r+0x1da>
 8023696:	9b03      	ldr	r3, [sp, #12]
 8023698:	3307      	adds	r3, #7
 802369a:	f023 0307 	bic.w	r3, r3, #7
 802369e:	3308      	adds	r3, #8
 80236a0:	9303      	str	r3, [sp, #12]
 80236a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236a4:	443b      	add	r3, r7
 80236a6:	9309      	str	r3, [sp, #36]	; 0x24
 80236a8:	e768      	b.n	802357c <_vfiprintf_r+0x78>
 80236aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80236ae:	460c      	mov	r4, r1
 80236b0:	2001      	movs	r0, #1
 80236b2:	e7a6      	b.n	8023602 <_vfiprintf_r+0xfe>
 80236b4:	2300      	movs	r3, #0
 80236b6:	3401      	adds	r4, #1
 80236b8:	9305      	str	r3, [sp, #20]
 80236ba:	4619      	mov	r1, r3
 80236bc:	f04f 0c0a 	mov.w	ip, #10
 80236c0:	4620      	mov	r0, r4
 80236c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80236c6:	3a30      	subs	r2, #48	; 0x30
 80236c8:	2a09      	cmp	r2, #9
 80236ca:	d903      	bls.n	80236d4 <_vfiprintf_r+0x1d0>
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	d0c6      	beq.n	802365e <_vfiprintf_r+0x15a>
 80236d0:	9105      	str	r1, [sp, #20]
 80236d2:	e7c4      	b.n	802365e <_vfiprintf_r+0x15a>
 80236d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80236d8:	4604      	mov	r4, r0
 80236da:	2301      	movs	r3, #1
 80236dc:	e7f0      	b.n	80236c0 <_vfiprintf_r+0x1bc>
 80236de:	ab03      	add	r3, sp, #12
 80236e0:	9300      	str	r3, [sp, #0]
 80236e2:	462a      	mov	r2, r5
 80236e4:	4b12      	ldr	r3, [pc, #72]	; (8023730 <_vfiprintf_r+0x22c>)
 80236e6:	a904      	add	r1, sp, #16
 80236e8:	4630      	mov	r0, r6
 80236ea:	f3af 8000 	nop.w
 80236ee:	4607      	mov	r7, r0
 80236f0:	1c78      	adds	r0, r7, #1
 80236f2:	d1d6      	bne.n	80236a2 <_vfiprintf_r+0x19e>
 80236f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80236f6:	07d9      	lsls	r1, r3, #31
 80236f8:	d405      	bmi.n	8023706 <_vfiprintf_r+0x202>
 80236fa:	89ab      	ldrh	r3, [r5, #12]
 80236fc:	059a      	lsls	r2, r3, #22
 80236fe:	d402      	bmi.n	8023706 <_vfiprintf_r+0x202>
 8023700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023702:	f7ff fcfc 	bl	80230fe <__retarget_lock_release_recursive>
 8023706:	89ab      	ldrh	r3, [r5, #12]
 8023708:	065b      	lsls	r3, r3, #25
 802370a:	f53f af1d 	bmi.w	8023548 <_vfiprintf_r+0x44>
 802370e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023710:	e71c      	b.n	802354c <_vfiprintf_r+0x48>
 8023712:	ab03      	add	r3, sp, #12
 8023714:	9300      	str	r3, [sp, #0]
 8023716:	462a      	mov	r2, r5
 8023718:	4b05      	ldr	r3, [pc, #20]	; (8023730 <_vfiprintf_r+0x22c>)
 802371a:	a904      	add	r1, sp, #16
 802371c:	4630      	mov	r0, r6
 802371e:	f000 f879 	bl	8023814 <_printf_i>
 8023722:	e7e4      	b.n	80236ee <_vfiprintf_r+0x1ea>
 8023724:	080286e1 	.word	0x080286e1
 8023728:	080286eb 	.word	0x080286eb
 802372c:	00000000 	.word	0x00000000
 8023730:	080234df 	.word	0x080234df
 8023734:	080286e7 	.word	0x080286e7

08023738 <_printf_common>:
 8023738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802373c:	4616      	mov	r6, r2
 802373e:	4699      	mov	r9, r3
 8023740:	688a      	ldr	r2, [r1, #8]
 8023742:	690b      	ldr	r3, [r1, #16]
 8023744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023748:	4293      	cmp	r3, r2
 802374a:	bfb8      	it	lt
 802374c:	4613      	movlt	r3, r2
 802374e:	6033      	str	r3, [r6, #0]
 8023750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023754:	4607      	mov	r7, r0
 8023756:	460c      	mov	r4, r1
 8023758:	b10a      	cbz	r2, 802375e <_printf_common+0x26>
 802375a:	3301      	adds	r3, #1
 802375c:	6033      	str	r3, [r6, #0]
 802375e:	6823      	ldr	r3, [r4, #0]
 8023760:	0699      	lsls	r1, r3, #26
 8023762:	bf42      	ittt	mi
 8023764:	6833      	ldrmi	r3, [r6, #0]
 8023766:	3302      	addmi	r3, #2
 8023768:	6033      	strmi	r3, [r6, #0]
 802376a:	6825      	ldr	r5, [r4, #0]
 802376c:	f015 0506 	ands.w	r5, r5, #6
 8023770:	d106      	bne.n	8023780 <_printf_common+0x48>
 8023772:	f104 0a19 	add.w	sl, r4, #25
 8023776:	68e3      	ldr	r3, [r4, #12]
 8023778:	6832      	ldr	r2, [r6, #0]
 802377a:	1a9b      	subs	r3, r3, r2
 802377c:	42ab      	cmp	r3, r5
 802377e:	dc26      	bgt.n	80237ce <_printf_common+0x96>
 8023780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023784:	1e13      	subs	r3, r2, #0
 8023786:	6822      	ldr	r2, [r4, #0]
 8023788:	bf18      	it	ne
 802378a:	2301      	movne	r3, #1
 802378c:	0692      	lsls	r2, r2, #26
 802378e:	d42b      	bmi.n	80237e8 <_printf_common+0xb0>
 8023790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023794:	4649      	mov	r1, r9
 8023796:	4638      	mov	r0, r7
 8023798:	47c0      	blx	r8
 802379a:	3001      	adds	r0, #1
 802379c:	d01e      	beq.n	80237dc <_printf_common+0xa4>
 802379e:	6823      	ldr	r3, [r4, #0]
 80237a0:	6922      	ldr	r2, [r4, #16]
 80237a2:	f003 0306 	and.w	r3, r3, #6
 80237a6:	2b04      	cmp	r3, #4
 80237a8:	bf02      	ittt	eq
 80237aa:	68e5      	ldreq	r5, [r4, #12]
 80237ac:	6833      	ldreq	r3, [r6, #0]
 80237ae:	1aed      	subeq	r5, r5, r3
 80237b0:	68a3      	ldr	r3, [r4, #8]
 80237b2:	bf0c      	ite	eq
 80237b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80237b8:	2500      	movne	r5, #0
 80237ba:	4293      	cmp	r3, r2
 80237bc:	bfc4      	itt	gt
 80237be:	1a9b      	subgt	r3, r3, r2
 80237c0:	18ed      	addgt	r5, r5, r3
 80237c2:	2600      	movs	r6, #0
 80237c4:	341a      	adds	r4, #26
 80237c6:	42b5      	cmp	r5, r6
 80237c8:	d11a      	bne.n	8023800 <_printf_common+0xc8>
 80237ca:	2000      	movs	r0, #0
 80237cc:	e008      	b.n	80237e0 <_printf_common+0xa8>
 80237ce:	2301      	movs	r3, #1
 80237d0:	4652      	mov	r2, sl
 80237d2:	4649      	mov	r1, r9
 80237d4:	4638      	mov	r0, r7
 80237d6:	47c0      	blx	r8
 80237d8:	3001      	adds	r0, #1
 80237da:	d103      	bne.n	80237e4 <_printf_common+0xac>
 80237dc:	f04f 30ff 	mov.w	r0, #4294967295
 80237e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80237e4:	3501      	adds	r5, #1
 80237e6:	e7c6      	b.n	8023776 <_printf_common+0x3e>
 80237e8:	18e1      	adds	r1, r4, r3
 80237ea:	1c5a      	adds	r2, r3, #1
 80237ec:	2030      	movs	r0, #48	; 0x30
 80237ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80237f2:	4422      	add	r2, r4
 80237f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80237f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80237fc:	3302      	adds	r3, #2
 80237fe:	e7c7      	b.n	8023790 <_printf_common+0x58>
 8023800:	2301      	movs	r3, #1
 8023802:	4622      	mov	r2, r4
 8023804:	4649      	mov	r1, r9
 8023806:	4638      	mov	r0, r7
 8023808:	47c0      	blx	r8
 802380a:	3001      	adds	r0, #1
 802380c:	d0e6      	beq.n	80237dc <_printf_common+0xa4>
 802380e:	3601      	adds	r6, #1
 8023810:	e7d9      	b.n	80237c6 <_printf_common+0x8e>
	...

08023814 <_printf_i>:
 8023814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023818:	7e0f      	ldrb	r7, [r1, #24]
 802381a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802381c:	2f78      	cmp	r7, #120	; 0x78
 802381e:	4691      	mov	r9, r2
 8023820:	4680      	mov	r8, r0
 8023822:	460c      	mov	r4, r1
 8023824:	469a      	mov	sl, r3
 8023826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802382a:	d807      	bhi.n	802383c <_printf_i+0x28>
 802382c:	2f62      	cmp	r7, #98	; 0x62
 802382e:	d80a      	bhi.n	8023846 <_printf_i+0x32>
 8023830:	2f00      	cmp	r7, #0
 8023832:	f000 80d4 	beq.w	80239de <_printf_i+0x1ca>
 8023836:	2f58      	cmp	r7, #88	; 0x58
 8023838:	f000 80c0 	beq.w	80239bc <_printf_i+0x1a8>
 802383c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023844:	e03a      	b.n	80238bc <_printf_i+0xa8>
 8023846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802384a:	2b15      	cmp	r3, #21
 802384c:	d8f6      	bhi.n	802383c <_printf_i+0x28>
 802384e:	a101      	add	r1, pc, #4	; (adr r1, 8023854 <_printf_i+0x40>)
 8023850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023854:	080238ad 	.word	0x080238ad
 8023858:	080238c1 	.word	0x080238c1
 802385c:	0802383d 	.word	0x0802383d
 8023860:	0802383d 	.word	0x0802383d
 8023864:	0802383d 	.word	0x0802383d
 8023868:	0802383d 	.word	0x0802383d
 802386c:	080238c1 	.word	0x080238c1
 8023870:	0802383d 	.word	0x0802383d
 8023874:	0802383d 	.word	0x0802383d
 8023878:	0802383d 	.word	0x0802383d
 802387c:	0802383d 	.word	0x0802383d
 8023880:	080239c5 	.word	0x080239c5
 8023884:	080238ed 	.word	0x080238ed
 8023888:	0802397f 	.word	0x0802397f
 802388c:	0802383d 	.word	0x0802383d
 8023890:	0802383d 	.word	0x0802383d
 8023894:	080239e7 	.word	0x080239e7
 8023898:	0802383d 	.word	0x0802383d
 802389c:	080238ed 	.word	0x080238ed
 80238a0:	0802383d 	.word	0x0802383d
 80238a4:	0802383d 	.word	0x0802383d
 80238a8:	08023987 	.word	0x08023987
 80238ac:	682b      	ldr	r3, [r5, #0]
 80238ae:	1d1a      	adds	r2, r3, #4
 80238b0:	681b      	ldr	r3, [r3, #0]
 80238b2:	602a      	str	r2, [r5, #0]
 80238b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80238b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80238bc:	2301      	movs	r3, #1
 80238be:	e09f      	b.n	8023a00 <_printf_i+0x1ec>
 80238c0:	6820      	ldr	r0, [r4, #0]
 80238c2:	682b      	ldr	r3, [r5, #0]
 80238c4:	0607      	lsls	r7, r0, #24
 80238c6:	f103 0104 	add.w	r1, r3, #4
 80238ca:	6029      	str	r1, [r5, #0]
 80238cc:	d501      	bpl.n	80238d2 <_printf_i+0xbe>
 80238ce:	681e      	ldr	r6, [r3, #0]
 80238d0:	e003      	b.n	80238da <_printf_i+0xc6>
 80238d2:	0646      	lsls	r6, r0, #25
 80238d4:	d5fb      	bpl.n	80238ce <_printf_i+0xba>
 80238d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80238da:	2e00      	cmp	r6, #0
 80238dc:	da03      	bge.n	80238e6 <_printf_i+0xd2>
 80238de:	232d      	movs	r3, #45	; 0x2d
 80238e0:	4276      	negs	r6, r6
 80238e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80238e6:	485a      	ldr	r0, [pc, #360]	; (8023a50 <_printf_i+0x23c>)
 80238e8:	230a      	movs	r3, #10
 80238ea:	e012      	b.n	8023912 <_printf_i+0xfe>
 80238ec:	682b      	ldr	r3, [r5, #0]
 80238ee:	6820      	ldr	r0, [r4, #0]
 80238f0:	1d19      	adds	r1, r3, #4
 80238f2:	6029      	str	r1, [r5, #0]
 80238f4:	0605      	lsls	r5, r0, #24
 80238f6:	d501      	bpl.n	80238fc <_printf_i+0xe8>
 80238f8:	681e      	ldr	r6, [r3, #0]
 80238fa:	e002      	b.n	8023902 <_printf_i+0xee>
 80238fc:	0641      	lsls	r1, r0, #25
 80238fe:	d5fb      	bpl.n	80238f8 <_printf_i+0xe4>
 8023900:	881e      	ldrh	r6, [r3, #0]
 8023902:	4853      	ldr	r0, [pc, #332]	; (8023a50 <_printf_i+0x23c>)
 8023904:	2f6f      	cmp	r7, #111	; 0x6f
 8023906:	bf0c      	ite	eq
 8023908:	2308      	moveq	r3, #8
 802390a:	230a      	movne	r3, #10
 802390c:	2100      	movs	r1, #0
 802390e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023912:	6865      	ldr	r5, [r4, #4]
 8023914:	60a5      	str	r5, [r4, #8]
 8023916:	2d00      	cmp	r5, #0
 8023918:	bfa2      	ittt	ge
 802391a:	6821      	ldrge	r1, [r4, #0]
 802391c:	f021 0104 	bicge.w	r1, r1, #4
 8023920:	6021      	strge	r1, [r4, #0]
 8023922:	b90e      	cbnz	r6, 8023928 <_printf_i+0x114>
 8023924:	2d00      	cmp	r5, #0
 8023926:	d04b      	beq.n	80239c0 <_printf_i+0x1ac>
 8023928:	4615      	mov	r5, r2
 802392a:	fbb6 f1f3 	udiv	r1, r6, r3
 802392e:	fb03 6711 	mls	r7, r3, r1, r6
 8023932:	5dc7      	ldrb	r7, [r0, r7]
 8023934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023938:	4637      	mov	r7, r6
 802393a:	42bb      	cmp	r3, r7
 802393c:	460e      	mov	r6, r1
 802393e:	d9f4      	bls.n	802392a <_printf_i+0x116>
 8023940:	2b08      	cmp	r3, #8
 8023942:	d10b      	bne.n	802395c <_printf_i+0x148>
 8023944:	6823      	ldr	r3, [r4, #0]
 8023946:	07de      	lsls	r6, r3, #31
 8023948:	d508      	bpl.n	802395c <_printf_i+0x148>
 802394a:	6923      	ldr	r3, [r4, #16]
 802394c:	6861      	ldr	r1, [r4, #4]
 802394e:	4299      	cmp	r1, r3
 8023950:	bfde      	ittt	le
 8023952:	2330      	movle	r3, #48	; 0x30
 8023954:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023958:	f105 35ff 	addle.w	r5, r5, #4294967295
 802395c:	1b52      	subs	r2, r2, r5
 802395e:	6122      	str	r2, [r4, #16]
 8023960:	f8cd a000 	str.w	sl, [sp]
 8023964:	464b      	mov	r3, r9
 8023966:	aa03      	add	r2, sp, #12
 8023968:	4621      	mov	r1, r4
 802396a:	4640      	mov	r0, r8
 802396c:	f7ff fee4 	bl	8023738 <_printf_common>
 8023970:	3001      	adds	r0, #1
 8023972:	d14a      	bne.n	8023a0a <_printf_i+0x1f6>
 8023974:	f04f 30ff 	mov.w	r0, #4294967295
 8023978:	b004      	add	sp, #16
 802397a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802397e:	6823      	ldr	r3, [r4, #0]
 8023980:	f043 0320 	orr.w	r3, r3, #32
 8023984:	6023      	str	r3, [r4, #0]
 8023986:	4833      	ldr	r0, [pc, #204]	; (8023a54 <_printf_i+0x240>)
 8023988:	2778      	movs	r7, #120	; 0x78
 802398a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802398e:	6823      	ldr	r3, [r4, #0]
 8023990:	6829      	ldr	r1, [r5, #0]
 8023992:	061f      	lsls	r7, r3, #24
 8023994:	f851 6b04 	ldr.w	r6, [r1], #4
 8023998:	d402      	bmi.n	80239a0 <_printf_i+0x18c>
 802399a:	065f      	lsls	r7, r3, #25
 802399c:	bf48      	it	mi
 802399e:	b2b6      	uxthmi	r6, r6
 80239a0:	07df      	lsls	r7, r3, #31
 80239a2:	bf48      	it	mi
 80239a4:	f043 0320 	orrmi.w	r3, r3, #32
 80239a8:	6029      	str	r1, [r5, #0]
 80239aa:	bf48      	it	mi
 80239ac:	6023      	strmi	r3, [r4, #0]
 80239ae:	b91e      	cbnz	r6, 80239b8 <_printf_i+0x1a4>
 80239b0:	6823      	ldr	r3, [r4, #0]
 80239b2:	f023 0320 	bic.w	r3, r3, #32
 80239b6:	6023      	str	r3, [r4, #0]
 80239b8:	2310      	movs	r3, #16
 80239ba:	e7a7      	b.n	802390c <_printf_i+0xf8>
 80239bc:	4824      	ldr	r0, [pc, #144]	; (8023a50 <_printf_i+0x23c>)
 80239be:	e7e4      	b.n	802398a <_printf_i+0x176>
 80239c0:	4615      	mov	r5, r2
 80239c2:	e7bd      	b.n	8023940 <_printf_i+0x12c>
 80239c4:	682b      	ldr	r3, [r5, #0]
 80239c6:	6826      	ldr	r6, [r4, #0]
 80239c8:	6961      	ldr	r1, [r4, #20]
 80239ca:	1d18      	adds	r0, r3, #4
 80239cc:	6028      	str	r0, [r5, #0]
 80239ce:	0635      	lsls	r5, r6, #24
 80239d0:	681b      	ldr	r3, [r3, #0]
 80239d2:	d501      	bpl.n	80239d8 <_printf_i+0x1c4>
 80239d4:	6019      	str	r1, [r3, #0]
 80239d6:	e002      	b.n	80239de <_printf_i+0x1ca>
 80239d8:	0670      	lsls	r0, r6, #25
 80239da:	d5fb      	bpl.n	80239d4 <_printf_i+0x1c0>
 80239dc:	8019      	strh	r1, [r3, #0]
 80239de:	2300      	movs	r3, #0
 80239e0:	6123      	str	r3, [r4, #16]
 80239e2:	4615      	mov	r5, r2
 80239e4:	e7bc      	b.n	8023960 <_printf_i+0x14c>
 80239e6:	682b      	ldr	r3, [r5, #0]
 80239e8:	1d1a      	adds	r2, r3, #4
 80239ea:	602a      	str	r2, [r5, #0]
 80239ec:	681d      	ldr	r5, [r3, #0]
 80239ee:	6862      	ldr	r2, [r4, #4]
 80239f0:	2100      	movs	r1, #0
 80239f2:	4628      	mov	r0, r5
 80239f4:	f7dc fc24 	bl	8000240 <memchr>
 80239f8:	b108      	cbz	r0, 80239fe <_printf_i+0x1ea>
 80239fa:	1b40      	subs	r0, r0, r5
 80239fc:	6060      	str	r0, [r4, #4]
 80239fe:	6863      	ldr	r3, [r4, #4]
 8023a00:	6123      	str	r3, [r4, #16]
 8023a02:	2300      	movs	r3, #0
 8023a04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023a08:	e7aa      	b.n	8023960 <_printf_i+0x14c>
 8023a0a:	6923      	ldr	r3, [r4, #16]
 8023a0c:	462a      	mov	r2, r5
 8023a0e:	4649      	mov	r1, r9
 8023a10:	4640      	mov	r0, r8
 8023a12:	47d0      	blx	sl
 8023a14:	3001      	adds	r0, #1
 8023a16:	d0ad      	beq.n	8023974 <_printf_i+0x160>
 8023a18:	6823      	ldr	r3, [r4, #0]
 8023a1a:	079b      	lsls	r3, r3, #30
 8023a1c:	d413      	bmi.n	8023a46 <_printf_i+0x232>
 8023a1e:	68e0      	ldr	r0, [r4, #12]
 8023a20:	9b03      	ldr	r3, [sp, #12]
 8023a22:	4298      	cmp	r0, r3
 8023a24:	bfb8      	it	lt
 8023a26:	4618      	movlt	r0, r3
 8023a28:	e7a6      	b.n	8023978 <_printf_i+0x164>
 8023a2a:	2301      	movs	r3, #1
 8023a2c:	4632      	mov	r2, r6
 8023a2e:	4649      	mov	r1, r9
 8023a30:	4640      	mov	r0, r8
 8023a32:	47d0      	blx	sl
 8023a34:	3001      	adds	r0, #1
 8023a36:	d09d      	beq.n	8023974 <_printf_i+0x160>
 8023a38:	3501      	adds	r5, #1
 8023a3a:	68e3      	ldr	r3, [r4, #12]
 8023a3c:	9903      	ldr	r1, [sp, #12]
 8023a3e:	1a5b      	subs	r3, r3, r1
 8023a40:	42ab      	cmp	r3, r5
 8023a42:	dcf2      	bgt.n	8023a2a <_printf_i+0x216>
 8023a44:	e7eb      	b.n	8023a1e <_printf_i+0x20a>
 8023a46:	2500      	movs	r5, #0
 8023a48:	f104 0619 	add.w	r6, r4, #25
 8023a4c:	e7f5      	b.n	8023a3a <_printf_i+0x226>
 8023a4e:	bf00      	nop
 8023a50:	080286f2 	.word	0x080286f2
 8023a54:	08028703 	.word	0x08028703

08023a58 <__sflush_r>:
 8023a58:	898a      	ldrh	r2, [r1, #12]
 8023a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a5e:	4605      	mov	r5, r0
 8023a60:	0710      	lsls	r0, r2, #28
 8023a62:	460c      	mov	r4, r1
 8023a64:	d458      	bmi.n	8023b18 <__sflush_r+0xc0>
 8023a66:	684b      	ldr	r3, [r1, #4]
 8023a68:	2b00      	cmp	r3, #0
 8023a6a:	dc05      	bgt.n	8023a78 <__sflush_r+0x20>
 8023a6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023a6e:	2b00      	cmp	r3, #0
 8023a70:	dc02      	bgt.n	8023a78 <__sflush_r+0x20>
 8023a72:	2000      	movs	r0, #0
 8023a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023a7a:	2e00      	cmp	r6, #0
 8023a7c:	d0f9      	beq.n	8023a72 <__sflush_r+0x1a>
 8023a7e:	2300      	movs	r3, #0
 8023a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8023a84:	682f      	ldr	r7, [r5, #0]
 8023a86:	6a21      	ldr	r1, [r4, #32]
 8023a88:	602b      	str	r3, [r5, #0]
 8023a8a:	d032      	beq.n	8023af2 <__sflush_r+0x9a>
 8023a8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023a8e:	89a3      	ldrh	r3, [r4, #12]
 8023a90:	075a      	lsls	r2, r3, #29
 8023a92:	d505      	bpl.n	8023aa0 <__sflush_r+0x48>
 8023a94:	6863      	ldr	r3, [r4, #4]
 8023a96:	1ac0      	subs	r0, r0, r3
 8023a98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023a9a:	b10b      	cbz	r3, 8023aa0 <__sflush_r+0x48>
 8023a9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023a9e:	1ac0      	subs	r0, r0, r3
 8023aa0:	2300      	movs	r3, #0
 8023aa2:	4602      	mov	r2, r0
 8023aa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023aa6:	6a21      	ldr	r1, [r4, #32]
 8023aa8:	4628      	mov	r0, r5
 8023aaa:	47b0      	blx	r6
 8023aac:	1c43      	adds	r3, r0, #1
 8023aae:	89a3      	ldrh	r3, [r4, #12]
 8023ab0:	d106      	bne.n	8023ac0 <__sflush_r+0x68>
 8023ab2:	6829      	ldr	r1, [r5, #0]
 8023ab4:	291d      	cmp	r1, #29
 8023ab6:	d82b      	bhi.n	8023b10 <__sflush_r+0xb8>
 8023ab8:	4a29      	ldr	r2, [pc, #164]	; (8023b60 <__sflush_r+0x108>)
 8023aba:	410a      	asrs	r2, r1
 8023abc:	07d6      	lsls	r6, r2, #31
 8023abe:	d427      	bmi.n	8023b10 <__sflush_r+0xb8>
 8023ac0:	2200      	movs	r2, #0
 8023ac2:	6062      	str	r2, [r4, #4]
 8023ac4:	04d9      	lsls	r1, r3, #19
 8023ac6:	6922      	ldr	r2, [r4, #16]
 8023ac8:	6022      	str	r2, [r4, #0]
 8023aca:	d504      	bpl.n	8023ad6 <__sflush_r+0x7e>
 8023acc:	1c42      	adds	r2, r0, #1
 8023ace:	d101      	bne.n	8023ad4 <__sflush_r+0x7c>
 8023ad0:	682b      	ldr	r3, [r5, #0]
 8023ad2:	b903      	cbnz	r3, 8023ad6 <__sflush_r+0x7e>
 8023ad4:	6560      	str	r0, [r4, #84]	; 0x54
 8023ad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023ad8:	602f      	str	r7, [r5, #0]
 8023ada:	2900      	cmp	r1, #0
 8023adc:	d0c9      	beq.n	8023a72 <__sflush_r+0x1a>
 8023ade:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023ae2:	4299      	cmp	r1, r3
 8023ae4:	d002      	beq.n	8023aec <__sflush_r+0x94>
 8023ae6:	4628      	mov	r0, r5
 8023ae8:	f7ff fb3e 	bl	8023168 <_free_r>
 8023aec:	2000      	movs	r0, #0
 8023aee:	6360      	str	r0, [r4, #52]	; 0x34
 8023af0:	e7c0      	b.n	8023a74 <__sflush_r+0x1c>
 8023af2:	2301      	movs	r3, #1
 8023af4:	4628      	mov	r0, r5
 8023af6:	47b0      	blx	r6
 8023af8:	1c41      	adds	r1, r0, #1
 8023afa:	d1c8      	bne.n	8023a8e <__sflush_r+0x36>
 8023afc:	682b      	ldr	r3, [r5, #0]
 8023afe:	2b00      	cmp	r3, #0
 8023b00:	d0c5      	beq.n	8023a8e <__sflush_r+0x36>
 8023b02:	2b1d      	cmp	r3, #29
 8023b04:	d001      	beq.n	8023b0a <__sflush_r+0xb2>
 8023b06:	2b16      	cmp	r3, #22
 8023b08:	d101      	bne.n	8023b0e <__sflush_r+0xb6>
 8023b0a:	602f      	str	r7, [r5, #0]
 8023b0c:	e7b1      	b.n	8023a72 <__sflush_r+0x1a>
 8023b0e:	89a3      	ldrh	r3, [r4, #12]
 8023b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023b14:	81a3      	strh	r3, [r4, #12]
 8023b16:	e7ad      	b.n	8023a74 <__sflush_r+0x1c>
 8023b18:	690f      	ldr	r7, [r1, #16]
 8023b1a:	2f00      	cmp	r7, #0
 8023b1c:	d0a9      	beq.n	8023a72 <__sflush_r+0x1a>
 8023b1e:	0793      	lsls	r3, r2, #30
 8023b20:	680e      	ldr	r6, [r1, #0]
 8023b22:	bf08      	it	eq
 8023b24:	694b      	ldreq	r3, [r1, #20]
 8023b26:	600f      	str	r7, [r1, #0]
 8023b28:	bf18      	it	ne
 8023b2a:	2300      	movne	r3, #0
 8023b2c:	eba6 0807 	sub.w	r8, r6, r7
 8023b30:	608b      	str	r3, [r1, #8]
 8023b32:	f1b8 0f00 	cmp.w	r8, #0
 8023b36:	dd9c      	ble.n	8023a72 <__sflush_r+0x1a>
 8023b38:	6a21      	ldr	r1, [r4, #32]
 8023b3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8023b3c:	4643      	mov	r3, r8
 8023b3e:	463a      	mov	r2, r7
 8023b40:	4628      	mov	r0, r5
 8023b42:	47b0      	blx	r6
 8023b44:	2800      	cmp	r0, #0
 8023b46:	dc06      	bgt.n	8023b56 <__sflush_r+0xfe>
 8023b48:	89a3      	ldrh	r3, [r4, #12]
 8023b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023b4e:	81a3      	strh	r3, [r4, #12]
 8023b50:	f04f 30ff 	mov.w	r0, #4294967295
 8023b54:	e78e      	b.n	8023a74 <__sflush_r+0x1c>
 8023b56:	4407      	add	r7, r0
 8023b58:	eba8 0800 	sub.w	r8, r8, r0
 8023b5c:	e7e9      	b.n	8023b32 <__sflush_r+0xda>
 8023b5e:	bf00      	nop
 8023b60:	dfbffffe 	.word	0xdfbffffe

08023b64 <_fflush_r>:
 8023b64:	b538      	push	{r3, r4, r5, lr}
 8023b66:	690b      	ldr	r3, [r1, #16]
 8023b68:	4605      	mov	r5, r0
 8023b6a:	460c      	mov	r4, r1
 8023b6c:	b913      	cbnz	r3, 8023b74 <_fflush_r+0x10>
 8023b6e:	2500      	movs	r5, #0
 8023b70:	4628      	mov	r0, r5
 8023b72:	bd38      	pop	{r3, r4, r5, pc}
 8023b74:	b118      	cbz	r0, 8023b7e <_fflush_r+0x1a>
 8023b76:	6a03      	ldr	r3, [r0, #32]
 8023b78:	b90b      	cbnz	r3, 8023b7e <_fflush_r+0x1a>
 8023b7a:	f7ff f8a3 	bl	8022cc4 <__sinit>
 8023b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023b82:	2b00      	cmp	r3, #0
 8023b84:	d0f3      	beq.n	8023b6e <_fflush_r+0xa>
 8023b86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023b88:	07d0      	lsls	r0, r2, #31
 8023b8a:	d404      	bmi.n	8023b96 <_fflush_r+0x32>
 8023b8c:	0599      	lsls	r1, r3, #22
 8023b8e:	d402      	bmi.n	8023b96 <_fflush_r+0x32>
 8023b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023b92:	f7ff fab3 	bl	80230fc <__retarget_lock_acquire_recursive>
 8023b96:	4628      	mov	r0, r5
 8023b98:	4621      	mov	r1, r4
 8023b9a:	f7ff ff5d 	bl	8023a58 <__sflush_r>
 8023b9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023ba0:	07da      	lsls	r2, r3, #31
 8023ba2:	4605      	mov	r5, r0
 8023ba4:	d4e4      	bmi.n	8023b70 <_fflush_r+0xc>
 8023ba6:	89a3      	ldrh	r3, [r4, #12]
 8023ba8:	059b      	lsls	r3, r3, #22
 8023baa:	d4e1      	bmi.n	8023b70 <_fflush_r+0xc>
 8023bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023bae:	f7ff faa6 	bl	80230fe <__retarget_lock_release_recursive>
 8023bb2:	e7dd      	b.n	8023b70 <_fflush_r+0xc>

08023bb4 <fiprintf>:
 8023bb4:	b40e      	push	{r1, r2, r3}
 8023bb6:	b503      	push	{r0, r1, lr}
 8023bb8:	4601      	mov	r1, r0
 8023bba:	ab03      	add	r3, sp, #12
 8023bbc:	4805      	ldr	r0, [pc, #20]	; (8023bd4 <fiprintf+0x20>)
 8023bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8023bc2:	6800      	ldr	r0, [r0, #0]
 8023bc4:	9301      	str	r3, [sp, #4]
 8023bc6:	f7ff fc9d 	bl	8023504 <_vfiprintf_r>
 8023bca:	b002      	add	sp, #8
 8023bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8023bd0:	b003      	add	sp, #12
 8023bd2:	4770      	bx	lr
 8023bd4:	20000190 	.word	0x20000190

08023bd8 <__swbuf_r>:
 8023bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023bda:	460e      	mov	r6, r1
 8023bdc:	4614      	mov	r4, r2
 8023bde:	4605      	mov	r5, r0
 8023be0:	b118      	cbz	r0, 8023bea <__swbuf_r+0x12>
 8023be2:	6a03      	ldr	r3, [r0, #32]
 8023be4:	b90b      	cbnz	r3, 8023bea <__swbuf_r+0x12>
 8023be6:	f7ff f86d 	bl	8022cc4 <__sinit>
 8023bea:	69a3      	ldr	r3, [r4, #24]
 8023bec:	60a3      	str	r3, [r4, #8]
 8023bee:	89a3      	ldrh	r3, [r4, #12]
 8023bf0:	071a      	lsls	r2, r3, #28
 8023bf2:	d525      	bpl.n	8023c40 <__swbuf_r+0x68>
 8023bf4:	6923      	ldr	r3, [r4, #16]
 8023bf6:	b31b      	cbz	r3, 8023c40 <__swbuf_r+0x68>
 8023bf8:	6823      	ldr	r3, [r4, #0]
 8023bfa:	6922      	ldr	r2, [r4, #16]
 8023bfc:	1a98      	subs	r0, r3, r2
 8023bfe:	6963      	ldr	r3, [r4, #20]
 8023c00:	b2f6      	uxtb	r6, r6
 8023c02:	4283      	cmp	r3, r0
 8023c04:	4637      	mov	r7, r6
 8023c06:	dc04      	bgt.n	8023c12 <__swbuf_r+0x3a>
 8023c08:	4621      	mov	r1, r4
 8023c0a:	4628      	mov	r0, r5
 8023c0c:	f7ff ffaa 	bl	8023b64 <_fflush_r>
 8023c10:	b9e0      	cbnz	r0, 8023c4c <__swbuf_r+0x74>
 8023c12:	68a3      	ldr	r3, [r4, #8]
 8023c14:	3b01      	subs	r3, #1
 8023c16:	60a3      	str	r3, [r4, #8]
 8023c18:	6823      	ldr	r3, [r4, #0]
 8023c1a:	1c5a      	adds	r2, r3, #1
 8023c1c:	6022      	str	r2, [r4, #0]
 8023c1e:	701e      	strb	r6, [r3, #0]
 8023c20:	6962      	ldr	r2, [r4, #20]
 8023c22:	1c43      	adds	r3, r0, #1
 8023c24:	429a      	cmp	r2, r3
 8023c26:	d004      	beq.n	8023c32 <__swbuf_r+0x5a>
 8023c28:	89a3      	ldrh	r3, [r4, #12]
 8023c2a:	07db      	lsls	r3, r3, #31
 8023c2c:	d506      	bpl.n	8023c3c <__swbuf_r+0x64>
 8023c2e:	2e0a      	cmp	r6, #10
 8023c30:	d104      	bne.n	8023c3c <__swbuf_r+0x64>
 8023c32:	4621      	mov	r1, r4
 8023c34:	4628      	mov	r0, r5
 8023c36:	f7ff ff95 	bl	8023b64 <_fflush_r>
 8023c3a:	b938      	cbnz	r0, 8023c4c <__swbuf_r+0x74>
 8023c3c:	4638      	mov	r0, r7
 8023c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023c40:	4621      	mov	r1, r4
 8023c42:	4628      	mov	r0, r5
 8023c44:	f000 f806 	bl	8023c54 <__swsetup_r>
 8023c48:	2800      	cmp	r0, #0
 8023c4a:	d0d5      	beq.n	8023bf8 <__swbuf_r+0x20>
 8023c4c:	f04f 37ff 	mov.w	r7, #4294967295
 8023c50:	e7f4      	b.n	8023c3c <__swbuf_r+0x64>
	...

08023c54 <__swsetup_r>:
 8023c54:	b538      	push	{r3, r4, r5, lr}
 8023c56:	4b2a      	ldr	r3, [pc, #168]	; (8023d00 <__swsetup_r+0xac>)
 8023c58:	4605      	mov	r5, r0
 8023c5a:	6818      	ldr	r0, [r3, #0]
 8023c5c:	460c      	mov	r4, r1
 8023c5e:	b118      	cbz	r0, 8023c68 <__swsetup_r+0x14>
 8023c60:	6a03      	ldr	r3, [r0, #32]
 8023c62:	b90b      	cbnz	r3, 8023c68 <__swsetup_r+0x14>
 8023c64:	f7ff f82e 	bl	8022cc4 <__sinit>
 8023c68:	89a3      	ldrh	r3, [r4, #12]
 8023c6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023c6e:	0718      	lsls	r0, r3, #28
 8023c70:	d422      	bmi.n	8023cb8 <__swsetup_r+0x64>
 8023c72:	06d9      	lsls	r1, r3, #27
 8023c74:	d407      	bmi.n	8023c86 <__swsetup_r+0x32>
 8023c76:	2309      	movs	r3, #9
 8023c78:	602b      	str	r3, [r5, #0]
 8023c7a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023c7e:	81a3      	strh	r3, [r4, #12]
 8023c80:	f04f 30ff 	mov.w	r0, #4294967295
 8023c84:	e034      	b.n	8023cf0 <__swsetup_r+0x9c>
 8023c86:	0758      	lsls	r0, r3, #29
 8023c88:	d512      	bpl.n	8023cb0 <__swsetup_r+0x5c>
 8023c8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023c8c:	b141      	cbz	r1, 8023ca0 <__swsetup_r+0x4c>
 8023c8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023c92:	4299      	cmp	r1, r3
 8023c94:	d002      	beq.n	8023c9c <__swsetup_r+0x48>
 8023c96:	4628      	mov	r0, r5
 8023c98:	f7ff fa66 	bl	8023168 <_free_r>
 8023c9c:	2300      	movs	r3, #0
 8023c9e:	6363      	str	r3, [r4, #52]	; 0x34
 8023ca0:	89a3      	ldrh	r3, [r4, #12]
 8023ca2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023ca6:	81a3      	strh	r3, [r4, #12]
 8023ca8:	2300      	movs	r3, #0
 8023caa:	6063      	str	r3, [r4, #4]
 8023cac:	6923      	ldr	r3, [r4, #16]
 8023cae:	6023      	str	r3, [r4, #0]
 8023cb0:	89a3      	ldrh	r3, [r4, #12]
 8023cb2:	f043 0308 	orr.w	r3, r3, #8
 8023cb6:	81a3      	strh	r3, [r4, #12]
 8023cb8:	6923      	ldr	r3, [r4, #16]
 8023cba:	b94b      	cbnz	r3, 8023cd0 <__swsetup_r+0x7c>
 8023cbc:	89a3      	ldrh	r3, [r4, #12]
 8023cbe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023cc6:	d003      	beq.n	8023cd0 <__swsetup_r+0x7c>
 8023cc8:	4621      	mov	r1, r4
 8023cca:	4628      	mov	r0, r5
 8023ccc:	f000 f876 	bl	8023dbc <__smakebuf_r>
 8023cd0:	89a0      	ldrh	r0, [r4, #12]
 8023cd2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023cd6:	f010 0301 	ands.w	r3, r0, #1
 8023cda:	d00a      	beq.n	8023cf2 <__swsetup_r+0x9e>
 8023cdc:	2300      	movs	r3, #0
 8023cde:	60a3      	str	r3, [r4, #8]
 8023ce0:	6963      	ldr	r3, [r4, #20]
 8023ce2:	425b      	negs	r3, r3
 8023ce4:	61a3      	str	r3, [r4, #24]
 8023ce6:	6923      	ldr	r3, [r4, #16]
 8023ce8:	b943      	cbnz	r3, 8023cfc <__swsetup_r+0xa8>
 8023cea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023cee:	d1c4      	bne.n	8023c7a <__swsetup_r+0x26>
 8023cf0:	bd38      	pop	{r3, r4, r5, pc}
 8023cf2:	0781      	lsls	r1, r0, #30
 8023cf4:	bf58      	it	pl
 8023cf6:	6963      	ldrpl	r3, [r4, #20]
 8023cf8:	60a3      	str	r3, [r4, #8]
 8023cfa:	e7f4      	b.n	8023ce6 <__swsetup_r+0x92>
 8023cfc:	2000      	movs	r0, #0
 8023cfe:	e7f7      	b.n	8023cf0 <__swsetup_r+0x9c>
 8023d00:	20000190 	.word	0x20000190

08023d04 <abort>:
 8023d04:	b508      	push	{r3, lr}
 8023d06:	2006      	movs	r0, #6
 8023d08:	f000 f8bc 	bl	8023e84 <raise>
 8023d0c:	2001      	movs	r0, #1
 8023d0e:	f7e0 f9df 	bl	80040d0 <_exit>

08023d12 <_realloc_r>:
 8023d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023d16:	4680      	mov	r8, r0
 8023d18:	4614      	mov	r4, r2
 8023d1a:	460e      	mov	r6, r1
 8023d1c:	b921      	cbnz	r1, 8023d28 <_realloc_r+0x16>
 8023d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023d22:	4611      	mov	r1, r2
 8023d24:	f7fe be8a 	b.w	8022a3c <_malloc_r>
 8023d28:	b92a      	cbnz	r2, 8023d36 <_realloc_r+0x24>
 8023d2a:	f7ff fa1d 	bl	8023168 <_free_r>
 8023d2e:	4625      	mov	r5, r4
 8023d30:	4628      	mov	r0, r5
 8023d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023d36:	f000 f8e3 	bl	8023f00 <_malloc_usable_size_r>
 8023d3a:	4284      	cmp	r4, r0
 8023d3c:	4607      	mov	r7, r0
 8023d3e:	d802      	bhi.n	8023d46 <_realloc_r+0x34>
 8023d40:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023d44:	d812      	bhi.n	8023d6c <_realloc_r+0x5a>
 8023d46:	4621      	mov	r1, r4
 8023d48:	4640      	mov	r0, r8
 8023d4a:	f7fe fe77 	bl	8022a3c <_malloc_r>
 8023d4e:	4605      	mov	r5, r0
 8023d50:	2800      	cmp	r0, #0
 8023d52:	d0ed      	beq.n	8023d30 <_realloc_r+0x1e>
 8023d54:	42bc      	cmp	r4, r7
 8023d56:	4622      	mov	r2, r4
 8023d58:	4631      	mov	r1, r6
 8023d5a:	bf28      	it	cs
 8023d5c:	463a      	movcs	r2, r7
 8023d5e:	f7ff f9d7 	bl	8023110 <memcpy>
 8023d62:	4631      	mov	r1, r6
 8023d64:	4640      	mov	r0, r8
 8023d66:	f7ff f9ff 	bl	8023168 <_free_r>
 8023d6a:	e7e1      	b.n	8023d30 <_realloc_r+0x1e>
 8023d6c:	4635      	mov	r5, r6
 8023d6e:	e7df      	b.n	8023d30 <_realloc_r+0x1e>

08023d70 <__swhatbuf_r>:
 8023d70:	b570      	push	{r4, r5, r6, lr}
 8023d72:	460c      	mov	r4, r1
 8023d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023d78:	2900      	cmp	r1, #0
 8023d7a:	b096      	sub	sp, #88	; 0x58
 8023d7c:	4615      	mov	r5, r2
 8023d7e:	461e      	mov	r6, r3
 8023d80:	da0d      	bge.n	8023d9e <__swhatbuf_r+0x2e>
 8023d82:	89a3      	ldrh	r3, [r4, #12]
 8023d84:	f013 0f80 	tst.w	r3, #128	; 0x80
 8023d88:	f04f 0100 	mov.w	r1, #0
 8023d8c:	bf0c      	ite	eq
 8023d8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8023d92:	2340      	movne	r3, #64	; 0x40
 8023d94:	2000      	movs	r0, #0
 8023d96:	6031      	str	r1, [r6, #0]
 8023d98:	602b      	str	r3, [r5, #0]
 8023d9a:	b016      	add	sp, #88	; 0x58
 8023d9c:	bd70      	pop	{r4, r5, r6, pc}
 8023d9e:	466a      	mov	r2, sp
 8023da0:	f000 f878 	bl	8023e94 <_fstat_r>
 8023da4:	2800      	cmp	r0, #0
 8023da6:	dbec      	blt.n	8023d82 <__swhatbuf_r+0x12>
 8023da8:	9901      	ldr	r1, [sp, #4]
 8023daa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8023dae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8023db2:	4259      	negs	r1, r3
 8023db4:	4159      	adcs	r1, r3
 8023db6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023dba:	e7eb      	b.n	8023d94 <__swhatbuf_r+0x24>

08023dbc <__smakebuf_r>:
 8023dbc:	898b      	ldrh	r3, [r1, #12]
 8023dbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023dc0:	079d      	lsls	r5, r3, #30
 8023dc2:	4606      	mov	r6, r0
 8023dc4:	460c      	mov	r4, r1
 8023dc6:	d507      	bpl.n	8023dd8 <__smakebuf_r+0x1c>
 8023dc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023dcc:	6023      	str	r3, [r4, #0]
 8023dce:	6123      	str	r3, [r4, #16]
 8023dd0:	2301      	movs	r3, #1
 8023dd2:	6163      	str	r3, [r4, #20]
 8023dd4:	b002      	add	sp, #8
 8023dd6:	bd70      	pop	{r4, r5, r6, pc}
 8023dd8:	ab01      	add	r3, sp, #4
 8023dda:	466a      	mov	r2, sp
 8023ddc:	f7ff ffc8 	bl	8023d70 <__swhatbuf_r>
 8023de0:	9900      	ldr	r1, [sp, #0]
 8023de2:	4605      	mov	r5, r0
 8023de4:	4630      	mov	r0, r6
 8023de6:	f7fe fe29 	bl	8022a3c <_malloc_r>
 8023dea:	b948      	cbnz	r0, 8023e00 <__smakebuf_r+0x44>
 8023dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023df0:	059a      	lsls	r2, r3, #22
 8023df2:	d4ef      	bmi.n	8023dd4 <__smakebuf_r+0x18>
 8023df4:	f023 0303 	bic.w	r3, r3, #3
 8023df8:	f043 0302 	orr.w	r3, r3, #2
 8023dfc:	81a3      	strh	r3, [r4, #12]
 8023dfe:	e7e3      	b.n	8023dc8 <__smakebuf_r+0xc>
 8023e00:	89a3      	ldrh	r3, [r4, #12]
 8023e02:	6020      	str	r0, [r4, #0]
 8023e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023e08:	81a3      	strh	r3, [r4, #12]
 8023e0a:	9b00      	ldr	r3, [sp, #0]
 8023e0c:	6163      	str	r3, [r4, #20]
 8023e0e:	9b01      	ldr	r3, [sp, #4]
 8023e10:	6120      	str	r0, [r4, #16]
 8023e12:	b15b      	cbz	r3, 8023e2c <__smakebuf_r+0x70>
 8023e14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023e18:	4630      	mov	r0, r6
 8023e1a:	f000 f84d 	bl	8023eb8 <_isatty_r>
 8023e1e:	b128      	cbz	r0, 8023e2c <__smakebuf_r+0x70>
 8023e20:	89a3      	ldrh	r3, [r4, #12]
 8023e22:	f023 0303 	bic.w	r3, r3, #3
 8023e26:	f043 0301 	orr.w	r3, r3, #1
 8023e2a:	81a3      	strh	r3, [r4, #12]
 8023e2c:	89a3      	ldrh	r3, [r4, #12]
 8023e2e:	431d      	orrs	r5, r3
 8023e30:	81a5      	strh	r5, [r4, #12]
 8023e32:	e7cf      	b.n	8023dd4 <__smakebuf_r+0x18>

08023e34 <_raise_r>:
 8023e34:	291f      	cmp	r1, #31
 8023e36:	b538      	push	{r3, r4, r5, lr}
 8023e38:	4604      	mov	r4, r0
 8023e3a:	460d      	mov	r5, r1
 8023e3c:	d904      	bls.n	8023e48 <_raise_r+0x14>
 8023e3e:	2316      	movs	r3, #22
 8023e40:	6003      	str	r3, [r0, #0]
 8023e42:	f04f 30ff 	mov.w	r0, #4294967295
 8023e46:	bd38      	pop	{r3, r4, r5, pc}
 8023e48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8023e4a:	b112      	cbz	r2, 8023e52 <_raise_r+0x1e>
 8023e4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023e50:	b94b      	cbnz	r3, 8023e66 <_raise_r+0x32>
 8023e52:	4620      	mov	r0, r4
 8023e54:	f000 f852 	bl	8023efc <_getpid_r>
 8023e58:	462a      	mov	r2, r5
 8023e5a:	4601      	mov	r1, r0
 8023e5c:	4620      	mov	r0, r4
 8023e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e62:	f000 b839 	b.w	8023ed8 <_kill_r>
 8023e66:	2b01      	cmp	r3, #1
 8023e68:	d00a      	beq.n	8023e80 <_raise_r+0x4c>
 8023e6a:	1c59      	adds	r1, r3, #1
 8023e6c:	d103      	bne.n	8023e76 <_raise_r+0x42>
 8023e6e:	2316      	movs	r3, #22
 8023e70:	6003      	str	r3, [r0, #0]
 8023e72:	2001      	movs	r0, #1
 8023e74:	e7e7      	b.n	8023e46 <_raise_r+0x12>
 8023e76:	2400      	movs	r4, #0
 8023e78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023e7c:	4628      	mov	r0, r5
 8023e7e:	4798      	blx	r3
 8023e80:	2000      	movs	r0, #0
 8023e82:	e7e0      	b.n	8023e46 <_raise_r+0x12>

08023e84 <raise>:
 8023e84:	4b02      	ldr	r3, [pc, #8]	; (8023e90 <raise+0xc>)
 8023e86:	4601      	mov	r1, r0
 8023e88:	6818      	ldr	r0, [r3, #0]
 8023e8a:	f7ff bfd3 	b.w	8023e34 <_raise_r>
 8023e8e:	bf00      	nop
 8023e90:	20000190 	.word	0x20000190

08023e94 <_fstat_r>:
 8023e94:	b538      	push	{r3, r4, r5, lr}
 8023e96:	4d07      	ldr	r5, [pc, #28]	; (8023eb4 <_fstat_r+0x20>)
 8023e98:	2300      	movs	r3, #0
 8023e9a:	4604      	mov	r4, r0
 8023e9c:	4608      	mov	r0, r1
 8023e9e:	4611      	mov	r1, r2
 8023ea0:	602b      	str	r3, [r5, #0]
 8023ea2:	f7e0 f964 	bl	800416e <_fstat>
 8023ea6:	1c43      	adds	r3, r0, #1
 8023ea8:	d102      	bne.n	8023eb0 <_fstat_r+0x1c>
 8023eaa:	682b      	ldr	r3, [r5, #0]
 8023eac:	b103      	cbz	r3, 8023eb0 <_fstat_r+0x1c>
 8023eae:	6023      	str	r3, [r4, #0]
 8023eb0:	bd38      	pop	{r3, r4, r5, pc}
 8023eb2:	bf00      	nop
 8023eb4:	20025480 	.word	0x20025480

08023eb8 <_isatty_r>:
 8023eb8:	b538      	push	{r3, r4, r5, lr}
 8023eba:	4d06      	ldr	r5, [pc, #24]	; (8023ed4 <_isatty_r+0x1c>)
 8023ebc:	2300      	movs	r3, #0
 8023ebe:	4604      	mov	r4, r0
 8023ec0:	4608      	mov	r0, r1
 8023ec2:	602b      	str	r3, [r5, #0]
 8023ec4:	f7e0 f963 	bl	800418e <_isatty>
 8023ec8:	1c43      	adds	r3, r0, #1
 8023eca:	d102      	bne.n	8023ed2 <_isatty_r+0x1a>
 8023ecc:	682b      	ldr	r3, [r5, #0]
 8023ece:	b103      	cbz	r3, 8023ed2 <_isatty_r+0x1a>
 8023ed0:	6023      	str	r3, [r4, #0]
 8023ed2:	bd38      	pop	{r3, r4, r5, pc}
 8023ed4:	20025480 	.word	0x20025480

08023ed8 <_kill_r>:
 8023ed8:	b538      	push	{r3, r4, r5, lr}
 8023eda:	4d07      	ldr	r5, [pc, #28]	; (8023ef8 <_kill_r+0x20>)
 8023edc:	2300      	movs	r3, #0
 8023ede:	4604      	mov	r4, r0
 8023ee0:	4608      	mov	r0, r1
 8023ee2:	4611      	mov	r1, r2
 8023ee4:	602b      	str	r3, [r5, #0]
 8023ee6:	f7e0 f8e1 	bl	80040ac <_kill>
 8023eea:	1c43      	adds	r3, r0, #1
 8023eec:	d102      	bne.n	8023ef4 <_kill_r+0x1c>
 8023eee:	682b      	ldr	r3, [r5, #0]
 8023ef0:	b103      	cbz	r3, 8023ef4 <_kill_r+0x1c>
 8023ef2:	6023      	str	r3, [r4, #0]
 8023ef4:	bd38      	pop	{r3, r4, r5, pc}
 8023ef6:	bf00      	nop
 8023ef8:	20025480 	.word	0x20025480

08023efc <_getpid_r>:
 8023efc:	f7e0 b8ce 	b.w	800409c <_getpid>

08023f00 <_malloc_usable_size_r>:
 8023f00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023f04:	1f18      	subs	r0, r3, #4
 8023f06:	2b00      	cmp	r3, #0
 8023f08:	bfbc      	itt	lt
 8023f0a:	580b      	ldrlt	r3, [r1, r0]
 8023f0c:	18c0      	addlt	r0, r0, r3
 8023f0e:	4770      	bx	lr

08023f10 <_init>:
 8023f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f12:	bf00      	nop
 8023f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f16:	bc08      	pop	{r3}
 8023f18:	469e      	mov	lr, r3
 8023f1a:	4770      	bx	lr

08023f1c <_fini>:
 8023f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f1e:	bf00      	nop
 8023f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023f22:	bc08      	pop	{r3}
 8023f24:	469e      	mov	lr, r3
 8023f26:	4770      	bx	lr
